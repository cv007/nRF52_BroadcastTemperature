
_build/nrf52810_xxaa.out:     file format elf32-littlearm


Disassembly of section .text:

00019000 <__isr_vector>:
   19000:	20006000 	.word	0x20006000
   19004:	000192bd 	.word	0x000192bd
   19008:	00019311 	.word	0x00019311
   1900c:	00019313 	.word	0x00019313
   19010:	00019315 	.word	0x00019315
   19014:	00019317 	.word	0x00019317
   19018:	00019319 	.word	0x00019319
	...
   1902c:	0001931b 	.word	0x0001931b
   19030:	0001931d 	.word	0x0001931d
   19034:	00000000 	.word	0x00000000
   19038:	0001931f 	.word	0x0001931f
   1903c:	00019321 	.word	0x00019321
   19040:	00019761 	.word	0x00019761
   19044:	00019323 	.word	0x00019323
   19048:	00019323 	.word	0x00019323
   1904c:	00019323 	.word	0x00019323
   19050:	00019323 	.word	0x00019323
   19054:	00000000 	.word	0x00000000
   19058:	000197cd 	.word	0x000197cd
   1905c:	00019323 	.word	0x00019323
   19060:	00019323 	.word	0x00019323
   19064:	00019323 	.word	0x00019323
   19068:	00019323 	.word	0x00019323
   1906c:	00019323 	.word	0x00019323
   19070:	00019323 	.word	0x00019323
   19074:	00019323 	.word	0x00019323
   19078:	00019323 	.word	0x00019323
   1907c:	00019323 	.word	0x00019323
   19080:	00019323 	.word	0x00019323
   19084:	00019409 	.word	0x00019409
   19088:	00019323 	.word	0x00019323
   1908c:	00019323 	.word	0x00019323
   19090:	00019323 	.word	0x00019323
   19094:	00019323 	.word	0x00019323
   19098:	0001a951 	.word	0x0001a951
   1909c:	00019323 	.word	0x00019323
   190a0:	00019323 	.word	0x00019323
   190a4:	00019323 	.word	0x00019323
	...
   190b0:	00019323 	.word	0x00019323
   190b4:	00019323 	.word	0x00019323
	...

00019200 <__do_global_dtors_aux>:
   19200:	b510      	push	{r4, lr}
   19202:	4c05      	ldr	r4, [pc, #20]	; (19218 <__do_global_dtors_aux+0x18>)
   19204:	7823      	ldrb	r3, [r4, #0]
   19206:	b933      	cbnz	r3, 19216 <__do_global_dtors_aux+0x16>
   19208:	4b04      	ldr	r3, [pc, #16]	; (1921c <__do_global_dtors_aux+0x1c>)
   1920a:	b113      	cbz	r3, 19212 <__do_global_dtors_aux+0x12>
   1920c:	4804      	ldr	r0, [pc, #16]	; (19220 <__do_global_dtors_aux+0x20>)
   1920e:	f3af 8000 	nop.w
   19212:	2301      	movs	r3, #1
   19214:	7023      	strb	r3, [r4, #0]
   19216:	bd10      	pop	{r4, pc}
   19218:	20001198 	.word	0x20001198
   1921c:	00000000 	.word	0x00000000
   19220:	0001c5fc 	.word	0x0001c5fc

00019224 <frame_dummy>:
   19224:	b508      	push	{r3, lr}
   19226:	4b03      	ldr	r3, [pc, #12]	; (19234 <frame_dummy+0x10>)
   19228:	b11b      	cbz	r3, 19232 <frame_dummy+0xe>
   1922a:	4903      	ldr	r1, [pc, #12]	; (19238 <frame_dummy+0x14>)
   1922c:	4803      	ldr	r0, [pc, #12]	; (1923c <frame_dummy+0x18>)
   1922e:	f3af 8000 	nop.w
   19232:	bd08      	pop	{r3, pc}
   19234:	00000000 	.word	0x00000000
   19238:	2000119c 	.word	0x2000119c
   1923c:	0001c5fc 	.word	0x0001c5fc

00019240 <_stack_init>:
   19240:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
   19244:	4770      	bx	lr
   19246:	bf00      	nop

00019248 <_mainCRTStartup>:
   19248:	4b17      	ldr	r3, [pc, #92]	; (192a8 <_mainCRTStartup+0x60>)
   1924a:	2b00      	cmp	r3, #0
   1924c:	bf08      	it	eq
   1924e:	4b13      	ldreq	r3, [pc, #76]	; (1929c <_mainCRTStartup+0x54>)
   19250:	469d      	mov	sp, r3
   19252:	f7ff fff5 	bl	19240 <_stack_init>
   19256:	2100      	movs	r1, #0
   19258:	468b      	mov	fp, r1
   1925a:	460f      	mov	r7, r1
   1925c:	4813      	ldr	r0, [pc, #76]	; (192ac <_mainCRTStartup+0x64>)
   1925e:	4a14      	ldr	r2, [pc, #80]	; (192b0 <_mainCRTStartup+0x68>)
   19260:	1a12      	subs	r2, r2, r0
   19262:	f001 fc29 	bl	1aab8 <memset>
   19266:	4b0e      	ldr	r3, [pc, #56]	; (192a0 <_mainCRTStartup+0x58>)
   19268:	2b00      	cmp	r3, #0
   1926a:	d000      	beq.n	1926e <_mainCRTStartup+0x26>
   1926c:	4798      	blx	r3
   1926e:	4b0d      	ldr	r3, [pc, #52]	; (192a4 <_mainCRTStartup+0x5c>)
   19270:	2b00      	cmp	r3, #0
   19272:	d000      	beq.n	19276 <_mainCRTStartup+0x2e>
   19274:	4798      	blx	r3
   19276:	2000      	movs	r0, #0
   19278:	2100      	movs	r1, #0
   1927a:	0004      	movs	r4, r0
   1927c:	000d      	movs	r5, r1
   1927e:	480d      	ldr	r0, [pc, #52]	; (192b4 <_mainCRTStartup+0x6c>)
   19280:	2800      	cmp	r0, #0
   19282:	d002      	beq.n	1928a <_mainCRTStartup+0x42>
   19284:	480c      	ldr	r0, [pc, #48]	; (192b8 <_mainCRTStartup+0x70>)
   19286:	f3af 8000 	nop.w
   1928a:	f001 fbe3 	bl	1aa54 <__libc_init_array>
   1928e:	0020      	movs	r0, r4
   19290:	0029      	movs	r1, r5
   19292:	f000 ff3f 	bl	1a114 <main>
   19296:	f001 fbc9 	bl	1aa2c <exit>
   1929a:	bf00      	nop
   1929c:	00080000 	.word	0x00080000
	...
   192a8:	20006000 	.word	0x20006000
   192ac:	20001198 	.word	0x20001198
   192b0:	20001548 	.word	0x20001548
	...

000192bc <Reset_Handler>:

    /* Workaround for Errata 185 RAM: RAM corruption at extreme corners 
     * found at the Errata document for your device located
     * at https://infocenter.nordicsemi.com/index.jsp */
    
    LDR     R0, =0x10000130
   192bc:	480e      	ldr	r0, [pc, #56]	; (192f8 <skip+0x1a>)
    LDR     R0, [R0]
   192be:	6800      	ldr	r0, [r0, #0]
    LDR     R1, =0x10000134
   192c0:	490e      	ldr	r1, [pc, #56]	; (192fc <skip+0x1e>)
    LDR     R1, [R1]
   192c2:	6809      	ldr	r1, [r1, #0]
    
    CMP     R0, #0xA
   192c4:	280a      	cmp	r0, #10
    BNE     skip
   192c6:	d10a      	bne.n	192de <skip>
    CMP     R1, #0x0
   192c8:	2900      	cmp	r1, #0
    BNE     skip
   192ca:	d108      	bne.n	192de <skip>
    
    LDR     R0, =0x40000EE4
   192cc:	480c      	ldr	r0, [pc, #48]	; (19300 <skip+0x22>)
    LDR     R2, [R0]
   192ce:	6802      	ldr	r2, [r0, #0]
    LDR     R3, =0xFFFFFF8F
   192d0:	f06f 0370 	mvn.w	r3, #112	; 0x70
    ANDS    R2, R2, R3
   192d4:	401a      	ands	r2, r3
    LDR     R3, =0x00000040
   192d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    ORRS    R2, R2, R3
   192da:	431a      	orrs	r2, r3
    STR     R2, [R0]
   192dc:	6002      	str	r2, [r0, #0]

000192de <skip>:
 *      __bss_start__: VMA of end of the section to copy to. Normally __data_end__ is used, but by using __bss_start__
 *                    the user can add their own initialized data section before BSS section with the INTERT AFTER command.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__etext
   192de:	4909      	ldr	r1, [pc, #36]	; (19304 <skip+0x26>)
    ldr r2, =__data_start__
   192e0:	4a09      	ldr	r2, [pc, #36]	; (19308 <skip+0x2a>)
    ldr r3, =__bss_start__
   192e2:	4b0a      	ldr	r3, [pc, #40]	; (1930c <skip+0x2e>)

    subs r3, r3, r2
   192e4:	1a9b      	subs	r3, r3, r2
    ble .L_loop1_done
   192e6:	dd03      	ble.n	192f0 <skip+0x12>

.L_loop1:
    subs r3, r3, #4
   192e8:	3b04      	subs	r3, #4
    ldr r0, [r1,r3]
   192ea:	58c8      	ldr	r0, [r1, r3]
    str r0, [r2,r3]
   192ec:	50d0      	str	r0, [r2, r3]
    bgt .L_loop1
   192ee:	dcfb      	bgt.n	192e8 <skip+0xa>

.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */

/* Execute SystemInit function. */
    bl SystemInit
   192f0:	f000 f8aa 	bl	19448 <SystemInit>
 * If those libraries are not accessible, define __START as your entry point.
 */
#ifndef __START
#define __START _start
#endif
    bl __START
   192f4:	f7ff ffa8 	bl	19248 <_mainCRTStartup>
    LDR     R0, =0x10000130
   192f8:	10000130 	.word	0x10000130
    LDR     R1, =0x10000134
   192fc:	10000134 	.word	0x10000134
    LDR     R0, =0x40000EE4
   19300:	40000ee4 	.word	0x40000ee4
    ldr r1, =__etext
   19304:	0001c730 	.word	0x0001c730
    ldr r2, =__data_start__
   19308:	20001118 	.word	0x20001118
    ldr r3, =__bss_start__
   1930c:	20001198 	.word	0x20001198

00019310 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    b       .
   19310:	e7fe      	b.n	19310 <NMI_Handler>

00019312 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    b       .
   19312:	e7fe      	b.n	19312 <HardFault_Handler>

00019314 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    b       .
   19314:	e7fe      	b.n	19314 <MemoryManagement_Handler>

00019316 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    b       .
   19316:	e7fe      	b.n	19316 <BusFault_Handler>

00019318 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    b       .
   19318:	e7fe      	b.n	19318 <UsageFault_Handler>

0001931a <SVC_Handler>:


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    b       .
   1931a:	e7fe      	b.n	1931a <SVC_Handler>

0001931c <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
   1931c:	e7fe      	b.n	1931c <DebugMon_Handler>

0001931e <PendSV_Handler>:


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    b       .
   1931e:	e7fe      	b.n	1931e <PendSV_Handler>

00019320 <SysTick_Handler>:


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    b       .
   19320:	e7fe      	b.n	19320 <SysTick_Handler>

00019322 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
   19322:	e7fe      	b.n	19322 <Default_Handler>

00019324 <app_error_handler_bare>:
 * @param[in] error_code  Error code supplied to the handler.
 * @param[in] line_num    Line number where the handler is called.
 * @param[in] p_file_name Pointer to the file name.
 */
void app_error_handler_bare(ret_code_t error_code)
{
   19324:	b500      	push	{lr}
   19326:	b085      	sub	sp, #20
   19328:	4603      	mov	r3, r0
    error_info_t error_info =
   1932a:	2100      	movs	r1, #0
        .line_num    = 0,
        .p_file_name = NULL,
        .err_code    = error_code,
    };

    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   1932c:	aa01      	add	r2, sp, #4
   1932e:	f244 0001 	movw	r0, #16385	; 0x4001
    error_info_t error_info =
   19332:	e9cd 1101 	strd	r1, r1, [sp, #4]
   19336:	9303      	str	r3, [sp, #12]
    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   19338:	f000 f804 	bl	19344 <app_error_fault_handler>

    UNUSED_VARIABLE(error_info);
}
   1933c:	b005      	add	sp, #20
   1933e:	f85d fb04 	ldr.w	pc, [sp], #4
   19342:	bf00      	nop

00019344 <app_error_fault_handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   19344:	b672      	cpsid	i
            NRF_LOG_ERROR("UNKNOWN FAULT at 0x%08X", pc);
            break;
    }
#endif

    NRF_BREAKPOINT_COND;
   19346:	4b09      	ldr	r3, [pc, #36]	; (1936c <app_error_fault_handler+0x28>)
   19348:	681b      	ldr	r3, [r3, #0]
   1934a:	07db      	lsls	r3, r3, #31
   1934c:	d500      	bpl.n	19350 <app_error_fault_handler+0xc>
   1934e:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19350:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19354:	4906      	ldr	r1, [pc, #24]	; (19370 <app_error_fault_handler+0x2c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19356:	4b07      	ldr	r3, [pc, #28]	; (19374 <app_error_fault_handler+0x30>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19358:	68ca      	ldr	r2, [r1, #12]
   1935a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1935e:	4313      	orrs	r3, r2
   19360:	60cb      	str	r3, [r1, #12]
   19362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   19366:	bf00      	nop
   19368:	e7fd      	b.n	19366 <app_error_fault_handler+0x22>
   1936a:	bf00      	nop
   1936c:	e000edf0 	.word	0xe000edf0
   19370:	e000ed00 	.word	0xe000ed00
   19374:	05fa0004 	.word	0x05fa0004

00019378 <app_timer_cnt_get>:
    return ((ticks_to - ticks_from) & RTC_COUNTER_COUNTER_Msk);
}

uint32_t app_timer_cnt_get(void)
{
    return drv_rtc_counter_get(&m_rtc_inst);
   19378:	4801      	ldr	r0, [pc, #4]	; (19380 <app_timer_cnt_get+0x8>)
   1937a:	f000 b841 	b.w	19400 <drv_rtc_counter_get>
   1937e:	bf00      	nop
   19380:	20001118 	.word	0x20001118

00019384 <app_util_critical_region_enter>:
        __enable_irq();
    }
}

void app_util_critical_region_enter(uint8_t *p_nested)
{
   19384:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19386:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1938a:	b672      	cpsid	i
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)
{
  int was_masked = __sd_nvic_irq_disable();
  if (!nrf_nvic_state.__cr_flag)
   1938c:	4b0d      	ldr	r3, [pc, #52]	; (193c4 <app_util_critical_region_enter+0x40>)
   1938e:	689a      	ldr	r2, [r3, #8]
   19390:	b9aa      	cbnz	r2, 193be <app_util_critical_region_enter+0x3a>
  {
    nrf_nvic_state.__cr_flag = 1;
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   19392:	490d      	ldr	r1, [pc, #52]	; (193c8 <app_util_critical_region_enter+0x44>)
   19394:	4e0d      	ldr	r6, [pc, #52]	; (193cc <app_util_critical_region_enter+0x48>)
    nrf_nvic_state.__cr_flag = 1;
   19396:	2501      	movs	r5, #1
   19398:	609d      	str	r5, [r3, #8]
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   1939a:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
   1939e:	4035      	ands	r5, r6
   193a0:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0] = __NRF_NVIC_APP_IRQS_0;
   193a2:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
    nrf_nvic_state.__irq_masks[1] = ( NVIC->ICER[1] & __NRF_NVIC_APP_IRQS_1 );
   193a6:	f8d1 5084 	ldr.w	r5, [r1, #132]	; 0x84
   193aa:	605d      	str	r5, [r3, #4]
    NVIC->ICER[1] = __NRF_NVIC_APP_IRQS_1;
   193ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   193b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    *p_is_nested_critical_region = 0;
   193b4:	7002      	strb	r2, [r0, #0]
  }
  else
  {
    *p_is_nested_critical_region = 1;
  }
  if (!was_masked)
   193b6:	b904      	cbnz	r4, 193ba <app_util_critical_region_enter+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   193b8:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_enter(p_nested);
#else
    app_util_disable_irq();
#endif
}
   193ba:	bc70      	pop	{r4, r5, r6}
   193bc:	4770      	bx	lr
    *p_is_nested_critical_region = 1;
   193be:	2301      	movs	r3, #1
   193c0:	7003      	strb	r3, [r0, #0]
   193c2:	e7f8      	b.n	193b6 <app_util_critical_region_enter+0x32>
   193c4:	200014b4 	.word	0x200014b4
   193c8:	e000e100 	.word	0xe000e100
   193cc:	bdff06fc 	.word	0xbdff06fc

000193d0 <app_util_critical_region_exit>:
  return NRF_SUCCESS;
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)
{
  if (nrf_nvic_state.__cr_flag && (is_nested_critical_region == 0))
   193d0:	4b09      	ldr	r3, [pc, #36]	; (193f8 <app_util_critical_region_exit+0x28>)
   193d2:	689a      	ldr	r2, [r3, #8]
   193d4:	b172      	cbz	r2, 193f4 <app_util_critical_region_exit+0x24>
   193d6:	b968      	cbnz	r0, 193f4 <app_util_critical_region_exit+0x24>

void app_util_critical_region_exit(uint8_t nested)
{
   193d8:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   193da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   193de:	b672      	cpsid	i
  {
    int was_masked = __sd_nvic_irq_disable();
    NVIC->ISER[0] = nrf_nvic_state.__irq_masks[0];
   193e0:	4a06      	ldr	r2, [pc, #24]	; (193fc <app_util_critical_region_exit+0x2c>)
   193e2:	681c      	ldr	r4, [r3, #0]
   193e4:	6014      	str	r4, [r2, #0]
    NVIC->ISER[1] = nrf_nvic_state.__irq_masks[1];
   193e6:	685c      	ldr	r4, [r3, #4]
   193e8:	6054      	str	r4, [r2, #4]
    nrf_nvic_state.__cr_flag = 0;
   193ea:	6098      	str	r0, [r3, #8]
    if (!was_masked)
   193ec:	b901      	cbnz	r1, 193f0 <app_util_critical_region_exit+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
   193ee:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_exit(nested);
#else
    app_util_enable_irq();
#endif
}
   193f0:	bc10      	pop	{r4}
   193f2:	4770      	bx	lr
   193f4:	4770      	bx	lr
   193f6:	bf00      	nop
   193f8:	200014b4 	.word	0x200014b4
   193fc:	e000e100 	.word	0xe000e100

00019400 <drv_rtc_counter_get>:
    return evt_pending(p_instance, cc_evt);
}

uint32_t drv_rtc_counter_get(drv_rtc_t const * const p_instance)
{
    return nrf_rtc_counter_get(p_instance->p_reg);
   19400:	6803      	ldr	r3, [r0, #0]
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   19402:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   19406:	4770      	bx	lr

00019408 <RTC1_IRQHandler>:
#endif

#if defined(APP_TIMER_V2_RTC1_ENABLED)
void drv_rtc_rtc_1_irq_handler(void)
{
    m_handlers[DRV_RTC_RTC1_INST_IDX](m_cb[DRV_RTC_RTC1_INST_IDX].p_instance);
   19408:	4a02      	ldr	r2, [pc, #8]	; (19414 <RTC1_IRQHandler+0xc>)
   1940a:	4b03      	ldr	r3, [pc, #12]	; (19418 <RTC1_IRQHandler+0x10>)
   1940c:	6810      	ldr	r0, [r2, #0]
   1940e:	681b      	ldr	r3, [r3, #0]
   19410:	4718      	bx	r3
   19412:	bf00      	nop
   19414:	200011b4 	.word	0x200011b4
   19418:	200011bc 	.word	0x200011bc

0001941c <nrf_section_iter_init>:
void nrf_section_iter_init(nrf_section_iter_t * p_iter, nrf_section_set_t const * p_set)
{
    ASSERT(p_iter != NULL);
    ASSERT(p_set  != NULL);

    p_iter->p_set = p_set;
   1941c:	6001      	str	r1, [r0, #0]

#if defined(__GNUC__)
    p_iter->p_item = p_iter->p_set->section.p_start;
   1941e:	680b      	ldr	r3, [r1, #0]
   19420:	6043      	str	r3, [r0, #4]
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   19422:	684a      	ldr	r2, [r1, #4]
   19424:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19426:	bf04      	itt	eq
   19428:	2300      	moveq	r3, #0
   1942a:	6043      	streq	r3, [r0, #4]
    }
#else
    p_iter->p_section = p_set->p_first;
    nrf_section_iter_item_set(p_iter);
#endif
}
   1942c:	4770      	bx	lr
   1942e:	bf00      	nop

00019430 <nrf_section_iter_next>:
void nrf_section_iter_next(nrf_section_iter_t * p_iter)
{
    ASSERT(p_iter        != NULL);
    ASSERT(p_iter->p_set != NULL);

    if (p_iter->p_item == NULL)
   19430:	6843      	ldr	r3, [r0, #4]
   19432:	b143      	cbz	r3, 19446 <nrf_section_iter_next+0x16>
    {
        return;
    }

    p_iter->p_item = (void *)((size_t)(p_iter->p_item) + p_iter->p_set->item_size);
   19434:	6802      	ldr	r2, [r0, #0]
   19436:	6891      	ldr	r1, [r2, #8]
   19438:	440b      	add	r3, r1
   1943a:	6043      	str	r3, [r0, #4]

#if defined(__GNUC__)
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   1943c:	6852      	ldr	r2, [r2, #4]
   1943e:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19440:	bf04      	itt	eq
   19442:	2300      	moveq	r3, #0
   19444:	6043      	streq	r3, [r0, #4]
    {
        p_iter->p_section++;
        nrf_section_iter_item_set(p_iter);
    }
#endif
}
   19446:	4770      	bx	lr

00019448 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19448:	b430      	push	{r4, r5}
    #endif
    
    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1944a:	4b5f      	ldr	r3, [pc, #380]	; (195c8 <SystemInit+0x180>)
   1944c:	4d5f      	ldr	r5, [pc, #380]	; (195cc <SystemInit+0x184>)
   1944e:	681a      	ldr	r2, [r3, #0]
    #endif
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19450:	4b5f      	ldr	r3, [pc, #380]	; (195d0 <SystemInit+0x188>)
    return true;
}

static bool errata_103(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19452:	4c60      	ldr	r4, [pc, #384]	; (195d4 <SystemInit+0x18c>)
        NRF_CLOCK->EVENTS_DONE = 0;
   19454:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19458:	f3c2 3242 	ubfx	r2, r2, #13, #3
   1945c:	602a      	str	r2, [r5, #0]
        NRF_CLOCK->EVENTS_DONE = 0;
   1945e:	2000      	movs	r0, #0
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        NRF_CLOCK->EVENTS_DONE = 0;
   19464:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   19468:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1946c:	f8c1 0538 	str.w	r0, [r1, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19470:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
   19474:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19478:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   1947c:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19480:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   19484:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19488:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
   1948c:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19490:	f8d2 0414 	ldr.w	r0, [r2, #1044]	; 0x414
   19494:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19498:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
   1949c:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   194a0:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
   194a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   194a8:	f8d2 0420 	ldr.w	r0, [r2, #1056]	; 0x420
   194ac:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   194b0:	f8d2 0424 	ldr.w	r0, [r2, #1060]	; 0x424
   194b4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   194b8:	f8d2 0428 	ldr.w	r0, [r2, #1064]	; 0x428
   194bc:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   194c0:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
   194c4:	f8c3 0550 	str.w	r0, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   194c8:	f8d2 0430 	ldr.w	r0, [r2, #1072]	; 0x430
   194cc:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   194d0:	f8d2 0434 	ldr.w	r0, [r2, #1076]	; 0x434
   194d4:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   194d8:	f8d2 0438 	ldr.w	r0, [r2, #1080]	; 0x438
   194dc:	f8c3 0564 	str.w	r0, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   194e0:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
   194e4:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   194e8:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
   194ec:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    if (*(uint32_t *)0x10000130ul == 0xAul){
   194f0:	6820      	ldr	r0, [r4, #0]
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   194f2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   194f6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (*(uint32_t *)0x10000130ul == 0xAul){
   194fa:	280a      	cmp	r0, #10
   194fc:	d017      	beq.n	1952e <SystemInit+0xe6>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   194fe:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19502:	07db      	lsls	r3, r3, #31
   19504:	d41f      	bmi.n	19546 <SystemInit+0xfe>
        *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
   19506:	4a34      	ldr	r2, [pc, #208]	; (195d8 <SystemInit+0x190>)
   19508:	6813      	ldr	r3, [r2, #0]
   1950a:	f043 030f 	orr.w	r3, r3, #15
   1950e:	6013      	str	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19510:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19514:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19518:	2a00      	cmp	r2, #0
   1951a:	db23      	blt.n	19564 <SystemInit+0x11c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1951c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19520:	2b00      	cmp	r3, #0
   19522:	db1f      	blt.n	19564 <SystemInit+0x11c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19524:	4b2d      	ldr	r3, [pc, #180]	; (195dc <SystemInit+0x194>)
   19526:	4a2e      	ldr	r2, [pc, #184]	; (195e0 <SystemInit+0x198>)
   19528:	601a      	str	r2, [r3, #0]
}
   1952a:	bc30      	pop	{r4, r5}
   1952c:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   1952e:	4b2d      	ldr	r3, [pc, #180]	; (195e4 <SystemInit+0x19c>)
   19530:	681b      	ldr	r3, [r3, #0]
   19532:	2b00      	cmp	r3, #0
   19534:	d1e3      	bne.n	194fe <SystemInit+0xb6>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19536:	4b2c      	ldr	r3, [pc, #176]	; (195e8 <SystemInit+0x1a0>)
   19538:	22fb      	movs	r2, #251	; 0xfb
   1953a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1953e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19542:	07da      	lsls	r2, r3, #31
   19544:	d505      	bpl.n	19552 <SystemInit+0x10a>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1954a:	f06f 0201 	mvn.w	r2, #1
   1954e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
#endif

static bool errata_217(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19552:	4b20      	ldr	r3, [pc, #128]	; (195d4 <SystemInit+0x18c>)
   19554:	681b      	ldr	r3, [r3, #0]
   19556:	2b0a      	cmp	r3, #10
   19558:	d1d5      	bne.n	19506 <SystemInit+0xbe>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   1955a:	4b22      	ldr	r3, [pc, #136]	; (195e4 <SystemInit+0x19c>)
   1955c:	681b      	ldr	r3, [r3, #0]
   1955e:	2b00      	cmp	r3, #0
   19560:	d0d6      	beq.n	19510 <SystemInit+0xc8>
   19562:	e7d0      	b.n	19506 <SystemInit+0xbe>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   19564:	4a21      	ldr	r2, [pc, #132]	; (195ec <SystemInit+0x1a4>)
   19566:	2301      	movs	r3, #1
   19568:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1956c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19570:	2b00      	cmp	r3, #0
   19572:	d0fb      	beq.n	1956c <SystemInit+0x124>
            NRF_UICR->PSELRESET[0] = 21;
   19574:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19578:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1957a:	4a1c      	ldr	r2, [pc, #112]	; (195ec <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[0] = 21;
   1957c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19580:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19584:	2b00      	cmp	r3, #0
   19586:	d0fb      	beq.n	19580 <SystemInit+0x138>
            NRF_UICR->PSELRESET[1] = 21;
   19588:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1958c:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1958e:	4a17      	ldr	r2, [pc, #92]	; (195ec <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[1] = 21;
   19590:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19594:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19598:	2b00      	cmp	r3, #0
   1959a:	d0fb      	beq.n	19594 <SystemInit+0x14c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1959c:	2300      	movs	r3, #0
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1959e:	4913      	ldr	r1, [pc, #76]	; (195ec <SystemInit+0x1a4>)
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   195a0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   195a4:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   195a8:	2b00      	cmp	r3, #0
   195aa:	d0fb      	beq.n	195a4 <SystemInit+0x15c>
  __ASM volatile ("dsb 0xF":::"memory");
   195ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   195b0:	490f      	ldr	r1, [pc, #60]	; (195f0 <SystemInit+0x1a8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   195b2:	4b10      	ldr	r3, [pc, #64]	; (195f4 <SystemInit+0x1ac>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   195b4:	68ca      	ldr	r2, [r1, #12]
   195b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   195ba:	4313      	orrs	r3, r2
   195bc:	60cb      	str	r3, [r1, #12]
   195be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   195c2:	bf00      	nop
   195c4:	e7fd      	b.n	195c2 <SystemInit+0x17a>
   195c6:	bf00      	nop
   195c8:	10000244 	.word	0x10000244
   195cc:	4000053c 	.word	0x4000053c
   195d0:	4000c000 	.word	0x4000c000
   195d4:	10000130 	.word	0x10000130
   195d8:	40000ee4 	.word	0x40000ee4
   195dc:	20001120 	.word	0x20001120
   195e0:	03d09000 	.word	0x03d09000
   195e4:	10000134 	.word	0x10000134
   195e8:	4000f000 	.word	0x4000f000
   195ec:	4001e000 	.word	0x4001e000
   195f0:	e000ed00 	.word	0xe000ed00
   195f4:	05fa0004 	.word	0x05fa0004

000195f8 <clock_irq_handler>:
        p_item->event_handler(evt_type);
    }
}

static void clock_irq_handler(nrfx_clock_evt_type_t evt)
{
   195f8:	b510      	push	{r4, lr}
    if (evt == NRFX_CLOCK_EVT_HFCLK_STARTED)
   195fa:	b968      	cbnz	r0, 19618 <clock_irq_handler+0x20>
    {
        m_clock_cb.hfclk_on = true;
   195fc:	4c0e      	ldr	r4, [pc, #56]	; (19638 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   195fe:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19600:	2201      	movs	r2, #1
   19602:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19604:	b13b      	cbz	r3, 19616 <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19606:	e9d3 2300 	ldrd	r2, r3, [r3]
   1960a:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   1960c:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   1960e:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19610:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19612:	2b00      	cmp	r3, #0
   19614:	d1f7      	bne.n	19606 <clock_irq_handler+0xe>
            m_clock_cb.cal_done_handler(aborted ?
                NRF_DRV_CLOCK_EVT_CAL_ABORTED : NRF_DRV_CLOCK_EVT_CAL_DONE);
        }
    }
#endif // CALIBRATION_SUPPORT
}
   19616:	bd10      	pop	{r4, pc}
    if (evt == NRFX_CLOCK_EVT_LFCLK_STARTED)
   19618:	2801      	cmp	r0, #1
   1961a:	d1fc      	bne.n	19616 <clock_irq_handler+0x1e>
        m_clock_cb.lfclk_on = true;
   1961c:	4c06      	ldr	r4, [pc, #24]	; (19638 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   1961e:	6923      	ldr	r3, [r4, #16]
        m_clock_cb.lfclk_on = true;
   19620:	70a0      	strb	r0, [r4, #2]
    if (p_item)
   19622:	2b00      	cmp	r3, #0
   19624:	d0f7      	beq.n	19616 <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19626:	e9d3 2300 	ldrd	r2, r3, [r3]
   1962a:	2001      	movs	r0, #1
        *p_head = p_item->p_next;
   1962c:	6122      	str	r2, [r4, #16]
        p_item->event_handler(evt_type);
   1962e:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19630:	6923      	ldr	r3, [r4, #16]
    if (p_item)
   19632:	2b00      	cmp	r3, #0
   19634:	d1f7      	bne.n	19626 <clock_irq_handler+0x2e>
}
   19636:	bd10      	pop	{r4, pc}
   19638:	200011c0 	.word	0x200011c0

0001963c <soc_evt_handler>:
 * @param[in] evt_id    SoC event.
 * @param[in] p_context Context.
 */
static void soc_evt_handler(uint32_t evt_id, void * p_context)
{
    if (evt_id == NRF_EVT_HFCLKSTARTED)
   1963c:	b970      	cbnz	r0, 1965c <soc_evt_handler+0x20>
{
   1963e:	b510      	push	{r4, lr}
    {
        m_clock_cb.hfclk_on = true;
   19640:	4c07      	ldr	r4, [pc, #28]	; (19660 <soc_evt_handler+0x24>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19642:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19644:	2201      	movs	r2, #1
   19646:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19648:	b13b      	cbz	r3, 1965a <soc_evt_handler+0x1e>
        p_item->event_handler(evt_type);
   1964a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1964e:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   19650:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   19652:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19654:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19656:	2b00      	cmp	r3, #0
   19658:	d1f7      	bne.n	1964a <soc_evt_handler+0xe>
        clock_clk_started_notify(NRF_DRV_CLOCK_EVT_HFCLK_STARTED);
    }
}
   1965a:	bd10      	pop	{r4, pc}
   1965c:	4770      	bx	lr
   1965e:	bf00      	nop
   19660:	200011c0 	.word	0x200011c0

00019664 <sd_state_evt_handler>:
 *
 * @param[in] state     State.
 * @param[in] p_context Context.
 */
static void sd_state_evt_handler(nrf_sdh_state_evt_t state, void * p_context)
{
   19664:	b530      	push	{r4, r5, lr}
    switch (state)
   19666:	2801      	cmp	r0, #1
{
   19668:	b083      	sub	sp, #12
    switch (state)
   1966a:	d004      	beq.n	19676 <sd_state_evt_handler+0x12>
   1966c:	2803      	cmp	r0, #3
   1966e:	d01d      	beq.n	196ac <sd_state_evt_handler+0x48>
   19670:	b1b0      	cbz	r0, 196a0 <sd_state_evt_handler+0x3c>
            break;

        default:
            break;
    }
}
   19672:	b003      	add	sp, #12
   19674:	bd30      	pop	{r4, r5, pc}
            if (!m_clock_cb.module_initialized)
   19676:	4c22      	ldr	r4, [pc, #136]	; (19700 <sd_state_evt_handler+0x9c>)
            CRITICAL_REGION_ENTER();
   19678:	2300      	movs	r3, #0
   1967a:	f10d 0007 	add.w	r0, sp, #7
   1967e:	f88d 3007 	strb.w	r3, [sp, #7]
   19682:	f7ff fe7f 	bl	19384 <app_util_critical_region_enter>
            if (!m_clock_cb.module_initialized)
   19686:	7823      	ldrb	r3, [r4, #0]
   19688:	b34b      	cbz	r3, 196de <sd_state_evt_handler+0x7a>
            ++(m_clock_cb.lfclk_requests);
   1968a:	68e3      	ldr	r3, [r4, #12]
            CRITICAL_REGION_EXIT();
   1968c:	f89d 0007 	ldrb.w	r0, [sp, #7]
            ++(m_clock_cb.lfclk_requests);
   19690:	3301      	adds	r3, #1
            m_clock_cb.lfclk_on = true;
   19692:	2201      	movs	r2, #1
            ++(m_clock_cb.lfclk_requests);
   19694:	60e3      	str	r3, [r4, #12]
            m_clock_cb.lfclk_on = true;
   19696:	70a2      	strb	r2, [r4, #2]
            CRITICAL_REGION_EXIT();
   19698:	f7ff fe9a 	bl	193d0 <app_util_critical_region_exit>
}
   1969c:	b003      	add	sp, #12
   1969e:	bd30      	pop	{r4, r5, pc}
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   196a0:	4b18      	ldr	r3, [pc, #96]	; (19704 <sd_state_evt_handler+0xa0>)
   196a2:	2201      	movs	r2, #1
   196a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   196a8:	b003      	add	sp, #12
   196aa:	bd30      	pop	{r4, r5, pc}
    --(m_clock_cb.lfclk_requests);
   196ac:	4c14      	ldr	r4, [pc, #80]	; (19700 <sd_state_evt_handler+0x9c>)
            nrfx_clock_enable();
   196ae:	f000 f839 	bl	19724 <nrfx_clock_enable>
    CRITICAL_REGION_ENTER();
   196b2:	2300      	movs	r3, #0
   196b4:	f10d 0007 	add.w	r0, sp, #7
   196b8:	f88d 3007 	strb.w	r3, [sp, #7]
   196bc:	f7ff fe62 	bl	19384 <app_util_critical_region_enter>
    --(m_clock_cb.lfclk_requests);
   196c0:	68e3      	ldr	r3, [r4, #12]
   196c2:	3b01      	subs	r3, #1
   196c4:	60e3      	str	r3, [r4, #12]
    if (m_clock_cb.lfclk_requests == 0)
   196c6:	68e5      	ldr	r5, [r4, #12]
   196c8:	b12d      	cbz	r5, 196d6 <sd_state_evt_handler+0x72>
    CRITICAL_REGION_EXIT();
   196ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
   196ce:	f7ff fe7f 	bl	193d0 <app_util_critical_region_exit>
}
   196d2:	b003      	add	sp, #12
   196d4:	bd30      	pop	{r4, r5, pc}
    nrfx_clock_lfclk_stop();
   196d6:	f000 f837 	bl	19748 <nrfx_clock_lfclk_stop>
    m_clock_cb.lfclk_on = false;
   196da:	70a5      	strb	r5, [r4, #2]
}
   196dc:	e7f5      	b.n	196ca <sd_state_evt_handler+0x66>
        err_code = nrfx_clock_init(clock_irq_handler);
   196de:	480a      	ldr	r0, [pc, #40]	; (19708 <sd_state_evt_handler+0xa4>)
        m_clock_cb.hfclk_requests = 0;
   196e0:	6063      	str	r3, [r4, #4]
        m_clock_cb.p_hf_head      = NULL;
   196e2:	60a3      	str	r3, [r4, #8]
        m_clock_cb.p_lf_head      = NULL;
   196e4:	6123      	str	r3, [r4, #16]
        m_clock_cb.lfclk_requests = 0;
   196e6:	60e3      	str	r3, [r4, #12]
        err_code = nrfx_clock_init(clock_irq_handler);
   196e8:	f000 f810 	bl	1970c <nrfx_clock_init>
        if (!nrf_sdh_is_enabled())
   196ec:	f001 f92a 	bl	1a944 <nrf_sdh_is_enabled>
   196f0:	b110      	cbz	r0, 196f8 <sd_state_evt_handler+0x94>
        m_clock_cb.module_initialized = true;
   196f2:	2301      	movs	r3, #1
   196f4:	7023      	strb	r3, [r4, #0]
    return err_code;
   196f6:	e7c8      	b.n	1968a <sd_state_evt_handler+0x26>
            nrfx_clock_enable();
   196f8:	f000 f814 	bl	19724 <nrfx_clock_enable>
   196fc:	e7f9      	b.n	196f2 <sd_state_evt_handler+0x8e>
   196fe:	bf00      	nop
   19700:	200011c0 	.word	0x200011c0
   19704:	e000e100 	.word	0xe000e100
   19708:	000195f9 	.word	0x000195f9

0001970c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1970c:	4a04      	ldr	r2, [pc, #16]	; (19720 <nrfx_clock_init+0x14>)
   1970e:	7913      	ldrb	r3, [r2, #4]
   19710:	b923      	cbnz	r3, 1971c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   19712:	2101      	movs	r1, #1
        m_clock_cb.event_handler = event_handler;
   19714:	6010      	str	r0, [r2, #0]
        m_clock_cb.module_initialized = true;
   19716:	8091      	strh	r1, [r2, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19718:	4618      	mov	r0, r3
   1971a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1971c:	2085      	movs	r0, #133	; 0x85
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1971e:	4770      	bx	lr
   19720:	200011d4 	.word	0x200011d4

00019724 <nrfx_clock_enable>:
 * @retval false Otherwise.
 */
#define NRFX_IRQ_IS_ENABLED(irq_number)  _NRFX_IRQ_IS_ENABLED(irq_number)
static inline bool _NRFX_IRQ_IS_ENABLED(IRQn_Type irq_number)
{
    return 0 != (NVIC->ISER[irq_number / 32] & (1UL << (irq_number % 32)));
   19724:	4b07      	ldr	r3, [pc, #28]	; (19744 <nrfx_clock_enable+0x20>)
   19726:	681a      	ldr	r2, [r3, #0]
    priority = NRFX_CLOCK_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19728:	07d2      	lsls	r2, r2, #31
   1972a:	d404      	bmi.n	19736 <nrfx_clock_enable+0x12>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1972c:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1972e:	2201      	movs	r2, #1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19730:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19734:	601a      	str	r2, [r3, #0]
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   19736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1973a:	2201      	movs	r2, #1
   1973c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   19740:	4770      	bx	lr
   19742:	bf00      	nop
   19744:	e000e100 	.word	0xe000e100

00019748 <nrfx_clock_lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   19748:	4b04      	ldr	r3, [pc, #16]	; (1975c <nrfx_clock_lfclk_stop+0x14>)
   1974a:	2201      	movs	r2, #1
   1974c:	601a      	str	r2, [r3, #0]
                                CLOCK_LFCLKSRCCOPY_SRC_Msk) >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}

__STATIC_INLINE bool nrf_clock_lf_is_running(void)
{
    return ((NRF_CLOCK->LFCLKSTAT &
   1974e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19752:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418

void nrfx_clock_lfclk_stop(void)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrf_clock_task_trigger(NRF_CLOCK_TASK_LFCLKSTOP);
    while (nrf_clock_lf_is_running())
   19756:	03db      	lsls	r3, r3, #15
   19758:	d4fb      	bmi.n	19752 <nrfx_clock_lfclk_stop+0xa>
    {}
}
   1975a:	4770      	bx	lr
   1975c:	4000000c 	.word	0x4000000c

00019760 <POWER_CLOCK_IRQHandler>:
    nrf_clock_task_trigger(NRF_CLOCK_TASK_CTSTOP);
#endif
}

void nrfx_clock_irq_handler(void)
{
   19760:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   19762:	4b17      	ldr	r3, [pc, #92]	; (197c0 <POWER_CLOCK_IRQHandler+0x60>)
   19764:	681a      	ldr	r2, [r3, #0]
   19766:	b082      	sub	sp, #8
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_HFCLKSTARTED))
   19768:	b162      	cbz	r2, 19784 <POWER_CLOCK_IRQHandler+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1976a:	2100      	movs	r1, #0
        nrf_clock_event_clear(NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_HFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1976c:	4a15      	ldr	r2, [pc, #84]	; (197c4 <POWER_CLOCK_IRQHandler+0x64>)
   1976e:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   19770:	681b      	ldr	r3, [r3, #0]
   19772:	7950      	ldrb	r0, [r2, #5]
   19774:	9300      	str	r3, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   19776:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1977a:	2301      	movs	r3, #1
    (void)dummy;
   1977c:	9c00      	ldr	r4, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   1977e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
   19782:	b198      	cbz	r0, 197ac <POWER_CLOCK_IRQHandler+0x4c>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   19784:	4b10      	ldr	r3, [pc, #64]	; (197c8 <POWER_CLOCK_IRQHandler+0x68>)
   19786:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   19788:	b1ba      	cbz	r2, 197ba <POWER_CLOCK_IRQHandler+0x5a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1978a:	2200      	movs	r2, #0
   1978c:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   1978e:	681b      	ldr	r3, [r3, #0]
   19790:	9301      	str	r3, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   19792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19796:	2102      	movs	r1, #2
    {
        nrf_clock_event_clear(NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_LFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_LF_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19798:	4b0a      	ldr	r3, [pc, #40]	; (197c4 <POWER_CLOCK_IRQHandler+0x64>)
    (void)dummy;
   1979a:	9801      	ldr	r0, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   1979c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
   197a0:	681b      	ldr	r3, [r3, #0]
   197a2:	2001      	movs	r0, #1
        nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif //  NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
}
   197a4:	b002      	add	sp, #8
   197a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   197aa:	4718      	bx	r3
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   197ac:	6811      	ldr	r1, [r2, #0]
            m_clock_cb.hfclk_started = true;
   197ae:	7153      	strb	r3, [r2, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   197b0:	4788      	blx	r1
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   197b2:	4b05      	ldr	r3, [pc, #20]	; (197c8 <POWER_CLOCK_IRQHandler+0x68>)
   197b4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   197b6:	2a00      	cmp	r2, #0
   197b8:	d1e7      	bne.n	1978a <POWER_CLOCK_IRQHandler+0x2a>
}
   197ba:	b002      	add	sp, #8
   197bc:	bd10      	pop	{r4, pc}
   197be:	bf00      	nop
   197c0:	40000100 	.word	0x40000100
   197c4:	200011d4 	.word	0x200011d4
   197c8:	40000104 	.word	0x40000104

000197cc <GPIOTE_IRQHandler>:
    return nrf_gpiote_event_addr_get(event);
}


void nrfx_gpiote_irq_handler(void)
{
   197cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197d0:	b086      	sub	sp, #24
    return ((uint32_t)NRF_GPIOTE + task);
}

__STATIC_INLINE bool nrf_gpiote_event_is_set(nrf_gpiote_events_t event)
{
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   197d2:	4ac0      	ldr	r2, [pc, #768]	; (19ad4 <GPIOTE_IRQHandler+0x308>)
    uint32_t status            = 0;
    uint32_t input[GPIO_COUNT] = {0};
   197d4:	2300      	movs	r3, #0
   197d6:	9301      	str	r3, [sp, #4]
    nrf_gpiote_events_t event = NRF_GPIOTE_EVENTS_IN_0;
    uint32_t            mask  = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    for (i = 0; i < GPIOTE_CH_NUM; i++)
    {
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   197d8:	6811      	ldr	r1, [r2, #0]
   197da:	2901      	cmp	r1, #1
   197dc:	f000 81c8 	beq.w	19b70 <GPIOTE_IRQHandler+0x3a4>
    uint32_t status            = 0;
   197e0:	461e      	mov	r6, r3
   197e2:	4bbd      	ldr	r3, [pc, #756]	; (19ad8 <GPIOTE_IRQHandler+0x30c>)
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   197e4:	681a      	ldr	r2, [r3, #0]
   197e6:	2a01      	cmp	r2, #1
   197e8:	f000 81b4 	beq.w	19b54 <GPIOTE_IRQHandler+0x388>
   197ec:	4bbb      	ldr	r3, [pc, #748]	; (19adc <GPIOTE_IRQHandler+0x310>)
   197ee:	681a      	ldr	r2, [r3, #0]
   197f0:	2a01      	cmp	r2, #1
   197f2:	f000 81a1 	beq.w	19b38 <GPIOTE_IRQHandler+0x36c>
   197f6:	4bba      	ldr	r3, [pc, #744]	; (19ae0 <GPIOTE_IRQHandler+0x314>)
   197f8:	681a      	ldr	r2, [r3, #0]
   197fa:	2a01      	cmp	r2, #1
   197fc:	f000 818e 	beq.w	19b1c <GPIOTE_IRQHandler+0x350>
   19800:	4bb8      	ldr	r3, [pc, #736]	; (19ae4 <GPIOTE_IRQHandler+0x318>)
   19802:	681a      	ldr	r2, [r3, #0]
   19804:	2a01      	cmp	r2, #1
   19806:	f000 817b 	beq.w	19b00 <GPIOTE_IRQHandler+0x334>
   1980a:	4bb7      	ldr	r3, [pc, #732]	; (19ae8 <GPIOTE_IRQHandler+0x31c>)
   1980c:	681a      	ldr	r2, [r3, #0]
   1980e:	2a01      	cmp	r2, #1
   19810:	f000 8152 	beq.w	19ab8 <GPIOTE_IRQHandler+0x2ec>
   19814:	4bb5      	ldr	r3, [pc, #724]	; (19aec <GPIOTE_IRQHandler+0x320>)
   19816:	681a      	ldr	r2, [r3, #0]
   19818:	2a01      	cmp	r2, #1
   1981a:	f000 813f 	beq.w	19a9c <GPIOTE_IRQHandler+0x2d0>
   1981e:	4bb4      	ldr	r3, [pc, #720]	; (19af0 <GPIOTE_IRQHandler+0x324>)
   19820:	681a      	ldr	r2, [r3, #0]
   19822:	2a01      	cmp	r2, #1
   19824:	d008      	beq.n	19838 <GPIOTE_IRQHandler+0x6c>
   19826:	4bb3      	ldr	r3, [pc, #716]	; (19af4 <GPIOTE_IRQHandler+0x328>)
        event = (nrf_gpiote_events_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
     * end of interrupt. */
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   19828:	681a      	ldr	r2, [r3, #0]
   1982a:	2a01      	cmp	r2, #1
   1982c:	f000 81ac 	beq.w	19b88 <GPIOTE_IRQHandler+0x3bc>
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
        nrf_gpio_ports_read(0, GPIO_COUNT, input);
    }

    /* Process pin events. */
    if (status & NRF_GPIOTE_INT_IN_MASK)
   19830:	b9f6      	cbnz	r6, 19870 <GPIOTE_IRQHandler+0xa4>
                }
            }
        }
        while (repeat);
    }
}
   19832:	b006      	add	sp, #24
   19834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   19838:	4aaf      	ldr	r2, [pc, #700]	; (19af8 <GPIOTE_IRQHandler+0x32c>)
   1983a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1983e:	0612      	lsls	r2, r2, #24
   19840:	d5f1      	bpl.n	19826 <GPIOTE_IRQHandler+0x5a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19842:	2200      	movs	r2, #0
   19844:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19846:	6819      	ldr	r1, [r3, #0]
   19848:	9104      	str	r1, [sp, #16]
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   1984a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    (void)dummy;
   1984c:	9804      	ldr	r0, [sp, #16]
   1984e:	2901      	cmp	r1, #1
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   19850:	f103 0360 	add.w	r3, r3, #96	; 0x60
            status |= mask;
   19854:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   19858:	d10a      	bne.n	19870 <GPIOTE_IRQHandler+0xa4>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1985a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1985c:	681b      	ldr	r3, [r3, #0]
   1985e:	9305      	str	r3, [sp, #20]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   19860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    (void)dummy;
   19864:	9a05      	ldr	r2, [sp, #20]
   19866:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    NRFX_ASSERT(start_port + length <= GPIO_COUNT);
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   1986a:	9301      	str	r3, [sp, #4]
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   1986c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    return m_cb.handlers[channel];
   19870:	4fa2      	ldr	r7, [pc, #648]	; (19afc <GPIOTE_IRQHandler+0x330>)
        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19872:	2501      	movs	r5, #1
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   19874:	2400      	movs	r4, #0
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19876:	00a3      	lsls	r3, r4, #2
   19878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
            if (mask & status)
   1987c:	422e      	tst	r6, r5
   1987e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
            mask <<= 1;
   19882:	ea4f 0545 	mov.w	r5, r5, lsl #1
            if (mask & status)
   19886:	d00b      	beq.n	198a0 <GPIOTE_IRQHandler+0xd4>
   19888:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return m_cb.handlers[channel];
   1988c:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
}

__STATIC_INLINE nrf_gpiote_polarity_t nrf_gpiote_event_polarity_get(uint32_t idx)
{
    return (nrf_gpiote_polarity_t)((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >> GPIOTE_CONFIG_POLARITY_Pos);
   19890:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                    handler(pin, polarity);
   19894:	f3c0 2004 	ubfx	r0, r0, #8, #5
   19898:	f3c1 4101 	ubfx	r1, r1, #16, #2
                if (handler)
   1989c:	b102      	cbz	r2, 198a0 <GPIOTE_IRQHandler+0xd4>
                    handler(pin, polarity);
   1989e:	4790      	blx	r2
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   198a0:	3401      	adds	r4, #1
   198a2:	2c08      	cmp	r4, #8
   198a4:	d1e7      	bne.n	19876 <GPIOTE_IRQHandler+0xaa>
    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   198a6:	2e00      	cmp	r6, #0
   198a8:	dac3      	bge.n	19832 <GPIOTE_IRQHandler+0x66>
            pins_to_check[port_idx] = 0xFFFFFFFF;
   198aa:	2200      	movs	r2, #0
   198ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   198b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        for (port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   198b4:	4c91      	ldr	r4, [pc, #580]	; (19afc <GPIOTE_IRQHandler+0x330>)
__STATIC_INLINE uint32_t nrf_bitmask_bit_is_set(uint32_t bit, void const * p_mask)
{
    uint8_t const * p_mask8 = (uint8_t const *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    return (1 << bit) & p_mask8[byte_idx];
   198b6:	2501      	movs	r5, #1
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] |= (1 << bit);
   198b8:	ae02      	add	r6, sp, #8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   198ba:	f994 0050 	ldrsb.w	r0, [r4, #80]	; 0x50
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   198be:	1c47      	adds	r7, r0, #1
   198c0:	d037      	beq.n	19932 <GPIOTE_IRQHandler+0x166>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   198c2:	f3c0 0cc2 	ubfx	ip, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   198c6:	ab06      	add	r3, sp, #24
   198c8:	eb03 070c 	add.w	r7, r3, ip
    bit = BITMASK_RELBIT_GET(bit);
   198cc:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   198d0:	f817 2c0c 	ldrb.w	r2, [r7, #-12]
   198d4:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   198d8:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   198da:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   198dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   198e0:	d027      	beq.n	19932 <GPIOTE_IRQHandler+0x166>
    return m_cb.pin_assignments[pin];
   198e2:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   198e4:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   198e6:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   198ea:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   198ee:	f1b8 0f00 	cmp.w	r8, #0
   198f2:	f000 819d 	beq.w	19c30 <GPIOTE_IRQHandler+0x464>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   198f6:	2903      	cmp	r1, #3
   198f8:	f000 819d 	beq.w	19c36 <GPIOTE_IRQHandler+0x46a>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   198fc:	0082      	lsls	r2, r0, #2
   198fe:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   19902:	f817 7c14 	ldrb.w	r7, [r7, #-20]
   19906:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   1990a:	401f      	ands	r7, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1990c:	f3cc 4c01 	ubfx	ip, ip, #16, #2
   19910:	d00b      	beq.n	1992a <GPIOTE_IRQHandler+0x15e>
   19912:	f1bc 0f02 	cmp.w	ip, #2
   19916:	d10c      	bne.n	19932 <GPIOTE_IRQHandler+0x166>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19918:	2903      	cmp	r1, #3
   1991a:	f000 81bf 	beq.w	19c9c <GPIOTE_IRQHandler+0x4d0>
            repeat = 0;
   1991e:	2700      	movs	r7, #0
                            if (handler)
   19920:	f1b8 0f00 	cmp.w	r8, #0
   19924:	d006      	beq.n	19934 <GPIOTE_IRQHandler+0x168>
                                handler(pin, polarity);
   19926:	47c0      	blx	r8
   19928:	e004      	b.n	19934 <GPIOTE_IRQHandler+0x168>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   1992a:	f1bc 0f03 	cmp.w	ip, #3
   1992e:	f000 81a3 	beq.w	19c78 <GPIOTE_IRQHandler+0x4ac>
            repeat = 0;
   19932:	2700      	movs	r7, #0
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   19934:	f994 0051 	ldrsb.w	r0, [r4, #81]	; 0x51
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   19938:	1c41      	adds	r1, r0, #1
   1993a:	d032      	beq.n	199a2 <GPIOTE_IRQHandler+0x1d6>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1993c:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   19940:	ab06      	add	r3, sp, #24
   19942:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   19946:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   1994a:	f81c 2c0c 	ldrb.w	r2, [ip, #-12]
   1994e:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   19952:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   19954:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   19956:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1995a:	d022      	beq.n	199a2 <GPIOTE_IRQHandler+0x1d6>
    return m_cb.pin_assignments[pin];
   1995c:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   1995e:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   19960:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   19964:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   19968:	f1b8 0f00 	cmp.w	r8, #0
   1996c:	f000 817b 	beq.w	19c66 <GPIOTE_IRQHandler+0x49a>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19970:	2903      	cmp	r1, #3
   19972:	f000 817b 	beq.w	19c6c <GPIOTE_IRQHandler+0x4a0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19976:	0082      	lsls	r2, r0, #2
   19978:	f102 4ea0 	add.w	lr, r2, #1342177280	; 0x50000000
   1997c:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   19980:	f8de 2700 	ldr.w	r2, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   19984:	ea1c 0f03 	tst.w	ip, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19988:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1998c:	f000 813a 	beq.w	19c04 <GPIOTE_IRQHandler+0x438>
   19990:	2a02      	cmp	r2, #2
   19992:	d106      	bne.n	199a2 <GPIOTE_IRQHandler+0x1d6>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19994:	2903      	cmp	r1, #3
   19996:	f000 8184 	beq.w	19ca2 <GPIOTE_IRQHandler+0x4d6>
                            if (handler)
   1999a:	f1b8 0f00 	cmp.w	r8, #0
   1999e:	d000      	beq.n	199a2 <GPIOTE_IRQHandler+0x1d6>
                                handler(pin, polarity);
   199a0:	47c0      	blx	r8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   199a2:	f994 0052 	ldrsb.w	r0, [r4, #82]	; 0x52
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   199a6:	1c42      	adds	r2, r0, #1
   199a8:	d032      	beq.n	19a10 <GPIOTE_IRQHandler+0x244>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   199aa:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   199ae:	ab06      	add	r3, sp, #24
   199b0:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   199b4:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   199b8:	f81c 2c0c 	ldrb.w	r2, [ip, #-12]
   199bc:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   199c0:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   199c2:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   199c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   199c8:	d022      	beq.n	19a10 <GPIOTE_IRQHandler+0x244>
    return m_cb.pin_assignments[pin];
   199ca:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   199cc:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   199ce:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   199d2:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   199d6:	f1b8 0f00 	cmp.w	r8, #0
   199da:	f000 813b 	beq.w	19c54 <GPIOTE_IRQHandler+0x488>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   199de:	2903      	cmp	r1, #3
   199e0:	f000 813b 	beq.w	19c5a <GPIOTE_IRQHandler+0x48e>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   199e4:	0082      	lsls	r2, r0, #2
   199e6:	f102 4ea0 	add.w	lr, r2, #1342177280	; 0x50000000
   199ea:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   199ee:	f8de 2700 	ldr.w	r2, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   199f2:	ea1c 0f03 	tst.w	ip, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   199f6:	f3c2 4201 	ubfx	r2, r2, #16, #2
   199fa:	f000 80ed 	beq.w	19bd8 <GPIOTE_IRQHandler+0x40c>
   199fe:	2a02      	cmp	r2, #2
   19a00:	d106      	bne.n	19a10 <GPIOTE_IRQHandler+0x244>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19a02:	2903      	cmp	r1, #3
   19a04:	f000 8150 	beq.w	19ca8 <GPIOTE_IRQHandler+0x4dc>
                            if (handler)
   19a08:	f1b8 0f00 	cmp.w	r8, #0
   19a0c:	d000      	beq.n	19a10 <GPIOTE_IRQHandler+0x244>
                                handler(pin, polarity);
   19a0e:	47c0      	blx	r8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   19a10:	f994 0053 	ldrsb.w	r0, [r4, #83]	; 0x53
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   19a14:	1c43      	adds	r3, r0, #1
   19a16:	d032      	beq.n	19a7e <GPIOTE_IRQHandler+0x2b2>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19a18:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   19a1c:	ab06      	add	r3, sp, #24
   19a1e:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   19a22:	f000 0207 	and.w	r2, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   19a26:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
   19a2a:	fa05 f202 	lsl.w	r2, r5, r2
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   19a2e:	4213      	tst	r3, r2
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   19a30:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   19a32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   19a36:	d022      	beq.n	19a7e <GPIOTE_IRQHandler+0x2b2>
    return m_cb.pin_assignments[pin];
   19a38:	1823      	adds	r3, r4, r0
                    nrf_gpiote_polarity_t polarity =
   19a3a:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   19a3c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    return m_cb.handlers[channel];
   19a40:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   19a44:	f1b8 0f00 	cmp.w	r8, #0
   19a48:	f000 80fb 	beq.w	19c42 <GPIOTE_IRQHandler+0x476>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19a4c:	2903      	cmp	r1, #3
   19a4e:	f000 80fb 	beq.w	19c48 <GPIOTE_IRQHandler+0x47c>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19a52:	0083      	lsls	r3, r0, #2
   19a54:	f103 4ea0 	add.w	lr, r3, #1342177280	; 0x50000000
   19a58:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   19a5c:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   19a60:	ea1c 0f02 	tst.w	ip, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19a64:	f3c3 4301 	ubfx	r3, r3, #16, #2
   19a68:	f000 809c 	beq.w	19ba4 <GPIOTE_IRQHandler+0x3d8>
   19a6c:	2b02      	cmp	r3, #2
   19a6e:	d106      	bne.n	19a7e <GPIOTE_IRQHandler+0x2b2>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19a70:	2903      	cmp	r1, #3
   19a72:	f000 811c 	beq.w	19cae <GPIOTE_IRQHandler+0x4e2>
                            if (handler)
   19a76:	f1b8 0f00 	cmp.w	r8, #0
   19a7a:	d000      	beq.n	19a7e <GPIOTE_IRQHandler+0x2b2>
                                handler(pin, polarity);
   19a7c:	47c0      	blx	r8
            if (repeat)
   19a7e:	2f00      	cmp	r7, #0
   19a80:	f43f aed7 	beq.w	19832 <GPIOTE_IRQHandler+0x66>
    return p_reg->IN;
   19a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    if (new_input[port_idx] != input[port_idx])
   19a88:	9a01      	ldr	r2, [sp, #4]
   19a8a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19a8e:	429a      	cmp	r2, r3
   19a90:	f43f aecf 	beq.w	19832 <GPIOTE_IRQHandler+0x66>
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   19a94:	9a02      	ldr	r2, [sp, #8]
                        input[port_idx]         = new_input[port_idx];
   19a96:	9301      	str	r3, [sp, #4]
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   19a98:	9203      	str	r2, [sp, #12]
        while (repeat);
   19a9a:	e70e      	b.n	198ba <GPIOTE_IRQHandler+0xee>
    return (NRF_GPIOTE->INTENSET & mask);
   19a9c:	4a16      	ldr	r2, [pc, #88]	; (19af8 <GPIOTE_IRQHandler+0x32c>)
   19a9e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19aa2:	0651      	lsls	r1, r2, #25
   19aa4:	f57f aebb 	bpl.w	1981e <GPIOTE_IRQHandler+0x52>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19aa8:	2200      	movs	r2, #0
   19aaa:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19aac:	681b      	ldr	r3, [r3, #0]
   19aae:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19ab0:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19ab2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   19ab6:	e6b2      	b.n	1981e <GPIOTE_IRQHandler+0x52>
    return (NRF_GPIOTE->INTENSET & mask);
   19ab8:	4a0f      	ldr	r2, [pc, #60]	; (19af8 <GPIOTE_IRQHandler+0x32c>)
   19aba:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19abe:	0690      	lsls	r0, r2, #26
   19ac0:	f57f aea8 	bpl.w	19814 <GPIOTE_IRQHandler+0x48>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19ac4:	2200      	movs	r2, #0
   19ac6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19ac8:	681b      	ldr	r3, [r3, #0]
   19aca:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19acc:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19ace:	f046 0620 	orr.w	r6, r6, #32
   19ad2:	e69f      	b.n	19814 <GPIOTE_IRQHandler+0x48>
   19ad4:	40006100 	.word	0x40006100
   19ad8:	40006104 	.word	0x40006104
   19adc:	40006108 	.word	0x40006108
   19ae0:	4000610c 	.word	0x4000610c
   19ae4:	40006110 	.word	0x40006110
   19ae8:	40006114 	.word	0x40006114
   19aec:	40006118 	.word	0x40006118
   19af0:	4000611c 	.word	0x4000611c
   19af4:	4000617c 	.word	0x4000617c
   19af8:	40006000 	.word	0x40006000
   19afc:	200011e0 	.word	0x200011e0
    return (NRF_GPIOTE->INTENSET & mask);
   19b00:	4a6c      	ldr	r2, [pc, #432]	; (19cb4 <GPIOTE_IRQHandler+0x4e8>)
   19b02:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19b06:	06d4      	lsls	r4, r2, #27
   19b08:	f57f ae7f 	bpl.w	1980a <GPIOTE_IRQHandler+0x3e>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b0c:	2200      	movs	r2, #0
   19b0e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b10:	681b      	ldr	r3, [r3, #0]
   19b12:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19b14:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19b16:	f046 0610 	orr.w	r6, r6, #16
   19b1a:	e676      	b.n	1980a <GPIOTE_IRQHandler+0x3e>
    return (NRF_GPIOTE->INTENSET & mask);
   19b1c:	4a65      	ldr	r2, [pc, #404]	; (19cb4 <GPIOTE_IRQHandler+0x4e8>)
   19b1e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19b22:	0715      	lsls	r5, r2, #28
   19b24:	f57f ae6c 	bpl.w	19800 <GPIOTE_IRQHandler+0x34>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b28:	2200      	movs	r2, #0
   19b2a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b2c:	681b      	ldr	r3, [r3, #0]
   19b2e:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19b30:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19b32:	f046 0608 	orr.w	r6, r6, #8
   19b36:	e663      	b.n	19800 <GPIOTE_IRQHandler+0x34>
    return (NRF_GPIOTE->INTENSET & mask);
   19b38:	4a5e      	ldr	r2, [pc, #376]	; (19cb4 <GPIOTE_IRQHandler+0x4e8>)
   19b3a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19b3e:	0757      	lsls	r7, r2, #29
   19b40:	f57f ae59 	bpl.w	197f6 <GPIOTE_IRQHandler+0x2a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b44:	2200      	movs	r2, #0
   19b46:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b48:	681b      	ldr	r3, [r3, #0]
   19b4a:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19b4c:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19b4e:	f046 0604 	orr.w	r6, r6, #4
   19b52:	e650      	b.n	197f6 <GPIOTE_IRQHandler+0x2a>
    return (NRF_GPIOTE->INTENSET & mask);
   19b54:	4a57      	ldr	r2, [pc, #348]	; (19cb4 <GPIOTE_IRQHandler+0x4e8>)
   19b56:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19b5a:	0792      	lsls	r2, r2, #30
   19b5c:	f57f ae46 	bpl.w	197ec <GPIOTE_IRQHandler+0x20>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b60:	2200      	movs	r2, #0
   19b62:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b64:	681b      	ldr	r3, [r3, #0]
   19b66:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19b68:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19b6a:	f046 0602 	orr.w	r6, r6, #2
   19b6e:	e63d      	b.n	197ec <GPIOTE_IRQHandler+0x20>
    return (NRF_GPIOTE->INTENSET & mask);
   19b70:	4950      	ldr	r1, [pc, #320]	; (19cb4 <GPIOTE_IRQHandler+0x4e8>)
   19b72:	f8d1 6304 	ldr.w	r6, [r1, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   19b76:	f016 0601 	ands.w	r6, r6, #1
   19b7a:	f43f ae32 	beq.w	197e2 <GPIOTE_IRQHandler+0x16>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b7e:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b80:	6813      	ldr	r3, [r2, #0]
   19b82:	9304      	str	r3, [sp, #16]
    (void)dummy;
   19b84:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   19b86:	e62c      	b.n	197e2 <GPIOTE_IRQHandler+0x16>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   19b88:	2200      	movs	r2, #0
   19b8a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   19b8c:	681b      	ldr	r3, [r3, #0]
   19b8e:	9305      	str	r3, [sp, #20]
   19b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    (void)dummy;
   19b94:	9a05      	ldr	r2, [sp, #20]
   19b96:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   19b9a:	9301      	str	r3, [sp, #4]
    if (status & NRF_GPIOTE_INT_IN_MASK)
   19b9c:	2e00      	cmp	r6, #0
   19b9e:	f43f ae84 	beq.w	198aa <GPIOTE_IRQHandler+0xde>
   19ba2:	e663      	b.n	1986c <GPIOTE_IRQHandler+0xa0>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   19ba4:	2b03      	cmp	r3, #3
   19ba6:	f47f af6a 	bne.w	19a7e <GPIOTE_IRQHandler+0x2b2>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19baa:	2903      	cmp	r1, #3
   19bac:	f47f af63 	bne.w	19a76 <GPIOTE_IRQHandler+0x2aa>
   19bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   19bb4:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   19bb8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   19bbc:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19bc0:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   19bc4:	4313      	orrs	r3, r2
   19bc6:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
                            if (handler)
   19bca:	f1b8 0f00 	cmp.w	r8, #0
   19bce:	f43f af59 	beq.w	19a84 <GPIOTE_IRQHandler+0x2b8>
                                ++repeat;
   19bd2:	3701      	adds	r7, #1
   19bd4:	b2ff      	uxtb	r7, r7
   19bd6:	e751      	b.n	19a7c <GPIOTE_IRQHandler+0x2b0>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   19bd8:	2a03      	cmp	r2, #3
   19bda:	f47f af19 	bne.w	19a10 <GPIOTE_IRQHandler+0x244>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19bde:	2903      	cmp	r1, #3
   19be0:	f47f af12 	bne.w	19a08 <GPIOTE_IRQHandler+0x23c>
   19be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   19be8:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   19bec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   19bf0:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19bf4:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                                ++repeat;
   19bf8:	3701      	adds	r7, #1
   19bfa:	4313      	orrs	r3, r2
   19bfc:	b2ff      	uxtb	r7, r7
   19bfe:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
   19c02:	e701      	b.n	19a08 <GPIOTE_IRQHandler+0x23c>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   19c04:	2a03      	cmp	r2, #3
   19c06:	f47f aecc 	bne.w	199a2 <GPIOTE_IRQHandler+0x1d6>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19c0a:	2903      	cmp	r1, #3
   19c0c:	f47f aec5 	bne.w	1999a <GPIOTE_IRQHandler+0x1ce>
   19c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   19c14:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   19c18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   19c1c:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19c20:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                                ++repeat;
   19c24:	3701      	adds	r7, #1
   19c26:	4313      	orrs	r3, r2
   19c28:	b2ff      	uxtb	r7, r7
   19c2a:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
   19c2e:	e6b4      	b.n	1999a <GPIOTE_IRQHandler+0x1ce>
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   19c30:	2903      	cmp	r1, #3
   19c32:	f47f ae7e 	bne.w	19932 <GPIOTE_IRQHandler+0x166>
    p_mask8[byte_idx] |= (1 << bit);
   19c36:	f816 200c 	ldrb.w	r2, [r6, ip]
   19c3a:	431a      	orrs	r2, r3
   19c3c:	f806 200c 	strb.w	r2, [r6, ip]
   19c40:	e65c      	b.n	198fc <GPIOTE_IRQHandler+0x130>
   19c42:	2903      	cmp	r1, #3
   19c44:	f47f af1b 	bne.w	19a7e <GPIOTE_IRQHandler+0x2b2>
   19c48:	f816 300e 	ldrb.w	r3, [r6, lr]
   19c4c:	4313      	orrs	r3, r2
   19c4e:	f806 300e 	strb.w	r3, [r6, lr]
   19c52:	e6fe      	b.n	19a52 <GPIOTE_IRQHandler+0x286>
   19c54:	2903      	cmp	r1, #3
   19c56:	f47f aedb 	bne.w	19a10 <GPIOTE_IRQHandler+0x244>
   19c5a:	f816 200e 	ldrb.w	r2, [r6, lr]
   19c5e:	431a      	orrs	r2, r3
   19c60:	f806 200e 	strb.w	r2, [r6, lr]
   19c64:	e6be      	b.n	199e4 <GPIOTE_IRQHandler+0x218>
   19c66:	2903      	cmp	r1, #3
   19c68:	f47f ae9b 	bne.w	199a2 <GPIOTE_IRQHandler+0x1d6>
   19c6c:	f816 200e 	ldrb.w	r2, [r6, lr]
   19c70:	431a      	orrs	r2, r3
   19c72:	f806 200e 	strb.w	r2, [r6, lr]
   19c76:	e67e      	b.n	19976 <GPIOTE_IRQHandler+0x1aa>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19c78:	2903      	cmp	r1, #3
   19c7a:	f47f ae51 	bne.w	19920 <GPIOTE_IRQHandler+0x154>
   19c7e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   19c82:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   19c86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   19c8a:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19c8e:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   19c92:	433b      	orrs	r3, r7
   19c94:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
                                ++repeat;
   19c98:	2701      	movs	r7, #1
   19c9a:	e641      	b.n	19920 <GPIOTE_IRQHandler+0x154>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   19c9c:	f44f 3740 	mov.w	r7, #196608	; 0x30000
   19ca0:	e7ef      	b.n	19c82 <GPIOTE_IRQHandler+0x4b6>
   19ca2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   19ca6:	e7b5      	b.n	19c14 <GPIOTE_IRQHandler+0x448>
   19ca8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   19cac:	e79c      	b.n	19be8 <GPIOTE_IRQHandler+0x41c>
   19cae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   19cb2:	e77f      	b.n	19bb4 <GPIOTE_IRQHandler+0x3e8>
   19cb4:	40006000 	.word	0x40006000

00019cb8 <BL651tempBoard::init()>:

//------------
//  output
//------------
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    //alias for other led names already in use
    SCA &ledGreen2  { ledGreen };
    SCA &ledRed1    { ledRed };

            //someone is required to run init to setup pins
SA  init    () {
   19cbc:	b410      	push	{r4}
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   19cbe:	2201      	movs	r2, #1
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19cc0:	2480      	movs	r4, #128	; 0x80
   19cc2:	f44f 7080 	mov.w	r0, #256	; 0x100
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   19cc6:	210c      	movs	r1, #12
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19cc8:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   19ccc:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19cd0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   19cd4:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   19cd8:	f8c3 176c 	str.w	r1, [r3, #1900]	; 0x76c
                ledRed.init( OUTPUT );
                ledGreen.init( OUTPUT );
                sw1.init( INPUT, PULLUP );
            }
   19cdc:	bc10      	pop	{r4}
   19cde:	4770      	bx	lr

00019ce0 <BL651tempBoard::alive()>:

            //signal board is alive
SA  alive   () {
   19ce0:	b538      	push	{r3, r4, r5, lr}
SA  latchOn     ()          { reg.DETECTMODE = 1; }

//------------
//  status
//------------
SA  isOutput    ()          { return reg.DIRP; }
   19ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19ce6:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                //in places that sets a peripheral pin
                //  PSEL.SCA = board.sca.pinNumber();
SCA pinNumber   ()          { return Pin_; }

SA  blinkN      (uint16_t n, uint32_t mson, uint32_t msoff = 0, uint32_t lastdelayms = 0) {
                    if( not isOutput() ) return;
   19cea:	07d0      	lsls	r0, r2, #31
   19cec:	d52c      	bpl.n	19d48 <BL651tempBoard::alive()+0x68>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   19cee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19cf2:	4c2f      	ldr	r4, [pc, #188]	; (19db0 <BL651tempBoard::alive()+0xd0>)
   19cf4:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
   19cfc:	bf14      	ite	ne
   19cfe:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   19d02:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   19d06:	2519      	movs	r5, #25
   19d08:	f044 0401 	orr.w	r4, r4, #1
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   19d0c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19d10:	47a0      	blx	r4
        return;
    }

    do {
        nrf_delay_us(1000);
    } while (--ms_time);
   19d12:	3d01      	subs	r5, #1
   19d14:	d1fa      	bne.n	19d0c <BL651tempBoard::alive()+0x2c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   19d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19d1a:	2519      	movs	r5, #25
   19d1c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19d20:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19d24:	f44f 7280 	mov.w	r2, #256	; 0x100
   19d28:	bf14      	ite	ne
   19d2a:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   19d2e:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   19d32:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19d36:	47a0      	blx	r4
   19d38:	3d01      	subs	r5, #1
   19d3a:	d1fa      	bne.n	19d32 <BL651tempBoard::alive()+0x52>
   19d3c:	25c8      	movs	r5, #200	; 0xc8
   19d3e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19d42:	47a0      	blx	r4
   19d44:	3d01      	subs	r5, #1
   19d46:	d1fa      	bne.n	19d3e <BL651tempBoard::alive()+0x5e>
SA  isOutput    ()          { return reg.DIRP; }
   19d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19d4c:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
                    if( not isOutput() ) return;
   19d50:	07d2      	lsls	r2, r2, #31
   19d52:	d528      	bpl.n	19da6 <BL651tempBoard::alive()+0xc6>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   19d54:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19d58:	0611      	lsls	r1, r2, #24
   19d5a:	d525      	bpl.n	19da8 <BL651tempBoard::alive()+0xc8>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19d5c:	2280      	movs	r2, #128	; 0x80
   19d5e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   19d62:	4c13      	ldr	r4, [pc, #76]	; (19db0 <BL651tempBoard::alive()+0xd0>)
   19d64:	2519      	movs	r5, #25
   19d66:	f044 0401 	orr.w	r4, r4, #1
   19d6a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19d6e:	47a0      	blx	r4
   19d70:	3d01      	subs	r5, #1
   19d72:	d1fa      	bne.n	19d6a <BL651tempBoard::alive()+0x8a>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   19d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19d78:	2519      	movs	r5, #25
   19d7a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19d7e:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   19d82:	f04f 0280 	mov.w	r2, #128	; 0x80
   19d86:	bf14      	ite	ne
   19d88:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   19d8c:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   19d90:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19d94:	47a0      	blx	r4
   19d96:	3d01      	subs	r5, #1
   19d98:	d1fa      	bne.n	19d90 <BL651tempBoard::alive()+0xb0>
   19d9a:	25c8      	movs	r5, #200	; 0xc8
   19d9c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   19da0:	47a0      	blx	r4
   19da2:	3d01      	subs	r5, #1
   19da4:	d1fa      	bne.n	19d9c <BL651tempBoard::alive()+0xbc>
                ledGreen.blinkN(1,25,25,200);
                ledRed.blinkN(1,25,25,200);
            }
   19da6:	bd38      	pop	{r3, r4, r5, pc}
   19da8:	2280      	movs	r2, #128	; 0x80
   19daa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   19dae:	e7d8      	b.n	19d62 <BL651tempBoard::alive()+0x82>
   19db0:	0001c500 	.word	0x0001c500

00019db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>:
    { MKhash("underline"),  "4m" },

};

template<typename Dev_>
int Markup(Dev_ dev, const char* str){
   19db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    auto startStr = str;
    auto count = 0;
    for( ; *str; ){
   19db8:	7808      	ldrb	r0, [r1, #0]
   19dba:	2800      	cmp	r0, #0
   19dbc:	f000 80c6 	beq.w	19f4c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x198>

        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
        startStr = str;
        if( not *str ) break; //incomplete markup
        str++; startStr++; //skip }
        if( not markupON ) continue;
   19dc0:	4e6b      	ldr	r6, [pc, #428]	; (19f70 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1bc>)
        return SEGGER_RTT_Write(N, buf, len);
   19dc2:	4f6c      	ldr	r7, [pc, #432]	; (19f74 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c0>)
   19dc4:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 19fbc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x208>
   19dc8:	468a      	mov	sl, r1
    for( ; *str; ){
   19dca:	460c      	mov	r4, r1
    auto count = 0;
   19dcc:	f04f 0900 	mov.w	r9, #0
   19dd0:	e004      	b.n	19ddc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            str++;
   19dd2:	f10a 0a01 	add.w	sl, sl, #1
    for( ; *str; ){
   19dd6:	f89a 0000 	ldrb.w	r0, [sl]
   19dda:	b348      	cbz	r0, 19e30 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x7c>
        if( *str != '{' ){ 
   19ddc:	287b      	cmp	r0, #123	; 0x7b
   19dde:	d1f8      	bne.n	19dd2 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e>
        if( n ) count += dev.write( startStr, n );
   19de0:	ebba 0204 	subs.w	r2, sl, r4
   19de4:	d16c      	bne.n	19ec0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x10c>
        if( *str == '{' ){ 
   19de6:	f89a 5001 	ldrb.w	r5, [sl, #1]
   19dea:	2d7b      	cmp	r5, #123	; 0x7b
        str++; //skip {
   19dec:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   19df0:	d071      	beq.n	19ed6 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x122>
        if( fg or bg ) str++;
   19df2:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   19df6:	2b42      	cmp	r3, #66	; 0x42
   19df8:	bf0a      	itet	eq
   19dfa:	f89a 3002 	ldrbeq.w	r3, [sl, #2]
   19dfe:	462b      	movne	r3, r5
   19e00:	f10a 0102 	addeq.w	r1, sl, #2
        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
   19e04:	b1bb      	cbz	r3, 19e36 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   19e06:	2400      	movs	r4, #0
   19e08:	e003      	b.n	19e12 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x5e>
   19e0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   19e0e:	b294      	uxth	r4, r2
   19e10:	b18b      	cbz	r3, 19e36 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   19e12:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   19e16:	2b7d      	cmp	r3, #125	; 0x7d
   19e18:	fa13 f282 	uxtah	r2, r3, r2
   19e1c:	d1f5      	bne.n	19e0a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x56>
        if( not markupON ) continue;
   19e1e:	7833      	ldrb	r3, [r6, #0]
        str++; startStr++; //skip }
   19e20:	f101 0a01 	add.w	sl, r1, #1
        if( not markupON ) continue;
   19e24:	b953      	cbnz	r3, 19e3c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x88>
    for( ; *str; ){
   19e26:	f89a 0000 	ldrb.w	r0, [sl]
        str++; startStr++; //skip }
   19e2a:	4654      	mov	r4, sl
    for( ; *str; ){
   19e2c:	2800      	cmp	r0, #0
   19e2e:	d1d5      	bne.n	19ddc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            break;
        }
    }
    //print any remaining chars
    auto n = str - startStr;
    if( n ) count += dev.write( startStr, n );    
   19e30:	ebba 0204 	subs.w	r2, sl, r4
   19e34:	d169      	bne.n	19f0a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x156>
    return count;
}
   19e36:	4648      	mov	r0, r9
   19e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( c.hash != hash ) continue;
   19e3c:	f244 431d 	movw	r3, #17437	; 0x441d
   19e40:	429c      	cmp	r4, r3
   19e42:	d050      	beq.n	19ee6 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x132>
   19e44:	f24f 235b 	movw	r3, #62043	; 0xf25b
   19e48:	429c      	cmp	r4, r3
   19e4a:	d067      	beq.n	19f1c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x168>
   19e4c:	f641 2331 	movw	r3, #6705	; 0x1a31
   19e50:	429c      	cmp	r4, r3
   19e52:	d073      	beq.n	19f3c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x188>
   19e54:	f24f 231c 	movw	r3, #61980	; 0xf21c
   19e58:	429c      	cmp	r4, r3
   19e5a:	d05d      	beq.n	19f18 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x164>
   19e5c:	f649 0308 	movw	r3, #38920	; 0x9808
   19e60:	429c      	cmp	r4, r3
   19e62:	d06f      	beq.n	19f44 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x190>
   19e64:	f246 439d 	movw	r3, #25757	; 0x649d
   19e68:	429c      	cmp	r4, r3
   19e6a:	d069      	beq.n	19f40 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x18c>
   19e6c:	f645 132b 	movw	r3, #22827	; 0x592b
   19e70:	429c      	cmp	r4, r3
   19e72:	d069      	beq.n	19f48 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x194>
   19e74:	f643 1361 	movw	r3, #14689	; 0x3961
   19e78:	429c      	cmp	r4, r3
   19e7a:	d06b      	beq.n	19f54 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a0>
   19e7c:	f649 139c 	movw	r3, #39324	; 0x999c
   19e80:	429c      	cmp	r4, r3
   19e82:	d069      	beq.n	19f58 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a4>
   19e84:	f246 7358 	movw	r3, #26456	; 0x6758
   19e88:	429c      	cmp	r4, r3
   19e8a:	d061      	beq.n	19f50 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x19c>
   19e8c:	f24b 3382 	movw	r3, #45954	; 0xb382
   19e90:	429c      	cmp	r4, r3
   19e92:	d063      	beq.n	19f5c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a8>
   19e94:	f64e 6309 	movw	r3, #60937	; 0xee09
   19e98:	429c      	cmp	r4, r3
   19e9a:	d061      	beq.n	19f60 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ac>
   19e9c:	f244 2363 	movw	r3, #16995	; 0x4263
   19ea0:	429c      	cmp	r4, r3
   19ea2:	d063      	beq.n	19f6c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b8>
   19ea4:	f64c 6396 	movw	r3, #52886	; 0xce96
   19ea8:	429c      	cmp	r4, r3
   19eaa:	d05d      	beq.n	19f68 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b4>
   19eac:	f247 43e9 	movw	r3, #29929	; 0x74e9
   19eb0:	429c      	cmp	r4, r3
   19eb2:	d057      	beq.n	19f64 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b0>
   19eb4:	f24d 03a6 	movw	r3, #53414	; 0xd0a6
   19eb8:	429c      	cmp	r4, r3
   19eba:	d1b4      	bne.n	19e26 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x72>
        for( auto& c : markupCodes ){
   19ebc:	4c2e      	ldr	r4, [pc, #184]	; (19f78 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c4>)
   19ebe:	e013      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   19ec0:	4621      	mov	r1, r4
   19ec2:	2000      	movs	r0, #0
   19ec4:	f000 fb16 	bl	1a4f4 <SEGGER_RTT_Write>
        if( *str == '{' ){ 
   19ec8:	f89a 5001 	ldrb.w	r5, [sl, #1]
   19ecc:	2d7b      	cmp	r5, #123	; 0x7b
        if( n ) count += dev.write( startStr, n );
   19ece:	4481      	add	r9, r0
        str++; //skip {
   19ed0:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   19ed4:	d18d      	bne.n	19df2 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x3e>
        return SEGGER_RTT_Write(N, buf, len);
   19ed6:	2201      	movs	r2, #1
   19ed8:	2000      	movs	r0, #0
   19eda:	f000 fb0b 	bl	1a4f4 <SEGGER_RTT_Write>
            str++; 
   19ede:	f10a 0a02 	add.w	sl, sl, #2
            count += dev.write( str, 1 ); 
   19ee2:	4481      	add	r9, r0
            continue; 
   19ee4:	e777      	b.n	19dd6 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        for( auto& c : markupCodes ){
   19ee6:	4c25      	ldr	r4, [pc, #148]	; (19f7c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c8>)
        return SEGGER_RTT_Write(N, buf, len);
   19ee8:	2202      	movs	r2, #2
   19eea:	4639      	mov	r1, r7
   19eec:	2000      	movs	r0, #0
   19eee:	f000 fb01 	bl	1a4f4 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   19ef2:	2d46      	cmp	r5, #70	; 0x46
            count += dev.write( "\033[", 2 );
   19ef4:	4481      	add	r9, r0
            if( fg ) count += dev.write( "38;2;", 5 );
   19ef6:	d01a      	beq.n	19f2e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x17a>
            if( bg ) count += dev.write( "48;2;", 5 );
   19ef8:	2d42      	cmp	r5, #66	; 0x42
   19efa:	d011      	beq.n	19f20 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x16c>
        return SEGGER_RTT_WriteString(N, buf);
   19efc:	6861      	ldr	r1, [r4, #4]
   19efe:	2000      	movs	r0, #0
   19f00:	f000 fc0a 	bl	1a718 <SEGGER_RTT_WriteString>
        str++; startStr++; //skip }
   19f04:	4654      	mov	r4, sl
            count += dev.write( c.str );
   19f06:	4481      	add	r9, r0
            break;
   19f08:	e765      	b.n	19dd6 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        return SEGGER_RTT_Write(N, buf, len);
   19f0a:	4621      	mov	r1, r4
   19f0c:	f000 faf2 	bl	1a4f4 <SEGGER_RTT_Write>
    if( n ) count += dev.write( startStr, n );    
   19f10:	4481      	add	r9, r0
}
   19f12:	4648      	mov	r0, r9
   19f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for( auto& c : markupCodes ){
   19f18:	4c19      	ldr	r4, [pc, #100]	; (19f80 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1cc>)
   19f1a:	e7e5      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f1c:	4c19      	ldr	r4, [pc, #100]	; (19f84 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d0>)
   19f1e:	e7e3      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   19f20:	2205      	movs	r2, #5
   19f22:	4641      	mov	r1, r8
   19f24:	2000      	movs	r0, #0
   19f26:	f000 fae5 	bl	1a4f4 <SEGGER_RTT_Write>
            if( bg ) count += dev.write( "48;2;", 5 );
   19f2a:	4481      	add	r9, r0
   19f2c:	e7e6      	b.n	19efc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        return SEGGER_RTT_Write(N, buf, len);
   19f2e:	4916      	ldr	r1, [pc, #88]	; (19f88 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d4>)
   19f30:	2205      	movs	r2, #5
   19f32:	2000      	movs	r0, #0
   19f34:	f000 fade 	bl	1a4f4 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   19f38:	4481      	add	r9, r0
   19f3a:	e7df      	b.n	19efc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        for( auto& c : markupCodes ){
   19f3c:	4c13      	ldr	r4, [pc, #76]	; (19f8c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d8>)
   19f3e:	e7d3      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f40:	4c13      	ldr	r4, [pc, #76]	; (19f90 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1dc>)
   19f42:	e7d1      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f44:	4c13      	ldr	r4, [pc, #76]	; (19f94 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e0>)
   19f46:	e7cf      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f48:	4c13      	ldr	r4, [pc, #76]	; (19f98 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e4>)
   19f4a:	e7cd      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
    auto count = 0;
   19f4c:	4681      	mov	r9, r0
    return count;
   19f4e:	e772      	b.n	19e36 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
        for( auto& c : markupCodes ){
   19f50:	4c12      	ldr	r4, [pc, #72]	; (19f9c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e8>)
   19f52:	e7c9      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f54:	4c12      	ldr	r4, [pc, #72]	; (19fa0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ec>)
   19f56:	e7c7      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f58:	4c12      	ldr	r4, [pc, #72]	; (19fa4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f0>)
   19f5a:	e7c5      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f5c:	4c12      	ldr	r4, [pc, #72]	; (19fa8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f4>)
   19f5e:	e7c3      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f60:	4c12      	ldr	r4, [pc, #72]	; (19fac <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f8>)
   19f62:	e7c1      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f64:	4c12      	ldr	r4, [pc, #72]	; (19fb0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1fc>)
   19f66:	e7bf      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f68:	4c12      	ldr	r4, [pc, #72]	; (19fb4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x200>)
   19f6a:	e7bd      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f6c:	4c12      	ldr	r4, [pc, #72]	; (19fb8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x204>)
   19f6e:	e7bb      	b.n	19ee8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   19f70:	20001124 	.word	0x20001124
   19f74:	0001c380 	.word	0x0001c380
   19f78:	0001c580 	.word	0x0001c580
   19f7c:	0001c508 	.word	0x0001c508
   19f80:	0001c520 	.word	0x0001c520
   19f84:	0001c510 	.word	0x0001c510
   19f88:	0001c384 	.word	0x0001c384
   19f8c:	0001c518 	.word	0x0001c518
   19f90:	0001c530 	.word	0x0001c530
   19f94:	0001c528 	.word	0x0001c528
   19f98:	0001c538 	.word	0x0001c538
   19f9c:	0001c550 	.word	0x0001c550
   19fa0:	0001c540 	.word	0x0001c540
   19fa4:	0001c548 	.word	0x0001c548
   19fa8:	0001c558 	.word	0x0001c558
   19fac:	0001c560 	.word	0x0001c560
   19fb0:	0001c578 	.word	0x0001c578
   19fb4:	0001c570 	.word	0x0001c570
   19fb8:	0001c568 	.word	0x0001c568
   19fbc:	0001c38c 	.word	0x0001c38c

00019fc0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>:
            bool markupON in nRFconfig.hpp

        if disabled, the existing markup code is ignored
------------------------------------------------------------------------------*/
template<typename Dev, typename...Ts>
int Print(Dev dev, const char* fmt, Ts...ts){
   19fc0:	b510      	push	{r4, lr}
   19fc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   19fc6:	4602      	mov	r2, r0
    char buf[512];
    int n = snprintf( buf, 512, fmt, ts... );
   19fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
   19fcc:	4668      	mov	r0, sp
   19fce:	f000 fd7b 	bl	1aac8 <sniprintf>
    if( n == 0 ) return 0;
   19fd2:	b150      	cbz	r0, 19fea <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x2a>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   19fd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   19fd8:	4669      	mov	r1, sp
   19fda:	db02      	blt.n	19fe2 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x22>
   19fdc:	4c09      	ldr	r4, [pc, #36]	; (1a004 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x44>)
   19fde:	7823      	ldrb	r3, [r4, #0]
   19fe0:	b933      	cbnz	r3, 19ff0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x30>
   19fe2:	f04f 0000 	mov.w	r0, #0
   19fe6:	f7ff fee5 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    //ansi code
    markupON = false;
    n = Markup( dev, buf );
    markupON = true;
    return n;
}
   19fea:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   19fee:	bd10      	pop	{r4, pc}
    markupON = false;
   19ff0:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   19ff2:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   19ff6:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   19ff8:	f7ff fedc 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   19ffc:	2301      	movs	r3, #1
   19ffe:	7023      	strb	r3, [r4, #0]
    return n;
   1a000:	e7f3      	b.n	19fea <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x2a>
   1a002:	bf00      	nop
   1a004:	20001124 	.word	0x20001124

0001a008 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a008:	b510      	push	{r4, lr}
   1a00a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
    int n = snprintf( buf, 512, fmt, ts... );
   1a00e:	4c14      	ldr	r4, [pc, #80]	; (1a060 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x58>)
   1a010:	4a14      	ldr	r2, [pc, #80]	; (1a064 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x5c>)
   1a012:	9100      	str	r1, [sp, #0]
   1a014:	2169      	movs	r1, #105	; 0x69
   1a016:	e9cd 1402 	strd	r1, r4, [sp, #8]
int Print(Dev dev, const char* fmt, Ts...ts){
   1a01a:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a01c:	9201      	str	r2, [sp, #4]
   1a01e:	a804      	add	r0, sp, #16
   1a020:	4a11      	ldr	r2, [pc, #68]	; (1a068 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x60>)
   1a022:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a026:	f000 fd4f 	bl	1aac8 <sniprintf>
    if( n == 0 ) return 0;
   1a02a:	b150      	cbz	r0, 1a042 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x3a>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a02c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a030:	a904      	add	r1, sp, #16
   1a032:	db02      	blt.n	1a03a <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x32>
   1a034:	4c0d      	ldr	r4, [pc, #52]	; (1a06c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x64>)
   1a036:	7823      	ldrb	r3, [r4, #0]
   1a038:	b933      	cbnz	r3, 1a048 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x40>
   1a03a:	f04f 0000 	mov.w	r0, #0
   1a03e:	f7ff feb9 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a042:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1a046:	bd10      	pop	{r4, pc}
    markupON = false;
   1a048:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a04a:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a04e:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a050:	f7ff feb0 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a054:	2301      	movs	r3, #1
   1a056:	7023      	strb	r3, [r4, #0]
}
   1a058:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1a05c:	bd10      	pop	{r4, pc}
   1a05e:	bf00      	nop
   1a060:	0001c3c0 	.word	0x0001c3c0
   1a064:	0001c3c8 	.word	0x0001c3c8
   1a068:	0001c394 	.word	0x0001c394
   1a06c:	20001124 	.word	0x20001124

0001a070 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a070:	b510      	push	{r4, lr}
   1a072:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    int n = snprintf( buf, 512, fmt, ts... );
   1a076:	4a10      	ldr	r2, [pc, #64]	; (1a0b8 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]+0x48>)
   1a078:	4668      	mov	r0, sp
   1a07a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a07e:	f000 fd23 	bl	1aac8 <sniprintf>
    if( n == 0 ) return 0;
   1a082:	b150      	cbz	r0, 1a09a <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]+0x2a>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a084:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a088:	4669      	mov	r1, sp
   1a08a:	db02      	blt.n	1a092 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]+0x22>
   1a08c:	4c0b      	ldr	r4, [pc, #44]	; (1a0bc <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1a08e:	7823      	ldrb	r3, [r4, #0]
   1a090:	b933      	cbnz	r3, 1a0a0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]+0x30>
   1a092:	f04f 0000 	mov.w	r0, #0
   1a096:	f7ff fe8d 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a09a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a09e:	bd10      	pop	{r4, pc}
    markupON = false;
   1a0a0:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a0a2:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a0a6:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a0a8:	f7ff fe84 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a0ac:	2301      	movs	r3, #1
   1a0ae:	7023      	strb	r3, [r4, #0]
}
   1a0b0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a0b4:	bd10      	pop	{r4, pc}
   1a0b6:	bf00      	nop
   1a0b8:	0001c3d4 	.word	0x0001c3d4
   1a0bc:	20001124 	.word	0x20001124

0001a0c0 <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a0c0:	b510      	push	{r4, lr}
   1a0c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1a0c6:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a0c8:	9100      	str	r1, [sp, #0]
   1a0ca:	4a10      	ldr	r2, [pc, #64]	; (1a10c <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1a0cc:	a802      	add	r0, sp, #8
   1a0ce:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a0d2:	f000 fcf9 	bl	1aac8 <sniprintf>
    if( n == 0 ) return 0;
   1a0d6:	b150      	cbz	r0, 1a0ee <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a0d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a0dc:	a902      	add	r1, sp, #8
   1a0de:	db02      	blt.n	1a0e6 <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]+0x26>
   1a0e0:	4c0b      	ldr	r4, [pc, #44]	; (1a110 <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]+0x50>)
   1a0e2:	7823      	ldrb	r3, [r4, #0]
   1a0e4:	b933      	cbnz	r3, 1a0f4 <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]+0x34>
   1a0e6:	f04f 0000 	mov.w	r0, #0
   1a0ea:	f7ff fe63 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a0ee:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1a0f2:	bd10      	pop	{r4, pc}
    markupON = false;
   1a0f4:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a0f6:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a0fa:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a0fc:	f7ff fe5a 	bl	19db4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a100:	2301      	movs	r3, #1
   1a102:	7023      	strb	r3, [r4, #0]
}
   1a104:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1a108:	bd10      	pop	{r4, pc}
   1a10a:	bf00      	nop
   1a10c:	0001c408 	.word	0x0001c408
   1a110:	20001124 	.word	0x20001124

0001a114 <main>:


/*-----------------------------------------------------------------------------
    functions
-----------------------------------------------------------------------------*/
int main() {
   1a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    Debug( "{normal}{Fgreen}\nBoot...{Fmagenta}\n" );
   1a118:	48b8      	ldr	r0, [pc, #736]	; (1a3fc <main+0x2e8>)
   1a11a:	4eb9      	ldr	r6, [pc, #740]	; (1a400 <main+0x2ec>)
   1a11c:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 1a40c <main+0x2f8>
//--------------------
SA  enable          ()          { reg.ENABLE = 6; }
SA  disable         ()          { reg.ENABLE = 0; }
SA  isEnabled       ()          { return reg.ENABLE; }
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1a120:	4cb8      	ldr	r4, [pc, #736]	; (1a404 <main+0x2f0>)
int main() {
   1a122:	b082      	sub	sp, #8
    Debug( "{normal}{Fgreen}\nBoot...{Fmagenta}\n" );
   1a124:	f7ff ff4c 	bl	19fc0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    Debug( "board.init()...\n" );
   1a128:	48b7      	ldr	r0, [pc, #732]	; (1a408 <main+0x2f4>)
   1a12a:	f7ff ff49 	bl	19fc0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    board.init();           //init board pins
   1a12e:	f7ff fdc3 	bl	19cb8 <BL651tempBoard::init()>
    board.alive();          //blink led's to show boot
   1a132:	f7ff fdd5 	bl	19ce0 <BL651tempBoard::alive()>
   1a136:	f046 0601 	orr.w	r6, r6, #1
   1a13a:	f10d 0904 	add.w	r9, sp, #4
   1a13e:	f04f 0a48 	mov.w	sl, #72	; 0x48
        public:
    //============

SA  init        ()              { twi_.init( Addr_ ); //K100
                                  nrf_delay_ms( 2 ); //startup time is 2ms
                                  isInit_ = true;
   1a142:	2501      	movs	r5, #1
                    reg.PIN_CNF = it.INIT_CNF;
   1a144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a148:	f04f 67c8 	mov.w	r7, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1a14c:	f8c4 a588 	str.w	sl, [r4, #1416]	; 0x588
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a150:	f240 610c 	movw	r1, #1548	; 0x60c
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a154:	f8c4 7524 	str.w	r7, [r4, #1316]	; 0x524
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
SA  pinSdaDisconnect()          { reg.PSEL_SDA or_eq (1<<31); }


                    //set pins only when disabled
SA  pinScl          (PIN e, bool on = true) { 
                        reg.PSEL_SCL = e;
   1a15c:	f04f 0e0f 	mov.w	lr, #15
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a160:	f240 2c01 	movw	ip, #513	; 0x201
                        if( not on ) pinSclDisconnect();
                    } 

SA  pinSda          (PIN e, bool on = true) {
                        reg.PSEL_SDA = e;
   1a164:	200d      	movs	r0, #13
SA  enable          ()          { reg.ENABLE = 6; }
   1a166:	2706      	movs	r7, #6
                    reg.PIN_CNF = it.INIT_CNF;
   1a168:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
   1a16c:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1a170:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
                        reg.PSEL_SCL = e;
   1a174:	f8c4 e508 	str.w	lr, [r4, #1288]	; 0x508
   1a178:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a17c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a180:	f8c3 c744 	str.w	ip, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a184:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1a188:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   1a18c:	47b0      	blx	r6
   1a18e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a192:	47b0      	blx	r6
                                }
   1a194:	2782      	movs	r7, #130	; 0x82
                                  isInit_ = true;
   1a196:	f888 5000 	strb.w	r5, [r8]
   1a19a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a19e:	47b0      	blx	r6
   1a1a0:	3f01      	subs	r7, #1
   1a1a2:	d1fa      	bne.n	1a19a <main+0x86>
                    if( not isInit_ ) init();
   1a1a4:	f898 3000 	ldrb.w	r3, [r8]
   1a1a8:	270b      	movs	r7, #11
   1a1aa:	2b00      	cmp	r3, #0
   1a1ac:	d037      	beq.n	1a21e <main+0x10a>
                    U8 rbuf[2] = { 0, 0 }; //value
   1a1ae:	2300      	movs	r3, #0
                    U8 tbuf[1] = { r }; //register
   1a1b0:	f88d 5000 	strb.w	r5, [sp]
                    U8 rbuf[2] = { 0, 0 }; //value
   1a1b4:	f8ad 3004 	strh.w	r3, [sp, #4]
                    }

                    //write,read
                    template<unsigned NT, unsigned NR>
SA  writeRead       (U8 (&txbuf)[NT], U8 (&rxbuf)[NR]) {
asm("nop");
   1a1b8:	bf00      	nop
                        reg.RXD.MAXCNT = len;
   1a1ba:	2002      	movs	r0, #2
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1a1bc:	2107      	movs	r1, #7
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1a1be:	f44f 5284 	mov.w	r2, #4224	; 0x1080
                        reg.TXD.PTR = addr;
   1a1c2:	f8c4 d544 	str.w	sp, [r4, #1348]	; 0x544
                        reg.TXD.MAXCNT = len;
   1a1c6:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
                        reg.RXD.PTR = addr;
   1a1ca:	f8c4 9534 	str.w	r9, [r4, #1332]	; 0x534
                        reg.RXD.MAXCNT = len;
   1a1ce:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1a1d2:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1a1d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1a1da:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1a1de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1a1e2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1a1e6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1a1ea:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1a1ee:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1a1f2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1a1f6:	60a5      	str	r5, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1a1f8:	e003      	b.n	1a202 <main+0xee>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1a1fa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                        while( err = isError(), not err and not isStopped() ){}
   1a1fe:	2b00      	cmp	r3, #0
   1a200:	d138      	bne.n	1a274 <main+0x160>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1a202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
                        while( err = isError(), not err and not isStopped() ){}
   1a206:	2b00      	cmp	r3, #0
   1a208:	d0f7      	beq.n	1a1fa <main+0xe6>
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1a20a:	6165      	str	r5, [r4, #20]
    tmp.init();
    //default is continuous conversion, 8 samples, 15.5ms*8 = 124ms
    nrf_delay_ms(130);
    //poll for data ready (up to a point)
    auto i = 10; //500us * 10 = 5ms timeout
    while( not tmp.isDataReady() and i-- ){ nrf_delay_us(500); }
   1a20c:	3f01      	subs	r7, #1
   1a20e:	d03d      	beq.n	1a28c <main+0x178>
   1a210:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
   1a214:	47b0      	blx	r6
                    if( not isInit_ ) init();
   1a216:	f898 3000 	ldrb.w	r3, [r8]
   1a21a:	2b00      	cmp	r3, #0
   1a21c:	d1c7      	bne.n	1a1ae <main+0x9a>
                    reg.PIN_CNF = it.INIT_CNF;
   1a21e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a222:	f240 610c 	movw	r1, #1548	; 0x60c
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a226:	f04f 6cc8 	mov.w	ip, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1a22a:	f8c4 a588 	str.w	sl, [r4, #1416]	; 0x588
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a22e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a232:	f8c4 c524 	str.w	ip, [r4, #1316]	; 0x524
                        reg.PSEL_SDA = e;
   1a236:	f04f 0e0d 	mov.w	lr, #13
                    reg.PIN_CNF = it.INIT_CNF;
   1a23a:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a23e:	f240 2c01 	movw	ip, #513	; 0x201
                    reg.PIN_CNF = it.INIT_CNF;
   1a242:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
                        reg.PSEL_SCL = e;
   1a246:	200f      	movs	r0, #15
SA  enable          ()          { reg.ENABLE = 6; }
   1a248:	2106      	movs	r1, #6
                        reg.PSEL_SDA = e;
   1a24a:	f8c4 e50c 	str.w	lr, [r4, #1292]	; 0x50c
                        reg.PSEL_SCL = e;
   1a24e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a252:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   1a256:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
                    reg.PIN_CNF = it.INIT_CNF;
   1a25a:	f8c3 c744 	str.w	ip, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a25e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1a262:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1a266:	47b0      	blx	r6
   1a268:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a26c:	47b0      	blx	r6
                                  isInit_ = true;
   1a26e:	f888 5000 	strb.w	r5, [r8]
                                }
   1a272:	e79c      	b.n	1a1ae <main+0x9a>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1a274:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
                        txBufferSet( txbuf );
                        rxBufferSet( rxbuf );
                        startTxRxStop();  
                        return waitForStop() and (txAmount() == NT) and (rxAmount() == NR);
   1a278:	2b01      	cmp	r3, #1
   1a27a:	d1c7      	bne.n	1a20c <main+0xf8>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1a27c:	f8d4 353c 	ldr.w	r3, [r4, #1340]	; 0x53c
                        return waitForStop() and (txAmount() == NT) and (rxAmount() == NR);
   1a280:	2b02      	cmp	r3, #2
   1a282:	d1c3      	bne.n	1a20c <main+0xf8>
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1a284:	f89d 3004 	ldrb.w	r3, [sp, #4]
                                //the loop if a read failure

                                //can read and busy flag set = true,
                                //cannot read or flag clear = false
SA  isEEbusy    () -> bool      { U16 v; return configR( v ) ? v bitand (1<<EEBUSY) : false ; }
SA  isDataReady () -> bool      { U16 s = 0; return configR(s) and (s bitand (1<<DATAREADY)); } 
   1a288:	069b      	lsls	r3, r3, #26
   1a28a:	d5bf      	bpl.n	1a20c <main+0xf8>
                    if( not isInit_ ) init();
   1a28c:	f898 3000 	ldrb.w	r3, [r8]
   1a290:	2b00      	cmp	r3, #0
   1a292:	f000 8087 	beq.w	1a3a4 <main+0x290>
                    U8 rbuf[2] = { 0, 0 }; //value
   1a296:	2300      	movs	r3, #0
   1a298:	f8ad 3004 	strh.w	r3, [sp, #4]
                    U8 tbuf[1] = { r }; //register
   1a29c:	f88d 3000 	strb.w	r3, [sp]
asm("nop");
   1a2a0:	bf00      	nop
                        reg.RXD.MAXCNT = len;
   1a2a2:	2002      	movs	r0, #2
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1a2a4:	2107      	movs	r1, #7
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1a2a6:	f44f 5284 	mov.w	r2, #4224	; 0x1080
                        reg.TXD.PTR = addr;
   1a2aa:	f8c4 d544 	str.w	sp, [r4, #1348]	; 0x544
                        reg.TXD.MAXCNT = len;
   1a2ae:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
                        reg.RXD.PTR = addr;
   1a2b2:	f8c4 9534 	str.w	r9, [r4, #1332]	; 0x534
                        reg.RXD.MAXCNT = len;
   1a2b6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1a2ba:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1a2be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1a2c2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1a2c6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1a2ca:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1a2ce:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1a2d2:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1a2d6:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1a2da:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1a2de:	60a5      	str	r5, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1a2e0:	e002      	b.n	1a2e8 <main+0x1d4>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1a2e2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                        while( err = isError(), not err and not isStopped() ){}
   1a2e6:	bb4a      	cbnz	r2, 1a33c <main+0x228>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1a2e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
                        while( err = isError(), not err and not isStopped() ){}
   1a2ec:	2b00      	cmp	r3, #0
   1a2ee:	d0f8      	beq.n	1a2e2 <main+0x1ce>
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1a2f0:	6165      	str	r5, [r4, #20]
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a2f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    reg.PIN_CNF = it.INIT_CNF;
   1a2f6:	2102      	movs	r1, #2
SA  disable         ()          { reg.ENABLE = 0; }
   1a2f8:	2200      	movs	r2, #0
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a2fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1a2fe:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1a302:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a306:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
   1a30a:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1a30e:	f888 2000 	strb.w	r2, [r8]
    int16_t t = -32768;
    tmp.tempRaw(t); //return not checked, but value checked below
    tmp.deinit(); //turn off power to ic

    DebugFuncHeader();
   1a312:	f7ff f831 	bl	19378 <app_timer_cnt_get>
   1a316:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1a31a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1a31e:	0b80      	lsrs	r0, r0, #14
   1a320:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1a324:	f7ff fe70 	bl	1a008 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
    if( t == -32768 ){
        Debug("  failed to read, or returned default temp value\n");
   1a328:	f7ff fea2 	bl	1a070 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0] [clone .constprop.0]>
   1a32c:	f241 3788 	movw	r7, #5000	; 0x1388
   1a330:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a334:	47b0      	blx	r6
   1a336:	3f01      	subs	r7, #1
   1a338:	d1fa      	bne.n	1a330 <main+0x21c>
   1a33a:	e703      	b.n	1a144 <main+0x30>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1a33c:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
                        return waitForStop() and (txAmount() == NT) and (rxAmount() == NR);
   1a340:	2a01      	cmp	r2, #1
   1a342:	d1d6      	bne.n	1a2f2 <main+0x1de>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1a344:	f8d4 153c 	ldr.w	r1, [r4, #1340]	; 0x53c
                        return waitForStop() and (txAmount() == NT) and (rxAmount() == NR);
   1a348:	2902      	cmp	r1, #2
   1a34a:	d1d2      	bne.n	1a2f2 <main+0x1de>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a34c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1a350:	f89d c004 	ldrb.w	ip, [sp, #4]
   1a354:	f89d 7005 	ldrb.w	r7, [sp, #5]
SA  disable         ()          { reg.ENABLE = 0; }
   1a358:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1a35c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1a360:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a364:	f8c2 1734 	str.w	r1, [r2, #1844]	; 0x734
   1a368:	f8c2 173c 	str.w	r1, [r2, #1852]	; 0x73c
   1a36c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1a370:	f888 3000 	strb.w	r3, [r8]
    DebugFuncHeader();
   1a374:	f7ff f800 	bl	19378 <app_timer_cnt_get>
   1a378:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1a37c:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1a380:	b23f      	sxth	r7, r7
   1a382:	0b80      	lsrs	r0, r0, #14
   1a384:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1a388:	f7ff fe3e 	bl	1a008 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
    if( t == -32768 ){
   1a38c:	f517 4f00 	cmn.w	r7, #32768	; 0x8000
   1a390:	d0ca      	beq.n	1a328 <main+0x214>
    x10 = 5/64 = .078125, x100 = 25/32 = 0.78125, x1000 = 125/16 = 7.8125

    normal mul/div- x100C -> v*78125/100000, x100F -> v*140625/100000 + 3200
    */

SA  x10F    (I16 v) -> I16      { return ((v * 9L)>>6) + 320; }
   1a392:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
   1a396:	1189      	asrs	r1, r1, #6
    } else {
        Debug("  tmp117 raw: %d  F: %d\n", t, tmp.x10F( t ) );
   1a398:	f501 71a0 	add.w	r1, r1, #320	; 0x140
   1a39c:	4638      	mov	r0, r7
   1a39e:	f7ff fe8f 	bl	1a0c0 <int Print<DevRtt<0>, short, short>(DevRtt<0>, char const*, short, short) [clone .isra.0] [clone .constprop.0]>
   1a3a2:	e7c3      	b.n	1a32c <main+0x218>
   1a3a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a3a8:	f04f 67c8 	mov.w	r7, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1a3ac:	f8c4 a588 	str.w	sl, [r4, #1416]	; 0x588
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a3b0:	f240 610c 	movw	r1, #1548	; 0x60c
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1a3b4:	f8c4 7524 	str.w	r7, [r4, #1316]	; 0x524
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a3b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                        reg.PSEL_SCL = e;
   1a3bc:	f04f 0e0f 	mov.w	lr, #15
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a3c0:	f240 2c01 	movw	ip, #513	; 0x201
                        reg.PSEL_SDA = e;
   1a3c4:	200d      	movs	r0, #13
SA  enable          ()          { reg.ENABLE = 6; }
   1a3c6:	2706      	movs	r7, #6
                    reg.PIN_CNF = it.INIT_CNF;
   1a3c8:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
   1a3cc:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1a3d0:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
                        reg.PSEL_SCL = e;
   1a3d4:	f8c4 e508 	str.w	lr, [r4, #1288]	; 0x508
   1a3d8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a3dc:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a3e0:	f8c3 c744 	str.w	ip, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a3e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1a3e8:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
   1a3ec:	47b0      	blx	r6
   1a3ee:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a3f2:	47b0      	blx	r6
                                  isInit_ = true;
   1a3f4:	f888 5000 	strb.w	r5, [r8]
                                }
   1a3f8:	e74d      	b.n	1a296 <main+0x182>
   1a3fa:	bf00      	nop
   1a3fc:	0001c424 	.word	0x0001c424
   1a400:	0001c500 	.word	0x0001c500
   1a404:	40003000 	.word	0x40003000
   1a408:	0001c448 	.word	0x0001c448
   1a40c:	20001288 	.word	0x20001288

0001a410 <_GLOBAL__sub_I_main>:
    SI Gpio<P0_13>  sda; 
   1a410:	4b2a      	ldr	r3, [pc, #168]	; (1a4bc <_GLOBAL__sub_I_main+0xac>)
   1a412:	681a      	ldr	r2, [r3, #0]
   1a414:	07d0      	lsls	r0, r2, #31
   1a416:	bf5c      	itt	pl
   1a418:	2201      	movpl	r2, #1
   1a41a:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_15>  scl;
   1a41c:	4b28      	ldr	r3, [pc, #160]	; (1a4c0 <_GLOBAL__sub_I_main+0xb0>)
   1a41e:	681a      	ldr	r2, [r3, #0]
   1a420:	07d1      	lsls	r1, r2, #31
   1a422:	bf5c      	itt	pl
   1a424:	2201      	movpl	r2, #1
   1a426:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_17>  i2cDevicePwr; 
   1a428:	4b26      	ldr	r3, [pc, #152]	; (1a4c4 <_GLOBAL__sub_I_main+0xb4>)
   1a42a:	681a      	ldr	r2, [r3, #0]
   1a42c:	07d2      	lsls	r2, r2, #31
   1a42e:	bf5c      	itt	pl
   1a430:	2201      	movpl	r2, #1
   1a432:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_7>  ledRed; //board label 1
   1a434:	4b24      	ldr	r3, [pc, #144]	; (1a4c8 <_GLOBAL__sub_I_main+0xb8>)
   1a436:	681a      	ldr	r2, [r3, #0]
   1a438:	07d0      	lsls	r0, r2, #31
   1a43a:	bf5c      	itt	pl
   1a43c:	2201      	movpl	r2, #1
   1a43e:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_8>  ledGreen; //board label 2
   1a440:	4b22      	ldr	r3, [pc, #136]	; (1a4cc <_GLOBAL__sub_I_main+0xbc>)
   1a442:	681a      	ldr	r2, [r3, #0]
   1a444:	07d1      	lsls	r1, r2, #31
   1a446:	bf5c      	itt	pl
   1a448:	2201      	movpl	r2, #1
   1a44a:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_27, LOWISON>  sw1; //SW1
   1a44c:	4b20      	ldr	r3, [pc, #128]	; (1a4d0 <_GLOBAL__sub_I_main+0xc0>)
   1a44e:	681a      	ldr	r2, [r3, #0]
   1a450:	07d2      	lsls	r2, r2, #31
   1a452:	bf5c      	itt	pl
   1a454:	2201      	movpl	r2, #1
   1a456:	601a      	strpl	r2, [r3, #0]
    private:
//============

    SCA updateInterval_{ 60 }; //no need to read all the time
    //CH0, gain 1/6, ref = 0.6v, 10us (all default values)
    SI SaadcChan vdd_{ SaadcChan::VDD };
   1a458:	4a1e      	ldr	r2, [pc, #120]	; (1a4d4 <_GLOBAL__sub_I_main+0xc4>)
   1a45a:	6813      	ldr	r3, [r2, #0]
   1a45c:	f013 0301 	ands.w	r3, r3, #1
   1a460:	d11d      	bne.n	1a49e <_GLOBAL__sub_I_main+0x8e>
        DebugFuncHeader();
        Debug("{Forange}  low power...{Fwhite} \n");
        nrf_pwr_mgmt_run();  
    }

}
   1a462:	b430      	push	{r4, r5}
                    }

                    //manual init
                    template<typename ...Ts>
SCA init            (CH ch, PSEL p, Ts... ts) { 
                        ch_ = ch;
   1a464:	4c1c      	ldr	r4, [pc, #112]	; (1a4d8 <_GLOBAL__sub_I_main+0xc8>)
                        pselN_ = (PSEL)it.PSELN;
   1a466:	4d1d      	ldr	r5, [pc, #116]	; (1a4dc <_GLOBAL__sub_I_main+0xcc>)
                        pselP_ = (PSEL)it.PSELP;
   1a468:	491d      	ldr	r1, [pc, #116]	; (1a4e0 <_GLOBAL__sub_I_main+0xd0>)
                        ch_ = ch;
   1a46a:	7023      	strb	r3, [r4, #0]
                        pselN_ = (PSEL)it.PSELN;
   1a46c:	702b      	strb	r3, [r5, #0]
                        pselP_ = (PSEL)it.PSELP;
   1a46e:	2409      	movs	r4, #9
#else
    #error "Temperature source not defined in nRFconfig.hpp" 
#endif

#include "Timer.hpp"
inline Timer timerAdvUpdate;
   1a470:	4b1c      	ldr	r3, [pc, #112]	; (1a4e4 <_GLOBAL__sub_I_main+0xd4>)
   1a472:	700c      	strb	r4, [r1, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   1a474:	2101      	movs	r1, #1
                        config_ = it.CONFIG;
   1a476:	481c      	ldr	r0, [pc, #112]	; (1a4e8 <_GLOBAL__sub_I_main+0xd8>)
   1a478:	6011      	str	r1, [r2, #0]
inline Timer timerAdvUpdate;
   1a47a:	681a      	ldr	r2, [r3, #0]
   1a47c:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   1a480:	6004      	str	r4, [r0, #0]
   1a482:	07d4      	lsls	r4, r2, #31
   1a484:	d403      	bmi.n	1a48e <_GLOBAL__sub_I_main+0x7e>
#undef CUO

/*------------------------------------------------------------------------------
    Timer
------------------------------------------------------------------------------*/
struct Timer {
   1a486:	4a19      	ldr	r2, [pc, #100]	; (1a4ec <_GLOBAL__sub_I_main+0xdc>)
   1a488:	2101      	movs	r1, #1
   1a48a:	6212      	str	r2, [r2, #32]
   1a48c:	6019      	str	r1, [r3, #0]
    SI TempDriver_ temp_;
   1a48e:	4b18      	ldr	r3, [pc, #96]	; (1a4f0 <_GLOBAL__sub_I_main+0xe0>)
   1a490:	681a      	ldr	r2, [r3, #0]
   1a492:	07d0      	lsls	r0, r2, #31
   1a494:	bf5c      	itt	pl
   1a496:	2201      	movpl	r2, #1
   1a498:	601a      	strpl	r2, [r3, #0]
   1a49a:	bc30      	pop	{r4, r5}
   1a49c:	4770      	bx	lr
inline Timer timerAdvUpdate;
   1a49e:	4b11      	ldr	r3, [pc, #68]	; (1a4e4 <_GLOBAL__sub_I_main+0xd4>)
   1a4a0:	681a      	ldr	r2, [r3, #0]
   1a4a2:	07d1      	lsls	r1, r2, #31
   1a4a4:	d403      	bmi.n	1a4ae <_GLOBAL__sub_I_main+0x9e>
   1a4a6:	4a11      	ldr	r2, [pc, #68]	; (1a4ec <_GLOBAL__sub_I_main+0xdc>)
   1a4a8:	2101      	movs	r1, #1
   1a4aa:	6212      	str	r2, [r2, #32]
   1a4ac:	6019      	str	r1, [r3, #0]
    SI TempDriver_ temp_;
   1a4ae:	4b10      	ldr	r3, [pc, #64]	; (1a4f0 <_GLOBAL__sub_I_main+0xe0>)
   1a4b0:	681a      	ldr	r2, [r3, #0]
   1a4b2:	07d2      	lsls	r2, r2, #31
   1a4b4:	bf5c      	itt	pl
   1a4b6:	2201      	movpl	r2, #1
   1a4b8:	601a      	strpl	r2, [r3, #0]

//============
    protected:
//============

    Temperature(){} //cannot use this class directly
   1a4ba:	4770      	bx	lr
   1a4bc:	2000125c 	.word	0x2000125c
   1a4c0:	20001258 	.word	0x20001258
   1a4c4:	20001254 	.word	0x20001254
   1a4c8:	20001250 	.word	0x20001250
   1a4cc:	2000124c 	.word	0x2000124c
   1a4d0:	20001248 	.word	0x20001248
   1a4d4:	20001244 	.word	0x20001244
   1a4d8:	20001292 	.word	0x20001292
   1a4dc:	20001290 	.word	0x20001290
   1a4e0:	20001291 	.word	0x20001291
   1a4e4:	20001240 	.word	0x20001240
   1a4e8:	2000128c 	.word	0x2000128c
   1a4ec:	20001260 	.word	0x20001260
   1a4f0:	2000123c 	.word	0x2000123c

0001a4f4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned Status;
  //
  INIT();
   1a4f8:	4f81      	ldr	r7, [pc, #516]	; (1a700 <SEGGER_RTT_Write+0x20c>)
   1a4fa:	783b      	ldrb	r3, [r7, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a4fc:	b085      	sub	sp, #20
   1a4fe:	4680      	mov	r8, r0
   1a500:	468a      	mov	sl, r1
   1a502:	4691      	mov	r9, r2
  INIT();
   1a504:	b1eb      	cbz	r3, 1a542 <SEGGER_RTT_Write+0x4e>
  switch (pRing->Flags) {
   1a506:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1a50a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1a50e:	f04f 0b00 	mov.w	fp, #0
   1a512:	f10d 000f 	add.w	r0, sp, #15
   1a516:	f88d b00f 	strb.w	fp, [sp, #15]
   1a51a:	f7fe ff33 	bl	19384 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1a51e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1a520:	2e01      	cmp	r6, #1
   1a522:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1a526:	f000 808d 	beq.w	1a644 <SEGGER_RTT_Write+0x150>
   1a52a:	2e02      	cmp	r6, #2
   1a52c:	d04f      	beq.n	1a5ce <SEGGER_RTT_Write+0xda>
   1a52e:	b346      	cbz	r6, 1a582 <SEGGER_RTT_Write+0x8e>
   1a530:	465e      	mov	r6, fp
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
   1a532:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1a536:	f7fe ff4b 	bl	193d0 <app_util_critical_region_exit>
  //
  return Status;
}
   1a53a:	4630      	mov	r0, r6
   1a53c:	b005      	add	sp, #20
   1a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a542:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1a544:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a546:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1a548:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1a54a:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a54c:	4b6d      	ldr	r3, [pc, #436]	; (1a704 <SEGGER_RTT_Write+0x210>)
  p->aUp[0].sName         = "Terminal";
   1a54e:	496e      	ldr	r1, [pc, #440]	; (1a708 <SEGGER_RTT_Write+0x214>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a550:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a552:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a556:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1a558:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a55c:	4a6b      	ldr	r2, [pc, #428]	; (1a70c <SEGGER_RTT_Write+0x218>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a55e:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1a560:	2310      	movs	r3, #16
   1a562:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1a564:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1a566:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1a568:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1a56a:	4969      	ldr	r1, [pc, #420]	; (1a710 <SEGGER_RTT_Write+0x21c>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a56c:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1a56e:	1df8      	adds	r0, r7, #7
   1a570:	f000 fade 	bl	1ab30 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1a574:	4967      	ldr	r1, [pc, #412]	; (1a714 <SEGGER_RTT_Write+0x220>)
   1a576:	4638      	mov	r0, r7
   1a578:	f000 fada 	bl	1ab30 <strcpy>
  p->acID[6] = ' ';
   1a57c:	2320      	movs	r3, #32
   1a57e:	71bb      	strb	r3, [r7, #6]
}
   1a580:	e7c1      	b.n	1a506 <SEGGER_RTT_Write+0x12>
  RdOff = pRing->RdOff;
   1a582:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a584:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1a588:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a58a:	bf9c      	itt	ls
   1a58c:	6a2a      	ldrls	r2, [r5, #32]
   1a58e:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1a590:	3b01      	subs	r3, #1
   1a592:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1a596:	4599      	cmp	r9, r3
   1a598:	d8cb      	bhi.n	1a532 <SEGGER_RTT_Write+0x3e>
  Rem = pRing->SizeOfBuffer - WrOff;
   1a59a:	4444      	add	r4, r8
   1a59c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a5a0:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1a5a4:	6a25      	ldr	r5, [r4, #32]
   1a5a6:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a5aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1a5ae:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a5b0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1a5b4:	f080 8091 	bcs.w	1a6da <SEGGER_RTT_Write+0x1e6>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a5b8:	6878      	ldr	r0, [r7, #4]
   1a5ba:	4651      	mov	r1, sl
   1a5bc:	464a      	mov	r2, r9
   1a5be:	4458      	add	r0, fp
   1a5c0:	f000 fa6c 	bl	1aa9c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1a5c4:	eb09 030b 	add.w	r3, r9, fp
   1a5c8:	6263      	str	r3, [r4, #36]	; 0x24
   1a5ca:	464e      	mov	r6, r9
   1a5cc:	e7b1      	b.n	1a532 <SEGGER_RTT_Write+0x3e>
  WrOff = pRing->WrOff;
   1a5ce:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a5d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1a5d6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a5d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1a5dc:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a5de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1a5e0:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a5e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1a5e6:	d922      	bls.n	1a62e <SEGGER_RTT_Write+0x13a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a5e8:	1b13      	subs	r3, r2, r4
   1a5ea:	6a2a      	ldr	r2, [r5, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a5ec:	454b      	cmp	r3, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a5ee:	eb07 0108 	add.w	r1, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a5f2:	eba2 0b04 	sub.w	fp, r2, r4
   1a5f6:	bf28      	it	cs
   1a5f8:	464b      	movcs	r3, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a5fa:	459b      	cmp	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a5fc:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a5fe:	bf28      	it	cs
   1a600:	469b      	movcs	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a602:	4420      	add	r0, r4
   1a604:	4651      	mov	r1, sl
   1a606:	465a      	mov	r2, fp
   1a608:	f000 fa48 	bl	1aa9c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a60c:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1a60e:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1a610:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1a612:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1a614:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1a618:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1a61a:	d00d      	beq.n	1a638 <SEGGER_RTT_Write+0x144>
    pRing->WrOff = WrOff;
   1a61c:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1a61e:	f1b9 0f00 	cmp.w	r9, #0
   1a622:	d086      	beq.n	1a532 <SEGGER_RTT_Write+0x3e>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a624:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1a626:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a628:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1a62c:	d8dc      	bhi.n	1a5e8 <SEGGER_RTT_Write+0xf4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a62e:	6a2a      	ldr	r2, [r5, #32]
   1a630:	4413      	add	r3, r2
   1a632:	3b01      	subs	r3, #1
   1a634:	1b1b      	subs	r3, r3, r4
   1a636:	e7d9      	b.n	1a5ec <SEGGER_RTT_Write+0xf8>
    pRing->WrOff = WrOff;
   1a638:	2400      	movs	r4, #0
   1a63a:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1a63c:	f1b9 0f00 	cmp.w	r9, #0
   1a640:	d1cd      	bne.n	1a5de <SEGGER_RTT_Write+0xea>
   1a642:	e776      	b.n	1a532 <SEGGER_RTT_Write+0x3e>
  RdOff = pRing->RdOff;
   1a644:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a646:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1a64a:	455e      	cmp	r6, fp
   1a64c:	d91d      	bls.n	1a68a <SEGGER_RTT_Write+0x196>
    r = RdOff - WrOff - 1u;
   1a64e:	3e01      	subs	r6, #1
   1a650:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a654:	6a2d      	ldr	r5, [r5, #32]
   1a656:	454e      	cmp	r6, r9
   1a658:	bf28      	it	cs
   1a65a:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1a65c:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1a660:	4296      	cmp	r6, r2
   1a662:	d21e      	bcs.n	1a6a2 <SEGGER_RTT_Write+0x1ae>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a664:	f108 0301 	add.w	r3, r8, #1
   1a668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a66c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1a670:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a672:	6858      	ldr	r0, [r3, #4]
   1a674:	4632      	mov	r2, r6
   1a676:	4651      	mov	r1, sl
   1a678:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1a67a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a67e:	f000 fa0d 	bl	1aa9c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1a682:	eb0b 0206 	add.w	r2, fp, r6
   1a686:	627a      	str	r2, [r7, #36]	; 0x24
   1a688:	e753      	b.n	1a532 <SEGGER_RTT_Write+0x3e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a68a:	6a2d      	ldr	r5, [r5, #32]
   1a68c:	442e      	add	r6, r5
   1a68e:	3e01      	subs	r6, #1
   1a690:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a694:	454e      	cmp	r6, r9
   1a696:	bf28      	it	cs
   1a698:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1a69a:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1a69e:	4296      	cmp	r6, r2
   1a6a0:	d3e0      	bcc.n	1a664 <SEGGER_RTT_Write+0x170>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a6a2:	f108 0901 	add.w	r9, r8, #1
   1a6a6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1a6aa:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1a6ae:	4651      	mov	r1, sl
   1a6b0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1a6b4:	9201      	str	r2, [sp, #4]
   1a6b6:	4458      	add	r0, fp
   1a6b8:	f000 f9f0 	bl	1aa9c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1a6bc:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a6be:	9a01      	ldr	r2, [sp, #4]
   1a6c0:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1a6c4:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1a6c6:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1a6c8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a6cc:	eb0a 0102 	add.w	r1, sl, r2
   1a6d0:	462a      	mov	r2, r5
   1a6d2:	f000 f9e3 	bl	1aa9c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a6d6:	627d      	str	r5, [r7, #36]	; 0x24
   1a6d8:	e72b      	b.n	1a532 <SEGGER_RTT_Write+0x3e>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a6da:	6878      	ldr	r0, [r7, #4]
   1a6dc:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1a6de:	44cb      	add	fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a6e0:	4632      	mov	r2, r6
   1a6e2:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1a6e4:	ebab 0505 	sub.w	r5, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a6e8:	f000 f9d8 	bl	1aa9c <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a6ec:	eb0a 0106 	add.w	r1, sl, r6
   1a6f0:	6878      	ldr	r0, [r7, #4]
   1a6f2:	462a      	mov	r2, r5
   1a6f4:	f000 f9d2 	bl	1aa9c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a6f8:	464e      	mov	r6, r9
   1a6fa:	6265      	str	r5, [r4, #36]	; 0x24
   1a6fc:	e719      	b.n	1a532 <SEGGER_RTT_Write+0x3e>
   1a6fe:	bf00      	nop
   1a700:	200014c0 	.word	0x200014c0
   1a704:	200012a4 	.word	0x200012a4
   1a708:	0001c588 	.word	0x0001c588
   1a70c:	20001294 	.word	0x20001294
   1a710:	0001c594 	.word	0x0001c594
   1a714:	0001c598 	.word	0x0001c598

0001a718 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INIT();
   1a71c:	4f83      	ldr	r7, [pc, #524]	; (1a92c <SEGGER_RTT_WriteString+0x214>)
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1a71e:	b085      	sub	sp, #20
   1a720:	4680      	mov	r8, r0
  unsigned Len;

  Len = STRLEN(s);
   1a722:	4608      	mov	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1a724:	468a      	mov	sl, r1
  Len = STRLEN(s);
   1a726:	f000 fa0b 	bl	1ab40 <strlen>
  INIT();
   1a72a:	783b      	ldrb	r3, [r7, #0]
  Len = STRLEN(s);
   1a72c:	4681      	mov	r9, r0
  INIT();
   1a72e:	b1eb      	cbz	r3, 1a76c <SEGGER_RTT_WriteString+0x54>
  switch (pRing->Flags) {
   1a730:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1a734:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1a738:	f04f 0b00 	mov.w	fp, #0
   1a73c:	f10d 000f 	add.w	r0, sp, #15
   1a740:	f88d b00f 	strb.w	fp, [sp, #15]
   1a744:	f7fe fe1e 	bl	19384 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1a748:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1a74a:	2e01      	cmp	r6, #1
   1a74c:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1a750:	f000 808d 	beq.w	1a86e <SEGGER_RTT_WriteString+0x156>
   1a754:	2e02      	cmp	r6, #2
   1a756:	d04f      	beq.n	1a7f8 <SEGGER_RTT_WriteString+0xe0>
   1a758:	b346      	cbz	r6, 1a7ac <SEGGER_RTT_WriteString+0x94>
   1a75a:	465e      	mov	r6, fp
  SEGGER_RTT_UNLOCK();
   1a75c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1a760:	f7fe fe36 	bl	193d0 <app_util_critical_region_exit>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
}
   1a764:	4630      	mov	r0, r6
   1a766:	b005      	add	sp, #20
   1a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a76c:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1a76e:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a770:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1a772:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1a774:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a776:	4b6e      	ldr	r3, [pc, #440]	; (1a930 <SEGGER_RTT_WriteString+0x218>)
  p->aUp[0].sName         = "Terminal";
   1a778:	496e      	ldr	r1, [pc, #440]	; (1a934 <SEGGER_RTT_WriteString+0x21c>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a77a:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a77c:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a780:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1a782:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a786:	4a6c      	ldr	r2, [pc, #432]	; (1a938 <SEGGER_RTT_WriteString+0x220>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a788:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1a78a:	2310      	movs	r3, #16
   1a78c:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1a78e:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1a790:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1a792:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1a794:	4969      	ldr	r1, [pc, #420]	; (1a93c <SEGGER_RTT_WriteString+0x224>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a796:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1a798:	1df8      	adds	r0, r7, #7
   1a79a:	f000 f9c9 	bl	1ab30 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1a79e:	4968      	ldr	r1, [pc, #416]	; (1a940 <SEGGER_RTT_WriteString+0x228>)
   1a7a0:	4638      	mov	r0, r7
   1a7a2:	f000 f9c5 	bl	1ab30 <strcpy>
  p->acID[6] = ' ';
   1a7a6:	2320      	movs	r3, #32
   1a7a8:	71bb      	strb	r3, [r7, #6]
}
   1a7aa:	e7c1      	b.n	1a730 <SEGGER_RTT_WriteString+0x18>
  RdOff = pRing->RdOff;
   1a7ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a7ae:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1a7b2:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a7b4:	bf9c      	itt	ls
   1a7b6:	6a2a      	ldrls	r2, [r5, #32]
   1a7b8:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1a7ba:	3b01      	subs	r3, #1
   1a7bc:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1a7c0:	4599      	cmp	r9, r3
   1a7c2:	d8cb      	bhi.n	1a75c <SEGGER_RTT_WriteString+0x44>
  Rem = pRing->SizeOfBuffer - WrOff;
   1a7c4:	4444      	add	r4, r8
   1a7c6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a7ca:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1a7ce:	6a25      	ldr	r5, [r4, #32]
   1a7d0:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a7d4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1a7d8:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a7da:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1a7de:	f080 8091 	bcs.w	1a904 <SEGGER_RTT_WriteString+0x1ec>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a7e2:	6878      	ldr	r0, [r7, #4]
   1a7e4:	4651      	mov	r1, sl
   1a7e6:	464a      	mov	r2, r9
   1a7e8:	4458      	add	r0, fp
   1a7ea:	f000 f957 	bl	1aa9c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1a7ee:	eb09 030b 	add.w	r3, r9, fp
   1a7f2:	6263      	str	r3, [r4, #36]	; 0x24
   1a7f4:	464e      	mov	r6, r9
   1a7f6:	e7b1      	b.n	1a75c <SEGGER_RTT_WriteString+0x44>
  WrOff = pRing->WrOff;
   1a7f8:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a7fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1a800:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a802:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1a806:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a808:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1a80a:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a80c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1a810:	d922      	bls.n	1a858 <SEGGER_RTT_WriteString+0x140>
   1a812:	6a29      	ldr	r1, [r5, #32]
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a814:	1b12      	subs	r2, r2, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a816:	454a      	cmp	r2, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a818:	eb07 0308 	add.w	r3, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a81c:	eba1 0b04 	sub.w	fp, r1, r4
   1a820:	bf28      	it	cs
   1a822:	464a      	movcs	r2, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a824:	4593      	cmp	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a826:	6858      	ldr	r0, [r3, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a828:	bf28      	it	cs
   1a82a:	4693      	movcs	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a82c:	4420      	add	r0, r4
   1a82e:	4651      	mov	r1, sl
   1a830:	465a      	mov	r2, fp
   1a832:	f000 f933 	bl	1aa9c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a836:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1a838:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1a83a:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1a83c:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1a83e:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1a842:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1a844:	d00d      	beq.n	1a862 <SEGGER_RTT_WriteString+0x14a>
    pRing->WrOff = WrOff;
   1a846:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1a848:	f1b9 0f00 	cmp.w	r9, #0
   1a84c:	d086      	beq.n	1a75c <SEGGER_RTT_WriteString+0x44>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a84e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1a850:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1a852:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1a856:	d8dc      	bhi.n	1a812 <SEGGER_RTT_WriteString+0xfa>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a858:	6a29      	ldr	r1, [r5, #32]
   1a85a:	185a      	adds	r2, r3, r1
   1a85c:	3a01      	subs	r2, #1
   1a85e:	1b12      	subs	r2, r2, r4
   1a860:	e7d9      	b.n	1a816 <SEGGER_RTT_WriteString+0xfe>
    pRing->WrOff = WrOff;
   1a862:	2400      	movs	r4, #0
   1a864:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1a866:	f1b9 0f00 	cmp.w	r9, #0
   1a86a:	d1cd      	bne.n	1a808 <SEGGER_RTT_WriteString+0xf0>
   1a86c:	e776      	b.n	1a75c <SEGGER_RTT_WriteString+0x44>
  RdOff = pRing->RdOff;
   1a86e:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a870:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1a874:	455e      	cmp	r6, fp
   1a876:	d91d      	bls.n	1a8b4 <SEGGER_RTT_WriteString+0x19c>
    r = RdOff - WrOff - 1u;
   1a878:	3e01      	subs	r6, #1
   1a87a:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a87e:	6a2d      	ldr	r5, [r5, #32]
   1a880:	454e      	cmp	r6, r9
   1a882:	bf28      	it	cs
   1a884:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1a886:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1a88a:	4296      	cmp	r6, r2
   1a88c:	d21e      	bcs.n	1a8cc <SEGGER_RTT_WriteString+0x1b4>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a88e:	f108 0301 	add.w	r3, r8, #1
   1a892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a896:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1a89a:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a89c:	6858      	ldr	r0, [r3, #4]
   1a89e:	4632      	mov	r2, r6
   1a8a0:	4651      	mov	r1, sl
   1a8a2:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1a8a4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a8a8:	f000 f8f8 	bl	1aa9c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1a8ac:	eb0b 0206 	add.w	r2, fp, r6
   1a8b0:	627a      	str	r2, [r7, #36]	; 0x24
   1a8b2:	e753      	b.n	1a75c <SEGGER_RTT_WriteString+0x44>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a8b4:	6a2d      	ldr	r5, [r5, #32]
   1a8b6:	442e      	add	r6, r5
   1a8b8:	3e01      	subs	r6, #1
   1a8ba:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a8be:	454e      	cmp	r6, r9
   1a8c0:	bf28      	it	cs
   1a8c2:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1a8c4:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1a8c8:	4296      	cmp	r6, r2
   1a8ca:	d3e0      	bcc.n	1a88e <SEGGER_RTT_WriteString+0x176>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a8cc:	f108 0901 	add.w	r9, r8, #1
   1a8d0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1a8d4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1a8d8:	4651      	mov	r1, sl
   1a8da:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1a8de:	9201      	str	r2, [sp, #4]
   1a8e0:	4458      	add	r0, fp
   1a8e2:	f000 f8db 	bl	1aa9c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1a8e6:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a8e8:	9a01      	ldr	r2, [sp, #4]
   1a8ea:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1a8ee:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1a8f0:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1a8f2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a8f6:	eb0a 0102 	add.w	r1, sl, r2
   1a8fa:	462a      	mov	r2, r5
   1a8fc:	f000 f8ce 	bl	1aa9c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a900:	627d      	str	r5, [r7, #36]	; 0x24
   1a902:	e72b      	b.n	1a75c <SEGGER_RTT_WriteString+0x44>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a904:	6878      	ldr	r0, [r7, #4]
   1a906:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1a908:	ebab 0b05 	sub.w	fp, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a90c:	4632      	mov	r2, r6
   1a90e:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1a910:	eb0b 0509 	add.w	r5, fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a914:	f000 f8c2 	bl	1aa9c <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a918:	eb0a 0106 	add.w	r1, sl, r6
   1a91c:	6878      	ldr	r0, [r7, #4]
   1a91e:	462a      	mov	r2, r5
   1a920:	f000 f8bc 	bl	1aa9c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a924:	464e      	mov	r6, r9
   1a926:	6265      	str	r5, [r4, #36]	; 0x24
   1a928:	e718      	b.n	1a75c <SEGGER_RTT_WriteString+0x44>
   1a92a:	bf00      	nop
   1a92c:	200014c0 	.word	0x200014c0
   1a930:	200012a4 	.word	0x200012a4
   1a934:	0001c588 	.word	0x0001c588
   1a938:	20001294 	.word	0x20001294
   1a93c:	0001c594 	.word	0x0001c594
   1a940:	0001c598 	.word	0x0001c598

0001a944 <nrf_sdh_is_enabled>:
}


bool nrf_sdh_is_enabled(void)
{
    return m_nrf_sdh_enabled;
   1a944:	4b01      	ldr	r3, [pc, #4]	; (1a94c <nrf_sdh_is_enabled+0x8>)
}
   1a946:	7818      	ldrb	r0, [r3, #0]
   1a948:	4770      	bx	lr
   1a94a:	bf00      	nop
   1a94c:	200014a4 	.word	0x200014a4

0001a950 <SWI2_IRQHandler>:


#if (NRF_SDH_DISPATCH_MODEL == NRF_SDH_DISPATCH_MODEL_INTERRUPT)

void SD_EVT_IRQHandler(void)
{
   1a950:	b500      	push	{lr}
   1a952:	b083      	sub	sp, #12
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1a954:	4908      	ldr	r1, [pc, #32]	; (1a978 <SWI2_IRQHandler+0x28>)
   1a956:	4668      	mov	r0, sp
   1a958:	f7fe fd60 	bl	1941c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1a95c:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1a95e:	b143      	cbz	r3, 1a972 <SWI2_IRQHandler+0x22>
        handler(p_observer->p_context);
   1a960:	e9d3 2000 	ldrd	r2, r0, [r3]
   1a964:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1a966:	4668      	mov	r0, sp
   1a968:	f7fe fd62 	bl	19430 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1a96c:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1a96e:	2b00      	cmp	r3, #0
   1a970:	d1f6      	bne.n	1a960 <SWI2_IRQHandler+0x10>
    nrf_sdh_evts_poll();
}
   1a972:	b003      	add	sp, #12
   1a974:	f85d fb04 	ldr.w	pc, [sp], #4
   1a978:	0001c5a0 	.word	0x0001c5a0

0001a97c <sd_ble_evt_get>:
 * @retval ::NRF_SUCCESS Event pulled and stored into the supplied buffer.
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_NOT_FOUND No events ready to be pulled.
 * @retval ::NRF_ERROR_DATA_SIZE Event ready but could not fit into the supplied buffer.
 */
SVCALL(SD_BLE_EVT_GET, uint32_t, sd_ble_evt_get(uint8_t *p_dest, uint16_t *p_len));
   1a97c:	df61      	svc	97	; 0x61
   1a97e:	4770      	bx	lr

0001a980 <nrf_sdh_ble_evts_poll>:
{
    UNUSED_VARIABLE(p_context);

    ret_code_t ret_code;

    if (!m_stack_is_enabled)
   1a980:	4b14      	ldr	r3, [pc, #80]	; (1a9d4 <nrf_sdh_ble_evts_poll+0x54>)
   1a982:	781b      	ldrb	r3, [r3, #0]
   1a984:	b32b      	cbz	r3, 1a9d2 <nrf_sdh_ble_evts_poll+0x52>
{
   1a986:	b530      	push	{r4, r5, lr}

        NRF_LOG_DEBUG("BLE event: 0x%x.", p_ble_evt->header.evt_id);

        // Forward the event to BLE observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1a988:	4d13      	ldr	r5, [pc, #76]	; (1a9d8 <nrf_sdh_ble_evts_poll+0x58>)
{
   1a98a:	b091      	sub	sp, #68	; 0x44
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1a98c:	2434      	movs	r4, #52	; 0x34
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1a98e:	f10d 0102 	add.w	r1, sp, #2
   1a992:	a803      	add	r0, sp, #12
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1a994:	f8ad 4002 	strh.w	r4, [sp, #2]
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1a998:	f7ff fff0 	bl	1a97c <sd_ble_evt_get>
        if (ret_code != NRF_SUCCESS)
   1a99c:	b988      	cbnz	r0, 1a9c2 <nrf_sdh_ble_evts_poll+0x42>
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1a99e:	4629      	mov	r1, r5
   1a9a0:	a801      	add	r0, sp, #4
   1a9a2:	f7fe fd3b 	bl	1941c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1a9a6:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1a9a8:	2b00      	cmp	r3, #0
   1a9aa:	d0f0      	beq.n	1a98e <nrf_sdh_ble_evts_poll+0xe>
            nrf_sdh_ble_evt_handler_t    handler;

            p_observer = (nrf_sdh_ble_evt_observer_t *)nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(p_ble_evt, p_observer->p_context);
   1a9ac:	e9d3 2100 	ldrd	r2, r1, [r3]
   1a9b0:	a803      	add	r0, sp, #12
   1a9b2:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1a9b4:	a801      	add	r0, sp, #4
   1a9b6:	f7fe fd3b 	bl	19430 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1a9ba:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1a9bc:	2b00      	cmp	r3, #0
   1a9be:	d1f5      	bne.n	1a9ac <nrf_sdh_ble_evts_poll+0x2c>
   1a9c0:	e7e5      	b.n	1a98e <nrf_sdh_ble_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1a9c2:	2805      	cmp	r0, #5
   1a9c4:	d101      	bne.n	1a9ca <nrf_sdh_ble_evts_poll+0x4a>
    {
        APP_ERROR_HANDLER(ret_code);
    }
}
   1a9c6:	b011      	add	sp, #68	; 0x44
   1a9c8:	bd30      	pop	{r4, r5, pc}
        APP_ERROR_HANDLER(ret_code);
   1a9ca:	f7fe fcab 	bl	19324 <app_error_handler_bare>
}
   1a9ce:	b011      	add	sp, #68	; 0x44
   1a9d0:	bd30      	pop	{r4, r5, pc}
   1a9d2:	4770      	bx	lr
   1a9d4:	200014a5 	.word	0x200014a5
   1a9d8:	0001c5ac 	.word	0x0001c5ac

0001a9dc <sd_evt_get>:
 * @param[out] p_evt_id Set to one of the values in @ref NRF_SOC_EVTS, if any events are pending.
 *
 * @retval ::NRF_SUCCESS An event was pending. The event id is written in the p_evt_id parameter.
 * @retval ::NRF_ERROR_NOT_FOUND No pending events.
 */
SVCALL(SD_EVT_GET, uint32_t, sd_evt_get(uint32_t * p_evt_id));
   1a9dc:	df4b      	svc	75	; 0x4b
   1a9de:	4770      	bx	lr

0001a9e0 <nrf_sdh_soc_evts_poll>:
/**@brief   Function for polling SoC events.
 *
 * @param[in]   p_context   Context of the observer.
 */
static void nrf_sdh_soc_evts_poll(void * p_context)
{
   1a9e0:	b510      	push	{r4, lr}

        NRF_LOG_DEBUG("SoC event: 0x%x.", evt_id);

        // Forward the event to SoC observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1a9e2:	4c11      	ldr	r4, [pc, #68]	; (1aa28 <nrf_sdh_soc_evts_poll+0x48>)
{
   1a9e4:	b084      	sub	sp, #16
        ret_code = sd_evt_get(&evt_id);
   1a9e6:	a801      	add	r0, sp, #4
   1a9e8:	f7ff fff8 	bl	1a9dc <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1a9ec:	b9a8      	cbnz	r0, 1aa1a <nrf_sdh_soc_evts_poll+0x3a>
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1a9ee:	4621      	mov	r1, r4
   1a9f0:	a802      	add	r0, sp, #8
   1a9f2:	f7fe fd13 	bl	1941c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1a9f6:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d0f4      	beq.n	1a9e6 <nrf_sdh_soc_evts_poll+0x6>
            nrf_sdh_soc_evt_handler_t    handler;

            p_observer = (nrf_sdh_soc_evt_observer_t *) nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(evt_id, p_observer->p_context);
   1a9fc:	e9d3 2100 	ldrd	r2, r1, [r3]
   1aa00:	9801      	ldr	r0, [sp, #4]
   1aa02:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1aa04:	a802      	add	r0, sp, #8
   1aa06:	f7fe fd13 	bl	19430 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1aa0a:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1aa0c:	2b00      	cmp	r3, #0
   1aa0e:	d1f5      	bne.n	1a9fc <nrf_sdh_soc_evts_poll+0x1c>
        ret_code = sd_evt_get(&evt_id);
   1aa10:	a801      	add	r0, sp, #4
   1aa12:	f7ff ffe3 	bl	1a9dc <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1aa16:	2800      	cmp	r0, #0
   1aa18:	d0e9      	beq.n	1a9ee <nrf_sdh_soc_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1aa1a:	2805      	cmp	r0, #5
   1aa1c:	d001      	beq.n	1aa22 <nrf_sdh_soc_evts_poll+0x42>
    {
        APP_ERROR_HANDLER(ret_code);
   1aa1e:	f7fe fc81 	bl	19324 <app_error_handler_bare>
    }
}
   1aa22:	b004      	add	sp, #16
   1aa24:	bd10      	pop	{r4, pc}
   1aa26:	bf00      	nop
   1aa28:	0001c5b8 	.word	0x0001c5b8

0001aa2c <exit>:
   1aa2c:	b508      	push	{r3, lr}
   1aa2e:	4b07      	ldr	r3, [pc, #28]	; (1aa4c <exit+0x20>)
   1aa30:	4604      	mov	r4, r0
   1aa32:	b113      	cbz	r3, 1aa3a <exit+0xe>
   1aa34:	2100      	movs	r1, #0
   1aa36:	f3af 8000 	nop.w
   1aa3a:	4b05      	ldr	r3, [pc, #20]	; (1aa50 <exit+0x24>)
   1aa3c:	6818      	ldr	r0, [r3, #0]
   1aa3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1aa40:	b103      	cbz	r3, 1aa44 <exit+0x18>
   1aa42:	4798      	blx	r3
   1aa44:	4620      	mov	r0, r4
   1aa46:	f000 fcdf 	bl	1b408 <_exit>
   1aa4a:	bf00      	nop
   1aa4c:	00000000 	.word	0x00000000
   1aa50:	0001c5c4 	.word	0x0001c5c4

0001aa54 <__libc_init_array>:
   1aa54:	b570      	push	{r4, r5, r6, lr}
   1aa56:	4d0d      	ldr	r5, [pc, #52]	; (1aa8c <__libc_init_array+0x38>)
   1aa58:	4c0d      	ldr	r4, [pc, #52]	; (1aa90 <__libc_init_array+0x3c>)
   1aa5a:	1b64      	subs	r4, r4, r5
   1aa5c:	10a4      	asrs	r4, r4, #2
   1aa5e:	2600      	movs	r6, #0
   1aa60:	42a6      	cmp	r6, r4
   1aa62:	d109      	bne.n	1aa78 <__libc_init_array+0x24>
   1aa64:	4d0b      	ldr	r5, [pc, #44]	; (1aa94 <__libc_init_array+0x40>)
   1aa66:	4c0c      	ldr	r4, [pc, #48]	; (1aa98 <__libc_init_array+0x44>)
   1aa68:	f001 fc7e 	bl	1c368 <_init>
   1aa6c:	1b64      	subs	r4, r4, r5
   1aa6e:	10a4      	asrs	r4, r4, #2
   1aa70:	2600      	movs	r6, #0
   1aa72:	42a6      	cmp	r6, r4
   1aa74:	d105      	bne.n	1aa82 <__libc_init_array+0x2e>
   1aa76:	bd70      	pop	{r4, r5, r6, pc}
   1aa78:	f855 3b04 	ldr.w	r3, [r5], #4
   1aa7c:	4798      	blx	r3
   1aa7e:	3601      	adds	r6, #1
   1aa80:	e7ee      	b.n	1aa60 <__libc_init_array+0xc>
   1aa82:	f855 3b04 	ldr.w	r3, [r5], #4
   1aa86:	4798      	blx	r3
   1aa88:	3601      	adds	r6, #1
   1aa8a:	e7f2      	b.n	1aa72 <__libc_init_array+0x1e>
   1aa8c:	2000118c 	.word	0x2000118c
   1aa90:	2000118c 	.word	0x2000118c
   1aa94:	2000118c 	.word	0x2000118c
   1aa98:	20001194 	.word	0x20001194

0001aa9c <memcpy>:
   1aa9c:	440a      	add	r2, r1
   1aa9e:	4291      	cmp	r1, r2
   1aaa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1aaa4:	d100      	bne.n	1aaa8 <memcpy+0xc>
   1aaa6:	4770      	bx	lr
   1aaa8:	b510      	push	{r4, lr}
   1aaaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1aaae:	f803 4f01 	strb.w	r4, [r3, #1]!
   1aab2:	4291      	cmp	r1, r2
   1aab4:	d1f9      	bne.n	1aaaa <memcpy+0xe>
   1aab6:	bd10      	pop	{r4, pc}

0001aab8 <memset>:
   1aab8:	4402      	add	r2, r0
   1aaba:	4603      	mov	r3, r0
   1aabc:	4293      	cmp	r3, r2
   1aabe:	d100      	bne.n	1aac2 <memset+0xa>
   1aac0:	4770      	bx	lr
   1aac2:	f803 1b01 	strb.w	r1, [r3], #1
   1aac6:	e7f9      	b.n	1aabc <memset+0x4>

0001aac8 <sniprintf>:
   1aac8:	b40c      	push	{r2, r3}
   1aaca:	b530      	push	{r4, r5, lr}
   1aacc:	4b17      	ldr	r3, [pc, #92]	; (1ab2c <sniprintf+0x64>)
   1aace:	1e0c      	subs	r4, r1, #0
   1aad0:	681d      	ldr	r5, [r3, #0]
   1aad2:	b09d      	sub	sp, #116	; 0x74
   1aad4:	da08      	bge.n	1aae8 <sniprintf+0x20>
   1aad6:	238b      	movs	r3, #139	; 0x8b
   1aad8:	602b      	str	r3, [r5, #0]
   1aada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aade:	b01d      	add	sp, #116	; 0x74
   1aae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1aae4:	b002      	add	sp, #8
   1aae6:	4770      	bx	lr
   1aae8:	f44f 7302 	mov.w	r3, #520	; 0x208
   1aaec:	f8ad 3014 	strh.w	r3, [sp, #20]
   1aaf0:	bf14      	ite	ne
   1aaf2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1aaf6:	4623      	moveq	r3, r4
   1aaf8:	9304      	str	r3, [sp, #16]
   1aafa:	9307      	str	r3, [sp, #28]
   1aafc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab00:	9002      	str	r0, [sp, #8]
   1ab02:	9006      	str	r0, [sp, #24]
   1ab04:	f8ad 3016 	strh.w	r3, [sp, #22]
   1ab08:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1ab0a:	ab21      	add	r3, sp, #132	; 0x84
   1ab0c:	a902      	add	r1, sp, #8
   1ab0e:	4628      	mov	r0, r5
   1ab10:	9301      	str	r3, [sp, #4]
   1ab12:	f000 f879 	bl	1ac08 <_svfiprintf_r>
   1ab16:	1c43      	adds	r3, r0, #1
   1ab18:	bfbc      	itt	lt
   1ab1a:	238b      	movlt	r3, #139	; 0x8b
   1ab1c:	602b      	strlt	r3, [r5, #0]
   1ab1e:	2c00      	cmp	r4, #0
   1ab20:	d0dd      	beq.n	1aade <sniprintf+0x16>
   1ab22:	9b02      	ldr	r3, [sp, #8]
   1ab24:	2200      	movs	r2, #0
   1ab26:	701a      	strb	r2, [r3, #0]
   1ab28:	e7d9      	b.n	1aade <sniprintf+0x16>
   1ab2a:	bf00      	nop
   1ab2c:	20001128 	.word	0x20001128

0001ab30 <strcpy>:
   1ab30:	4603      	mov	r3, r0
   1ab32:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ab36:	f803 2b01 	strb.w	r2, [r3], #1
   1ab3a:	2a00      	cmp	r2, #0
   1ab3c:	d1f9      	bne.n	1ab32 <strcpy+0x2>
   1ab3e:	4770      	bx	lr

0001ab40 <strlen>:
   1ab40:	4603      	mov	r3, r0
   1ab42:	f813 2b01 	ldrb.w	r2, [r3], #1
   1ab46:	2a00      	cmp	r2, #0
   1ab48:	d1fb      	bne.n	1ab42 <strlen+0x2>
   1ab4a:	1a18      	subs	r0, r3, r0
   1ab4c:	3801      	subs	r0, #1
   1ab4e:	4770      	bx	lr

0001ab50 <__ssputs_r>:
   1ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab54:	688e      	ldr	r6, [r1, #8]
   1ab56:	429e      	cmp	r6, r3
   1ab58:	4682      	mov	sl, r0
   1ab5a:	460c      	mov	r4, r1
   1ab5c:	4690      	mov	r8, r2
   1ab5e:	461f      	mov	r7, r3
   1ab60:	d838      	bhi.n	1abd4 <__ssputs_r+0x84>
   1ab62:	898a      	ldrh	r2, [r1, #12]
   1ab64:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1ab68:	d032      	beq.n	1abd0 <__ssputs_r+0x80>
   1ab6a:	6825      	ldr	r5, [r4, #0]
   1ab6c:	6909      	ldr	r1, [r1, #16]
   1ab6e:	eba5 0901 	sub.w	r9, r5, r1
   1ab72:	6965      	ldr	r5, [r4, #20]
   1ab74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ab78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1ab7c:	3301      	adds	r3, #1
   1ab7e:	444b      	add	r3, r9
   1ab80:	106d      	asrs	r5, r5, #1
   1ab82:	429d      	cmp	r5, r3
   1ab84:	bf38      	it	cc
   1ab86:	461d      	movcc	r5, r3
   1ab88:	0553      	lsls	r3, r2, #21
   1ab8a:	d531      	bpl.n	1abf0 <__ssputs_r+0xa0>
   1ab8c:	4629      	mov	r1, r5
   1ab8e:	f000 fb87 	bl	1b2a0 <_malloc_r>
   1ab92:	4606      	mov	r6, r0
   1ab94:	b950      	cbnz	r0, 1abac <__ssputs_r+0x5c>
   1ab96:	230c      	movs	r3, #12
   1ab98:	f8ca 3000 	str.w	r3, [sl]
   1ab9c:	89a3      	ldrh	r3, [r4, #12]
   1ab9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1aba2:	81a3      	strh	r3, [r4, #12]
   1aba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1abac:	6921      	ldr	r1, [r4, #16]
   1abae:	464a      	mov	r2, r9
   1abb0:	f7ff ff74 	bl	1aa9c <memcpy>
   1abb4:	89a3      	ldrh	r3, [r4, #12]
   1abb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1abba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1abbe:	81a3      	strh	r3, [r4, #12]
   1abc0:	6126      	str	r6, [r4, #16]
   1abc2:	6165      	str	r5, [r4, #20]
   1abc4:	444e      	add	r6, r9
   1abc6:	eba5 0509 	sub.w	r5, r5, r9
   1abca:	6026      	str	r6, [r4, #0]
   1abcc:	60a5      	str	r5, [r4, #8]
   1abce:	463e      	mov	r6, r7
   1abd0:	42be      	cmp	r6, r7
   1abd2:	d900      	bls.n	1abd6 <__ssputs_r+0x86>
   1abd4:	463e      	mov	r6, r7
   1abd6:	4632      	mov	r2, r6
   1abd8:	6820      	ldr	r0, [r4, #0]
   1abda:	4641      	mov	r1, r8
   1abdc:	f000 faf8 	bl	1b1d0 <memmove>
   1abe0:	68a3      	ldr	r3, [r4, #8]
   1abe2:	6822      	ldr	r2, [r4, #0]
   1abe4:	1b9b      	subs	r3, r3, r6
   1abe6:	4432      	add	r2, r6
   1abe8:	60a3      	str	r3, [r4, #8]
   1abea:	6022      	str	r2, [r4, #0]
   1abec:	2000      	movs	r0, #0
   1abee:	e7db      	b.n	1aba8 <__ssputs_r+0x58>
   1abf0:	462a      	mov	r2, r5
   1abf2:	f000 fbaf 	bl	1b354 <_realloc_r>
   1abf6:	4606      	mov	r6, r0
   1abf8:	2800      	cmp	r0, #0
   1abfa:	d1e1      	bne.n	1abc0 <__ssputs_r+0x70>
   1abfc:	6921      	ldr	r1, [r4, #16]
   1abfe:	4650      	mov	r0, sl
   1ac00:	f000 fb00 	bl	1b204 <_free_r>
   1ac04:	e7c7      	b.n	1ab96 <__ssputs_r+0x46>
	...

0001ac08 <_svfiprintf_r>:
   1ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac0c:	4698      	mov	r8, r3
   1ac0e:	898b      	ldrh	r3, [r1, #12]
   1ac10:	061b      	lsls	r3, r3, #24
   1ac12:	b09d      	sub	sp, #116	; 0x74
   1ac14:	4607      	mov	r7, r0
   1ac16:	460d      	mov	r5, r1
   1ac18:	4614      	mov	r4, r2
   1ac1a:	d50e      	bpl.n	1ac3a <_svfiprintf_r+0x32>
   1ac1c:	690b      	ldr	r3, [r1, #16]
   1ac1e:	b963      	cbnz	r3, 1ac3a <_svfiprintf_r+0x32>
   1ac20:	2140      	movs	r1, #64	; 0x40
   1ac22:	f000 fb3d 	bl	1b2a0 <_malloc_r>
   1ac26:	6028      	str	r0, [r5, #0]
   1ac28:	6128      	str	r0, [r5, #16]
   1ac2a:	b920      	cbnz	r0, 1ac36 <_svfiprintf_r+0x2e>
   1ac2c:	230c      	movs	r3, #12
   1ac2e:	603b      	str	r3, [r7, #0]
   1ac30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac34:	e0d1      	b.n	1adda <_svfiprintf_r+0x1d2>
   1ac36:	2340      	movs	r3, #64	; 0x40
   1ac38:	616b      	str	r3, [r5, #20]
   1ac3a:	2300      	movs	r3, #0
   1ac3c:	9309      	str	r3, [sp, #36]	; 0x24
   1ac3e:	2320      	movs	r3, #32
   1ac40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1ac44:	f8cd 800c 	str.w	r8, [sp, #12]
   1ac48:	2330      	movs	r3, #48	; 0x30
   1ac4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1adf4 <_svfiprintf_r+0x1ec>
   1ac4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1ac52:	f04f 0901 	mov.w	r9, #1
   1ac56:	4623      	mov	r3, r4
   1ac58:	469a      	mov	sl, r3
   1ac5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1ac5e:	b10a      	cbz	r2, 1ac64 <_svfiprintf_r+0x5c>
   1ac60:	2a25      	cmp	r2, #37	; 0x25
   1ac62:	d1f9      	bne.n	1ac58 <_svfiprintf_r+0x50>
   1ac64:	ebba 0b04 	subs.w	fp, sl, r4
   1ac68:	d00b      	beq.n	1ac82 <_svfiprintf_r+0x7a>
   1ac6a:	465b      	mov	r3, fp
   1ac6c:	4622      	mov	r2, r4
   1ac6e:	4629      	mov	r1, r5
   1ac70:	4638      	mov	r0, r7
   1ac72:	f7ff ff6d 	bl	1ab50 <__ssputs_r>
   1ac76:	3001      	adds	r0, #1
   1ac78:	f000 80aa 	beq.w	1add0 <_svfiprintf_r+0x1c8>
   1ac7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ac7e:	445a      	add	r2, fp
   1ac80:	9209      	str	r2, [sp, #36]	; 0x24
   1ac82:	f89a 3000 	ldrb.w	r3, [sl]
   1ac86:	2b00      	cmp	r3, #0
   1ac88:	f000 80a2 	beq.w	1add0 <_svfiprintf_r+0x1c8>
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac92:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1ac96:	f10a 0a01 	add.w	sl, sl, #1
   1ac9a:	9304      	str	r3, [sp, #16]
   1ac9c:	9307      	str	r3, [sp, #28]
   1ac9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1aca2:	931a      	str	r3, [sp, #104]	; 0x68
   1aca4:	4654      	mov	r4, sl
   1aca6:	2205      	movs	r2, #5
   1aca8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1acac:	4851      	ldr	r0, [pc, #324]	; (1adf4 <_svfiprintf_r+0x1ec>)
   1acae:	f000 fa3f 	bl	1b130 <memchr>
   1acb2:	9a04      	ldr	r2, [sp, #16]
   1acb4:	b9d8      	cbnz	r0, 1acee <_svfiprintf_r+0xe6>
   1acb6:	06d0      	lsls	r0, r2, #27
   1acb8:	bf44      	itt	mi
   1acba:	2320      	movmi	r3, #32
   1acbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1acc0:	0711      	lsls	r1, r2, #28
   1acc2:	bf44      	itt	mi
   1acc4:	232b      	movmi	r3, #43	; 0x2b
   1acc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1acca:	f89a 3000 	ldrb.w	r3, [sl]
   1acce:	2b2a      	cmp	r3, #42	; 0x2a
   1acd0:	d015      	beq.n	1acfe <_svfiprintf_r+0xf6>
   1acd2:	9a07      	ldr	r2, [sp, #28]
   1acd4:	4654      	mov	r4, sl
   1acd6:	2000      	movs	r0, #0
   1acd8:	f04f 0c0a 	mov.w	ip, #10
   1acdc:	4621      	mov	r1, r4
   1acde:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ace2:	3b30      	subs	r3, #48	; 0x30
   1ace4:	2b09      	cmp	r3, #9
   1ace6:	d94e      	bls.n	1ad86 <_svfiprintf_r+0x17e>
   1ace8:	b1b0      	cbz	r0, 1ad18 <_svfiprintf_r+0x110>
   1acea:	9207      	str	r2, [sp, #28]
   1acec:	e014      	b.n	1ad18 <_svfiprintf_r+0x110>
   1acee:	eba0 0308 	sub.w	r3, r0, r8
   1acf2:	fa09 f303 	lsl.w	r3, r9, r3
   1acf6:	4313      	orrs	r3, r2
   1acf8:	9304      	str	r3, [sp, #16]
   1acfa:	46a2      	mov	sl, r4
   1acfc:	e7d2      	b.n	1aca4 <_svfiprintf_r+0x9c>
   1acfe:	9b03      	ldr	r3, [sp, #12]
   1ad00:	1d19      	adds	r1, r3, #4
   1ad02:	681b      	ldr	r3, [r3, #0]
   1ad04:	9103      	str	r1, [sp, #12]
   1ad06:	2b00      	cmp	r3, #0
   1ad08:	bfbb      	ittet	lt
   1ad0a:	425b      	neglt	r3, r3
   1ad0c:	f042 0202 	orrlt.w	r2, r2, #2
   1ad10:	9307      	strge	r3, [sp, #28]
   1ad12:	9307      	strlt	r3, [sp, #28]
   1ad14:	bfb8      	it	lt
   1ad16:	9204      	strlt	r2, [sp, #16]
   1ad18:	7823      	ldrb	r3, [r4, #0]
   1ad1a:	2b2e      	cmp	r3, #46	; 0x2e
   1ad1c:	d10c      	bne.n	1ad38 <_svfiprintf_r+0x130>
   1ad1e:	7863      	ldrb	r3, [r4, #1]
   1ad20:	2b2a      	cmp	r3, #42	; 0x2a
   1ad22:	d135      	bne.n	1ad90 <_svfiprintf_r+0x188>
   1ad24:	9b03      	ldr	r3, [sp, #12]
   1ad26:	1d1a      	adds	r2, r3, #4
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	9203      	str	r2, [sp, #12]
   1ad2c:	2b00      	cmp	r3, #0
   1ad2e:	bfb8      	it	lt
   1ad30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1ad34:	3402      	adds	r4, #2
   1ad36:	9305      	str	r3, [sp, #20]
   1ad38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1ae04 <_svfiprintf_r+0x1fc>
   1ad3c:	7821      	ldrb	r1, [r4, #0]
   1ad3e:	2203      	movs	r2, #3
   1ad40:	4650      	mov	r0, sl
   1ad42:	f000 f9f5 	bl	1b130 <memchr>
   1ad46:	b140      	cbz	r0, 1ad5a <_svfiprintf_r+0x152>
   1ad48:	2340      	movs	r3, #64	; 0x40
   1ad4a:	eba0 000a 	sub.w	r0, r0, sl
   1ad4e:	fa03 f000 	lsl.w	r0, r3, r0
   1ad52:	9b04      	ldr	r3, [sp, #16]
   1ad54:	4303      	orrs	r3, r0
   1ad56:	3401      	adds	r4, #1
   1ad58:	9304      	str	r3, [sp, #16]
   1ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ad5e:	4826      	ldr	r0, [pc, #152]	; (1adf8 <_svfiprintf_r+0x1f0>)
   1ad60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1ad64:	2206      	movs	r2, #6
   1ad66:	f000 f9e3 	bl	1b130 <memchr>
   1ad6a:	2800      	cmp	r0, #0
   1ad6c:	d038      	beq.n	1ade0 <_svfiprintf_r+0x1d8>
   1ad6e:	4b23      	ldr	r3, [pc, #140]	; (1adfc <_svfiprintf_r+0x1f4>)
   1ad70:	bb1b      	cbnz	r3, 1adba <_svfiprintf_r+0x1b2>
   1ad72:	9b03      	ldr	r3, [sp, #12]
   1ad74:	3307      	adds	r3, #7
   1ad76:	f023 0307 	bic.w	r3, r3, #7
   1ad7a:	3308      	adds	r3, #8
   1ad7c:	9303      	str	r3, [sp, #12]
   1ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ad80:	4433      	add	r3, r6
   1ad82:	9309      	str	r3, [sp, #36]	; 0x24
   1ad84:	e767      	b.n	1ac56 <_svfiprintf_r+0x4e>
   1ad86:	fb0c 3202 	mla	r2, ip, r2, r3
   1ad8a:	460c      	mov	r4, r1
   1ad8c:	2001      	movs	r0, #1
   1ad8e:	e7a5      	b.n	1acdc <_svfiprintf_r+0xd4>
   1ad90:	2300      	movs	r3, #0
   1ad92:	3401      	adds	r4, #1
   1ad94:	9305      	str	r3, [sp, #20]
   1ad96:	4619      	mov	r1, r3
   1ad98:	f04f 0c0a 	mov.w	ip, #10
   1ad9c:	4620      	mov	r0, r4
   1ad9e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1ada2:	3a30      	subs	r2, #48	; 0x30
   1ada4:	2a09      	cmp	r2, #9
   1ada6:	d903      	bls.n	1adb0 <_svfiprintf_r+0x1a8>
   1ada8:	2b00      	cmp	r3, #0
   1adaa:	d0c5      	beq.n	1ad38 <_svfiprintf_r+0x130>
   1adac:	9105      	str	r1, [sp, #20]
   1adae:	e7c3      	b.n	1ad38 <_svfiprintf_r+0x130>
   1adb0:	fb0c 2101 	mla	r1, ip, r1, r2
   1adb4:	4604      	mov	r4, r0
   1adb6:	2301      	movs	r3, #1
   1adb8:	e7f0      	b.n	1ad9c <_svfiprintf_r+0x194>
   1adba:	ab03      	add	r3, sp, #12
   1adbc:	9300      	str	r3, [sp, #0]
   1adbe:	462a      	mov	r2, r5
   1adc0:	4b0f      	ldr	r3, [pc, #60]	; (1ae00 <_svfiprintf_r+0x1f8>)
   1adc2:	a904      	add	r1, sp, #16
   1adc4:	4638      	mov	r0, r7
   1adc6:	f3af 8000 	nop.w
   1adca:	1c42      	adds	r2, r0, #1
   1adcc:	4606      	mov	r6, r0
   1adce:	d1d6      	bne.n	1ad7e <_svfiprintf_r+0x176>
   1add0:	89ab      	ldrh	r3, [r5, #12]
   1add2:	065b      	lsls	r3, r3, #25
   1add4:	f53f af2c 	bmi.w	1ac30 <_svfiprintf_r+0x28>
   1add8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1adda:	b01d      	add	sp, #116	; 0x74
   1addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ade0:	ab03      	add	r3, sp, #12
   1ade2:	9300      	str	r3, [sp, #0]
   1ade4:	462a      	mov	r2, r5
   1ade6:	4b06      	ldr	r3, [pc, #24]	; (1ae00 <_svfiprintf_r+0x1f8>)
   1ade8:	a904      	add	r1, sp, #16
   1adea:	4638      	mov	r0, r7
   1adec:	f000 f87a 	bl	1aee4 <_printf_i>
   1adf0:	e7eb      	b.n	1adca <_svfiprintf_r+0x1c2>
   1adf2:	bf00      	nop
   1adf4:	0001c5c8 	.word	0x0001c5c8
   1adf8:	0001c5d2 	.word	0x0001c5d2
   1adfc:	00000000 	.word	0x00000000
   1ae00:	0001ab51 	.word	0x0001ab51
   1ae04:	0001c5ce 	.word	0x0001c5ce

0001ae08 <_printf_common>:
   1ae08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae0c:	4616      	mov	r6, r2
   1ae0e:	4699      	mov	r9, r3
   1ae10:	688a      	ldr	r2, [r1, #8]
   1ae12:	690b      	ldr	r3, [r1, #16]
   1ae14:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1ae18:	4293      	cmp	r3, r2
   1ae1a:	bfb8      	it	lt
   1ae1c:	4613      	movlt	r3, r2
   1ae1e:	6033      	str	r3, [r6, #0]
   1ae20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1ae24:	4607      	mov	r7, r0
   1ae26:	460c      	mov	r4, r1
   1ae28:	b10a      	cbz	r2, 1ae2e <_printf_common+0x26>
   1ae2a:	3301      	adds	r3, #1
   1ae2c:	6033      	str	r3, [r6, #0]
   1ae2e:	6823      	ldr	r3, [r4, #0]
   1ae30:	0699      	lsls	r1, r3, #26
   1ae32:	bf42      	ittt	mi
   1ae34:	6833      	ldrmi	r3, [r6, #0]
   1ae36:	3302      	addmi	r3, #2
   1ae38:	6033      	strmi	r3, [r6, #0]
   1ae3a:	6825      	ldr	r5, [r4, #0]
   1ae3c:	f015 0506 	ands.w	r5, r5, #6
   1ae40:	d106      	bne.n	1ae50 <_printf_common+0x48>
   1ae42:	f104 0a19 	add.w	sl, r4, #25
   1ae46:	68e3      	ldr	r3, [r4, #12]
   1ae48:	6832      	ldr	r2, [r6, #0]
   1ae4a:	1a9b      	subs	r3, r3, r2
   1ae4c:	42ab      	cmp	r3, r5
   1ae4e:	dc26      	bgt.n	1ae9e <_printf_common+0x96>
   1ae50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1ae54:	1e13      	subs	r3, r2, #0
   1ae56:	6822      	ldr	r2, [r4, #0]
   1ae58:	bf18      	it	ne
   1ae5a:	2301      	movne	r3, #1
   1ae5c:	0692      	lsls	r2, r2, #26
   1ae5e:	d42b      	bmi.n	1aeb8 <_printf_common+0xb0>
   1ae60:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1ae64:	4649      	mov	r1, r9
   1ae66:	4638      	mov	r0, r7
   1ae68:	47c0      	blx	r8
   1ae6a:	3001      	adds	r0, #1
   1ae6c:	d01e      	beq.n	1aeac <_printf_common+0xa4>
   1ae6e:	6823      	ldr	r3, [r4, #0]
   1ae70:	68e5      	ldr	r5, [r4, #12]
   1ae72:	6832      	ldr	r2, [r6, #0]
   1ae74:	f003 0306 	and.w	r3, r3, #6
   1ae78:	2b04      	cmp	r3, #4
   1ae7a:	bf08      	it	eq
   1ae7c:	1aad      	subeq	r5, r5, r2
   1ae7e:	68a3      	ldr	r3, [r4, #8]
   1ae80:	6922      	ldr	r2, [r4, #16]
   1ae82:	bf0c      	ite	eq
   1ae84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1ae88:	2500      	movne	r5, #0
   1ae8a:	4293      	cmp	r3, r2
   1ae8c:	bfc4      	itt	gt
   1ae8e:	1a9b      	subgt	r3, r3, r2
   1ae90:	18ed      	addgt	r5, r5, r3
   1ae92:	2600      	movs	r6, #0
   1ae94:	341a      	adds	r4, #26
   1ae96:	42b5      	cmp	r5, r6
   1ae98:	d11a      	bne.n	1aed0 <_printf_common+0xc8>
   1ae9a:	2000      	movs	r0, #0
   1ae9c:	e008      	b.n	1aeb0 <_printf_common+0xa8>
   1ae9e:	2301      	movs	r3, #1
   1aea0:	4652      	mov	r2, sl
   1aea2:	4649      	mov	r1, r9
   1aea4:	4638      	mov	r0, r7
   1aea6:	47c0      	blx	r8
   1aea8:	3001      	adds	r0, #1
   1aeaa:	d103      	bne.n	1aeb4 <_printf_common+0xac>
   1aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aeb4:	3501      	adds	r5, #1
   1aeb6:	e7c6      	b.n	1ae46 <_printf_common+0x3e>
   1aeb8:	18e1      	adds	r1, r4, r3
   1aeba:	1c5a      	adds	r2, r3, #1
   1aebc:	2030      	movs	r0, #48	; 0x30
   1aebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1aec2:	4422      	add	r2, r4
   1aec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1aec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1aecc:	3302      	adds	r3, #2
   1aece:	e7c7      	b.n	1ae60 <_printf_common+0x58>
   1aed0:	2301      	movs	r3, #1
   1aed2:	4622      	mov	r2, r4
   1aed4:	4649      	mov	r1, r9
   1aed6:	4638      	mov	r0, r7
   1aed8:	47c0      	blx	r8
   1aeda:	3001      	adds	r0, #1
   1aedc:	d0e6      	beq.n	1aeac <_printf_common+0xa4>
   1aede:	3601      	adds	r6, #1
   1aee0:	e7d9      	b.n	1ae96 <_printf_common+0x8e>
	...

0001aee4 <_printf_i>:
   1aee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1aee8:	460c      	mov	r4, r1
   1aeea:	4691      	mov	r9, r2
   1aeec:	7e27      	ldrb	r7, [r4, #24]
   1aeee:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aef0:	2f78      	cmp	r7, #120	; 0x78
   1aef2:	4680      	mov	r8, r0
   1aef4:	469a      	mov	sl, r3
   1aef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1aefa:	d807      	bhi.n	1af0c <_printf_i+0x28>
   1aefc:	2f62      	cmp	r7, #98	; 0x62
   1aefe:	d80a      	bhi.n	1af16 <_printf_i+0x32>
   1af00:	2f00      	cmp	r7, #0
   1af02:	f000 80d8 	beq.w	1b0b6 <_printf_i+0x1d2>
   1af06:	2f58      	cmp	r7, #88	; 0x58
   1af08:	f000 80a3 	beq.w	1b052 <_printf_i+0x16e>
   1af0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1af10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1af14:	e03a      	b.n	1af8c <_printf_i+0xa8>
   1af16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1af1a:	2b15      	cmp	r3, #21
   1af1c:	d8f6      	bhi.n	1af0c <_printf_i+0x28>
   1af1e:	a001      	add	r0, pc, #4	; (adr r0, 1af24 <_printf_i+0x40>)
   1af20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1af24:	0001af7d 	.word	0x0001af7d
   1af28:	0001af91 	.word	0x0001af91
   1af2c:	0001af0d 	.word	0x0001af0d
   1af30:	0001af0d 	.word	0x0001af0d
   1af34:	0001af0d 	.word	0x0001af0d
   1af38:	0001af0d 	.word	0x0001af0d
   1af3c:	0001af91 	.word	0x0001af91
   1af40:	0001af0d 	.word	0x0001af0d
   1af44:	0001af0d 	.word	0x0001af0d
   1af48:	0001af0d 	.word	0x0001af0d
   1af4c:	0001af0d 	.word	0x0001af0d
   1af50:	0001b09d 	.word	0x0001b09d
   1af54:	0001afc1 	.word	0x0001afc1
   1af58:	0001b07f 	.word	0x0001b07f
   1af5c:	0001af0d 	.word	0x0001af0d
   1af60:	0001af0d 	.word	0x0001af0d
   1af64:	0001b0bf 	.word	0x0001b0bf
   1af68:	0001af0d 	.word	0x0001af0d
   1af6c:	0001afc1 	.word	0x0001afc1
   1af70:	0001af0d 	.word	0x0001af0d
   1af74:	0001af0d 	.word	0x0001af0d
   1af78:	0001b087 	.word	0x0001b087
   1af7c:	680b      	ldr	r3, [r1, #0]
   1af7e:	1d1a      	adds	r2, r3, #4
   1af80:	681b      	ldr	r3, [r3, #0]
   1af82:	600a      	str	r2, [r1, #0]
   1af84:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1af88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1af8c:	2301      	movs	r3, #1
   1af8e:	e0a3      	b.n	1b0d8 <_printf_i+0x1f4>
   1af90:	6825      	ldr	r5, [r4, #0]
   1af92:	6808      	ldr	r0, [r1, #0]
   1af94:	062e      	lsls	r6, r5, #24
   1af96:	f100 0304 	add.w	r3, r0, #4
   1af9a:	d50a      	bpl.n	1afb2 <_printf_i+0xce>
   1af9c:	6805      	ldr	r5, [r0, #0]
   1af9e:	600b      	str	r3, [r1, #0]
   1afa0:	2d00      	cmp	r5, #0
   1afa2:	da03      	bge.n	1afac <_printf_i+0xc8>
   1afa4:	232d      	movs	r3, #45	; 0x2d
   1afa6:	426d      	negs	r5, r5
   1afa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1afac:	485e      	ldr	r0, [pc, #376]	; (1b128 <_printf_i+0x244>)
   1afae:	230a      	movs	r3, #10
   1afb0:	e019      	b.n	1afe6 <_printf_i+0x102>
   1afb2:	f015 0f40 	tst.w	r5, #64	; 0x40
   1afb6:	6805      	ldr	r5, [r0, #0]
   1afb8:	600b      	str	r3, [r1, #0]
   1afba:	bf18      	it	ne
   1afbc:	b22d      	sxthne	r5, r5
   1afbe:	e7ef      	b.n	1afa0 <_printf_i+0xbc>
   1afc0:	680b      	ldr	r3, [r1, #0]
   1afc2:	6825      	ldr	r5, [r4, #0]
   1afc4:	1d18      	adds	r0, r3, #4
   1afc6:	6008      	str	r0, [r1, #0]
   1afc8:	0628      	lsls	r0, r5, #24
   1afca:	d501      	bpl.n	1afd0 <_printf_i+0xec>
   1afcc:	681d      	ldr	r5, [r3, #0]
   1afce:	e002      	b.n	1afd6 <_printf_i+0xf2>
   1afd0:	0669      	lsls	r1, r5, #25
   1afd2:	d5fb      	bpl.n	1afcc <_printf_i+0xe8>
   1afd4:	881d      	ldrh	r5, [r3, #0]
   1afd6:	4854      	ldr	r0, [pc, #336]	; (1b128 <_printf_i+0x244>)
   1afd8:	2f6f      	cmp	r7, #111	; 0x6f
   1afda:	bf0c      	ite	eq
   1afdc:	2308      	moveq	r3, #8
   1afde:	230a      	movne	r3, #10
   1afe0:	2100      	movs	r1, #0
   1afe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1afe6:	6866      	ldr	r6, [r4, #4]
   1afe8:	60a6      	str	r6, [r4, #8]
   1afea:	2e00      	cmp	r6, #0
   1afec:	bfa2      	ittt	ge
   1afee:	6821      	ldrge	r1, [r4, #0]
   1aff0:	f021 0104 	bicge.w	r1, r1, #4
   1aff4:	6021      	strge	r1, [r4, #0]
   1aff6:	b90d      	cbnz	r5, 1affc <_printf_i+0x118>
   1aff8:	2e00      	cmp	r6, #0
   1affa:	d04d      	beq.n	1b098 <_printf_i+0x1b4>
   1affc:	4616      	mov	r6, r2
   1affe:	fbb5 f1f3 	udiv	r1, r5, r3
   1b002:	fb03 5711 	mls	r7, r3, r1, r5
   1b006:	5dc7      	ldrb	r7, [r0, r7]
   1b008:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1b00c:	462f      	mov	r7, r5
   1b00e:	42bb      	cmp	r3, r7
   1b010:	460d      	mov	r5, r1
   1b012:	d9f4      	bls.n	1affe <_printf_i+0x11a>
   1b014:	2b08      	cmp	r3, #8
   1b016:	d10b      	bne.n	1b030 <_printf_i+0x14c>
   1b018:	6823      	ldr	r3, [r4, #0]
   1b01a:	07df      	lsls	r7, r3, #31
   1b01c:	d508      	bpl.n	1b030 <_printf_i+0x14c>
   1b01e:	6923      	ldr	r3, [r4, #16]
   1b020:	6861      	ldr	r1, [r4, #4]
   1b022:	4299      	cmp	r1, r3
   1b024:	bfde      	ittt	le
   1b026:	2330      	movle	r3, #48	; 0x30
   1b028:	f806 3c01 	strble.w	r3, [r6, #-1]
   1b02c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1b030:	1b92      	subs	r2, r2, r6
   1b032:	6122      	str	r2, [r4, #16]
   1b034:	f8cd a000 	str.w	sl, [sp]
   1b038:	464b      	mov	r3, r9
   1b03a:	aa03      	add	r2, sp, #12
   1b03c:	4621      	mov	r1, r4
   1b03e:	4640      	mov	r0, r8
   1b040:	f7ff fee2 	bl	1ae08 <_printf_common>
   1b044:	3001      	adds	r0, #1
   1b046:	d14c      	bne.n	1b0e2 <_printf_i+0x1fe>
   1b048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b04c:	b004      	add	sp, #16
   1b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b052:	4835      	ldr	r0, [pc, #212]	; (1b128 <_printf_i+0x244>)
   1b054:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1b058:	6823      	ldr	r3, [r4, #0]
   1b05a:	680e      	ldr	r6, [r1, #0]
   1b05c:	061f      	lsls	r7, r3, #24
   1b05e:	f856 5b04 	ldr.w	r5, [r6], #4
   1b062:	600e      	str	r6, [r1, #0]
   1b064:	d514      	bpl.n	1b090 <_printf_i+0x1ac>
   1b066:	07d9      	lsls	r1, r3, #31
   1b068:	bf44      	itt	mi
   1b06a:	f043 0320 	orrmi.w	r3, r3, #32
   1b06e:	6023      	strmi	r3, [r4, #0]
   1b070:	b91d      	cbnz	r5, 1b07a <_printf_i+0x196>
   1b072:	6823      	ldr	r3, [r4, #0]
   1b074:	f023 0320 	bic.w	r3, r3, #32
   1b078:	6023      	str	r3, [r4, #0]
   1b07a:	2310      	movs	r3, #16
   1b07c:	e7b0      	b.n	1afe0 <_printf_i+0xfc>
   1b07e:	6823      	ldr	r3, [r4, #0]
   1b080:	f043 0320 	orr.w	r3, r3, #32
   1b084:	6023      	str	r3, [r4, #0]
   1b086:	2378      	movs	r3, #120	; 0x78
   1b088:	4828      	ldr	r0, [pc, #160]	; (1b12c <_printf_i+0x248>)
   1b08a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1b08e:	e7e3      	b.n	1b058 <_printf_i+0x174>
   1b090:	065e      	lsls	r6, r3, #25
   1b092:	bf48      	it	mi
   1b094:	b2ad      	uxthmi	r5, r5
   1b096:	e7e6      	b.n	1b066 <_printf_i+0x182>
   1b098:	4616      	mov	r6, r2
   1b09a:	e7bb      	b.n	1b014 <_printf_i+0x130>
   1b09c:	680b      	ldr	r3, [r1, #0]
   1b09e:	6826      	ldr	r6, [r4, #0]
   1b0a0:	6960      	ldr	r0, [r4, #20]
   1b0a2:	1d1d      	adds	r5, r3, #4
   1b0a4:	600d      	str	r5, [r1, #0]
   1b0a6:	0635      	lsls	r5, r6, #24
   1b0a8:	681b      	ldr	r3, [r3, #0]
   1b0aa:	d501      	bpl.n	1b0b0 <_printf_i+0x1cc>
   1b0ac:	6018      	str	r0, [r3, #0]
   1b0ae:	e002      	b.n	1b0b6 <_printf_i+0x1d2>
   1b0b0:	0671      	lsls	r1, r6, #25
   1b0b2:	d5fb      	bpl.n	1b0ac <_printf_i+0x1c8>
   1b0b4:	8018      	strh	r0, [r3, #0]
   1b0b6:	2300      	movs	r3, #0
   1b0b8:	6123      	str	r3, [r4, #16]
   1b0ba:	4616      	mov	r6, r2
   1b0bc:	e7ba      	b.n	1b034 <_printf_i+0x150>
   1b0be:	680b      	ldr	r3, [r1, #0]
   1b0c0:	1d1a      	adds	r2, r3, #4
   1b0c2:	600a      	str	r2, [r1, #0]
   1b0c4:	681e      	ldr	r6, [r3, #0]
   1b0c6:	6862      	ldr	r2, [r4, #4]
   1b0c8:	2100      	movs	r1, #0
   1b0ca:	4630      	mov	r0, r6
   1b0cc:	f000 f830 	bl	1b130 <memchr>
   1b0d0:	b108      	cbz	r0, 1b0d6 <_printf_i+0x1f2>
   1b0d2:	1b80      	subs	r0, r0, r6
   1b0d4:	6060      	str	r0, [r4, #4]
   1b0d6:	6863      	ldr	r3, [r4, #4]
   1b0d8:	6123      	str	r3, [r4, #16]
   1b0da:	2300      	movs	r3, #0
   1b0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1b0e0:	e7a8      	b.n	1b034 <_printf_i+0x150>
   1b0e2:	6923      	ldr	r3, [r4, #16]
   1b0e4:	4632      	mov	r2, r6
   1b0e6:	4649      	mov	r1, r9
   1b0e8:	4640      	mov	r0, r8
   1b0ea:	47d0      	blx	sl
   1b0ec:	3001      	adds	r0, #1
   1b0ee:	d0ab      	beq.n	1b048 <_printf_i+0x164>
   1b0f0:	6823      	ldr	r3, [r4, #0]
   1b0f2:	079b      	lsls	r3, r3, #30
   1b0f4:	d413      	bmi.n	1b11e <_printf_i+0x23a>
   1b0f6:	68e0      	ldr	r0, [r4, #12]
   1b0f8:	9b03      	ldr	r3, [sp, #12]
   1b0fa:	4298      	cmp	r0, r3
   1b0fc:	bfb8      	it	lt
   1b0fe:	4618      	movlt	r0, r3
   1b100:	e7a4      	b.n	1b04c <_printf_i+0x168>
   1b102:	2301      	movs	r3, #1
   1b104:	4632      	mov	r2, r6
   1b106:	4649      	mov	r1, r9
   1b108:	4640      	mov	r0, r8
   1b10a:	47d0      	blx	sl
   1b10c:	3001      	adds	r0, #1
   1b10e:	d09b      	beq.n	1b048 <_printf_i+0x164>
   1b110:	3501      	adds	r5, #1
   1b112:	68e3      	ldr	r3, [r4, #12]
   1b114:	9903      	ldr	r1, [sp, #12]
   1b116:	1a5b      	subs	r3, r3, r1
   1b118:	42ab      	cmp	r3, r5
   1b11a:	dcf2      	bgt.n	1b102 <_printf_i+0x21e>
   1b11c:	e7eb      	b.n	1b0f6 <_printf_i+0x212>
   1b11e:	2500      	movs	r5, #0
   1b120:	f104 0619 	add.w	r6, r4, #25
   1b124:	e7f5      	b.n	1b112 <_printf_i+0x22e>
   1b126:	bf00      	nop
   1b128:	0001c5d9 	.word	0x0001c5d9
   1b12c:	0001c5ea 	.word	0x0001c5ea

0001b130 <memchr>:
   1b130:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1b134:	2a10      	cmp	r2, #16
   1b136:	db2b      	blt.n	1b190 <memchr+0x60>
   1b138:	f010 0f07 	tst.w	r0, #7
   1b13c:	d008      	beq.n	1b150 <memchr+0x20>
   1b13e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b142:	3a01      	subs	r2, #1
   1b144:	428b      	cmp	r3, r1
   1b146:	d02d      	beq.n	1b1a4 <memchr+0x74>
   1b148:	f010 0f07 	tst.w	r0, #7
   1b14c:	b342      	cbz	r2, 1b1a0 <memchr+0x70>
   1b14e:	d1f6      	bne.n	1b13e <memchr+0xe>
   1b150:	b4f0      	push	{r4, r5, r6, r7}
   1b152:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b156:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b15a:	f022 0407 	bic.w	r4, r2, #7
   1b15e:	f07f 0700 	mvns.w	r7, #0
   1b162:	2300      	movs	r3, #0
   1b164:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1b168:	3c08      	subs	r4, #8
   1b16a:	ea85 0501 	eor.w	r5, r5, r1
   1b16e:	ea86 0601 	eor.w	r6, r6, r1
   1b172:	fa85 f547 	uadd8	r5, r5, r7
   1b176:	faa3 f587 	sel	r5, r3, r7
   1b17a:	fa86 f647 	uadd8	r6, r6, r7
   1b17e:	faa5 f687 	sel	r6, r5, r7
   1b182:	b98e      	cbnz	r6, 1b1a8 <memchr+0x78>
   1b184:	d1ee      	bne.n	1b164 <memchr+0x34>
   1b186:	bcf0      	pop	{r4, r5, r6, r7}
   1b188:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1b18c:	f002 0207 	and.w	r2, r2, #7
   1b190:	b132      	cbz	r2, 1b1a0 <memchr+0x70>
   1b192:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b196:	3a01      	subs	r2, #1
   1b198:	ea83 0301 	eor.w	r3, r3, r1
   1b19c:	b113      	cbz	r3, 1b1a4 <memchr+0x74>
   1b19e:	d1f8      	bne.n	1b192 <memchr+0x62>
   1b1a0:	2000      	movs	r0, #0
   1b1a2:	4770      	bx	lr
   1b1a4:	3801      	subs	r0, #1
   1b1a6:	4770      	bx	lr
   1b1a8:	2d00      	cmp	r5, #0
   1b1aa:	bf06      	itte	eq
   1b1ac:	4635      	moveq	r5, r6
   1b1ae:	3803      	subeq	r0, #3
   1b1b0:	3807      	subne	r0, #7
   1b1b2:	f015 0f01 	tst.w	r5, #1
   1b1b6:	d107      	bne.n	1b1c8 <memchr+0x98>
   1b1b8:	3001      	adds	r0, #1
   1b1ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   1b1be:	bf02      	ittt	eq
   1b1c0:	3001      	addeq	r0, #1
   1b1c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1b1c6:	3001      	addeq	r0, #1
   1b1c8:	bcf0      	pop	{r4, r5, r6, r7}
   1b1ca:	3801      	subs	r0, #1
   1b1cc:	4770      	bx	lr
   1b1ce:	bf00      	nop

0001b1d0 <memmove>:
   1b1d0:	4288      	cmp	r0, r1
   1b1d2:	b510      	push	{r4, lr}
   1b1d4:	eb01 0402 	add.w	r4, r1, r2
   1b1d8:	d902      	bls.n	1b1e0 <memmove+0x10>
   1b1da:	4284      	cmp	r4, r0
   1b1dc:	4623      	mov	r3, r4
   1b1de:	d807      	bhi.n	1b1f0 <memmove+0x20>
   1b1e0:	1e43      	subs	r3, r0, #1
   1b1e2:	42a1      	cmp	r1, r4
   1b1e4:	d008      	beq.n	1b1f8 <memmove+0x28>
   1b1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b1ea:	f803 2f01 	strb.w	r2, [r3, #1]!
   1b1ee:	e7f8      	b.n	1b1e2 <memmove+0x12>
   1b1f0:	4402      	add	r2, r0
   1b1f2:	4601      	mov	r1, r0
   1b1f4:	428a      	cmp	r2, r1
   1b1f6:	d100      	bne.n	1b1fa <memmove+0x2a>
   1b1f8:	bd10      	pop	{r4, pc}
   1b1fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1b1fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1b202:	e7f7      	b.n	1b1f4 <memmove+0x24>

0001b204 <_free_r>:
   1b204:	b538      	push	{r3, r4, r5, lr}
   1b206:	4605      	mov	r5, r0
   1b208:	2900      	cmp	r1, #0
   1b20a:	d045      	beq.n	1b298 <_free_r+0x94>
   1b20c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1b210:	1f0c      	subs	r4, r1, #4
   1b212:	2b00      	cmp	r3, #0
   1b214:	bfb8      	it	lt
   1b216:	18e4      	addlt	r4, r4, r3
   1b218:	f000 f8d2 	bl	1b3c0 <__malloc_lock>
   1b21c:	4a1f      	ldr	r2, [pc, #124]	; (1b29c <_free_r+0x98>)
   1b21e:	6813      	ldr	r3, [r2, #0]
   1b220:	4610      	mov	r0, r2
   1b222:	b933      	cbnz	r3, 1b232 <_free_r+0x2e>
   1b224:	6063      	str	r3, [r4, #4]
   1b226:	6014      	str	r4, [r2, #0]
   1b228:	4628      	mov	r0, r5
   1b22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b22e:	f000 b8cd 	b.w	1b3cc <__malloc_unlock>
   1b232:	42a3      	cmp	r3, r4
   1b234:	d90b      	bls.n	1b24e <_free_r+0x4a>
   1b236:	6821      	ldr	r1, [r4, #0]
   1b238:	1862      	adds	r2, r4, r1
   1b23a:	4293      	cmp	r3, r2
   1b23c:	bf04      	itt	eq
   1b23e:	681a      	ldreq	r2, [r3, #0]
   1b240:	685b      	ldreq	r3, [r3, #4]
   1b242:	6063      	str	r3, [r4, #4]
   1b244:	bf04      	itt	eq
   1b246:	1852      	addeq	r2, r2, r1
   1b248:	6022      	streq	r2, [r4, #0]
   1b24a:	6004      	str	r4, [r0, #0]
   1b24c:	e7ec      	b.n	1b228 <_free_r+0x24>
   1b24e:	461a      	mov	r2, r3
   1b250:	685b      	ldr	r3, [r3, #4]
   1b252:	b10b      	cbz	r3, 1b258 <_free_r+0x54>
   1b254:	42a3      	cmp	r3, r4
   1b256:	d9fa      	bls.n	1b24e <_free_r+0x4a>
   1b258:	6811      	ldr	r1, [r2, #0]
   1b25a:	1850      	adds	r0, r2, r1
   1b25c:	42a0      	cmp	r0, r4
   1b25e:	d10b      	bne.n	1b278 <_free_r+0x74>
   1b260:	6820      	ldr	r0, [r4, #0]
   1b262:	4401      	add	r1, r0
   1b264:	1850      	adds	r0, r2, r1
   1b266:	4283      	cmp	r3, r0
   1b268:	6011      	str	r1, [r2, #0]
   1b26a:	d1dd      	bne.n	1b228 <_free_r+0x24>
   1b26c:	6818      	ldr	r0, [r3, #0]
   1b26e:	685b      	ldr	r3, [r3, #4]
   1b270:	6053      	str	r3, [r2, #4]
   1b272:	4401      	add	r1, r0
   1b274:	6011      	str	r1, [r2, #0]
   1b276:	e7d7      	b.n	1b228 <_free_r+0x24>
   1b278:	d902      	bls.n	1b280 <_free_r+0x7c>
   1b27a:	230c      	movs	r3, #12
   1b27c:	602b      	str	r3, [r5, #0]
   1b27e:	e7d3      	b.n	1b228 <_free_r+0x24>
   1b280:	6820      	ldr	r0, [r4, #0]
   1b282:	1821      	adds	r1, r4, r0
   1b284:	428b      	cmp	r3, r1
   1b286:	bf04      	itt	eq
   1b288:	6819      	ldreq	r1, [r3, #0]
   1b28a:	685b      	ldreq	r3, [r3, #4]
   1b28c:	6063      	str	r3, [r4, #4]
   1b28e:	bf04      	itt	eq
   1b290:	1809      	addeq	r1, r1, r0
   1b292:	6021      	streq	r1, [r4, #0]
   1b294:	6054      	str	r4, [r2, #4]
   1b296:	e7c7      	b.n	1b228 <_free_r+0x24>
   1b298:	bd38      	pop	{r3, r4, r5, pc}
   1b29a:	bf00      	nop
   1b29c:	200014a8 	.word	0x200014a8

0001b2a0 <_malloc_r>:
   1b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2a2:	1ccd      	adds	r5, r1, #3
   1b2a4:	f025 0503 	bic.w	r5, r5, #3
   1b2a8:	3508      	adds	r5, #8
   1b2aa:	2d0c      	cmp	r5, #12
   1b2ac:	bf38      	it	cc
   1b2ae:	250c      	movcc	r5, #12
   1b2b0:	2d00      	cmp	r5, #0
   1b2b2:	4606      	mov	r6, r0
   1b2b4:	db01      	blt.n	1b2ba <_malloc_r+0x1a>
   1b2b6:	42a9      	cmp	r1, r5
   1b2b8:	d903      	bls.n	1b2c2 <_malloc_r+0x22>
   1b2ba:	230c      	movs	r3, #12
   1b2bc:	6033      	str	r3, [r6, #0]
   1b2be:	2000      	movs	r0, #0
   1b2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2c2:	f000 f87d 	bl	1b3c0 <__malloc_lock>
   1b2c6:	4921      	ldr	r1, [pc, #132]	; (1b34c <_malloc_r+0xac>)
   1b2c8:	680a      	ldr	r2, [r1, #0]
   1b2ca:	4614      	mov	r4, r2
   1b2cc:	b99c      	cbnz	r4, 1b2f6 <_malloc_r+0x56>
   1b2ce:	4f20      	ldr	r7, [pc, #128]	; (1b350 <_malloc_r+0xb0>)
   1b2d0:	683b      	ldr	r3, [r7, #0]
   1b2d2:	b923      	cbnz	r3, 1b2de <_malloc_r+0x3e>
   1b2d4:	4621      	mov	r1, r4
   1b2d6:	4630      	mov	r0, r6
   1b2d8:	f000 f862 	bl	1b3a0 <_sbrk_r>
   1b2dc:	6038      	str	r0, [r7, #0]
   1b2de:	4629      	mov	r1, r5
   1b2e0:	4630      	mov	r0, r6
   1b2e2:	f000 f85d 	bl	1b3a0 <_sbrk_r>
   1b2e6:	1c43      	adds	r3, r0, #1
   1b2e8:	d123      	bne.n	1b332 <_malloc_r+0x92>
   1b2ea:	230c      	movs	r3, #12
   1b2ec:	6033      	str	r3, [r6, #0]
   1b2ee:	4630      	mov	r0, r6
   1b2f0:	f000 f86c 	bl	1b3cc <__malloc_unlock>
   1b2f4:	e7e3      	b.n	1b2be <_malloc_r+0x1e>
   1b2f6:	6823      	ldr	r3, [r4, #0]
   1b2f8:	1b5b      	subs	r3, r3, r5
   1b2fa:	d417      	bmi.n	1b32c <_malloc_r+0x8c>
   1b2fc:	2b0b      	cmp	r3, #11
   1b2fe:	d903      	bls.n	1b308 <_malloc_r+0x68>
   1b300:	6023      	str	r3, [r4, #0]
   1b302:	441c      	add	r4, r3
   1b304:	6025      	str	r5, [r4, #0]
   1b306:	e004      	b.n	1b312 <_malloc_r+0x72>
   1b308:	6863      	ldr	r3, [r4, #4]
   1b30a:	42a2      	cmp	r2, r4
   1b30c:	bf0c      	ite	eq
   1b30e:	600b      	streq	r3, [r1, #0]
   1b310:	6053      	strne	r3, [r2, #4]
   1b312:	4630      	mov	r0, r6
   1b314:	f000 f85a 	bl	1b3cc <__malloc_unlock>
   1b318:	f104 000b 	add.w	r0, r4, #11
   1b31c:	1d23      	adds	r3, r4, #4
   1b31e:	f020 0007 	bic.w	r0, r0, #7
   1b322:	1ac2      	subs	r2, r0, r3
   1b324:	d0cc      	beq.n	1b2c0 <_malloc_r+0x20>
   1b326:	1a1b      	subs	r3, r3, r0
   1b328:	50a3      	str	r3, [r4, r2]
   1b32a:	e7c9      	b.n	1b2c0 <_malloc_r+0x20>
   1b32c:	4622      	mov	r2, r4
   1b32e:	6864      	ldr	r4, [r4, #4]
   1b330:	e7cc      	b.n	1b2cc <_malloc_r+0x2c>
   1b332:	1cc4      	adds	r4, r0, #3
   1b334:	f024 0403 	bic.w	r4, r4, #3
   1b338:	42a0      	cmp	r0, r4
   1b33a:	d0e3      	beq.n	1b304 <_malloc_r+0x64>
   1b33c:	1a21      	subs	r1, r4, r0
   1b33e:	4630      	mov	r0, r6
   1b340:	f000 f82e 	bl	1b3a0 <_sbrk_r>
   1b344:	3001      	adds	r0, #1
   1b346:	d1dd      	bne.n	1b304 <_malloc_r+0x64>
   1b348:	e7cf      	b.n	1b2ea <_malloc_r+0x4a>
   1b34a:	bf00      	nop
   1b34c:	200014a8 	.word	0x200014a8
   1b350:	200014ac 	.word	0x200014ac

0001b354 <_realloc_r>:
   1b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b356:	4607      	mov	r7, r0
   1b358:	4614      	mov	r4, r2
   1b35a:	460e      	mov	r6, r1
   1b35c:	b921      	cbnz	r1, 1b368 <_realloc_r+0x14>
   1b35e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b362:	4611      	mov	r1, r2
   1b364:	f7ff bf9c 	b.w	1b2a0 <_malloc_r>
   1b368:	b922      	cbnz	r2, 1b374 <_realloc_r+0x20>
   1b36a:	f7ff ff4b 	bl	1b204 <_free_r>
   1b36e:	4625      	mov	r5, r4
   1b370:	4628      	mov	r0, r5
   1b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b374:	f000 f830 	bl	1b3d8 <_malloc_usable_size_r>
   1b378:	42a0      	cmp	r0, r4
   1b37a:	d20f      	bcs.n	1b39c <_realloc_r+0x48>
   1b37c:	4621      	mov	r1, r4
   1b37e:	4638      	mov	r0, r7
   1b380:	f7ff ff8e 	bl	1b2a0 <_malloc_r>
   1b384:	4605      	mov	r5, r0
   1b386:	2800      	cmp	r0, #0
   1b388:	d0f2      	beq.n	1b370 <_realloc_r+0x1c>
   1b38a:	4631      	mov	r1, r6
   1b38c:	4622      	mov	r2, r4
   1b38e:	f7ff fb85 	bl	1aa9c <memcpy>
   1b392:	4631      	mov	r1, r6
   1b394:	4638      	mov	r0, r7
   1b396:	f7ff ff35 	bl	1b204 <_free_r>
   1b39a:	e7e9      	b.n	1b370 <_realloc_r+0x1c>
   1b39c:	4635      	mov	r5, r6
   1b39e:	e7e7      	b.n	1b370 <_realloc_r+0x1c>

0001b3a0 <_sbrk_r>:
   1b3a0:	b538      	push	{r3, r4, r5, lr}
   1b3a2:	4d06      	ldr	r5, [pc, #24]	; (1b3bc <_sbrk_r+0x1c>)
   1b3a4:	2300      	movs	r3, #0
   1b3a6:	4604      	mov	r4, r0
   1b3a8:	4608      	mov	r0, r1
   1b3aa:	602b      	str	r3, [r5, #0]
   1b3ac:	f000 f81e 	bl	1b3ec <_sbrk>
   1b3b0:	1c43      	adds	r3, r0, #1
   1b3b2:	d102      	bne.n	1b3ba <_sbrk_r+0x1a>
   1b3b4:	682b      	ldr	r3, [r5, #0]
   1b3b6:	b103      	cbz	r3, 1b3ba <_sbrk_r+0x1a>
   1b3b8:	6023      	str	r3, [r4, #0]
   1b3ba:	bd38      	pop	{r3, r4, r5, pc}
   1b3bc:	20001538 	.word	0x20001538

0001b3c0 <__malloc_lock>:
   1b3c0:	4801      	ldr	r0, [pc, #4]	; (1b3c8 <__malloc_lock+0x8>)
   1b3c2:	f000 b811 	b.w	1b3e8 <__retarget_lock_acquire_recursive>
   1b3c6:	bf00      	nop
   1b3c8:	20001540 	.word	0x20001540

0001b3cc <__malloc_unlock>:
   1b3cc:	4801      	ldr	r0, [pc, #4]	; (1b3d4 <__malloc_unlock+0x8>)
   1b3ce:	f000 b80c 	b.w	1b3ea <__retarget_lock_release_recursive>
   1b3d2:	bf00      	nop
   1b3d4:	20001540 	.word	0x20001540

0001b3d8 <_malloc_usable_size_r>:
   1b3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1b3dc:	1f18      	subs	r0, r3, #4
   1b3de:	2b00      	cmp	r3, #0
   1b3e0:	bfbc      	itt	lt
   1b3e2:	580b      	ldrlt	r3, [r1, r0]
   1b3e4:	18c0      	addlt	r0, r0, r3
   1b3e6:	4770      	bx	lr

0001b3e8 <__retarget_lock_acquire_recursive>:
   1b3e8:	4770      	bx	lr

0001b3ea <__retarget_lock_release_recursive>:
   1b3ea:	4770      	bx	lr

0001b3ec <_sbrk>:
   1b3ec:	4a04      	ldr	r2, [pc, #16]	; (1b400 <_sbrk+0x14>)
   1b3ee:	4905      	ldr	r1, [pc, #20]	; (1b404 <_sbrk+0x18>)
   1b3f0:	6813      	ldr	r3, [r2, #0]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	bf08      	it	eq
   1b3f6:	460b      	moveq	r3, r1
   1b3f8:	4418      	add	r0, r3
   1b3fa:	6010      	str	r0, [r2, #0]
   1b3fc:	4618      	mov	r0, r3
   1b3fe:	4770      	bx	lr
   1b400:	200014b0 	.word	0x200014b0
   1b404:	20001548 	.word	0x20001548

0001b408 <_exit>:
   1b408:	e7fe      	b.n	1b408 <_exit>
   1b40a:	bf00      	nop

0001b40c <selfrel_offset31>:
   1b40c:	6803      	ldr	r3, [r0, #0]
   1b40e:	005a      	lsls	r2, r3, #1
   1b410:	bf4c      	ite	mi
   1b412:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1b416:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1b41a:	4418      	add	r0, r3
   1b41c:	4770      	bx	lr
   1b41e:	bf00      	nop

0001b420 <search_EIT_table>:
   1b420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b424:	b329      	cbz	r1, 1b472 <search_EIT_table+0x52>
   1b426:	1e4f      	subs	r7, r1, #1
   1b428:	4604      	mov	r4, r0
   1b42a:	4615      	mov	r5, r2
   1b42c:	463e      	mov	r6, r7
   1b42e:	f04f 0800 	mov.w	r8, #0
   1b432:	eb08 0106 	add.w	r1, r8, r6
   1b436:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   1b43a:	1049      	asrs	r1, r1, #1
   1b43c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   1b440:	4648      	mov	r0, r9
   1b442:	f7ff ffe3 	bl	1b40c <selfrel_offset31>
   1b446:	4603      	mov	r3, r0
   1b448:	00c8      	lsls	r0, r1, #3
   1b44a:	3008      	adds	r0, #8
   1b44c:	428f      	cmp	r7, r1
   1b44e:	4420      	add	r0, r4
   1b450:	d009      	beq.n	1b466 <search_EIT_table+0x46>
   1b452:	42ab      	cmp	r3, r5
   1b454:	d809      	bhi.n	1b46a <search_EIT_table+0x4a>
   1b456:	f7ff ffd9 	bl	1b40c <selfrel_offset31>
   1b45a:	3801      	subs	r0, #1
   1b45c:	42a8      	cmp	r0, r5
   1b45e:	d20a      	bcs.n	1b476 <search_EIT_table+0x56>
   1b460:	f101 0801 	add.w	r8, r1, #1
   1b464:	e7e5      	b.n	1b432 <search_EIT_table+0x12>
   1b466:	42ab      	cmp	r3, r5
   1b468:	d905      	bls.n	1b476 <search_EIT_table+0x56>
   1b46a:	4588      	cmp	r8, r1
   1b46c:	d001      	beq.n	1b472 <search_EIT_table+0x52>
   1b46e:	1e4e      	subs	r6, r1, #1
   1b470:	e7df      	b.n	1b432 <search_EIT_table+0x12>
   1b472:	f04f 0900 	mov.w	r9, #0
   1b476:	4648      	mov	r0, r9
   1b478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b47c <__gnu_unwind_get_pr_addr>:
   1b47c:	2801      	cmp	r0, #1
   1b47e:	d007      	beq.n	1b490 <__gnu_unwind_get_pr_addr+0x14>
   1b480:	2802      	cmp	r0, #2
   1b482:	d007      	beq.n	1b494 <__gnu_unwind_get_pr_addr+0x18>
   1b484:	4b04      	ldr	r3, [pc, #16]	; (1b498 <__gnu_unwind_get_pr_addr+0x1c>)
   1b486:	2800      	cmp	r0, #0
   1b488:	bf0c      	ite	eq
   1b48a:	4618      	moveq	r0, r3
   1b48c:	2000      	movne	r0, #0
   1b48e:	4770      	bx	lr
   1b490:	4802      	ldr	r0, [pc, #8]	; (1b49c <__gnu_unwind_get_pr_addr+0x20>)
   1b492:	4770      	bx	lr
   1b494:	4802      	ldr	r0, [pc, #8]	; (1b4a0 <__gnu_unwind_get_pr_addr+0x24>)
   1b496:	4770      	bx	lr
   1b498:	0001bb41 	.word	0x0001bb41
   1b49c:	0001bb45 	.word	0x0001bb45
   1b4a0:	0001bb49 	.word	0x0001bb49

0001b4a4 <get_eit_entry>:
   1b4a4:	b530      	push	{r4, r5, lr}
   1b4a6:	4b23      	ldr	r3, [pc, #140]	; (1b534 <get_eit_entry+0x90>)
   1b4a8:	b083      	sub	sp, #12
   1b4aa:	4604      	mov	r4, r0
   1b4ac:	1e8d      	subs	r5, r1, #2
   1b4ae:	b33b      	cbz	r3, 1b500 <get_eit_entry+0x5c>
   1b4b0:	a901      	add	r1, sp, #4
   1b4b2:	4628      	mov	r0, r5
   1b4b4:	f3af 8000 	nop.w
   1b4b8:	b1e8      	cbz	r0, 1b4f6 <get_eit_entry+0x52>
   1b4ba:	9901      	ldr	r1, [sp, #4]
   1b4bc:	462a      	mov	r2, r5
   1b4be:	f7ff ffaf 	bl	1b420 <search_EIT_table>
   1b4c2:	4601      	mov	r1, r0
   1b4c4:	b1b8      	cbz	r0, 1b4f6 <get_eit_entry+0x52>
   1b4c6:	f7ff ffa1 	bl	1b40c <selfrel_offset31>
   1b4ca:	684b      	ldr	r3, [r1, #4]
   1b4cc:	64a0      	str	r0, [r4, #72]	; 0x48
   1b4ce:	2b01      	cmp	r3, #1
   1b4d0:	d02b      	beq.n	1b52a <get_eit_entry+0x86>
   1b4d2:	2b00      	cmp	r3, #0
   1b4d4:	f101 0004 	add.w	r0, r1, #4
   1b4d8:	db23      	blt.n	1b522 <get_eit_entry+0x7e>
   1b4da:	f7ff ff97 	bl	1b40c <selfrel_offset31>
   1b4de:	2300      	movs	r3, #0
   1b4e0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1b4e4:	6803      	ldr	r3, [r0, #0]
   1b4e6:	2b00      	cmp	r3, #0
   1b4e8:	db10      	blt.n	1b50c <get_eit_entry+0x68>
   1b4ea:	f7ff ff8f 	bl	1b40c <selfrel_offset31>
   1b4ee:	6120      	str	r0, [r4, #16]
   1b4f0:	2000      	movs	r0, #0
   1b4f2:	b003      	add	sp, #12
   1b4f4:	bd30      	pop	{r4, r5, pc}
   1b4f6:	2300      	movs	r3, #0
   1b4f8:	2009      	movs	r0, #9
   1b4fa:	6123      	str	r3, [r4, #16]
   1b4fc:	b003      	add	sp, #12
   1b4fe:	bd30      	pop	{r4, r5, pc}
   1b500:	490d      	ldr	r1, [pc, #52]	; (1b538 <get_eit_entry+0x94>)
   1b502:	480e      	ldr	r0, [pc, #56]	; (1b53c <get_eit_entry+0x98>)
   1b504:	1a09      	subs	r1, r1, r0
   1b506:	10c9      	asrs	r1, r1, #3
   1b508:	9101      	str	r1, [sp, #4]
   1b50a:	e7d7      	b.n	1b4bc <get_eit_entry+0x18>
   1b50c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1b510:	f7ff ffb4 	bl	1b47c <__gnu_unwind_get_pr_addr>
   1b514:	2800      	cmp	r0, #0
   1b516:	6120      	str	r0, [r4, #16]
   1b518:	bf14      	ite	ne
   1b51a:	2000      	movne	r0, #0
   1b51c:	2009      	moveq	r0, #9
   1b51e:	b003      	add	sp, #12
   1b520:	bd30      	pop	{r4, r5, pc}
   1b522:	2301      	movs	r3, #1
   1b524:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1b528:	e7dc      	b.n	1b4e4 <get_eit_entry+0x40>
   1b52a:	2300      	movs	r3, #0
   1b52c:	6123      	str	r3, [r4, #16]
   1b52e:	2005      	movs	r0, #5
   1b530:	e7df      	b.n	1b4f2 <get_eit_entry+0x4e>
   1b532:	bf00      	nop
   1b534:	00000000 	.word	0x00000000
   1b538:	0001c730 	.word	0x0001c730
   1b53c:	0001c638 	.word	0x0001c638

0001b540 <restore_non_core_regs>:
   1b540:	6803      	ldr	r3, [r0, #0]
   1b542:	07da      	lsls	r2, r3, #31
   1b544:	b510      	push	{r4, lr}
   1b546:	4604      	mov	r4, r0
   1b548:	d406      	bmi.n	1b558 <restore_non_core_regs+0x18>
   1b54a:	079b      	lsls	r3, r3, #30
   1b54c:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1b550:	d509      	bpl.n	1b566 <restore_non_core_regs+0x26>
   1b552:	f000 fc4b 	bl	1bdec <__gnu_Unwind_Restore_VFP_D>
   1b556:	6823      	ldr	r3, [r4, #0]
   1b558:	0759      	lsls	r1, r3, #29
   1b55a:	d509      	bpl.n	1b570 <restore_non_core_regs+0x30>
   1b55c:	071a      	lsls	r2, r3, #28
   1b55e:	d50e      	bpl.n	1b57e <restore_non_core_regs+0x3e>
   1b560:	06db      	lsls	r3, r3, #27
   1b562:	d513      	bpl.n	1b58c <restore_non_core_regs+0x4c>
   1b564:	bd10      	pop	{r4, pc}
   1b566:	f000 fc39 	bl	1bddc <__gnu_Unwind_Restore_VFP>
   1b56a:	6823      	ldr	r3, [r4, #0]
   1b56c:	0759      	lsls	r1, r3, #29
   1b56e:	d4f5      	bmi.n	1b55c <restore_non_core_regs+0x1c>
   1b570:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1b574:	f000 fc42 	bl	1bdfc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1b578:	6823      	ldr	r3, [r4, #0]
   1b57a:	071a      	lsls	r2, r3, #28
   1b57c:	d4f0      	bmi.n	1b560 <restore_non_core_regs+0x20>
   1b57e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1b582:	f000 fc43 	bl	1be0c <__gnu_Unwind_Restore_WMMXD>
   1b586:	6823      	ldr	r3, [r4, #0]
   1b588:	06db      	lsls	r3, r3, #27
   1b58a:	d4eb      	bmi.n	1b564 <restore_non_core_regs+0x24>
   1b58c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1b590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b594:	f000 bc7e 	b.w	1be94 <__gnu_Unwind_Restore_WMMXC>

0001b598 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1b598:	4603      	mov	r3, r0
   1b59a:	6800      	ldr	r0, [r0, #0]
   1b59c:	b100      	cbz	r0, 1b5a0 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   1b59e:	4418      	add	r0, r3
   1b5a0:	4770      	bx	lr
   1b5a2:	bf00      	nop

0001b5a4 <__gnu_unwind_24bit.isra.0>:
   1b5a4:	2009      	movs	r0, #9
   1b5a6:	4770      	bx	lr

0001b5a8 <_Unwind_DebugHook>:
   1b5a8:	4770      	bx	lr
   1b5aa:	bf00      	nop

0001b5ac <unwind_phase2>:
   1b5ac:	b570      	push	{r4, r5, r6, lr}
   1b5ae:	4604      	mov	r4, r0
   1b5b0:	460e      	mov	r6, r1
   1b5b2:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f7ff ff75 	bl	1b4a4 <get_eit_entry>
   1b5ba:	4605      	mov	r5, r0
   1b5bc:	b988      	cbnz	r0, 1b5e2 <unwind_phase2+0x36>
   1b5be:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1b5c0:	6163      	str	r3, [r4, #20]
   1b5c2:	4632      	mov	r2, r6
   1b5c4:	6923      	ldr	r3, [r4, #16]
   1b5c6:	4621      	mov	r1, r4
   1b5c8:	2001      	movs	r0, #1
   1b5ca:	4798      	blx	r3
   1b5cc:	2808      	cmp	r0, #8
   1b5ce:	d0f0      	beq.n	1b5b2 <unwind_phase2+0x6>
   1b5d0:	2807      	cmp	r0, #7
   1b5d2:	d106      	bne.n	1b5e2 <unwind_phase2+0x36>
   1b5d4:	4628      	mov	r0, r5
   1b5d6:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1b5d8:	f7ff ffe6 	bl	1b5a8 <_Unwind_DebugHook>
   1b5dc:	1d30      	adds	r0, r6, #4
   1b5de:	f000 fbf1 	bl	1bdc4 <__restore_core_regs>
   1b5e2:	f000 fe65 	bl	1c2b0 <abort>
   1b5e6:	bf00      	nop

0001b5e8 <unwind_phase2_forced>:
   1b5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b5ec:	1d0d      	adds	r5, r1, #4
   1b5ee:	4606      	mov	r6, r0
   1b5f0:	4614      	mov	r4, r2
   1b5f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b5f4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1b5f8:	f10d 0c0c 	add.w	ip, sp, #12
   1b5fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b60c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b610:	ad02      	add	r5, sp, #8
   1b612:	68f7      	ldr	r7, [r6, #12]
   1b614:	f8d6 8018 	ldr.w	r8, [r6, #24]
   1b618:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1b61c:	2300      	movs	r3, #0
   1b61e:	602b      	str	r3, [r5, #0]
   1b620:	e021      	b.n	1b666 <unwind_phase2_forced+0x7e>
   1b622:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1b624:	6173      	str	r3, [r6, #20]
   1b626:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1b62a:	4629      	mov	r1, r5
   1b62c:	a87a      	add	r0, sp, #488	; 0x1e8
   1b62e:	f7ff fa35 	bl	1aa9c <memcpy>
   1b632:	6933      	ldr	r3, [r6, #16]
   1b634:	aa7a      	add	r2, sp, #488	; 0x1e8
   1b636:	4631      	mov	r1, r6
   1b638:	4650      	mov	r0, sl
   1b63a:	4798      	blx	r3
   1b63c:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1b63e:	e9cd 5800 	strd	r5, r8, [sp]
   1b642:	4621      	mov	r1, r4
   1b644:	646b      	str	r3, [r5, #68]	; 0x44
   1b646:	4681      	mov	r9, r0
   1b648:	4633      	mov	r3, r6
   1b64a:	4632      	mov	r2, r6
   1b64c:	2001      	movs	r0, #1
   1b64e:	47b8      	blx	r7
   1b650:	4604      	mov	r4, r0
   1b652:	b9e8      	cbnz	r0, 1b690 <unwind_phase2_forced+0xa8>
   1b654:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1b658:	a97a      	add	r1, sp, #488	; 0x1e8
   1b65a:	4628      	mov	r0, r5
   1b65c:	f7ff fa1e 	bl	1aa9c <memcpy>
   1b660:	f1b9 0f08 	cmp.w	r9, #8
   1b664:	d11b      	bne.n	1b69e <unwind_phase2_forced+0xb6>
   1b666:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1b668:	4630      	mov	r0, r6
   1b66a:	f7ff ff1b 	bl	1b4a4 <get_eit_entry>
   1b66e:	3409      	adds	r4, #9
   1b670:	fa5f fa84 	uxtb.w	sl, r4
   1b674:	4681      	mov	r9, r0
   1b676:	2800      	cmp	r0, #0
   1b678:	d0d3      	beq.n	1b622 <unwind_phase2_forced+0x3a>
   1b67a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1b67c:	f04a 0110 	orr.w	r1, sl, #16
   1b680:	e9cd 5800 	strd	r5, r8, [sp]
   1b684:	4632      	mov	r2, r6
   1b686:	646b      	str	r3, [r5, #68]	; 0x44
   1b688:	2001      	movs	r0, #1
   1b68a:	4633      	mov	r3, r6
   1b68c:	47b8      	blx	r7
   1b68e:	b108      	cbz	r0, 1b694 <unwind_phase2_forced+0xac>
   1b690:	f04f 0909 	mov.w	r9, #9
   1b694:	4648      	mov	r0, r9
   1b696:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b69e:	f1b9 0f07 	cmp.w	r9, #7
   1b6a2:	d1f5      	bne.n	1b690 <unwind_phase2_forced+0xa8>
   1b6a4:	4620      	mov	r0, r4
   1b6a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1b6a8:	f7ff ff7e 	bl	1b5a8 <_Unwind_DebugHook>
   1b6ac:	a803      	add	r0, sp, #12
   1b6ae:	f000 fb89 	bl	1bdc4 <__restore_core_regs>
   1b6b2:	bf00      	nop

0001b6b4 <_Unwind_GetCFA>:
   1b6b4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1b6b6:	4770      	bx	lr

0001b6b8 <__gnu_Unwind_RaiseException>:
   1b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1b6bc:	640b      	str	r3, [r1, #64]	; 0x40
   1b6be:	1d0e      	adds	r6, r1, #4
   1b6c0:	460f      	mov	r7, r1
   1b6c2:	4605      	mov	r5, r0
   1b6c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b6c6:	b0f9      	sub	sp, #484	; 0x1e4
   1b6c8:	ac01      	add	r4, sp, #4
   1b6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b6cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b6d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b6d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b6d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1b6d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b6dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1b6e0:	9600      	str	r6, [sp, #0]
   1b6e2:	e006      	b.n	1b6f2 <__gnu_Unwind_RaiseException+0x3a>
   1b6e4:	692b      	ldr	r3, [r5, #16]
   1b6e6:	466a      	mov	r2, sp
   1b6e8:	4629      	mov	r1, r5
   1b6ea:	4798      	blx	r3
   1b6ec:	2808      	cmp	r0, #8
   1b6ee:	4604      	mov	r4, r0
   1b6f0:	d108      	bne.n	1b704 <__gnu_Unwind_RaiseException+0x4c>
   1b6f2:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b6f4:	4628      	mov	r0, r5
   1b6f6:	f7ff fed5 	bl	1b4a4 <get_eit_entry>
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	d0f2      	beq.n	1b6e4 <__gnu_Unwind_RaiseException+0x2c>
   1b6fe:	2009      	movs	r0, #9
   1b700:	b079      	add	sp, #484	; 0x1e4
   1b702:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b704:	4668      	mov	r0, sp
   1b706:	f7ff ff1b 	bl	1b540 <restore_non_core_regs>
   1b70a:	2c06      	cmp	r4, #6
   1b70c:	d1f7      	bne.n	1b6fe <__gnu_Unwind_RaiseException+0x46>
   1b70e:	4639      	mov	r1, r7
   1b710:	4628      	mov	r0, r5
   1b712:	f7ff ff4b 	bl	1b5ac <unwind_phase2>
   1b716:	bf00      	nop

0001b718 <__gnu_Unwind_ForcedUnwind>:
   1b718:	b430      	push	{r4, r5}
   1b71a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1b71c:	60c1      	str	r1, [r0, #12]
   1b71e:	6182      	str	r2, [r0, #24]
   1b720:	4619      	mov	r1, r3
   1b722:	641d      	str	r5, [r3, #64]	; 0x40
   1b724:	2200      	movs	r2, #0
   1b726:	bc30      	pop	{r4, r5}
   1b728:	e75e      	b.n	1b5e8 <unwind_phase2_forced>
   1b72a:	bf00      	nop

0001b72c <__gnu_Unwind_Resume>:
   1b72c:	b570      	push	{r4, r5, r6, lr}
   1b72e:	68c6      	ldr	r6, [r0, #12]
   1b730:	6943      	ldr	r3, [r0, #20]
   1b732:	640b      	str	r3, [r1, #64]	; 0x40
   1b734:	b9ae      	cbnz	r6, 1b762 <__gnu_Unwind_Resume+0x36>
   1b736:	6903      	ldr	r3, [r0, #16]
   1b738:	460a      	mov	r2, r1
   1b73a:	4604      	mov	r4, r0
   1b73c:	460d      	mov	r5, r1
   1b73e:	4601      	mov	r1, r0
   1b740:	2002      	movs	r0, #2
   1b742:	4798      	blx	r3
   1b744:	2807      	cmp	r0, #7
   1b746:	d005      	beq.n	1b754 <__gnu_Unwind_Resume+0x28>
   1b748:	2808      	cmp	r0, #8
   1b74a:	d10f      	bne.n	1b76c <__gnu_Unwind_Resume+0x40>
   1b74c:	4629      	mov	r1, r5
   1b74e:	4620      	mov	r0, r4
   1b750:	f7ff ff2c 	bl	1b5ac <unwind_phase2>
   1b754:	4630      	mov	r0, r6
   1b756:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1b758:	f7ff ff26 	bl	1b5a8 <_Unwind_DebugHook>
   1b75c:	1d28      	adds	r0, r5, #4
   1b75e:	f000 fb31 	bl	1bdc4 <__restore_core_regs>
   1b762:	2201      	movs	r2, #1
   1b764:	f7ff ff40 	bl	1b5e8 <unwind_phase2_forced>
   1b768:	f000 fda2 	bl	1c2b0 <abort>
   1b76c:	f000 fda0 	bl	1c2b0 <abort>

0001b770 <__gnu_Unwind_Resume_or_Rethrow>:
   1b770:	68c2      	ldr	r2, [r0, #12]
   1b772:	b11a      	cbz	r2, 1b77c <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1b774:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1b776:	640a      	str	r2, [r1, #64]	; 0x40
   1b778:	2200      	movs	r2, #0
   1b77a:	e735      	b.n	1b5e8 <unwind_phase2_forced>
   1b77c:	e79c      	b.n	1b6b8 <__gnu_Unwind_RaiseException>
   1b77e:	bf00      	nop

0001b780 <_Unwind_Complete>:
   1b780:	4770      	bx	lr
   1b782:	bf00      	nop

0001b784 <_Unwind_DeleteException>:
   1b784:	6883      	ldr	r3, [r0, #8]
   1b786:	4601      	mov	r1, r0
   1b788:	b10b      	cbz	r3, 1b78e <_Unwind_DeleteException+0xa>
   1b78a:	2001      	movs	r0, #1
   1b78c:	4718      	bx	r3
   1b78e:	4770      	bx	lr

0001b790 <_Unwind_VRS_Get>:
   1b790:	2901      	cmp	r1, #1
   1b792:	d012      	beq.n	1b7ba <_Unwind_VRS_Get+0x2a>
   1b794:	d809      	bhi.n	1b7aa <_Unwind_VRS_Get+0x1a>
   1b796:	b973      	cbnz	r3, 1b7b6 <_Unwind_VRS_Get+0x26>
   1b798:	2a0f      	cmp	r2, #15
   1b79a:	d80c      	bhi.n	1b7b6 <_Unwind_VRS_Get+0x26>
   1b79c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1b7a0:	4618      	mov	r0, r3
   1b7a2:	6853      	ldr	r3, [r2, #4]
   1b7a4:	9a00      	ldr	r2, [sp, #0]
   1b7a6:	6013      	str	r3, [r2, #0]
   1b7a8:	4770      	bx	lr
   1b7aa:	3903      	subs	r1, #3
   1b7ac:	2901      	cmp	r1, #1
   1b7ae:	bf94      	ite	ls
   1b7b0:	2001      	movls	r0, #1
   1b7b2:	2002      	movhi	r0, #2
   1b7b4:	4770      	bx	lr
   1b7b6:	2002      	movs	r0, #2
   1b7b8:	4770      	bx	lr
   1b7ba:	4608      	mov	r0, r1
   1b7bc:	4770      	bx	lr
   1b7be:	bf00      	nop

0001b7c0 <_Unwind_GetGR>:
   1b7c0:	b510      	push	{r4, lr}
   1b7c2:	b084      	sub	sp, #16
   1b7c4:	2300      	movs	r3, #0
   1b7c6:	ac03      	add	r4, sp, #12
   1b7c8:	460a      	mov	r2, r1
   1b7ca:	9400      	str	r4, [sp, #0]
   1b7cc:	4619      	mov	r1, r3
   1b7ce:	f7ff ffdf 	bl	1b790 <_Unwind_VRS_Get>
   1b7d2:	9803      	ldr	r0, [sp, #12]
   1b7d4:	b004      	add	sp, #16
   1b7d6:	bd10      	pop	{r4, pc}

0001b7d8 <_Unwind_VRS_Set>:
   1b7d8:	2901      	cmp	r1, #1
   1b7da:	d012      	beq.n	1b802 <_Unwind_VRS_Set+0x2a>
   1b7dc:	d809      	bhi.n	1b7f2 <_Unwind_VRS_Set+0x1a>
   1b7de:	b973      	cbnz	r3, 1b7fe <_Unwind_VRS_Set+0x26>
   1b7e0:	2a0f      	cmp	r2, #15
   1b7e2:	d80c      	bhi.n	1b7fe <_Unwind_VRS_Set+0x26>
   1b7e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1b7e8:	9a00      	ldr	r2, [sp, #0]
   1b7ea:	6812      	ldr	r2, [r2, #0]
   1b7ec:	6042      	str	r2, [r0, #4]
   1b7ee:	4618      	mov	r0, r3
   1b7f0:	4770      	bx	lr
   1b7f2:	3903      	subs	r1, #3
   1b7f4:	2901      	cmp	r1, #1
   1b7f6:	bf94      	ite	ls
   1b7f8:	2001      	movls	r0, #1
   1b7fa:	2002      	movhi	r0, #2
   1b7fc:	4770      	bx	lr
   1b7fe:	2002      	movs	r0, #2
   1b800:	4770      	bx	lr
   1b802:	4608      	mov	r0, r1
   1b804:	4770      	bx	lr
   1b806:	bf00      	nop

0001b808 <_Unwind_SetGR>:
   1b808:	b510      	push	{r4, lr}
   1b80a:	b084      	sub	sp, #16
   1b80c:	2300      	movs	r3, #0
   1b80e:	ac03      	add	r4, sp, #12
   1b810:	9203      	str	r2, [sp, #12]
   1b812:	9400      	str	r4, [sp, #0]
   1b814:	460a      	mov	r2, r1
   1b816:	4619      	mov	r1, r3
   1b818:	f7ff ffde 	bl	1b7d8 <_Unwind_VRS_Set>
   1b81c:	b004      	add	sp, #16
   1b81e:	bd10      	pop	{r4, pc}

0001b820 <__gnu_Unwind_Backtrace>:
   1b820:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b822:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1b824:	6413      	str	r3, [r2, #64]	; 0x40
   1b826:	1d15      	adds	r5, r2, #4
   1b828:	468c      	mov	ip, r1
   1b82a:	4606      	mov	r6, r0
   1b82c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b82e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1b832:	ac17      	add	r4, sp, #92	; 0x5c
   1b834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b83a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b83c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b83e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b842:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1b84a:	4665      	mov	r5, ip
   1b84c:	9716      	str	r7, [sp, #88]	; 0x58
   1b84e:	e010      	b.n	1b872 <__gnu_Unwind_Backtrace+0x52>
   1b850:	f7ff ffda 	bl	1b808 <_Unwind_SetGR>
   1b854:	4629      	mov	r1, r5
   1b856:	a816      	add	r0, sp, #88	; 0x58
   1b858:	47b0      	blx	r6
   1b85a:	4603      	mov	r3, r0
   1b85c:	aa16      	add	r2, sp, #88	; 0x58
   1b85e:	4669      	mov	r1, sp
   1b860:	2008      	movs	r0, #8
   1b862:	b983      	cbnz	r3, 1b886 <__gnu_Unwind_Backtrace+0x66>
   1b864:	9b04      	ldr	r3, [sp, #16]
   1b866:	4798      	blx	r3
   1b868:	2805      	cmp	r0, #5
   1b86a:	4604      	mov	r4, r0
   1b86c:	d00c      	beq.n	1b888 <__gnu_Unwind_Backtrace+0x68>
   1b86e:	2809      	cmp	r0, #9
   1b870:	d009      	beq.n	1b886 <__gnu_Unwind_Backtrace+0x66>
   1b872:	9926      	ldr	r1, [sp, #152]	; 0x98
   1b874:	4668      	mov	r0, sp
   1b876:	f7ff fe15 	bl	1b4a4 <get_eit_entry>
   1b87a:	4603      	mov	r3, r0
   1b87c:	466a      	mov	r2, sp
   1b87e:	210c      	movs	r1, #12
   1b880:	a816      	add	r0, sp, #88	; 0x58
   1b882:	2b00      	cmp	r3, #0
   1b884:	d0e4      	beq.n	1b850 <__gnu_Unwind_Backtrace+0x30>
   1b886:	2409      	movs	r4, #9
   1b888:	a816      	add	r0, sp, #88	; 0x58
   1b88a:	f7ff fe59 	bl	1b540 <restore_non_core_regs>
   1b88e:	4620      	mov	r0, r4
   1b890:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1b894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b896:	bf00      	nop

0001b898 <__gnu_unwind_pr_common>:
   1b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b89c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   1b89e:	b089      	sub	sp, #36	; 0x24
   1b8a0:	460d      	mov	r5, r1
   1b8a2:	f854 1b04 	ldr.w	r1, [r4], #4
   1b8a6:	9406      	str	r4, [sp, #24]
   1b8a8:	4617      	mov	r7, r2
   1b8aa:	f000 0803 	and.w	r8, r0, #3
   1b8ae:	461e      	mov	r6, r3
   1b8b0:	2b00      	cmp	r3, #0
   1b8b2:	d079      	beq.n	1b9a8 <__gnu_unwind_pr_common+0x110>
   1b8b4:	0c0b      	lsrs	r3, r1, #16
   1b8b6:	b2da      	uxtb	r2, r3
   1b8b8:	0409      	lsls	r1, r1, #16
   1b8ba:	f88d 301d 	strb.w	r3, [sp, #29]
   1b8be:	2302      	movs	r3, #2
   1b8c0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1b8c4:	9105      	str	r1, [sp, #20]
   1b8c6:	f88d 301c 	strb.w	r3, [sp, #28]
   1b8ca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1b8cc:	f1b8 0f02 	cmp.w	r8, #2
   1b8d0:	bf08      	it	eq
   1b8d2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1b8d4:	f013 0301 	ands.w	r3, r3, #1
   1b8d8:	d00c      	beq.n	1b8f4 <__gnu_unwind_pr_common+0x5c>
   1b8da:	4638      	mov	r0, r7
   1b8dc:	a905      	add	r1, sp, #20
   1b8de:	f000 fb73 	bl	1bfc8 <__gnu_unwind_execute>
   1b8e2:	b918      	cbnz	r0, 1b8ec <__gnu_unwind_pr_common+0x54>
   1b8e4:	2008      	movs	r0, #8
   1b8e6:	b009      	add	sp, #36	; 0x24
   1b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ec:	2009      	movs	r0, #9
   1b8ee:	b009      	add	sp, #36	; 0x24
   1b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8f4:	f8d4 a000 	ldr.w	sl, [r4]
   1b8f8:	f1ba 0f00 	cmp.w	sl, #0
   1b8fc:	d0ed      	beq.n	1b8da <__gnu_unwind_pr_common+0x42>
   1b8fe:	9301      	str	r3, [sp, #4]
   1b900:	f000 0308 	and.w	r3, r0, #8
   1b904:	9302      	str	r3, [sp, #8]
   1b906:	2e02      	cmp	r6, #2
   1b908:	d04a      	beq.n	1b9a0 <__gnu_unwind_pr_common+0x108>
   1b90a:	f8b4 a000 	ldrh.w	sl, [r4]
   1b90e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   1b912:	3404      	adds	r4, #4
   1b914:	6caa      	ldr	r2, [r5, #72]	; 0x48
   1b916:	f029 0b01 	bic.w	fp, r9, #1
   1b91a:	210f      	movs	r1, #15
   1b91c:	4638      	mov	r0, r7
   1b91e:	4493      	add	fp, r2
   1b920:	f7ff ff4e 	bl	1b7c0 <_Unwind_GetGR>
   1b924:	4583      	cmp	fp, r0
   1b926:	d839      	bhi.n	1b99c <__gnu_unwind_pr_common+0x104>
   1b928:	f02a 0201 	bic.w	r2, sl, #1
   1b92c:	445a      	add	r2, fp
   1b92e:	4282      	cmp	r2, r0
   1b930:	bf94      	ite	ls
   1b932:	2000      	movls	r0, #0
   1b934:	2001      	movhi	r0, #1
   1b936:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1b93a:	f003 0302 	and.w	r3, r3, #2
   1b93e:	f00a 0a01 	and.w	sl, sl, #1
   1b942:	ea43 030a 	orr.w	r3, r3, sl
   1b946:	2b01      	cmp	r3, #1
   1b948:	d049      	beq.n	1b9de <__gnu_unwind_pr_common+0x146>
   1b94a:	2b02      	cmp	r3, #2
   1b94c:	d032      	beq.n	1b9b4 <__gnu_unwind_pr_common+0x11c>
   1b94e:	2b00      	cmp	r3, #0
   1b950:	d1cc      	bne.n	1b8ec <__gnu_unwind_pr_common+0x54>
   1b952:	f1b8 0f00 	cmp.w	r8, #0
   1b956:	d002      	beq.n	1b95e <__gnu_unwind_pr_common+0xc6>
   1b958:	2800      	cmp	r0, #0
   1b95a:	f040 80cd 	bne.w	1baf8 <__gnu_unwind_pr_common+0x260>
   1b95e:	3404      	adds	r4, #4
   1b960:	f8d4 a000 	ldr.w	sl, [r4]
   1b964:	f1ba 0f00 	cmp.w	sl, #0
   1b968:	d1cd      	bne.n	1b906 <__gnu_unwind_pr_common+0x6e>
   1b96a:	a905      	add	r1, sp, #20
   1b96c:	4638      	mov	r0, r7
   1b96e:	f000 fb2b 	bl	1bfc8 <__gnu_unwind_execute>
   1b972:	2800      	cmp	r0, #0
   1b974:	d1ba      	bne.n	1b8ec <__gnu_unwind_pr_common+0x54>
   1b976:	9b01      	ldr	r3, [sp, #4]
   1b978:	2b00      	cmp	r3, #0
   1b97a:	d0b3      	beq.n	1b8e4 <__gnu_unwind_pr_common+0x4c>
   1b97c:	210f      	movs	r1, #15
   1b97e:	4638      	mov	r0, r7
   1b980:	f7ff ff1e 	bl	1b7c0 <_Unwind_GetGR>
   1b984:	210e      	movs	r1, #14
   1b986:	4602      	mov	r2, r0
   1b988:	4638      	mov	r0, r7
   1b98a:	f7ff ff3d 	bl	1b808 <_Unwind_SetGR>
   1b98e:	4638      	mov	r0, r7
   1b990:	4a6a      	ldr	r2, [pc, #424]	; (1bb3c <__gnu_unwind_pr_common+0x2a4>)
   1b992:	210f      	movs	r1, #15
   1b994:	f7ff ff38 	bl	1b808 <_Unwind_SetGR>
   1b998:	2007      	movs	r0, #7
   1b99a:	e7a8      	b.n	1b8ee <__gnu_unwind_pr_common+0x56>
   1b99c:	2000      	movs	r0, #0
   1b99e:	e7ca      	b.n	1b936 <__gnu_unwind_pr_common+0x9e>
   1b9a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1b9a4:	3408      	adds	r4, #8
   1b9a6:	e7b5      	b.n	1b914 <__gnu_unwind_pr_common+0x7c>
   1b9a8:	0209      	lsls	r1, r1, #8
   1b9aa:	2303      	movs	r3, #3
   1b9ac:	9105      	str	r1, [sp, #20]
   1b9ae:	f8ad 301c 	strh.w	r3, [sp, #28]
   1b9b2:	e78a      	b.n	1b8ca <__gnu_unwind_pr_common+0x32>
   1b9b4:	6823      	ldr	r3, [r4, #0]
   1b9b6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   1b9ba:	f1b8 0f00 	cmp.w	r8, #0
   1b9be:	d145      	bne.n	1ba4c <__gnu_unwind_pr_common+0x1b4>
   1b9c0:	b128      	cbz	r0, 1b9ce <__gnu_unwind_pr_common+0x136>
   1b9c2:	9a02      	ldr	r2, [sp, #8]
   1b9c4:	2a00      	cmp	r2, #0
   1b9c6:	d05c      	beq.n	1ba82 <__gnu_unwind_pr_common+0x1ea>
   1b9c8:	f1bb 0f00 	cmp.w	fp, #0
   1b9cc:	d074      	beq.n	1bab8 <__gnu_unwind_pr_common+0x220>
   1b9ce:	2b00      	cmp	r3, #0
   1b9d0:	da00      	bge.n	1b9d4 <__gnu_unwind_pr_common+0x13c>
   1b9d2:	3404      	adds	r4, #4
   1b9d4:	f10b 0b01 	add.w	fp, fp, #1
   1b9d8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   1b9dc:	e7c0      	b.n	1b960 <__gnu_unwind_pr_common+0xc8>
   1b9de:	f1b8 0f00 	cmp.w	r8, #0
   1b9e2:	d119      	bne.n	1ba18 <__gnu_unwind_pr_common+0x180>
   1b9e4:	b1b0      	cbz	r0, 1ba14 <__gnu_unwind_pr_common+0x17c>
   1b9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b9ea:	1c99      	adds	r1, r3, #2
   1b9ec:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1b9f0:	f43f af7c 	beq.w	1b8ec <__gnu_unwind_pr_common+0x54>
   1b9f4:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1b9f8:	3301      	adds	r3, #1
   1b9fa:	9104      	str	r1, [sp, #16]
   1b9fc:	f000 8090 	beq.w	1bb20 <__gnu_unwind_pr_common+0x288>
   1ba00:	1d20      	adds	r0, r4, #4
   1ba02:	f7ff fdc9 	bl	1b598 <_Unwind_decode_typeinfo_ptr.isra.0>
   1ba06:	ab04      	add	r3, sp, #16
   1ba08:	4601      	mov	r1, r0
   1ba0a:	4628      	mov	r0, r5
   1ba0c:	f3af 8000 	nop.w
   1ba10:	2800      	cmp	r0, #0
   1ba12:	d15b      	bne.n	1bacc <__gnu_unwind_pr_common+0x234>
   1ba14:	3408      	adds	r4, #8
   1ba16:	e7a3      	b.n	1b960 <__gnu_unwind_pr_common+0xc8>
   1ba18:	210d      	movs	r1, #13
   1ba1a:	4638      	mov	r0, r7
   1ba1c:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1ba20:	f7ff fece 	bl	1b7c0 <_Unwind_GetGR>
   1ba24:	4581      	cmp	r9, r0
   1ba26:	d1f5      	bne.n	1ba14 <__gnu_unwind_pr_common+0x17c>
   1ba28:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ba2a:	429c      	cmp	r4, r3
   1ba2c:	d1f2      	bne.n	1ba14 <__gnu_unwind_pr_common+0x17c>
   1ba2e:	4620      	mov	r0, r4
   1ba30:	f7ff fcec 	bl	1b40c <selfrel_offset31>
   1ba34:	210f      	movs	r1, #15
   1ba36:	4602      	mov	r2, r0
   1ba38:	4638      	mov	r0, r7
   1ba3a:	f7ff fee5 	bl	1b808 <_Unwind_SetGR>
   1ba3e:	4638      	mov	r0, r7
   1ba40:	462a      	mov	r2, r5
   1ba42:	2100      	movs	r1, #0
   1ba44:	f7ff fee0 	bl	1b808 <_Unwind_SetGR>
   1ba48:	2007      	movs	r0, #7
   1ba4a:	e750      	b.n	1b8ee <__gnu_unwind_pr_common+0x56>
   1ba4c:	210d      	movs	r1, #13
   1ba4e:	4638      	mov	r0, r7
   1ba50:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1ba54:	f7ff feb4 	bl	1b7c0 <_Unwind_GetGR>
   1ba58:	4581      	cmp	r9, r0
   1ba5a:	d001      	beq.n	1ba60 <__gnu_unwind_pr_common+0x1c8>
   1ba5c:	6823      	ldr	r3, [r4, #0]
   1ba5e:	e7b6      	b.n	1b9ce <__gnu_unwind_pr_common+0x136>
   1ba60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ba62:	429c      	cmp	r4, r3
   1ba64:	d1fa      	bne.n	1ba5c <__gnu_unwind_pr_common+0x1c4>
   1ba66:	2204      	movs	r2, #4
   1ba68:	2100      	movs	r1, #0
   1ba6a:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
   1ba6e:	18a3      	adds	r3, r4, r2
   1ba70:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   1ba74:	636b      	str	r3, [r5, #52]	; 0x34
   1ba76:	6823      	ldr	r3, [r4, #0]
   1ba78:	428b      	cmp	r3, r1
   1ba7a:	db59      	blt.n	1bb30 <__gnu_unwind_pr_common+0x298>
   1ba7c:	2301      	movs	r3, #1
   1ba7e:	9301      	str	r3, [sp, #4]
   1ba80:	e7a8      	b.n	1b9d4 <__gnu_unwind_pr_common+0x13c>
   1ba82:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1ba86:	f8cd 800c 	str.w	r8, [sp, #12]
   1ba8a:	f104 0a04 	add.w	sl, r4, #4
   1ba8e:	46b0      	mov	r8, r6
   1ba90:	4691      	mov	r9, r2
   1ba92:	461e      	mov	r6, r3
   1ba94:	e00d      	b.n	1bab2 <__gnu_unwind_pr_common+0x21a>
   1ba96:	9604      	str	r6, [sp, #16]
   1ba98:	f7ff fd7e 	bl	1b598 <_Unwind_decode_typeinfo_ptr.isra.0>
   1ba9c:	ab04      	add	r3, sp, #16
   1ba9e:	4601      	mov	r1, r0
   1baa0:	2200      	movs	r2, #0
   1baa2:	4628      	mov	r0, r5
   1baa4:	f3af 8000 	nop.w
   1baa8:	f109 0901 	add.w	r9, r9, #1
   1baac:	f10a 0a04 	add.w	sl, sl, #4
   1bab0:	b9e8      	cbnz	r0, 1baee <__gnu_unwind_pr_common+0x256>
   1bab2:	45d9      	cmp	r9, fp
   1bab4:	4650      	mov	r0, sl
   1bab6:	d1ee      	bne.n	1ba96 <__gnu_unwind_pr_common+0x1fe>
   1bab8:	4638      	mov	r0, r7
   1baba:	210d      	movs	r1, #13
   1babc:	f7ff fe80 	bl	1b7c0 <_Unwind_GetGR>
   1bac0:	9b04      	ldr	r3, [sp, #16]
   1bac2:	6228      	str	r0, [r5, #32]
   1bac4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   1bac8:	2006      	movs	r0, #6
   1baca:	e710      	b.n	1b8ee <__gnu_unwind_pr_common+0x56>
   1bacc:	4681      	mov	r9, r0
   1bace:	210d      	movs	r1, #13
   1bad0:	4638      	mov	r0, r7
   1bad2:	f7ff fe75 	bl	1b7c0 <_Unwind_GetGR>
   1bad6:	f1b9 0f02 	cmp.w	r9, #2
   1bada:	6228      	str	r0, [r5, #32]
   1badc:	d125      	bne.n	1bb2a <__gnu_unwind_pr_common+0x292>
   1bade:	462b      	mov	r3, r5
   1bae0:	9a04      	ldr	r2, [sp, #16]
   1bae2:	f843 2f2c 	str.w	r2, [r3, #44]!
   1bae6:	626b      	str	r3, [r5, #36]	; 0x24
   1bae8:	62ac      	str	r4, [r5, #40]	; 0x28
   1baea:	2006      	movs	r0, #6
   1baec:	e6ff      	b.n	1b8ee <__gnu_unwind_pr_common+0x56>
   1baee:	4646      	mov	r6, r8
   1baf0:	6823      	ldr	r3, [r4, #0]
   1baf2:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1baf6:	e76a      	b.n	1b9ce <__gnu_unwind_pr_common+0x136>
   1baf8:	4620      	mov	r0, r4
   1bafa:	f7ff fc87 	bl	1b40c <selfrel_offset31>
   1bafe:	3404      	adds	r4, #4
   1bb00:	4602      	mov	r2, r0
   1bb02:	63ac      	str	r4, [r5, #56]	; 0x38
   1bb04:	4628      	mov	r0, r5
   1bb06:	4614      	mov	r4, r2
   1bb08:	f3af 8000 	nop.w
   1bb0c:	2800      	cmp	r0, #0
   1bb0e:	f43f aeed 	beq.w	1b8ec <__gnu_unwind_pr_common+0x54>
   1bb12:	4638      	mov	r0, r7
   1bb14:	4622      	mov	r2, r4
   1bb16:	210f      	movs	r1, #15
   1bb18:	f7ff fe76 	bl	1b808 <_Unwind_SetGR>
   1bb1c:	2007      	movs	r0, #7
   1bb1e:	e6e6      	b.n	1b8ee <__gnu_unwind_pr_common+0x56>
   1bb20:	4638      	mov	r0, r7
   1bb22:	210d      	movs	r1, #13
   1bb24:	f7ff fe4c 	bl	1b7c0 <_Unwind_GetGR>
   1bb28:	6228      	str	r0, [r5, #32]
   1bb2a:	9b04      	ldr	r3, [sp, #16]
   1bb2c:	626b      	str	r3, [r5, #36]	; 0x24
   1bb2e:	e7db      	b.n	1bae8 <__gnu_unwind_pr_common+0x250>
   1bb30:	f10b 0001 	add.w	r0, fp, #1
   1bb34:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1bb38:	e77a      	b.n	1ba30 <__gnu_unwind_pr_common+0x198>
   1bb3a:	bf00      	nop
   1bb3c:	00000000 	.word	0x00000000

0001bb40 <__aeabi_unwind_cpp_pr0>:
   1bb40:	2300      	movs	r3, #0
   1bb42:	e6a9      	b.n	1b898 <__gnu_unwind_pr_common>

0001bb44 <__aeabi_unwind_cpp_pr1>:
   1bb44:	2301      	movs	r3, #1
   1bb46:	e6a7      	b.n	1b898 <__gnu_unwind_pr_common>

0001bb48 <__aeabi_unwind_cpp_pr2>:
   1bb48:	2302      	movs	r3, #2
   1bb4a:	e6a5      	b.n	1b898 <__gnu_unwind_pr_common>

0001bb4c <_Unwind_VRS_Pop>:
   1bb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb50:	4606      	mov	r6, r0
   1bb52:	b0c3      	sub	sp, #268	; 0x10c
   1bb54:	4615      	mov	r5, r2
   1bb56:	461c      	mov	r4, r3
   1bb58:	2904      	cmp	r1, #4
   1bb5a:	f200 80b9 	bhi.w	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bb5e:	e8df f001 	tbb	[pc, r1]
   1bb62:	539a      	.short	0x539a
   1bb64:	29b7      	.short	0x29b7
   1bb66:	03          	.byte	0x03
   1bb67:	00          	.byte	0x00
   1bb68:	2c00      	cmp	r4, #0
   1bb6a:	f040 80b1 	bne.w	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bb6e:	2a10      	cmp	r2, #16
   1bb70:	f200 80ae 	bhi.w	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bb74:	6803      	ldr	r3, [r0, #0]
   1bb76:	06d8      	lsls	r0, r3, #27
   1bb78:	f100 80f3 	bmi.w	1bd62 <_Unwind_VRS_Pop+0x216>
   1bb7c:	af20      	add	r7, sp, #128	; 0x80
   1bb7e:	4638      	mov	r0, r7
   1bb80:	f000 f992 	bl	1bea8 <__gnu_Unwind_Save_WMMXC>
   1bb84:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1bb86:	2300      	movs	r3, #0
   1bb88:	2401      	movs	r4, #1
   1bb8a:	fa04 f203 	lsl.w	r2, r4, r3
   1bb8e:	422a      	tst	r2, r5
   1bb90:	4601      	mov	r1, r0
   1bb92:	d004      	beq.n	1bb9e <_Unwind_VRS_Pop+0x52>
   1bb94:	f851 2b04 	ldr.w	r2, [r1], #4
   1bb98:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1bb9c:	4608      	mov	r0, r1
   1bb9e:	3301      	adds	r3, #1
   1bba0:	2b04      	cmp	r3, #4
   1bba2:	d1f2      	bne.n	1bb8a <_Unwind_VRS_Pop+0x3e>
   1bba4:	63b0      	str	r0, [r6, #56]	; 0x38
   1bba6:	4638      	mov	r0, r7
   1bba8:	f000 f974 	bl	1be94 <__gnu_Unwind_Restore_WMMXC>
   1bbac:	2000      	movs	r0, #0
   1bbae:	b043      	add	sp, #268	; 0x10c
   1bbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bbb4:	2c03      	cmp	r4, #3
   1bbb6:	f040 808b 	bne.w	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bbba:	b294      	uxth	r4, r2
   1bbbc:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   1bbc0:	2b10      	cmp	r3, #16
   1bbc2:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1bbc6:	f200 8083 	bhi.w	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bbca:	6803      	ldr	r3, [r0, #0]
   1bbcc:	071f      	lsls	r7, r3, #28
   1bbce:	f100 80d0 	bmi.w	1bd72 <_Unwind_VRS_Pop+0x226>
   1bbd2:	af20      	add	r7, sp, #128	; 0x80
   1bbd4:	4638      	mov	r0, r7
   1bbd6:	f000 f93b 	bl	1be50 <__gnu_Unwind_Save_WMMXD>
   1bbda:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1bbde:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   1bbe0:	b154      	cbz	r4, 1bbf8 <_Unwind_VRS_Pop+0xac>
   1bbe2:	460b      	mov	r3, r1
   1bbe4:	1ae8      	subs	r0, r5, r3
   1bbe6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   1bbea:	00e4      	lsls	r4, r4, #3
   1bbec:	581a      	ldr	r2, [r3, r0]
   1bbee:	f843 2b04 	str.w	r2, [r3], #4
   1bbf2:	428b      	cmp	r3, r1
   1bbf4:	d1fa      	bne.n	1bbec <_Unwind_VRS_Pop+0xa0>
   1bbf6:	4425      	add	r5, r4
   1bbf8:	4638      	mov	r0, r7
   1bbfa:	63b5      	str	r5, [r6, #56]	; 0x38
   1bbfc:	f000 f906 	bl	1be0c <__gnu_Unwind_Restore_WMMXD>
   1bc00:	2000      	movs	r0, #0
   1bc02:	b043      	add	sp, #268	; 0x10c
   1bc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bc08:	2c01      	cmp	r4, #1
   1bc0a:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1bc0e:	b295      	uxth	r5, r2
   1bc10:	d05a      	beq.n	1bcc8 <_Unwind_VRS_Pop+0x17c>
   1bc12:	2c05      	cmp	r4, #5
   1bc14:	d15c      	bne.n	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bc16:	eb08 0905 	add.w	r9, r8, r5
   1bc1a:	f1b9 0f20 	cmp.w	r9, #32
   1bc1e:	d857      	bhi.n	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bc20:	f1b8 0f0f 	cmp.w	r8, #15
   1bc24:	d977      	bls.n	1bd16 <_Unwind_VRS_Pop+0x1ca>
   1bc26:	46a9      	mov	r9, r5
   1bc28:	2d00      	cmp	r5, #0
   1bc2a:	f040 8088 	bne.w	1bd3e <_Unwind_VRS_Pop+0x1f2>
   1bc2e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1bc30:	b36d      	cbz	r5, 1bc8e <_Unwind_VRS_Pop+0x142>
   1bc32:	af20      	add	r7, sp, #128	; 0x80
   1bc34:	f04f 0900 	mov.w	r9, #0
   1bc38:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   1bc3c:	3f04      	subs	r7, #4
   1bc3e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1bc42:	f853 1b04 	ldr.w	r1, [r3], #4
   1bc46:	f847 1f04 	str.w	r1, [r7, #4]!
   1bc4a:	42ab      	cmp	r3, r5
   1bc4c:	d1f9      	bne.n	1bc42 <_Unwind_VRS_Pop+0xf6>
   1bc4e:	f1b9 0f00 	cmp.w	r9, #0
   1bc52:	d00f      	beq.n	1bc74 <_Unwind_VRS_Pop+0x128>
   1bc54:	466f      	mov	r7, sp
   1bc56:	4641      	mov	r1, r8
   1bc58:	2910      	cmp	r1, #16
   1bc5a:	bf38      	it	cc
   1bc5c:	2110      	movcc	r1, #16
   1bc5e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1bc62:	3984      	subs	r1, #132	; 0x84
   1bc64:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   1bc68:	f853 0b04 	ldr.w	r0, [r3], #4
   1bc6c:	f841 0f04 	str.w	r0, [r1, #4]!
   1bc70:	42ab      	cmp	r3, r5
   1bc72:	d1f9      	bne.n	1bc68 <_Unwind_VRS_Pop+0x11c>
   1bc74:	2c01      	cmp	r4, #1
   1bc76:	f000 8084 	beq.w	1bd82 <_Unwind_VRS_Pop+0x236>
   1bc7a:	f1b8 0f0f 	cmp.w	r8, #15
   1bc7e:	63b5      	str	r5, [r6, #56]	; 0x38
   1bc80:	d945      	bls.n	1bd0e <_Unwind_VRS_Pop+0x1c2>
   1bc82:	f1b9 0f00 	cmp.w	r9, #0
   1bc86:	d002      	beq.n	1bc8e <_Unwind_VRS_Pop+0x142>
   1bc88:	4668      	mov	r0, sp
   1bc8a:	f000 f8b7 	bl	1bdfc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1bc8e:	2000      	movs	r0, #0
   1bc90:	b043      	add	sp, #268	; 0x10c
   1bc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bc96:	b9dc      	cbnz	r4, 1bcd0 <_Unwind_VRS_Pop+0x184>
   1bc98:	6b87      	ldr	r7, [r0, #56]	; 0x38
   1bc9a:	4623      	mov	r3, r4
   1bc9c:	2001      	movs	r0, #1
   1bc9e:	b294      	uxth	r4, r2
   1bca0:	f106 0c04 	add.w	ip, r6, #4
   1bca4:	fa00 f203 	lsl.w	r2, r0, r3
   1bca8:	4222      	tst	r2, r4
   1bcaa:	4639      	mov	r1, r7
   1bcac:	d004      	beq.n	1bcb8 <_Unwind_VRS_Pop+0x16c>
   1bcae:	f851 2b04 	ldr.w	r2, [r1], #4
   1bcb2:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
   1bcb6:	460f      	mov	r7, r1
   1bcb8:	3301      	adds	r3, #1
   1bcba:	2b10      	cmp	r3, #16
   1bcbc:	d1f2      	bne.n	1bca4 <_Unwind_VRS_Pop+0x158>
   1bcbe:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   1bcc2:	d1e4      	bne.n	1bc8e <_Unwind_VRS_Pop+0x142>
   1bcc4:	63b7      	str	r7, [r6, #56]	; 0x38
   1bcc6:	e004      	b.n	1bcd2 <_Unwind_VRS_Pop+0x186>
   1bcc8:	eb08 0305 	add.w	r3, r8, r5
   1bccc:	2b10      	cmp	r3, #16
   1bcce:	d903      	bls.n	1bcd8 <_Unwind_VRS_Pop+0x18c>
   1bcd0:	2002      	movs	r0, #2
   1bcd2:	b043      	add	sp, #268	; 0x10c
   1bcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bcd8:	f1b8 0f0f 	cmp.w	r8, #15
   1bcdc:	d8f8      	bhi.n	1bcd0 <_Unwind_VRS_Pop+0x184>
   1bcde:	6833      	ldr	r3, [r6, #0]
   1bce0:	07da      	lsls	r2, r3, #31
   1bce2:	d506      	bpl.n	1bcf2 <_Unwind_VRS_Pop+0x1a6>
   1bce4:	4630      	mov	r0, r6
   1bce6:	f023 0303 	bic.w	r3, r3, #3
   1bcea:	f840 3b48 	str.w	r3, [r0], #72
   1bcee:	f000 f879 	bl	1bde4 <__gnu_Unwind_Save_VFP>
   1bcf2:	af20      	add	r7, sp, #128	; 0x80
   1bcf4:	4638      	mov	r0, r7
   1bcf6:	f000 f875 	bl	1bde4 <__gnu_Unwind_Save_VFP>
   1bcfa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1bcfc:	2d00      	cmp	r5, #0
   1bcfe:	d199      	bne.n	1bc34 <_Unwind_VRS_Pop+0xe8>
   1bd00:	461d      	mov	r5, r3
   1bd02:	3504      	adds	r5, #4
   1bd04:	63b5      	str	r5, [r6, #56]	; 0x38
   1bd06:	4638      	mov	r0, r7
   1bd08:	f000 f868 	bl	1bddc <__gnu_Unwind_Restore_VFP>
   1bd0c:	e7bf      	b.n	1bc8e <_Unwind_VRS_Pop+0x142>
   1bd0e:	a820      	add	r0, sp, #128	; 0x80
   1bd10:	f000 f86c 	bl	1bdec <__gnu_Unwind_Restore_VFP_D>
   1bd14:	e7b5      	b.n	1bc82 <_Unwind_VRS_Pop+0x136>
   1bd16:	f1b9 0f10 	cmp.w	r9, #16
   1bd1a:	d940      	bls.n	1bd9e <_Unwind_VRS_Pop+0x252>
   1bd1c:	f1a9 0910 	sub.w	r9, r9, #16
   1bd20:	6833      	ldr	r3, [r6, #0]
   1bd22:	07d9      	lsls	r1, r3, #31
   1bd24:	d508      	bpl.n	1bd38 <_Unwind_VRS_Pop+0x1ec>
   1bd26:	f023 0301 	bic.w	r3, r3, #1
   1bd2a:	4630      	mov	r0, r6
   1bd2c:	f043 0302 	orr.w	r3, r3, #2
   1bd30:	f840 3b48 	str.w	r3, [r0], #72
   1bd34:	f000 f85e 	bl	1bdf4 <__gnu_Unwind_Save_VFP_D>
   1bd38:	f1b9 0f00 	cmp.w	r9, #0
   1bd3c:	d032      	beq.n	1bda4 <_Unwind_VRS_Pop+0x258>
   1bd3e:	6833      	ldr	r3, [r6, #0]
   1bd40:	075a      	lsls	r2, r3, #29
   1bd42:	d420      	bmi.n	1bd86 <_Unwind_VRS_Pop+0x23a>
   1bd44:	f1b8 0f0f 	cmp.w	r8, #15
   1bd48:	d925      	bls.n	1bd96 <_Unwind_VRS_Pop+0x24a>
   1bd4a:	466f      	mov	r7, sp
   1bd4c:	4638      	mov	r0, r7
   1bd4e:	f1c8 0510 	rsb	r5, r8, #16
   1bd52:	f000 f857 	bl	1be04 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1bd56:	2d00      	cmp	r5, #0
   1bd58:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1bd5a:	f77f af7c 	ble.w	1bc56 <_Unwind_VRS_Pop+0x10a>
   1bd5e:	af20      	add	r7, sp, #128	; 0x80
   1bd60:	e76a      	b.n	1bc38 <_Unwind_VRS_Pop+0xec>
   1bd62:	f023 0310 	bic.w	r3, r3, #16
   1bd66:	6033      	str	r3, [r6, #0]
   1bd68:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
   1bd6c:	f000 f89c 	bl	1bea8 <__gnu_Unwind_Save_WMMXC>
   1bd70:	e704      	b.n	1bb7c <_Unwind_VRS_Pop+0x30>
   1bd72:	f023 0308 	bic.w	r3, r3, #8
   1bd76:	6003      	str	r3, [r0, #0]
   1bd78:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bd7c:	f000 f868 	bl	1be50 <__gnu_Unwind_Save_WMMXD>
   1bd80:	e727      	b.n	1bbd2 <_Unwind_VRS_Pop+0x86>
   1bd82:	af20      	add	r7, sp, #128	; 0x80
   1bd84:	e7bd      	b.n	1bd02 <_Unwind_VRS_Pop+0x1b6>
   1bd86:	4630      	mov	r0, r6
   1bd88:	f023 0304 	bic.w	r3, r3, #4
   1bd8c:	f840 3bd0 	str.w	r3, [r0], #208
   1bd90:	f000 f838 	bl	1be04 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1bd94:	e7d6      	b.n	1bd44 <_Unwind_VRS_Pop+0x1f8>
   1bd96:	a820      	add	r0, sp, #128	; 0x80
   1bd98:	f000 f82c 	bl	1bdf4 <__gnu_Unwind_Save_VFP_D>
   1bd9c:	e7d5      	b.n	1bd4a <_Unwind_VRS_Pop+0x1fe>
   1bd9e:	f04f 0900 	mov.w	r9, #0
   1bda2:	e7bd      	b.n	1bd20 <_Unwind_VRS_Pop+0x1d4>
   1bda4:	f1b8 0f0f 	cmp.w	r8, #15
   1bda8:	f63f af41 	bhi.w	1bc2e <_Unwind_VRS_Pop+0xe2>
   1bdac:	af20      	add	r7, sp, #128	; 0x80
   1bdae:	4638      	mov	r0, r7
   1bdb0:	f000 f820 	bl	1bdf4 <__gnu_Unwind_Save_VFP_D>
   1bdb4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1bdb6:	2d00      	cmp	r5, #0
   1bdb8:	f47f af3c 	bne.w	1bc34 <_Unwind_VRS_Pop+0xe8>
   1bdbc:	4638      	mov	r0, r7
   1bdbe:	f000 f815 	bl	1bdec <__gnu_Unwind_Restore_VFP_D>
   1bdc2:	e764      	b.n	1bc8e <_Unwind_VRS_Pop+0x142>

0001bdc4 <__restore_core_regs>:
   1bdc4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1bdc8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1bdcc:	469c      	mov	ip, r3
   1bdce:	46a6      	mov	lr, r4
   1bdd0:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1bdd4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1bdd8:	46e5      	mov	sp, ip
   1bdda:	bd00      	pop	{pc}

0001bddc <__gnu_Unwind_Restore_VFP>:
   1bddc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1bde0:	4770      	bx	lr
   1bde2:	bf00      	nop

0001bde4 <__gnu_Unwind_Save_VFP>:
   1bde4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1bde8:	4770      	bx	lr
   1bdea:	bf00      	nop

0001bdec <__gnu_Unwind_Restore_VFP_D>:
   1bdec:	ec90 0b20 	vldmia	r0, {d0-d15}
   1bdf0:	4770      	bx	lr
   1bdf2:	bf00      	nop

0001bdf4 <__gnu_Unwind_Save_VFP_D>:
   1bdf4:	ec80 0b20 	vstmia	r0, {d0-d15}
   1bdf8:	4770      	bx	lr
   1bdfa:	bf00      	nop

0001bdfc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1bdfc:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1be00:	4770      	bx	lr
   1be02:	bf00      	nop

0001be04 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1be04:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1be08:	4770      	bx	lr
   1be0a:	bf00      	nop

0001be0c <__gnu_Unwind_Restore_WMMXD>:
   1be0c:	ecf0 0102 	ldfe	f0, [r0], #8
   1be10:	ecf0 1102 	ldfe	f1, [r0], #8
   1be14:	ecf0 2102 	ldfe	f2, [r0], #8
   1be18:	ecf0 3102 	ldfe	f3, [r0], #8
   1be1c:	ecf0 4102 	ldfe	f4, [r0], #8
   1be20:	ecf0 5102 	ldfe	f5, [r0], #8
   1be24:	ecf0 6102 	ldfe	f6, [r0], #8
   1be28:	ecf0 7102 	ldfe	f7, [r0], #8
   1be2c:	ecf0 8102 	ldfp	f0, [r0], #8
   1be30:	ecf0 9102 	ldfp	f1, [r0], #8
   1be34:	ecf0 a102 	ldfp	f2, [r0], #8
   1be38:	ecf0 b102 	ldfp	f3, [r0], #8
   1be3c:	ecf0 c102 	ldfp	f4, [r0], #8
   1be40:	ecf0 d102 	ldfp	f5, [r0], #8
   1be44:	ecf0 e102 	ldfp	f6, [r0], #8
   1be48:	ecf0 f102 	ldfp	f7, [r0], #8
   1be4c:	4770      	bx	lr
   1be4e:	bf00      	nop

0001be50 <__gnu_Unwind_Save_WMMXD>:
   1be50:	ece0 0102 	stfe	f0, [r0], #8
   1be54:	ece0 1102 	stfe	f1, [r0], #8
   1be58:	ece0 2102 	stfe	f2, [r0], #8
   1be5c:	ece0 3102 	stfe	f3, [r0], #8
   1be60:	ece0 4102 	stfe	f4, [r0], #8
   1be64:	ece0 5102 	stfe	f5, [r0], #8
   1be68:	ece0 6102 	stfe	f6, [r0], #8
   1be6c:	ece0 7102 	stfe	f7, [r0], #8
   1be70:	ece0 8102 	stfp	f0, [r0], #8
   1be74:	ece0 9102 	stfp	f1, [r0], #8
   1be78:	ece0 a102 	stfp	f2, [r0], #8
   1be7c:	ece0 b102 	stfp	f3, [r0], #8
   1be80:	ece0 c102 	stfp	f4, [r0], #8
   1be84:	ece0 d102 	stfp	f5, [r0], #8
   1be88:	ece0 e102 	stfp	f6, [r0], #8
   1be8c:	ece0 f102 	stfp	f7, [r0], #8
   1be90:	4770      	bx	lr
   1be92:	bf00      	nop

0001be94 <__gnu_Unwind_Restore_WMMXC>:
   1be94:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1be98:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1be9c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1bea0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1bea4:	4770      	bx	lr
   1bea6:	bf00      	nop

0001bea8 <__gnu_Unwind_Save_WMMXC>:
   1bea8:	fca0 8101 	stc2	1, cr8, [r0], #4
   1beac:	fca0 9101 	stc2	1, cr9, [r0], #4
   1beb0:	fca0 a101 	stc2	1, cr10, [r0], #4
   1beb4:	fca0 b101 	stc2	1, cr11, [r0], #4
   1beb8:	4770      	bx	lr
   1beba:	bf00      	nop

0001bebc <_Unwind_RaiseException>:
   1bebc:	46ec      	mov	ip, sp
   1bebe:	b500      	push	{lr}
   1bec0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1bec4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1bec8:	f04f 0300 	mov.w	r3, #0
   1becc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bed0:	a901      	add	r1, sp, #4
   1bed2:	f7ff fbf1 	bl	1b6b8 <__gnu_Unwind_RaiseException>
   1bed6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1beda:	b012      	add	sp, #72	; 0x48
   1bedc:	4770      	bx	lr
   1bede:	bf00      	nop

0001bee0 <_Unwind_Resume>:
   1bee0:	46ec      	mov	ip, sp
   1bee2:	b500      	push	{lr}
   1bee4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1bee8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1beec:	f04f 0300 	mov.w	r3, #0
   1bef0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bef4:	a901      	add	r1, sp, #4
   1bef6:	f7ff fc19 	bl	1b72c <__gnu_Unwind_Resume>
   1befa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1befe:	b012      	add	sp, #72	; 0x48
   1bf00:	4770      	bx	lr
   1bf02:	bf00      	nop

0001bf04 <_Unwind_Resume_or_Rethrow>:
   1bf04:	46ec      	mov	ip, sp
   1bf06:	b500      	push	{lr}
   1bf08:	e92d 5000 	stmdb	sp!, {ip, lr}
   1bf0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1bf10:	f04f 0300 	mov.w	r3, #0
   1bf14:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bf18:	a901      	add	r1, sp, #4
   1bf1a:	f7ff fc29 	bl	1b770 <__gnu_Unwind_Resume_or_Rethrow>
   1bf1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1bf22:	b012      	add	sp, #72	; 0x48
   1bf24:	4770      	bx	lr
   1bf26:	bf00      	nop

0001bf28 <_Unwind_ForcedUnwind>:
   1bf28:	46ec      	mov	ip, sp
   1bf2a:	b500      	push	{lr}
   1bf2c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1bf30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1bf34:	f04f 0300 	mov.w	r3, #0
   1bf38:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bf3c:	ab01      	add	r3, sp, #4
   1bf3e:	f7ff fbeb 	bl	1b718 <__gnu_Unwind_ForcedUnwind>
   1bf42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1bf46:	b012      	add	sp, #72	; 0x48
   1bf48:	4770      	bx	lr
   1bf4a:	bf00      	nop

0001bf4c <_Unwind_Backtrace>:
   1bf4c:	46ec      	mov	ip, sp
   1bf4e:	b500      	push	{lr}
   1bf50:	e92d 5000 	stmdb	sp!, {ip, lr}
   1bf54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1bf58:	f04f 0300 	mov.w	r3, #0
   1bf5c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bf60:	aa01      	add	r2, sp, #4
   1bf62:	f7ff fc5d 	bl	1b820 <__gnu_Unwind_Backtrace>
   1bf66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1bf6a:	b012      	add	sp, #72	; 0x48
   1bf6c:	4770      	bx	lr
   1bf6e:	bf00      	nop

0001bf70 <next_unwind_byte>:
   1bf70:	7a02      	ldrb	r2, [r0, #8]
   1bf72:	b97a      	cbnz	r2, 1bf94 <next_unwind_byte+0x24>
   1bf74:	7a43      	ldrb	r3, [r0, #9]
   1bf76:	b1a3      	cbz	r3, 1bfa2 <next_unwind_byte+0x32>
   1bf78:	6842      	ldr	r2, [r0, #4]
   1bf7a:	3b01      	subs	r3, #1
   1bf7c:	b410      	push	{r4}
   1bf7e:	7243      	strb	r3, [r0, #9]
   1bf80:	6813      	ldr	r3, [r2, #0]
   1bf82:	2103      	movs	r1, #3
   1bf84:	1d14      	adds	r4, r2, #4
   1bf86:	7201      	strb	r1, [r0, #8]
   1bf88:	021a      	lsls	r2, r3, #8
   1bf8a:	6044      	str	r4, [r0, #4]
   1bf8c:	6002      	str	r2, [r0, #0]
   1bf8e:	bc10      	pop	{r4}
   1bf90:	0e18      	lsrs	r0, r3, #24
   1bf92:	4770      	bx	lr
   1bf94:	6803      	ldr	r3, [r0, #0]
   1bf96:	3a01      	subs	r2, #1
   1bf98:	7202      	strb	r2, [r0, #8]
   1bf9a:	021a      	lsls	r2, r3, #8
   1bf9c:	6002      	str	r2, [r0, #0]
   1bf9e:	0e18      	lsrs	r0, r3, #24
   1bfa0:	4770      	bx	lr
   1bfa2:	20b0      	movs	r0, #176	; 0xb0
   1bfa4:	4770      	bx	lr
   1bfa6:	bf00      	nop

0001bfa8 <_Unwind_GetGR.constprop.0>:
   1bfa8:	b500      	push	{lr}
   1bfaa:	b085      	sub	sp, #20
   1bfac:	aa03      	add	r2, sp, #12
   1bfae:	2300      	movs	r3, #0
   1bfb0:	9200      	str	r2, [sp, #0]
   1bfb2:	4619      	mov	r1, r3
   1bfb4:	220c      	movs	r2, #12
   1bfb6:	f7ff fbeb 	bl	1b790 <_Unwind_VRS_Get>
   1bfba:	9803      	ldr	r0, [sp, #12]
   1bfbc:	b005      	add	sp, #20
   1bfbe:	f85d fb04 	ldr.w	pc, [sp], #4
   1bfc2:	bf00      	nop

0001bfc4 <unwind_UCB_from_context>:
   1bfc4:	e7f0      	b.n	1bfa8 <_Unwind_GetGR.constprop.0>
   1bfc6:	bf00      	nop

0001bfc8 <__gnu_unwind_execute>:
   1bfc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bfcc:	4605      	mov	r5, r0
   1bfce:	b085      	sub	sp, #20
   1bfd0:	460e      	mov	r6, r1
   1bfd2:	f04f 0800 	mov.w	r8, #0
   1bfd6:	4630      	mov	r0, r6
   1bfd8:	f7ff ffca 	bl	1bf70 <next_unwind_byte>
   1bfdc:	28b0      	cmp	r0, #176	; 0xb0
   1bfde:	4604      	mov	r4, r0
   1bfe0:	f000 80b2 	beq.w	1c148 <__gnu_unwind_execute+0x180>
   1bfe4:	0607      	lsls	r7, r0, #24
   1bfe6:	d520      	bpl.n	1c02a <__gnu_unwind_execute+0x62>
   1bfe8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bfec:	2b80      	cmp	r3, #128	; 0x80
   1bfee:	d04d      	beq.n	1c08c <__gnu_unwind_execute+0xc4>
   1bff0:	2b90      	cmp	r3, #144	; 0x90
   1bff2:	d036      	beq.n	1c062 <__gnu_unwind_execute+0x9a>
   1bff4:	2ba0      	cmp	r3, #160	; 0xa0
   1bff6:	d060      	beq.n	1c0ba <__gnu_unwind_execute+0xf2>
   1bff8:	2bb0      	cmp	r3, #176	; 0xb0
   1bffa:	d074      	beq.n	1c0e6 <__gnu_unwind_execute+0x11e>
   1bffc:	2bc0      	cmp	r3, #192	; 0xc0
   1bffe:	f000 808b 	beq.w	1c118 <__gnu_unwind_execute+0x150>
   1c002:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c006:	2bd0      	cmp	r3, #208	; 0xd0
   1c008:	d10b      	bne.n	1c022 <__gnu_unwind_execute+0x5a>
   1c00a:	f000 0207 	and.w	r2, r0, #7
   1c00e:	3201      	adds	r2, #1
   1c010:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c014:	2305      	movs	r3, #5
   1c016:	2101      	movs	r1, #1
   1c018:	4628      	mov	r0, r5
   1c01a:	f7ff fd97 	bl	1bb4c <_Unwind_VRS_Pop>
   1c01e:	2800      	cmp	r0, #0
   1c020:	d0d9      	beq.n	1bfd6 <__gnu_unwind_execute+0xe>
   1c022:	2009      	movs	r0, #9
   1c024:	b005      	add	sp, #20
   1c026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c02a:	f10d 090c 	add.w	r9, sp, #12
   1c02e:	2300      	movs	r3, #0
   1c030:	4619      	mov	r1, r3
   1c032:	0087      	lsls	r7, r0, #2
   1c034:	f8cd 9000 	str.w	r9, [sp]
   1c038:	220d      	movs	r2, #13
   1c03a:	4628      	mov	r0, r5
   1c03c:	f7ff fba8 	bl	1b790 <_Unwind_VRS_Get>
   1c040:	b2ff      	uxtb	r7, r7
   1c042:	9b03      	ldr	r3, [sp, #12]
   1c044:	f8cd 9000 	str.w	r9, [sp]
   1c048:	3704      	adds	r7, #4
   1c04a:	0660      	lsls	r0, r4, #25
   1c04c:	bf4c      	ite	mi
   1c04e:	1bdf      	submi	r7, r3, r7
   1c050:	18ff      	addpl	r7, r7, r3
   1c052:	2300      	movs	r3, #0
   1c054:	4619      	mov	r1, r3
   1c056:	220d      	movs	r2, #13
   1c058:	4628      	mov	r0, r5
   1c05a:	9703      	str	r7, [sp, #12]
   1c05c:	f7ff fbbc 	bl	1b7d8 <_Unwind_VRS_Set>
   1c060:	e7b9      	b.n	1bfd6 <__gnu_unwind_execute+0xe>
   1c062:	f000 030d 	and.w	r3, r0, #13
   1c066:	2b0d      	cmp	r3, #13
   1c068:	d0db      	beq.n	1c022 <__gnu_unwind_execute+0x5a>
   1c06a:	af03      	add	r7, sp, #12
   1c06c:	2300      	movs	r3, #0
   1c06e:	f000 020f 	and.w	r2, r0, #15
   1c072:	4619      	mov	r1, r3
   1c074:	9700      	str	r7, [sp, #0]
   1c076:	4628      	mov	r0, r5
   1c078:	f7ff fb8a 	bl	1b790 <_Unwind_VRS_Get>
   1c07c:	2300      	movs	r3, #0
   1c07e:	9700      	str	r7, [sp, #0]
   1c080:	4619      	mov	r1, r3
   1c082:	220d      	movs	r2, #13
   1c084:	4628      	mov	r0, r5
   1c086:	f7ff fba7 	bl	1b7d8 <_Unwind_VRS_Set>
   1c08a:	e7a4      	b.n	1bfd6 <__gnu_unwind_execute+0xe>
   1c08c:	4630      	mov	r0, r6
   1c08e:	f7ff ff6f 	bl	1bf70 <next_unwind_byte>
   1c092:	0224      	lsls	r4, r4, #8
   1c094:	4320      	orrs	r0, r4
   1c096:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c09a:	d0c2      	beq.n	1c022 <__gnu_unwind_execute+0x5a>
   1c09c:	0104      	lsls	r4, r0, #4
   1c09e:	2300      	movs	r3, #0
   1c0a0:	b2a2      	uxth	r2, r4
   1c0a2:	4619      	mov	r1, r3
   1c0a4:	4628      	mov	r0, r5
   1c0a6:	f7ff fd51 	bl	1bb4c <_Unwind_VRS_Pop>
   1c0aa:	2800      	cmp	r0, #0
   1c0ac:	d1b9      	bne.n	1c022 <__gnu_unwind_execute+0x5a>
   1c0ae:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1c0b2:	bf18      	it	ne
   1c0b4:	f04f 0801 	movne.w	r8, #1
   1c0b8:	e78d      	b.n	1bfd6 <__gnu_unwind_execute+0xe>
   1c0ba:	43c2      	mvns	r2, r0
   1c0bc:	f002 0307 	and.w	r3, r2, #7
   1c0c0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1c0c4:	411a      	asrs	r2, r3
   1c0c6:	0701      	lsls	r1, r0, #28
   1c0c8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1c0cc:	f04f 0300 	mov.w	r3, #0
   1c0d0:	bf48      	it	mi
   1c0d2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1c0d6:	4619      	mov	r1, r3
   1c0d8:	4628      	mov	r0, r5
   1c0da:	f7ff fd37 	bl	1bb4c <_Unwind_VRS_Pop>
   1c0de:	2800      	cmp	r0, #0
   1c0e0:	f43f af79 	beq.w	1bfd6 <__gnu_unwind_execute+0xe>
   1c0e4:	e79d      	b.n	1c022 <__gnu_unwind_execute+0x5a>
   1c0e6:	28b1      	cmp	r0, #177	; 0xb1
   1c0e8:	d033      	beq.n	1c152 <__gnu_unwind_execute+0x18a>
   1c0ea:	28b2      	cmp	r0, #178	; 0xb2
   1c0ec:	f000 808b 	beq.w	1c206 <__gnu_unwind_execute+0x23e>
   1c0f0:	28b3      	cmp	r0, #179	; 0xb3
   1c0f2:	d039      	beq.n	1c168 <__gnu_unwind_execute+0x1a0>
   1c0f4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1c0f8:	2bb4      	cmp	r3, #180	; 0xb4
   1c0fa:	d092      	beq.n	1c022 <__gnu_unwind_execute+0x5a>
   1c0fc:	f000 0207 	and.w	r2, r0, #7
   1c100:	3201      	adds	r2, #1
   1c102:	2301      	movs	r3, #1
   1c104:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c108:	4619      	mov	r1, r3
   1c10a:	4628      	mov	r0, r5
   1c10c:	f7ff fd1e 	bl	1bb4c <_Unwind_VRS_Pop>
   1c110:	2800      	cmp	r0, #0
   1c112:	f43f af60 	beq.w	1bfd6 <__gnu_unwind_execute+0xe>
   1c116:	e784      	b.n	1c022 <__gnu_unwind_execute+0x5a>
   1c118:	28c6      	cmp	r0, #198	; 0xc6
   1c11a:	d042      	beq.n	1c1a2 <__gnu_unwind_execute+0x1da>
   1c11c:	28c7      	cmp	r0, #199	; 0xc7
   1c11e:	d04c      	beq.n	1c1ba <__gnu_unwind_execute+0x1f2>
   1c120:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c124:	2bc0      	cmp	r3, #192	; 0xc0
   1c126:	d05b      	beq.n	1c1e0 <__gnu_unwind_execute+0x218>
   1c128:	28c8      	cmp	r0, #200	; 0xc8
   1c12a:	d060      	beq.n	1c1ee <__gnu_unwind_execute+0x226>
   1c12c:	28c9      	cmp	r0, #201	; 0xc9
   1c12e:	f47f af78 	bne.w	1c022 <__gnu_unwind_execute+0x5a>
   1c132:	4630      	mov	r0, r6
   1c134:	f7ff ff1c 	bl	1bf70 <next_unwind_byte>
   1c138:	0302      	lsls	r2, r0, #12
   1c13a:	f000 000f 	and.w	r0, r0, #15
   1c13e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1c142:	3001      	adds	r0, #1
   1c144:	4302      	orrs	r2, r0
   1c146:	e765      	b.n	1c014 <__gnu_unwind_execute+0x4c>
   1c148:	f1b8 0f00 	cmp.w	r8, #0
   1c14c:	d018      	beq.n	1c180 <__gnu_unwind_execute+0x1b8>
   1c14e:	2000      	movs	r0, #0
   1c150:	e768      	b.n	1c024 <__gnu_unwind_execute+0x5c>
   1c152:	4630      	mov	r0, r6
   1c154:	f7ff ff0c 	bl	1bf70 <next_unwind_byte>
   1c158:	4602      	mov	r2, r0
   1c15a:	2800      	cmp	r0, #0
   1c15c:	f43f af61 	beq.w	1c022 <__gnu_unwind_execute+0x5a>
   1c160:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1c164:	d0d0      	beq.n	1c108 <__gnu_unwind_execute+0x140>
   1c166:	e75c      	b.n	1c022 <__gnu_unwind_execute+0x5a>
   1c168:	4630      	mov	r0, r6
   1c16a:	f7ff ff01 	bl	1bf70 <next_unwind_byte>
   1c16e:	0301      	lsls	r1, r0, #12
   1c170:	f000 000f 	and.w	r0, r0, #15
   1c174:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1c178:	1c42      	adds	r2, r0, #1
   1c17a:	2301      	movs	r3, #1
   1c17c:	430a      	orrs	r2, r1
   1c17e:	e7c3      	b.n	1c108 <__gnu_unwind_execute+0x140>
   1c180:	ac03      	add	r4, sp, #12
   1c182:	4643      	mov	r3, r8
   1c184:	220e      	movs	r2, #14
   1c186:	4641      	mov	r1, r8
   1c188:	9400      	str	r4, [sp, #0]
   1c18a:	4628      	mov	r0, r5
   1c18c:	f7ff fb00 	bl	1b790 <_Unwind_VRS_Get>
   1c190:	9400      	str	r4, [sp, #0]
   1c192:	4628      	mov	r0, r5
   1c194:	4643      	mov	r3, r8
   1c196:	220f      	movs	r2, #15
   1c198:	4641      	mov	r1, r8
   1c19a:	f7ff fb1d 	bl	1b7d8 <_Unwind_VRS_Set>
   1c19e:	4640      	mov	r0, r8
   1c1a0:	e740      	b.n	1c024 <__gnu_unwind_execute+0x5c>
   1c1a2:	4630      	mov	r0, r6
   1c1a4:	f7ff fee4 	bl	1bf70 <next_unwind_byte>
   1c1a8:	0301      	lsls	r1, r0, #12
   1c1aa:	f000 000f 	and.w	r0, r0, #15
   1c1ae:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1c1b2:	1c42      	adds	r2, r0, #1
   1c1b4:	2303      	movs	r3, #3
   1c1b6:	430a      	orrs	r2, r1
   1c1b8:	e7a6      	b.n	1c108 <__gnu_unwind_execute+0x140>
   1c1ba:	4630      	mov	r0, r6
   1c1bc:	f7ff fed8 	bl	1bf70 <next_unwind_byte>
   1c1c0:	4602      	mov	r2, r0
   1c1c2:	2800      	cmp	r0, #0
   1c1c4:	f43f af2d 	beq.w	1c022 <__gnu_unwind_execute+0x5a>
   1c1c8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1c1cc:	f47f af29 	bne.w	1c022 <__gnu_unwind_execute+0x5a>
   1c1d0:	2104      	movs	r1, #4
   1c1d2:	4628      	mov	r0, r5
   1c1d4:	f7ff fcba 	bl	1bb4c <_Unwind_VRS_Pop>
   1c1d8:	2800      	cmp	r0, #0
   1c1da:	f43f aefc 	beq.w	1bfd6 <__gnu_unwind_execute+0xe>
   1c1de:	e720      	b.n	1c022 <__gnu_unwind_execute+0x5a>
   1c1e0:	f000 020f 	and.w	r2, r0, #15
   1c1e4:	3201      	adds	r2, #1
   1c1e6:	2303      	movs	r3, #3
   1c1e8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1c1ec:	e78c      	b.n	1c108 <__gnu_unwind_execute+0x140>
   1c1ee:	4630      	mov	r0, r6
   1c1f0:	f7ff febe 	bl	1bf70 <next_unwind_byte>
   1c1f4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1c1f8:	f000 030f 	and.w	r3, r0, #15
   1c1fc:	3210      	adds	r2, #16
   1c1fe:	3301      	adds	r3, #1
   1c200:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1c204:	e706      	b.n	1c014 <__gnu_unwind_execute+0x4c>
   1c206:	2300      	movs	r3, #0
   1c208:	f10d 090c 	add.w	r9, sp, #12
   1c20c:	220d      	movs	r2, #13
   1c20e:	4619      	mov	r1, r3
   1c210:	f8cd 9000 	str.w	r9, [sp]
   1c214:	4628      	mov	r0, r5
   1c216:	f7ff fabb 	bl	1b790 <_Unwind_VRS_Get>
   1c21a:	4630      	mov	r0, r6
   1c21c:	f7ff fea8 	bl	1bf70 <next_unwind_byte>
   1c220:	0602      	lsls	r2, r0, #24
   1c222:	f04f 0702 	mov.w	r7, #2
   1c226:	d50c      	bpl.n	1c242 <__gnu_unwind_execute+0x27a>
   1c228:	9b03      	ldr	r3, [sp, #12]
   1c22a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1c22e:	40b8      	lsls	r0, r7
   1c230:	4403      	add	r3, r0
   1c232:	4630      	mov	r0, r6
   1c234:	9303      	str	r3, [sp, #12]
   1c236:	f7ff fe9b 	bl	1bf70 <next_unwind_byte>
   1c23a:	0603      	lsls	r3, r0, #24
   1c23c:	f107 0707 	add.w	r7, r7, #7
   1c240:	d4f2      	bmi.n	1c228 <__gnu_unwind_execute+0x260>
   1c242:	9b03      	ldr	r3, [sp, #12]
   1c244:	f8cd 9000 	str.w	r9, [sp]
   1c248:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   1c24c:	f503 7201 	add.w	r2, r3, #516	; 0x204
   1c250:	40bc      	lsls	r4, r7
   1c252:	2300      	movs	r3, #0
   1c254:	4414      	add	r4, r2
   1c256:	4619      	mov	r1, r3
   1c258:	220d      	movs	r2, #13
   1c25a:	4628      	mov	r0, r5
   1c25c:	9403      	str	r4, [sp, #12]
   1c25e:	f7ff fabb 	bl	1b7d8 <_Unwind_VRS_Set>
   1c262:	e6b8      	b.n	1bfd6 <__gnu_unwind_execute+0xe>

0001c264 <__gnu_unwind_frame>:
   1c264:	b510      	push	{r4, lr}
   1c266:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1c268:	b084      	sub	sp, #16
   1c26a:	6853      	ldr	r3, [r2, #4]
   1c26c:	2403      	movs	r4, #3
   1c26e:	f88d 400c 	strb.w	r4, [sp, #12]
   1c272:	021b      	lsls	r3, r3, #8
   1c274:	f102 0408 	add.w	r4, r2, #8
   1c278:	4608      	mov	r0, r1
   1c27a:	79d2      	ldrb	r2, [r2, #7]
   1c27c:	9301      	str	r3, [sp, #4]
   1c27e:	a901      	add	r1, sp, #4
   1c280:	9402      	str	r4, [sp, #8]
   1c282:	f88d 200d 	strb.w	r2, [sp, #13]
   1c286:	f7ff fe9f 	bl	1bfc8 <__gnu_unwind_execute>
   1c28a:	b004      	add	sp, #16
   1c28c:	bd10      	pop	{r4, pc}
   1c28e:	bf00      	nop

0001c290 <_Unwind_GetRegionStart>:
   1c290:	b508      	push	{r3, lr}
   1c292:	f7ff fe97 	bl	1bfc4 <unwind_UCB_from_context>
   1c296:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1c298:	bd08      	pop	{r3, pc}
   1c29a:	bf00      	nop

0001c29c <_Unwind_GetLanguageSpecificData>:
   1c29c:	b508      	push	{r3, lr}
   1c29e:	f7ff fe91 	bl	1bfc4 <unwind_UCB_from_context>
   1c2a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1c2a4:	79c3      	ldrb	r3, [r0, #7]
   1c2a6:	3302      	adds	r3, #2
   1c2a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c2ac:	bd08      	pop	{r3, pc}
   1c2ae:	bf00      	nop

0001c2b0 <abort>:
   1c2b0:	b508      	push	{r3, lr}
   1c2b2:	2006      	movs	r0, #6
   1c2b4:	f000 f82c 	bl	1c310 <raise>
   1c2b8:	2001      	movs	r0, #1
   1c2ba:	f7ff f8a5 	bl	1b408 <_exit>

0001c2be <_raise_r>:
   1c2be:	291f      	cmp	r1, #31
   1c2c0:	b538      	push	{r3, r4, r5, lr}
   1c2c2:	4604      	mov	r4, r0
   1c2c4:	460d      	mov	r5, r1
   1c2c6:	d904      	bls.n	1c2d2 <_raise_r+0x14>
   1c2c8:	2316      	movs	r3, #22
   1c2ca:	6003      	str	r3, [r0, #0]
   1c2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c2d0:	bd38      	pop	{r3, r4, r5, pc}
   1c2d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c2d4:	b112      	cbz	r2, 1c2dc <_raise_r+0x1e>
   1c2d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1c2da:	b94b      	cbnz	r3, 1c2f0 <_raise_r+0x32>
   1c2dc:	4620      	mov	r0, r4
   1c2de:	f000 f831 	bl	1c344 <_getpid_r>
   1c2e2:	462a      	mov	r2, r5
   1c2e4:	4601      	mov	r1, r0
   1c2e6:	4620      	mov	r0, r4
   1c2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c2ec:	f000 b818 	b.w	1c320 <_kill_r>
   1c2f0:	2b01      	cmp	r3, #1
   1c2f2:	d00a      	beq.n	1c30a <_raise_r+0x4c>
   1c2f4:	1c59      	adds	r1, r3, #1
   1c2f6:	d103      	bne.n	1c300 <_raise_r+0x42>
   1c2f8:	2316      	movs	r3, #22
   1c2fa:	6003      	str	r3, [r0, #0]
   1c2fc:	2001      	movs	r0, #1
   1c2fe:	e7e7      	b.n	1c2d0 <_raise_r+0x12>
   1c300:	2400      	movs	r4, #0
   1c302:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1c306:	4628      	mov	r0, r5
   1c308:	4798      	blx	r3
   1c30a:	2000      	movs	r0, #0
   1c30c:	e7e0      	b.n	1c2d0 <_raise_r+0x12>
	...

0001c310 <raise>:
   1c310:	4b02      	ldr	r3, [pc, #8]	; (1c31c <raise+0xc>)
   1c312:	4601      	mov	r1, r0
   1c314:	6818      	ldr	r0, [r3, #0]
   1c316:	f7ff bfd2 	b.w	1c2be <_raise_r>
   1c31a:	bf00      	nop
   1c31c:	20001128 	.word	0x20001128

0001c320 <_kill_r>:
   1c320:	b538      	push	{r3, r4, r5, lr}
   1c322:	4d07      	ldr	r5, [pc, #28]	; (1c340 <_kill_r+0x20>)
   1c324:	2300      	movs	r3, #0
   1c326:	4604      	mov	r4, r0
   1c328:	4608      	mov	r0, r1
   1c32a:	4611      	mov	r1, r2
   1c32c:	602b      	str	r3, [r5, #0]
   1c32e:	f000 f813 	bl	1c358 <_kill>
   1c332:	1c43      	adds	r3, r0, #1
   1c334:	d102      	bne.n	1c33c <_kill_r+0x1c>
   1c336:	682b      	ldr	r3, [r5, #0]
   1c338:	b103      	cbz	r3, 1c33c <_kill_r+0x1c>
   1c33a:	6023      	str	r3, [r4, #0]
   1c33c:	bd38      	pop	{r3, r4, r5, pc}
   1c33e:	bf00      	nop
   1c340:	20001538 	.word	0x20001538

0001c344 <_getpid_r>:
   1c344:	f000 b800 	b.w	1c348 <_getpid>

0001c348 <_getpid>:
   1c348:	4b02      	ldr	r3, [pc, #8]	; (1c354 <_getpid+0xc>)
   1c34a:	2258      	movs	r2, #88	; 0x58
   1c34c:	601a      	str	r2, [r3, #0]
   1c34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c352:	4770      	bx	lr
   1c354:	20001538 	.word	0x20001538

0001c358 <_kill>:
   1c358:	4b02      	ldr	r3, [pc, #8]	; (1c364 <_kill+0xc>)
   1c35a:	2258      	movs	r2, #88	; 0x58
   1c35c:	601a      	str	r2, [r3, #0]
   1c35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c362:	4770      	bx	lr
   1c364:	20001538 	.word	0x20001538

0001c368 <_init>:
   1c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c36a:	bf00      	nop
   1c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c36e:	bc08      	pop	{r3}
   1c370:	469e      	mov	lr, r3
   1c372:	4770      	bx	lr

0001c374 <_fini>:
   1c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c376:	bf00      	nop
   1c378:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c37a:	bc08      	pop	{r3}
   1c37c:	469e      	mov	lr, r3
   1c37e:	4770      	bx	lr
   1c380:	00005b1b 	.word	0x00005b1b
   1c384:	323b3833 	.word	0x323b3833
   1c388:	0000003b 	.word	0x0000003b
   1c38c:	323b3834 	.word	0x323b3834
   1c390:	0000003b 	.word	0x0000003b
   1c394:	7267467b 	.word	0x7267467b
   1c398:	7d6e6565 	.word	0x7d6e6565
   1c39c:	3430255b 	.word	0x3430255b
   1c3a0:	30252e64 	.word	0x30252e64
   1c3a4:	5b5d6436 	.word	0x5b5d6436
   1c3a8:	253a7325 	.word	0x253a7325
   1c3ac:	3a3a2064 	.word	0x3a3a2064
   1c3b0:	7b5d7325 	.word	0x7b5d7325
   1c3b4:	69687746 	.word	0x69687746
   1c3b8:	0a7d6574 	.word	0x0a7d6574
   1c3bc:	00000000 	.word	0x00000000
   1c3c0:	6e69616d 	.word	0x6e69616d
   1c3c4:	00000000 	.word	0x00000000
   1c3c8:	6d2f2e2e 	.word	0x6d2f2e2e
   1c3cc:	2e6e6961 	.word	0x2e6e6961
   1c3d0:	00707063 	.word	0x00707063
   1c3d4:	61662020 	.word	0x61662020
   1c3d8:	64656c69 	.word	0x64656c69
   1c3dc:	206f7420 	.word	0x206f7420
   1c3e0:	64616572 	.word	0x64616572
   1c3e4:	726f202c 	.word	0x726f202c
   1c3e8:	74657220 	.word	0x74657220
   1c3ec:	656e7275 	.word	0x656e7275
   1c3f0:	65642064 	.word	0x65642064
   1c3f4:	6c756166 	.word	0x6c756166
   1c3f8:	65742074 	.word	0x65742074
   1c3fc:	7620706d 	.word	0x7620706d
   1c400:	65756c61 	.word	0x65756c61
   1c404:	0000000a 	.word	0x0000000a
   1c408:	6d742020 	.word	0x6d742020
   1c40c:	37313170 	.word	0x37313170
   1c410:	77617220 	.word	0x77617220
   1c414:	6425203a 	.word	0x6425203a
   1c418:	3a462020 	.word	0x3a462020
   1c41c:	0a642520 	.word	0x0a642520
   1c420:	00000000 	.word	0x00000000
   1c424:	726f6e7b 	.word	0x726f6e7b
   1c428:	7d6c616d 	.word	0x7d6c616d
   1c42c:	7267467b 	.word	0x7267467b
   1c430:	7d6e6565 	.word	0x7d6e6565
   1c434:	6f6f420a 	.word	0x6f6f420a
   1c438:	2e2e2e74 	.word	0x2e2e2e74
   1c43c:	616d467b 	.word	0x616d467b
   1c440:	746e6567 	.word	0x746e6567
   1c444:	000a7d61 	.word	0x000a7d61
   1c448:	72616f62 	.word	0x72616f62
   1c44c:	6e692e64 	.word	0x6e692e64
   1c450:	29287469 	.word	0x29287469
   1c454:	0a2e2e2e 	.word	0x0a2e2e2e
   1c458:	00000000 	.word	0x00000000
   1c45c:	3b303b30 	.word	0x3b303b30
   1c460:	00006d30 	.word	0x00006d30
   1c464:	3b353532 	.word	0x3b353532
   1c468:	6d303b30 	.word	0x6d303b30
   1c46c:	00000000 	.word	0x00000000
   1c470:	35323b30 	.word	0x35323b30
   1c474:	6d303b35 	.word	0x6d303b35
   1c478:	00000000 	.word	0x00000000
   1c47c:	3b353532 	.word	0x3b353532
   1c480:	3b353532 	.word	0x3b353532
   1c484:	00006d30 	.word	0x00006d30
   1c488:	3b303b30 	.word	0x3b303b30
   1c48c:	6d353532 	.word	0x6d353532
   1c490:	00000000 	.word	0x00000000
   1c494:	3b353532 	.word	0x3b353532
   1c498:	35323b30 	.word	0x35323b30
   1c49c:	00006d35 	.word	0x00006d35
   1c4a0:	33313b30 	.word	0x33313b30
   1c4a4:	31323b35 	.word	0x31323b35
   1c4a8:	00006d35 	.word	0x00006d35
   1c4ac:	3b353532 	.word	0x3b353532
   1c4b0:	3b353532 	.word	0x3b353532
   1c4b4:	6d353532 	.word	0x6d353532
   1c4b8:	00000000 	.word	0x00000000
   1c4bc:	3b353532 	.word	0x3b353532
   1c4c0:	373b3939 	.word	0x373b3939
   1c4c4:	00006d31 	.word	0x00006d31
   1c4c8:	3b333431 	.word	0x3b333431
   1c4cc:	31323b30 	.word	0x31323b30
   1c4d0:	00006d31 	.word	0x00006d31
   1c4d4:	00004a32 	.word	0x00004a32
   1c4d8:	48313b31 	.word	0x48313b31
   1c4dc:	00000000 	.word	0x00000000
   1c4e0:	5b1b4a32 	.word	0x5b1b4a32
   1c4e4:	48313b31 	.word	0x48313b31
   1c4e8:	6d305b1b 	.word	0x6d305b1b
   1c4ec:	00000000 	.word	0x00000000
   1c4f0:	00006d33 	.word	0x00006d33
   1c4f4:	00006d34 	.word	0x00006d34
	...

0001c500 <nrfx_coredep_delay_us::delay_machine_code>:
   1c500:	d8fd3807 00004770                       .8..pG..

0001c508 <markupCodes>:
   1c508:	0000441d 0001c45c 0000f25b 0001c464     .D..\...[...d...
   1c518:	00001a31 0001c470 0000f21c 0001c47c     1...p.......|...
   1c528:	00009808 0001c488 0000649d 0001c494     .........d......
   1c538:	0000592b 0001c4a0 00003961 0001c4ac     +Y......a9......
   1c548:	0000999c 0001c4bc 00006758 0001c4c8     ........Xg......
   1c558:	0000b382 0001c4d4 0000ee09 0001c4d8     ................
   1c568:	00004263 0001c4e0 0000ce96 0001c4f0     cB..............
   1c578:	000074e9 0001c460 0000d0a6 0001c4f4     .t..`...........
   1c588:	6d726554 6c616e69 00000000 00545452     Terminal....RTT.
   1c598:	47474553 00005245                       SEGGER..

0001c5a0 <sdh_stack_observers>:
   1c5a0:	0001c610 0001c620 00000008              .... .......

0001c5ac <sdh_ble_observers>:
   1c5ac:	0001c608 0001c608 00000008              ............

0001c5b8 <sdh_soc_observers>:
   1c5b8:	0001c600 0001c608 00000008              ............

0001c5c4 <_global_impure_ptr>:
   1c5c4:	2000112c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   1c5d4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1c5e4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1c5f4:	64636261 00006665                       abcdef..

0001c5fc <__EH_FRAME_BEGIN__>:
   1c5fc:	00000000                                ....
