
_build/nrf52810_xxaa.out:     file format elf32-littlearm


Disassembly of section .text:

00019000 <__isr_vector>:
   19000:	20006000 	.word	0x20006000
   19004:	000192bd 	.word	0x000192bd
   19008:	00019311 	.word	0x00019311
   1900c:	00019313 	.word	0x00019313
   19010:	00019315 	.word	0x00019315
   19014:	00019317 	.word	0x00019317
   19018:	00019319 	.word	0x00019319
	...
   1902c:	0001931b 	.word	0x0001931b
   19030:	0001931d 	.word	0x0001931d
   19034:	00000000 	.word	0x00000000
   19038:	0001931f 	.word	0x0001931f
   1903c:	00019321 	.word	0x00019321
   19040:	0001a019 	.word	0x0001a019
   19044:	00019323 	.word	0x00019323
   19048:	00019323 	.word	0x00019323
   1904c:	00019323 	.word	0x00019323
   19050:	00019323 	.word	0x00019323
   19054:	00000000 	.word	0x00000000
   19058:	00019323 	.word	0x00019323
   1905c:	00019323 	.word	0x00019323
   19060:	00019323 	.word	0x00019323
   19064:	00019323 	.word	0x00019323
   19068:	00019323 	.word	0x00019323
   1906c:	00019323 	.word	0x00019323
   19070:	00019323 	.word	0x00019323
   19074:	00019323 	.word	0x00019323
   19078:	00019323 	.word	0x00019323
   1907c:	00019323 	.word	0x00019323
   19080:	00019323 	.word	0x00019323
   19084:	00019af9 	.word	0x00019af9
   19088:	00019323 	.word	0x00019323
   1908c:	00019323 	.word	0x00019323
   19090:	00019323 	.word	0x00019323
   19094:	00019323 	.word	0x00019323
   19098:	0001c671 	.word	0x0001c671
   1909c:	00019323 	.word	0x00019323
   190a0:	00019323 	.word	0x00019323
   190a4:	00019323 	.word	0x00019323
	...
   190b0:	00019323 	.word	0x00019323
   190b4:	00019323 	.word	0x00019323
	...

00019200 <__do_global_dtors_aux>:
   19200:	b510      	push	{r4, lr}
   19202:	4c05      	ldr	r4, [pc, #20]	; (19218 <__do_global_dtors_aux+0x18>)
   19204:	7823      	ldrb	r3, [r4, #0]
   19206:	b933      	cbnz	r3, 19216 <__do_global_dtors_aux+0x16>
   19208:	4b04      	ldr	r3, [pc, #16]	; (1921c <__do_global_dtors_aux+0x1c>)
   1920a:	b113      	cbz	r3, 19212 <__do_global_dtors_aux+0x12>
   1920c:	4804      	ldr	r0, [pc, #16]	; (19220 <__do_global_dtors_aux+0x20>)
   1920e:	f3af 8000 	nop.w
   19212:	2301      	movs	r3, #1
   19214:	7023      	strb	r3, [r4, #0]
   19216:	bd10      	pop	{r4, pc}
   19218:	200018b0 	.word	0x200018b0
   1921c:	00000000 	.word	0x00000000
   19220:	0001efc8 	.word	0x0001efc8

00019224 <frame_dummy>:
   19224:	b508      	push	{r3, lr}
   19226:	4b03      	ldr	r3, [pc, #12]	; (19234 <frame_dummy+0x10>)
   19228:	b11b      	cbz	r3, 19232 <frame_dummy+0xe>
   1922a:	4903      	ldr	r1, [pc, #12]	; (19238 <frame_dummy+0x14>)
   1922c:	4803      	ldr	r0, [pc, #12]	; (1923c <frame_dummy+0x18>)
   1922e:	f3af 8000 	nop.w
   19232:	bd08      	pop	{r3, pc}
   19234:	00000000 	.word	0x00000000
   19238:	200018b4 	.word	0x200018b4
   1923c:	0001efc8 	.word	0x0001efc8

00019240 <_stack_init>:
   19240:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
   19244:	4770      	bx	lr
   19246:	bf00      	nop

00019248 <_mainCRTStartup>:
   19248:	4b17      	ldr	r3, [pc, #92]	; (192a8 <_mainCRTStartup+0x60>)
   1924a:	2b00      	cmp	r3, #0
   1924c:	bf08      	it	eq
   1924e:	4b13      	ldreq	r3, [pc, #76]	; (1929c <_mainCRTStartup+0x54>)
   19250:	469d      	mov	sp, r3
   19252:	f7ff fff5 	bl	19240 <_stack_init>
   19256:	2100      	movs	r1, #0
   19258:	468b      	mov	fp, r1
   1925a:	460f      	mov	r7, r1
   1925c:	4813      	ldr	r0, [pc, #76]	; (192ac <_mainCRTStartup+0x64>)
   1925e:	4a14      	ldr	r2, [pc, #80]	; (192b0 <_mainCRTStartup+0x68>)
   19260:	1a12      	subs	r2, r2, r0
   19262:	f003 fb1d 	bl	1c8a0 <memset>
   19266:	4b0e      	ldr	r3, [pc, #56]	; (192a0 <_mainCRTStartup+0x58>)
   19268:	2b00      	cmp	r3, #0
   1926a:	d000      	beq.n	1926e <_mainCRTStartup+0x26>
   1926c:	4798      	blx	r3
   1926e:	4b0d      	ldr	r3, [pc, #52]	; (192a4 <_mainCRTStartup+0x5c>)
   19270:	2b00      	cmp	r3, #0
   19272:	d000      	beq.n	19276 <_mainCRTStartup+0x2e>
   19274:	4798      	blx	r3
   19276:	2000      	movs	r0, #0
   19278:	2100      	movs	r1, #0
   1927a:	0004      	movs	r4, r0
   1927c:	000d      	movs	r5, r1
   1927e:	480d      	ldr	r0, [pc, #52]	; (192b4 <_mainCRTStartup+0x6c>)
   19280:	2800      	cmp	r0, #0
   19282:	d002      	beq.n	1928a <_mainCRTStartup+0x42>
   19284:	480c      	ldr	r0, [pc, #48]	; (192b8 <_mainCRTStartup+0x70>)
   19286:	f3af 8000 	nop.w
   1928a:	f003 fad7 	bl	1c83c <__libc_init_array>
   1928e:	0020      	movs	r0, r4
   19290:	0029      	movs	r1, r5
   19292:	f002 fd03 	bl	1bc9c <main>
   19296:	f003 fabd 	bl	1c814 <exit>
   1929a:	bf00      	nop
   1929c:	00080000 	.word	0x00080000
	...
   192a8:	20006000 	.word	0x20006000
   192ac:	200018b0 	.word	0x200018b0
   192b0:	20001d5c 	.word	0x20001d5c
	...

000192bc <Reset_Handler>:

    /* Workaround for Errata 185 RAM: RAM corruption at extreme corners 
     * found at the Errata document for your device located
     * at https://infocenter.nordicsemi.com/index.jsp */
    
    LDR     R0, =0x10000130
   192bc:	480e      	ldr	r0, [pc, #56]	; (192f8 <skip+0x1a>)
    LDR     R0, [R0]
   192be:	6800      	ldr	r0, [r0, #0]
    LDR     R1, =0x10000134
   192c0:	490e      	ldr	r1, [pc, #56]	; (192fc <skip+0x1e>)
    LDR     R1, [R1]
   192c2:	6809      	ldr	r1, [r1, #0]
    
    CMP     R0, #0xA
   192c4:	280a      	cmp	r0, #10
    BNE     skip
   192c6:	d10a      	bne.n	192de <skip>
    CMP     R1, #0x0
   192c8:	2900      	cmp	r1, #0
    BNE     skip
   192ca:	d108      	bne.n	192de <skip>
    
    LDR     R0, =0x40000EE4
   192cc:	480c      	ldr	r0, [pc, #48]	; (19300 <skip+0x22>)
    LDR     R2, [R0]
   192ce:	6802      	ldr	r2, [r0, #0]
    LDR     R3, =0xFFFFFF8F
   192d0:	f06f 0370 	mvn.w	r3, #112	; 0x70
    ANDS    R2, R2, R3
   192d4:	401a      	ands	r2, r3
    LDR     R3, =0x00000040
   192d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    ORRS    R2, R2, R3
   192da:	431a      	orrs	r2, r3
    STR     R2, [R0]
   192dc:	6002      	str	r2, [r0, #0]

000192de <skip>:
 *      __bss_start__: VMA of end of the section to copy to. Normally __data_end__ is used, but by using __bss_start__
 *                    the user can add their own initialized data section before BSS section with the INTERT AFTER command.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__etext
   192de:	4909      	ldr	r1, [pc, #36]	; (19304 <skip+0x26>)
    ldr r2, =__data_start__
   192e0:	4a09      	ldr	r2, [pc, #36]	; (19308 <skip+0x2a>)
    ldr r3, =__bss_start__
   192e2:	4b0a      	ldr	r3, [pc, #40]	; (1930c <skip+0x2e>)

    subs r3, r3, r2
   192e4:	1a9b      	subs	r3, r3, r2
    ble .L_loop1_done
   192e6:	dd03      	ble.n	192f0 <skip+0x12>

.L_loop1:
    subs r3, r3, #4
   192e8:	3b04      	subs	r3, #4
    ldr r0, [r1,r3]
   192ea:	58c8      	ldr	r0, [r1, r3]
    str r0, [r2,r3]
   192ec:	50d0      	str	r0, [r2, r3]
    bgt .L_loop1
   192ee:	dcfb      	bgt.n	192e8 <skip+0xa>

.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */

/* Execute SystemInit function. */
    bl SystemInit
   192f0:	f000 fd06 	bl	19d00 <SystemInit>
 * If those libraries are not accessible, define __START as your entry point.
 */
#ifndef __START
#define __START _start
#endif
    bl __START
   192f4:	f7ff ffa8 	bl	19248 <_mainCRTStartup>
    LDR     R0, =0x10000130
   192f8:	10000130 	.word	0x10000130
    LDR     R1, =0x10000134
   192fc:	10000134 	.word	0x10000134
    LDR     R0, =0x40000EE4
   19300:	40000ee4 	.word	0x40000ee4
    ldr r1, =__etext
   19304:	0001f1d8 	.word	0x0001f1d8
    ldr r2, =__data_start__
   19308:	20001800 	.word	0x20001800
    ldr r3, =__bss_start__
   1930c:	200018b0 	.word	0x200018b0

00019310 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    b       .
   19310:	e7fe      	b.n	19310 <NMI_Handler>

00019312 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    b       .
   19312:	e7fe      	b.n	19312 <HardFault_Handler>

00019314 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    b       .
   19314:	e7fe      	b.n	19314 <MemoryManagement_Handler>

00019316 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    b       .
   19316:	e7fe      	b.n	19316 <BusFault_Handler>

00019318 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    b       .
   19318:	e7fe      	b.n	19318 <UsageFault_Handler>

0001931a <SVC_Handler>:


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    b       .
   1931a:	e7fe      	b.n	1931a <SVC_Handler>

0001931c <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
   1931c:	e7fe      	b.n	1931c <DebugMon_Handler>

0001931e <PendSV_Handler>:


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    b       .
   1931e:	e7fe      	b.n	1931e <PendSV_Handler>

00019320 <SysTick_Handler>:


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    b       .
   19320:	e7fe      	b.n	19320 <SysTick_Handler>

00019322 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
   19322:	e7fe      	b.n	19322 <Default_Handler>

00019324 <app_error_handler_bare>:
 * @param[in] error_code  Error code supplied to the handler.
 * @param[in] line_num    Line number where the handler is called.
 * @param[in] p_file_name Pointer to the file name.
 */
void app_error_handler_bare(ret_code_t error_code)
{
   19324:	b500      	push	{lr}
   19326:	b085      	sub	sp, #20
   19328:	4603      	mov	r3, r0
    error_info_t error_info =
   1932a:	2100      	movs	r1, #0
        .line_num    = 0,
        .p_file_name = NULL,
        .err_code    = error_code,
    };

    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   1932c:	aa01      	add	r2, sp, #4
   1932e:	f244 0001 	movw	r0, #16385	; 0x4001
    error_info_t error_info =
   19332:	e9cd 1101 	strd	r1, r1, [sp, #4]
   19336:	9303      	str	r3, [sp, #12]
    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   19338:	f000 f804 	bl	19344 <app_error_fault_handler>

    UNUSED_VARIABLE(error_info);
}
   1933c:	b005      	add	sp, #20
   1933e:	f85d fb04 	ldr.w	pc, [sp], #4
   19342:	bf00      	nop

00019344 <app_error_fault_handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   19344:	b672      	cpsid	i
            NRF_LOG_ERROR("UNKNOWN FAULT at 0x%08X", pc);
            break;
    }
#endif

    NRF_BREAKPOINT_COND;
   19346:	4b09      	ldr	r3, [pc, #36]	; (1936c <app_error_fault_handler+0x28>)
   19348:	681b      	ldr	r3, [r3, #0]
   1934a:	07db      	lsls	r3, r3, #31
   1934c:	d500      	bpl.n	19350 <app_error_fault_handler+0xc>
   1934e:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19350:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19354:	4906      	ldr	r1, [pc, #24]	; (19370 <app_error_fault_handler+0x2c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19356:	4b07      	ldr	r3, [pc, #28]	; (19374 <app_error_fault_handler+0x30>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19358:	68ca      	ldr	r2, [r1, #12]
   1935a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1935e:	4313      	orrs	r3, r2
   19360:	60cb      	str	r3, [r1, #12]
   19362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   19366:	bf00      	nop
   19368:	e7fd      	b.n	19366 <app_error_fault_handler+0x22>
   1936a:	bf00      	nop
   1936c:	e000edf0 	.word	0xe000edf0
   19370:	e000ed00 	.word	0xe000ed00
   19374:	05fa0004 	.word	0x05fa0004

00019378 <compare_func>:
    app_timer_t * p0 = CONTAINER_OF(p_item0, app_timer_t, list_item);
    app_timer_t * p1 = CONTAINER_OF(p_item1, app_timer_t, list_item);

    uint64_t p0_end = p0->end_val;
    uint64_t p1_end = p1->end_val;
    return (p0_end <= p1_end) ? true : false;
   19378:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1937c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   19380:	4299      	cmp	r1, r3
   19382:	bf08      	it	eq
   19384:	4290      	cmpeq	r0, r2
}
   19386:	bf2c      	ite	cs
   19388:	2001      	movcs	r0, #1
   1938a:	2000      	movcc	r0, #0
   1938c:	4770      	bx	lr
   1938e:	bf00      	nop

00019390 <rtc_irq>:
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
    }
}

static void rtc_irq(drv_rtc_t const * const  p_instance)
{
   19390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19394:	b087      	sub	sp, #28
   19396:	4606      	mov	r6, r0
    if (drv_rtc_overflow_pending(p_instance))
   19398:	f000 fb6e 	bl	19a78 <drv_rtc_overflow_pending>
   1939c:	b140      	cbz	r0, 193b0 <rtc_irq+0x20>
    m_base_counter += (DRV_RTC_MAX_CNT + 1);
   1939e:	4a97      	ldr	r2, [pc, #604]	; (195fc <rtc_irq+0x26c>)
   193a0:	e9d2 3100 	ldrd	r3, r1, [r2]
   193a4:	f113 7380 	adds.w	r3, r3, #16777216	; 0x1000000
   193a8:	f141 0100 	adc.w	r1, r1, #0
   193ac:	e9c2 3100 	strd	r3, r1, [r2]
    {
        on_overflow_evt();
    }
    if (drv_rtc_compare_pending(p_instance, 0))
   193b0:	2100      	movs	r1, #0
   193b2:	4630      	mov	r0, r6
   193b4:	f000 fb7c 	bl	19ab0 <drv_rtc_compare_pending>
    if (mp_active_timer)
   193b8:	4c91      	ldr	r4, [pc, #580]	; (19600 <rtc_irq+0x270>)
    if (drv_rtc_compare_pending(p_instance, 0))
   193ba:	b160      	cbz	r0, 193d6 <rtc_irq+0x46>
    if (mp_active_timer)
   193bc:	6823      	ldr	r3, [r4, #0]
   193be:	b153      	cbz	r3, 193d6 <rtc_irq+0x46>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   193c0:	4b90      	ldr	r3, [pc, #576]	; (19604 <rtc_irq+0x274>)
        UNUSED_RETURN_VALUE(timer_expire(mp_active_timer));
   193c2:	6825      	ldr	r5, [r4, #0]
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   193c4:	781b      	ldrb	r3, [r3, #0]
   193c6:	b123      	cbz	r3, 193d2 <rtc_irq+0x42>
   193c8:	b11d      	cbz	r5, 193d2 <rtc_irq+0x42>
   193ca:	7f2b      	ldrb	r3, [r5, #28]
   193cc:	2b00      	cmp	r3, #0
   193ce:	f040 8125 	bne.w	1961c <rtc_irq+0x28c>
        mp_active_timer = NULL;
   193d2:	2300      	movs	r3, #0
   193d4:	6023      	str	r3, [r4, #0]
    {
        on_compare_evt(p_instance);
    }
    if (drv_rtc_compare_pending(p_instance, 1))
   193d6:	2101      	movs	r1, #1
   193d8:	4630      	mov	r0, r6
   193da:	f000 fb69 	bl	19ab0 <drv_rtc_compare_pending>
   193de:	2800      	cmp	r0, #0
   193e0:	f040 80ef 	bne.w	195c2 <rtc_irq+0x232>
    timer_req_t *         p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   193e4:	4888      	ldr	r0, [pc, #544]	; (19608 <rtc_irq+0x278>)
   193e6:	a905      	add	r1, sp, #20
   193e8:	f000 fbe4 	bl	19bb4 <nrf_atfifo_item_get>
    while (p_req)
   193ec:	b378      	cbz	r0, 1944e <rtc_irq+0xbe>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   193ee:	4d87      	ldr	r5, [pc, #540]	; (1960c <rtc_irq+0x27c>)
                m_global_active = true;
   193f0:	f8df 8210 	ldr.w	r8, [pc, #528]	; 19604 <rtc_irq+0x274>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   193f4:	4f84      	ldr	r7, [pc, #528]	; (19608 <rtc_irq+0x278>)
   193f6:	e00b      	b.n	19410 <rtc_irq+0x80>
        switch (p_req->type)
   193f8:	2b00      	cmp	r3, #0
   193fa:	f000 80c9 	beq.w	19590 <rtc_irq+0x200>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   193fe:	a905      	add	r1, sp, #20
   19400:	4638      	mov	r0, r7
   19402:	f000 fc07 	bl	19c14 <nrf_atfifo_item_free>
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   19406:	a905      	add	r1, sp, #20
   19408:	4638      	mov	r0, r7
   1940a:	f000 fbd3 	bl	19bb4 <nrf_atfifo_item_get>
    while (p_req)
   1940e:	b1f0      	cbz	r0, 1944e <rtc_irq+0xbe>
        switch (p_req->type)
   19410:	7803      	ldrb	r3, [r0, #0]
   19412:	2b01      	cmp	r3, #1
   19414:	d012      	beq.n	1943c <rtc_irq+0xac>
   19416:	2b02      	cmp	r3, #2
   19418:	d1ee      	bne.n	193f8 <rtc_irq+0x68>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1941a:	4628      	mov	r0, r5
            p_next->active = false;
   1941c:	f04f 0900 	mov.w	r9, #0
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   19420:	f000 fc56 	bl	19cd0 <nrf_sortlist_pop>
        if (p_next)
   19424:	b130      	cbz	r0, 19434 <rtc_irq+0xa4>
            p_next->active = false;
   19426:	f880 901c 	strb.w	r9, [r0, #28]
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1942a:	4628      	mov	r0, r5
   1942c:	f000 fc50 	bl	19cd0 <nrf_sortlist_pop>
        if (p_next)
   19430:	2800      	cmp	r0, #0
   19432:	d1f8      	bne.n	19426 <rtc_irq+0x96>
                m_global_active = true;
   19434:	2301      	movs	r3, #1
   19436:	f888 3000 	strb.w	r3, [r8]
                break;
   1943a:	e7e0      	b.n	193fe <rtc_irq+0x6e>
                if (p_req->p_timer == mp_active_timer)
   1943c:	6841      	ldr	r1, [r0, #4]
   1943e:	6823      	ldr	r3, [r4, #0]
   19440:	4299      	cmp	r1, r3
   19442:	f000 80b5 	beq.w	195b0 <rtc_irq+0x220>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   19446:	4628      	mov	r0, r5
   19448:	f000 fc4c 	bl	19ce4 <nrf_sortlist_remove>
                    if (!found)
   1944c:	e7d7      	b.n	193fe <rtc_irq+0x6e>
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   1944e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1960c <rtc_irq+0x27c>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19452:	4f6f      	ldr	r7, [pc, #444]	; (19610 <rtc_irq+0x280>)
   19454:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 195fc <rtc_irq+0x26c>
}
   19458:	e038      	b.n	194cc <rtc_irq+0x13c>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1945a:	4640      	mov	r0, r8
   1945c:	f000 fc38 	bl	19cd0 <nrf_sortlist_pop>
   19460:	4605      	mov	r5, r0
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19462:	e9d5 b302 	ldrd	fp, r3, [r5, #8]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19466:	4638      	mov	r0, r7
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19468:	9303      	str	r3, [sp, #12]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1946a:	f000 fb31 	bl	19ad0 <drv_rtc_counter_get>
   1946e:	4602      	mov	r2, r0
   19470:	e9d9 0100 	ldrd	r0, r1, [r9]
    if (now < m_stamp64) {
   19474:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 19618 <rtc_irq+0x288>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19478:	1880      	adds	r0, r0, r2
    if (now < m_stamp64) {
   1947a:	e9da 2300 	ldrd	r2, r3, [sl]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1947e:	f141 0100 	adc.w	r1, r1, #0
    if (now < m_stamp64) {
   19482:	4299      	cmp	r1, r3
   19484:	bf08      	it	eq
   19486:	4290      	cmpeq	r0, r2
   19488:	9b03      	ldr	r3, [sp, #12]
   1948a:	d203      	bcs.n	19494 <rtc_irq+0x104>
        now += (DRV_RTC_MAX_CNT + 1);
   1948c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19490:	f141 0100 	adc.w	r1, r1, #0
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19494:	ebbb 0200 	subs.w	r2, fp, r0
   19498:	eb63 0301 	sbc.w	r3, r3, r1
   1949c:	9200      	str	r2, [sp, #0]
   1949e:	9301      	str	r3, [sp, #4]
    if (remaining > 0) {
   194a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   194a4:	2a01      	cmp	r2, #1
   194a6:	f173 0100 	sbcs.w	r1, r3, #0
   194aa:	db29      	blt.n	19500 <rtc_irq+0x170>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   194ac:	f5b2 0f35 	cmp.w	r2, #11862016	; 0xb50000
   194b0:	d268      	bcs.n	19584 <rtc_irq+0x1f4>
   194b2:	68aa      	ldr	r2, [r5, #8]
        ret = drv_rtc_windowed_compare_set(&m_rtc_inst, 0, cc_val, APP_TIMER_SAFE_WINDOW);
   194b4:	f44f 0396 	mov.w	r3, #4915200	; 0x4b0000
   194b8:	2100      	movs	r1, #0
   194ba:	4638      	mov	r0, r7
   194bc:	f000 fa50 	bl	19960 <drv_rtc_windowed_compare_set>
        if (ret == NRF_SUCCESS)
   194c0:	2800      	cmp	r0, #0
   194c2:	d059      	beq.n	19578 <rtc_irq+0x1e8>
    if (ret == NRF_ERROR_TIMEOUT)
   194c4:	280d      	cmp	r0, #13
   194c6:	d01f      	beq.n	19508 <rtc_irq+0x178>
                    mp_active_timer = NULL;
   194c8:	2300      	movs	r3, #0
   194ca:	6023      	str	r3, [r4, #0]
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   194cc:	4640      	mov	r0, r8
   194ce:	f000 fc05 	bl	19cdc <nrf_sortlist_peek>
            if (mp_active_timer == NULL)
   194d2:	6823      	ldr	r3, [r4, #0]
        if (p_next) //Candidate for active timer
   194d4:	2800      	cmp	r0, #0
   194d6:	d06e      	beq.n	195b6 <rtc_irq+0x226>
            if (mp_active_timer == NULL)
   194d8:	2b00      	cmp	r3, #0
   194da:	d0be      	beq.n	1945a <rtc_irq+0xca>
            else if (p_next->end_val < mp_active_timer->end_val)
   194dc:	6823      	ldr	r3, [r4, #0]
   194de:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   194e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   194e6:	4299      	cmp	r1, r3
   194e8:	bf08      	it	eq
   194ea:	4290      	cmpeq	r0, r2
   194ec:	d247      	bcs.n	1957e <rtc_irq+0x1ee>
                if (mp_active_timer->active)
   194ee:	6823      	ldr	r3, [r4, #0]
   194f0:	7f1b      	ldrb	r3, [r3, #28]
   194f2:	2b00      	cmp	r3, #0
   194f4:	d0b1      	beq.n	1945a <rtc_irq+0xca>
                    nrf_sortlist_add(&m_app_timer_sortlist, &mp_active_timer->list_item);
   194f6:	6821      	ldr	r1, [r4, #0]
   194f8:	4640      	mov	r0, r8
   194fa:	f000 fbd5 	bl	19ca8 <nrf_sortlist_add>
            if (rtc_reconf)
   194fe:	e7ac      	b.n	1945a <rtc_irq+0xca>
        drv_rtc_compare_disable(&m_rtc_inst, 0);
   19500:	2100      	movs	r1, #0
   19502:	4638      	mov	r0, r7
   19504:	f000 fac8 	bl	19a98 <drv_rtc_compare_disable>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   19508:	4b3e      	ldr	r3, [pc, #248]	; (19604 <rtc_irq+0x274>)
   1950a:	781b      	ldrb	r3, [r3, #0]
   1950c:	2b00      	cmp	r3, #0
   1950e:	d0db      	beq.n	194c8 <rtc_irq+0x138>
   19510:	7f2b      	ldrb	r3, [r5, #28]
   19512:	2b00      	cmp	r3, #0
   19514:	d0d8      	beq.n	194c8 <rtc_irq+0x138>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19516:	4638      	mov	r0, r7
   19518:	f000 fada 	bl	19ad0 <drv_rtc_counter_get>
    if (now < m_stamp64) {
   1951c:	e9da 2300 	ldrd	r2, r3, [sl]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19520:	e9d9 ab00 	ldrd	sl, fp, [r9]
   19524:	eb1a 0a00 	adds.w	sl, sl, r0
   19528:	f14b 0b00 	adc.w	fp, fp, #0
    if (now < m_stamp64) {
   1952c:	459b      	cmp	fp, r3
   1952e:	bf08      	it	eq
   19530:	4592      	cmpeq	sl, r2
   19532:	d203      	bcs.n	1953c <rtc_irq+0x1ac>
        now += (DRV_RTC_MAX_CNT + 1);
   19534:	f11a 7a80 	adds.w	sl, sl, #16777216	; 0x1000000
   19538:	f14b 0b00 	adc.w	fp, fp, #0
        if (get_now() >= p_timer->end_val) {
   1953c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19540:	459b      	cmp	fp, r3
   19542:	bf08      	it	eq
   19544:	4592      	cmpeq	sl, r2
   19546:	d354      	bcc.n	195f2 <rtc_irq+0x262>
            if (p_timer->repeat_period == 0)
   19548:	692b      	ldr	r3, [r5, #16]
   1954a:	b903      	cbnz	r3, 1954e <rtc_irq+0x1be>
                p_timer->active = false;
   1954c:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   1954e:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   19552:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   19554:	6929      	ldr	r1, [r5, #16]
   19556:	2900      	cmp	r1, #0
   19558:	d0b6      	beq.n	194c8 <rtc_irq+0x138>
   1955a:	7f2b      	ldrb	r3, [r5, #28]
   1955c:	2b00      	cmp	r3, #0
   1955e:	d0b3      	beq.n	194c8 <rtc_irq+0x138>
                p_timer->end_val += p_timer->repeat_period;
   19560:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19564:	1852      	adds	r2, r2, r1
   19566:	f143 0300 	adc.w	r3, r3, #0
   1956a:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   1956e:	4629      	mov	r1, r5
   19570:	4640      	mov	r0, r8
   19572:	f000 fb99 	bl	19ca8 <nrf_sortlist_add>
                ret = true;
   19576:	e7a7      	b.n	194c8 <rtc_irq+0x138>
                    if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   19578:	6823      	ldr	r3, [r4, #0]
   1957a:	b1ab      	cbz	r3, 195a8 <rtc_irq+0x218>
                    mp_active_timer = p_next;
   1957c:	6025      	str	r5, [r4, #0]
        on_compare1_evt(p_instance);
    }

    timer_req_process(p_instance);
    rtc_update(p_instance);
}
   1957e:	b007      	add	sp, #28
   19580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((ticks_to - ticks_from) & RTC_COUNTER_COUNTER_Msk);
}

uint32_t app_timer_cnt_get(void)
{
    return drv_rtc_counter_get(&m_rtc_inst);
   19584:	4638      	mov	r0, r7
   19586:	f000 faa3 	bl	19ad0 <drv_rtc_counter_get>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   1958a:	4a22      	ldr	r2, [pc, #136]	; (19614 <rtc_irq+0x284>)
   1958c:	4402      	add	r2, r0
   1958e:	e791      	b.n	194b4 <rtc_irq+0x124>
                if (!p_req->p_timer->active)
   19590:	6843      	ldr	r3, [r0, #4]
   19592:	7f1a      	ldrb	r2, [r3, #28]
   19594:	2a00      	cmp	r2, #0
   19596:	f47f af32 	bne.w	193fe <rtc_irq+0x6e>
                    p_req->p_timer->active = true;
   1959a:	2201      	movs	r2, #1
   1959c:	771a      	strb	r2, [r3, #28]
                    nrf_sortlist_add(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   1959e:	6841      	ldr	r1, [r0, #4]
   195a0:	4628      	mov	r0, r5
   195a2:	f000 fb81 	bl	19ca8 <nrf_sortlist_add>
                    NRF_LOG_INST_DEBUG(p_req->p_timer->p_log,"Start request (expiring at %d/0x%08x).",
   195a6:	e72a      	b.n	193fe <rtc_irq+0x6e>
                        drv_rtc_start(p_instance);
   195a8:	4630      	mov	r0, r6
   195aa:	f000 f9ab 	bl	19904 <drv_rtc_start>
   195ae:	e7e5      	b.n	1957c <rtc_irq+0x1ec>
                    mp_active_timer = NULL;
   195b0:	2300      	movs	r3, #0
   195b2:	6023      	str	r3, [r4, #0]
   195b4:	e723      	b.n	193fe <rtc_irq+0x6e>
            if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   195b6:	2b00      	cmp	r3, #0
   195b8:	d1e1      	bne.n	1957e <rtc_irq+0x1ee>
                drv_rtc_stop(p_instance);
   195ba:	4630      	mov	r0, r6
   195bc:	f000 f9a6 	bl	1990c <drv_rtc_stop>
}
   195c0:	e7dd      	b.n	1957e <rtc_irq+0x1ee>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195c2:	4813      	ldr	r0, [pc, #76]	; (19610 <rtc_irq+0x280>)
    if (now < m_stamp64) {
   195c4:	4d14      	ldr	r5, [pc, #80]	; (19618 <rtc_irq+0x288>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195c6:	f000 fa83 	bl	19ad0 <drv_rtc_counter_get>
   195ca:	4b0c      	ldr	r3, [pc, #48]	; (195fc <rtc_irq+0x26c>)
   195cc:	e9d3 8900 	ldrd	r8, r9, [r3]
    if (now < m_stamp64) {
   195d0:	e9d5 2300 	ldrd	r2, r3, [r5]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195d4:	eb18 0800 	adds.w	r8, r8, r0
   195d8:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   195dc:	4599      	cmp	r9, r3
   195de:	bf08      	it	eq
   195e0:	4590      	cmpeq	r8, r2
   195e2:	d203      	bcs.n	195ec <rtc_irq+0x25c>
        now += (DRV_RTC_MAX_CNT + 1);
   195e4:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   195e8:	f149 0900 	adc.w	r9, r9, #0
    m_stamp64 = get_now();
   195ec:	e9c5 8900 	strd	r8, r9, [r5]
}
   195f0:	e6f8      	b.n	193e4 <rtc_irq+0x54>
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   195f2:	4629      	mov	r1, r5
   195f4:	4640      	mov	r0, r8
   195f6:	f000 fb57 	bl	19ca8 <nrf_sortlist_add>
            ret = true;
   195fa:	e765      	b.n	194c8 <rtc_irq+0x138>
   195fc:	200018d0 	.word	0x200018d0
   19600:	20001950 	.word	0x20001950
   19604:	200018d8 	.word	0x200018d8
   19608:	20001934 	.word	0x20001934
   1960c:	0001e98c 	.word	0x0001e98c
   19610:	20001800 	.word	0x20001800
   19614:	00b4ffff 	.word	0x00b4ffff
   19618:	20001948 	.word	0x20001948
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1961c:	481c      	ldr	r0, [pc, #112]	; (19690 <rtc_irq+0x300>)
   1961e:	f000 fa57 	bl	19ad0 <drv_rtc_counter_get>
   19622:	4a1c      	ldr	r2, [pc, #112]	; (19694 <rtc_irq+0x304>)
    if (now < m_stamp64) {
   19624:	4b1c      	ldr	r3, [pc, #112]	; (19698 <rtc_irq+0x308>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19626:	e9d2 8900 	ldrd	r8, r9, [r2]
    if (now < m_stamp64) {
   1962a:	e9d3 2300 	ldrd	r2, r3, [r3]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1962e:	eb18 0800 	adds.w	r8, r8, r0
   19632:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   19636:	4599      	cmp	r9, r3
   19638:	bf08      	it	eq
   1963a:	4590      	cmpeq	r8, r2
   1963c:	d203      	bcs.n	19646 <rtc_irq+0x2b6>
        now += (DRV_RTC_MAX_CNT + 1);
   1963e:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   19642:	f149 0900 	adc.w	r9, r9, #0
        if (get_now() >= p_timer->end_val) {
   19646:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1964a:	4599      	cmp	r9, r3
   1964c:	bf08      	it	eq
   1964e:	4590      	cmpeq	r8, r2
   19650:	d319      	bcc.n	19686 <rtc_irq+0x2f6>
            if (p_timer->repeat_period == 0)
   19652:	692b      	ldr	r3, [r5, #16]
   19654:	b903      	cbnz	r3, 19658 <rtc_irq+0x2c8>
                p_timer->active = false;
   19656:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   19658:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   1965c:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   1965e:	6929      	ldr	r1, [r5, #16]
   19660:	2900      	cmp	r1, #0
   19662:	f43f aeb6 	beq.w	193d2 <rtc_irq+0x42>
   19666:	7f2b      	ldrb	r3, [r5, #28]
   19668:	2b00      	cmp	r3, #0
   1966a:	f43f aeb2 	beq.w	193d2 <rtc_irq+0x42>
                p_timer->end_val += p_timer->repeat_period;
   1966e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19672:	1852      	adds	r2, r2, r1
   19674:	f143 0300 	adc.w	r3, r3, #0
   19678:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   1967c:	4807      	ldr	r0, [pc, #28]	; (1969c <rtc_irq+0x30c>)
   1967e:	4629      	mov	r1, r5
   19680:	f000 fb12 	bl	19ca8 <nrf_sortlist_add>
                ret = true;
   19684:	e6a5      	b.n	193d2 <rtc_irq+0x42>
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   19686:	4805      	ldr	r0, [pc, #20]	; (1969c <rtc_irq+0x30c>)
   19688:	4629      	mov	r1, r5
   1968a:	f000 fb0d 	bl	19ca8 <nrf_sortlist_add>
            ret = true;
   1968e:	e6a0      	b.n	193d2 <rtc_irq+0x42>
   19690:	20001800 	.word	0x20001800
   19694:	200018d0 	.word	0x200018d0
   19698:	20001948 	.word	0x20001948
   1969c:	0001e98c 	.word	0x0001e98c

000196a0 <app_timer_init>:
{
   196a0:	b510      	push	{r4, lr}
    drv_rtc_config_t config = {
   196a2:	4b13      	ldr	r3, [pc, #76]	; (196f0 <app_timer_init+0x50>)
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196a4:	4913      	ldr	r1, [pc, #76]	; (196f4 <app_timer_init+0x54>)
    drv_rtc_config_t config = {
   196a6:	681b      	ldr	r3, [r3, #0]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196a8:	4813      	ldr	r0, [pc, #76]	; (196f8 <app_timer_init+0x58>)
{
   196aa:	b082      	sub	sp, #8
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196ac:	2258      	movs	r2, #88	; 0x58
    drv_rtc_config_t config = {
   196ae:	9301      	str	r3, [sp, #4]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196b0:	2308      	movs	r3, #8
   196b2:	f000 fa2b 	bl	19b0c <nrf_atfifo_init>
    if (err_code != NRFX_SUCCESS)
   196b6:	4604      	mov	r4, r0
   196b8:	b110      	cbz	r0, 196c0 <app_timer_init+0x20>
}
   196ba:	4620      	mov	r0, r4
   196bc:	b002      	add	sp, #8
   196be:	bd10      	pop	{r4, pc}
    err_code = drv_rtc_init(&m_rtc_inst, &config, rtc_irq);
   196c0:	4a0e      	ldr	r2, [pc, #56]	; (196fc <app_timer_init+0x5c>)
   196c2:	480f      	ldr	r0, [pc, #60]	; (19700 <app_timer_init+0x60>)
   196c4:	a901      	add	r1, sp, #4
   196c6:	f000 f8db 	bl	19880 <drv_rtc_init>
    if (err_code != NRFX_SUCCESS)
   196ca:	4604      	mov	r4, r0
   196cc:	2800      	cmp	r0, #0
   196ce:	d1f4      	bne.n	196ba <app_timer_init+0x1a>
    drv_rtc_overflow_enable(&m_rtc_inst, true);
   196d0:	480b      	ldr	r0, [pc, #44]	; (19700 <app_timer_init+0x60>)
   196d2:	2101      	movs	r1, #1
   196d4:	f000 f9c6 	bl	19a64 <drv_rtc_overflow_enable>
    drv_rtc_compare_set(&m_rtc_inst, 1, DRV_RTC_MAX_CNT >> 1, true);
   196d8:	2301      	movs	r3, #1
   196da:	4619      	mov	r1, r3
   196dc:	4a09      	ldr	r2, [pc, #36]	; (19704 <app_timer_init+0x64>)
   196de:	4808      	ldr	r0, [pc, #32]	; (19700 <app_timer_init+0x60>)
   196e0:	f000 f918 	bl	19914 <drv_rtc_compare_set>
    m_global_active = true;
   196e4:	4b08      	ldr	r3, [pc, #32]	; (19708 <app_timer_init+0x68>)
   196e6:	2201      	movs	r2, #1
}
   196e8:	4620      	mov	r0, r4
    m_global_active = true;
   196ea:	701a      	strb	r2, [r3, #0]
}
   196ec:	b002      	add	sp, #8
   196ee:	bd10      	pop	{r4, pc}
   196f0:	0001e988 	.word	0x0001e988
   196f4:	200018dc 	.word	0x200018dc
   196f8:	20001934 	.word	0x20001934
   196fc:	00019391 	.word	0x00019391
   19700:	20001800 	.word	0x20001800
   19704:	007fffff 	.word	0x007fffff
   19708:	200018d8 	.word	0x200018d8

0001970c <app_timer_create>:
    if (timeout_handler == NULL)
   1970c:	b14a      	cbz	r2, 19722 <app_timer_create+0x16>
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   1970e:	f1a1 0101 	sub.w	r1, r1, #1
    app_timer_t * p_t = (app_timer_t *) *p_timer_id;
   19712:	6803      	ldr	r3, [r0, #0]
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   19714:	fab1 f181 	clz	r1, r1
   19718:	0949      	lsrs	r1, r1, #5
   1971a:	e9c3 1204 	strd	r1, r2, [r3, #16]
    return NRF_SUCCESS;
   1971e:	2000      	movs	r0, #0
   19720:	4770      	bx	lr
        return NRF_ERROR_INVALID_PARAM;
   19722:	2007      	movs	r0, #7
}
   19724:	4770      	bx	lr
   19726:	bf00      	nop

00019728 <app_timer_start>:
    if (p_t->active)
   19728:	7f03      	ldrb	r3, [r0, #28]
   1972a:	b10b      	cbz	r3, 19730 <app_timer_start+0x8>
        return NRF_SUCCESS;
   1972c:	2000      	movs	r0, #0
}
   1972e:	4770      	bx	lr
{
   19730:	b5f0      	push	{r4, r5, r6, r7, lr}
    p_t->p_context = p_context;
   19732:	6182      	str	r2, [r0, #24]
{
   19734:	b083      	sub	sp, #12
   19736:	4604      	mov	r4, r0
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19738:	481a      	ldr	r0, [pc, #104]	; (197a4 <app_timer_start+0x7c>)
   1973a:	460d      	mov	r5, r1
   1973c:	f000 f9c8 	bl	19ad0 <drv_rtc_counter_get>
   19740:	4b19      	ldr	r3, [pc, #100]	; (197a8 <app_timer_start+0x80>)
    if (now < m_stamp64) {
   19742:	491a      	ldr	r1, [pc, #104]	; (197ac <app_timer_start+0x84>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19744:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (now < m_stamp64) {
   19748:	e9d1 6700 	ldrd	r6, r7, [r1]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1974c:	1812      	adds	r2, r2, r0
   1974e:	f143 0300 	adc.w	r3, r3, #0
    if (now < m_stamp64) {
   19752:	42bb      	cmp	r3, r7
   19754:	bf08      	it	eq
   19756:	42b2      	cmpeq	r2, r6
   19758:	d203      	bcs.n	19762 <app_timer_start+0x3a>
        now += (DRV_RTC_MAX_CNT + 1);
   1975a:	f112 7280 	adds.w	r2, r2, #16777216	; 0x1000000
   1975e:	f143 0300 	adc.w	r3, r3, #0
    p_t->end_val = get_now() + timeout_ticks;
   19762:	1952      	adds	r2, r2, r5
    if (p_t->repeat_period)
   19764:	6921      	ldr	r1, [r4, #16]
    p_t->end_val = get_now() + timeout_ticks;
   19766:	f143 0300 	adc.w	r3, r3, #0
   1976a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    if (p_t->repeat_period)
   1976e:	b101      	cbz	r1, 19772 <app_timer_start+0x4a>
        p_t->repeat_period = timeout_ticks;
   19770:	6125      	str	r5, [r4, #16]
    p_req = nrf_atfifo_item_alloc(m_req_fifo, &fifo_ctx);
   19772:	480f      	ldr	r0, [pc, #60]	; (197b0 <app_timer_start+0x88>)
   19774:	a901      	add	r1, sp, #4
   19776:	f000 f9df 	bl	19b38 <nrf_atfifo_item_alloc>
    if (p_req)
   1977a:	b148      	cbz	r0, 19790 <app_timer_start+0x68>
        p_req->type    = type;
   1977c:	2500      	movs	r5, #0
        p_req->p_timer = p_timer;
   1977e:	6044      	str	r4, [r0, #4]
        p_req->type    = type;
   19780:	7005      	strb	r5, [r0, #0]
        if (nrf_atfifo_item_put(m_req_fifo, &fifo_ctx))
   19782:	a901      	add	r1, sp, #4
   19784:	480a      	ldr	r0, [pc, #40]	; (197b0 <app_timer_start+0x88>)
   19786:	f000 fa05 	bl	19b94 <nrf_atfifo_item_put>
   1978a:	b920      	cbnz	r0, 19796 <app_timer_start+0x6e>
}
   1978c:	b003      	add	sp, #12
   1978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRF_ERROR_NO_MEM;
   19790:	2004      	movs	r0, #4
}
   19792:	b003      	add	sp, #12
   19794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drv_rtc_irq_trigger(&m_rtc_inst);
   19796:	4803      	ldr	r0, [pc, #12]	; (197a4 <app_timer_start+0x7c>)
   19798:	f000 f99e 	bl	19ad8 <drv_rtc_irq_trigger>
        return NRF_SUCCESS;
   1979c:	4628      	mov	r0, r5
}
   1979e:	b003      	add	sp, #12
   197a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   197a2:	bf00      	nop
   197a4:	20001800 	.word	0x20001800
   197a8:	200018d0 	.word	0x200018d0
   197ac:	20001948 	.word	0x20001948
   197b0:	20001934 	.word	0x20001934

000197b4 <app_timer_stop>:
{
   197b4:	b530      	push	{r4, r5, lr}
    p_t->active = false;
   197b6:	2500      	movs	r5, #0
{
   197b8:	b083      	sub	sp, #12
   197ba:	4604      	mov	r4, r0
    p_t->active = false;
   197bc:	7705      	strb	r5, [r0, #28]
    p_req = nrf_atfifo_item_alloc(m_req_fifo, &fifo_ctx);
   197be:	a901      	add	r1, sp, #4
   197c0:	480b      	ldr	r0, [pc, #44]	; (197f0 <app_timer_stop+0x3c>)
   197c2:	f000 f9b9 	bl	19b38 <nrf_atfifo_item_alloc>
    if (p_req)
   197c6:	b178      	cbz	r0, 197e8 <app_timer_stop+0x34>
        p_req->type    = type;
   197c8:	2301      	movs	r3, #1
        p_req->p_timer = p_timer;
   197ca:	6044      	str	r4, [r0, #4]
        p_req->type    = type;
   197cc:	7003      	strb	r3, [r0, #0]
        if (nrf_atfifo_item_put(m_req_fifo, &fifo_ctx))
   197ce:	a901      	add	r1, sp, #4
   197d0:	4807      	ldr	r0, [pc, #28]	; (197f0 <app_timer_stop+0x3c>)
   197d2:	f000 f9df 	bl	19b94 <nrf_atfifo_item_put>
   197d6:	b908      	cbnz	r0, 197dc <app_timer_stop+0x28>
}
   197d8:	b003      	add	sp, #12
   197da:	bd30      	pop	{r4, r5, pc}
    drv_rtc_irq_trigger(&m_rtc_inst);
   197dc:	4805      	ldr	r0, [pc, #20]	; (197f4 <app_timer_stop+0x40>)
   197de:	f000 f97b 	bl	19ad8 <drv_rtc_irq_trigger>
        return NRF_SUCCESS;
   197e2:	4628      	mov	r0, r5
}
   197e4:	b003      	add	sp, #12
   197e6:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR_NO_MEM;
   197e8:	2004      	movs	r0, #4
}
   197ea:	b003      	add	sp, #12
   197ec:	bd30      	pop	{r4, r5, pc}
   197ee:	bf00      	nop
   197f0:	20001934 	.word	0x20001934
   197f4:	20001800 	.word	0x20001800

000197f8 <app_timer_cnt_get>:
    return drv_rtc_counter_get(&m_rtc_inst);
   197f8:	4801      	ldr	r0, [pc, #4]	; (19800 <app_timer_cnt_get+0x8>)
   197fa:	f000 b969 	b.w	19ad0 <drv_rtc_counter_get>
   197fe:	bf00      	nop
   19800:	20001800 	.word	0x20001800

00019804 <app_util_critical_region_enter>:
        __enable_irq();
    }
}

void app_util_critical_region_enter(uint8_t *p_nested)
{
   19804:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19806:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1980a:	b672      	cpsid	i
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)
{
  int was_masked = __sd_nvic_irq_disable();
  if (!nrf_nvic_state.__cr_flag)
   1980c:	4b0d      	ldr	r3, [pc, #52]	; (19844 <app_util_critical_region_enter+0x40>)
   1980e:	689a      	ldr	r2, [r3, #8]
   19810:	b9aa      	cbnz	r2, 1983e <app_util_critical_region_enter+0x3a>
  {
    nrf_nvic_state.__cr_flag = 1;
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   19812:	490d      	ldr	r1, [pc, #52]	; (19848 <app_util_critical_region_enter+0x44>)
   19814:	4e0d      	ldr	r6, [pc, #52]	; (1984c <app_util_critical_region_enter+0x48>)
    nrf_nvic_state.__cr_flag = 1;
   19816:	2501      	movs	r5, #1
   19818:	609d      	str	r5, [r3, #8]
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   1981a:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
   1981e:	4035      	ands	r5, r6
   19820:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0] = __NRF_NVIC_APP_IRQS_0;
   19822:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
    nrf_nvic_state.__irq_masks[1] = ( NVIC->ICER[1] & __NRF_NVIC_APP_IRQS_1 );
   19826:	f8d1 5084 	ldr.w	r5, [r1, #132]	; 0x84
   1982a:	605d      	str	r5, [r3, #4]
    NVIC->ICER[1] = __NRF_NVIC_APP_IRQS_1;
   1982c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    *p_is_nested_critical_region = 0;
   19834:	7002      	strb	r2, [r0, #0]
  }
  else
  {
    *p_is_nested_critical_region = 1;
  }
  if (!was_masked)
   19836:	b904      	cbnz	r4, 1983a <app_util_critical_region_enter+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   19838:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_enter(p_nested);
#else
    app_util_disable_irq();
#endif
}
   1983a:	bc70      	pop	{r4, r5, r6}
   1983c:	4770      	bx	lr
    *p_is_nested_critical_region = 1;
   1983e:	2301      	movs	r3, #1
   19840:	7003      	strb	r3, [r0, #0]
   19842:	e7f8      	b.n	19836 <app_util_critical_region_enter+0x32>
   19844:	20001cc8 	.word	0x20001cc8
   19848:	e000e100 	.word	0xe000e100
   1984c:	bdff06fc 	.word	0xbdff06fc

00019850 <app_util_critical_region_exit>:
  return NRF_SUCCESS;
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)
{
  if (nrf_nvic_state.__cr_flag && (is_nested_critical_region == 0))
   19850:	4b09      	ldr	r3, [pc, #36]	; (19878 <app_util_critical_region_exit+0x28>)
   19852:	689a      	ldr	r2, [r3, #8]
   19854:	b172      	cbz	r2, 19874 <app_util_critical_region_exit+0x24>
   19856:	b968      	cbnz	r0, 19874 <app_util_critical_region_exit+0x24>

void app_util_critical_region_exit(uint8_t nested)
{
   19858:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1985a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1985e:	b672      	cpsid	i
  {
    int was_masked = __sd_nvic_irq_disable();
    NVIC->ISER[0] = nrf_nvic_state.__irq_masks[0];
   19860:	4a06      	ldr	r2, [pc, #24]	; (1987c <app_util_critical_region_exit+0x2c>)
   19862:	681c      	ldr	r4, [r3, #0]
   19864:	6014      	str	r4, [r2, #0]
    NVIC->ISER[1] = nrf_nvic_state.__irq_masks[1];
   19866:	685c      	ldr	r4, [r3, #4]
   19868:	6054      	str	r4, [r2, #4]
    nrf_nvic_state.__cr_flag = 0;
   1986a:	6098      	str	r0, [r3, #8]
    if (!was_masked)
   1986c:	b901      	cbnz	r1, 19870 <app_util_critical_region_exit+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
   1986e:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_exit(nested);
#else
    app_util_enable_irq();
#endif
}
   19870:	bc10      	pop	{r4}
   19872:	4770      	bx	lr
   19874:	4770      	bx	lr
   19876:	bf00      	nop
   19878:	20001cc8 	.word	0x20001cc8
   1987c:	e000e100 	.word	0xe000e100

00019880 <drv_rtc_init>:
#define COUNTER_TO_CC_MIN_DISTANCE 2

ret_code_t drv_rtc_init(drv_rtc_t const * const  p_instance,
                        drv_rtc_config_t const * p_config,
                        drv_rtc_handler_t        handler)
{
   19880:	b470      	push	{r4, r5, r6}

    ret_code_t err_code;

    m_handlers[p_instance->instance_id] = handler;

    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   19882:	4c1c      	ldr	r4, [pc, #112]	; (198f4 <drv_rtc_init+0x74>)
    m_handlers[p_instance->instance_id] = handler;
   19884:	7943      	ldrb	r3, [r0, #5]
   19886:	4e1c      	ldr	r6, [pc, #112]	; (198f8 <drv_rtc_init+0x78>)
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   19888:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
    m_handlers[p_instance->instance_id] = handler;
   1988c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   19890:	792d      	ldrb	r5, [r5, #4]
   19892:	bb65      	cbnz	r5, 198ee <drv_rtc_init+0x6e>
        err_code = NRF_ERROR_INVALID_STATE;
        NRF_LOG_WARNING("RTC instance already initialized.");
        return err_code;
    }

    nrf_rtc_prescaler_set(p_instance->p_reg, p_config->prescaler);
   19894:	6803      	ldr	r3, [r0, #0]
   19896:	880a      	ldrh	r2, [r1, #0]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   19898:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRFX_IRQ_PRIORITY_SET(p_instance->irq, p_config->interrupt_priority);
   1989c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   198a0:	788a      	ldrb	r2, [r1, #2]
  if ((int32_t)(IRQn) < 0)
   198a2:	2b00      	cmp	r3, #0
   198a4:	db1b      	blt.n	198de <drv_rtc_init+0x5e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   198a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   198aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   198ae:	0152      	lsls	r2, r2, #5
   198b0:	b2d2      	uxtb	r2, r2
   198b2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NRFX_IRQ_ENABLE(p_instance->irq);
   198b6:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   198ba:	4d10      	ldr	r5, [pc, #64]	; (198fc <drv_rtc_init+0x7c>)
   198bc:	f003 021f 	and.w	r2, r3, #31
   198c0:	2101      	movs	r1, #1
   198c2:	095b      	lsrs	r3, r3, #5
   198c4:	fa01 f202 	lsl.w	r2, r1, r2
   198c8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]

    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   198cc:	7943      	ldrb	r3, [r0, #5]
   198ce:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    m_cb[p_instance->instance_id].p_instance = p_instance;
   198d2:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   198d6:	7111      	strb	r1, [r2, #4]

    err_code = NRF_SUCCESS;
    NRF_LOG_INFO("RTC: initialized.");
    return err_code;
   198d8:	2000      	movs	r0, #0
}
   198da:	bc70      	pop	{r4, r5, r6}
   198dc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   198de:	4908      	ldr	r1, [pc, #32]	; (19900 <drv_rtc_init+0x80>)
   198e0:	f003 030f 	and.w	r3, r3, #15
   198e4:	0152      	lsls	r2, r2, #5
   198e6:	4419      	add	r1, r3
   198e8:	b2d2      	uxtb	r2, r2
   198ea:	760a      	strb	r2, [r1, #24]
   198ec:	e7e3      	b.n	198b6 <drv_rtc_init+0x36>
        return err_code;
   198ee:	2008      	movs	r0, #8
}
   198f0:	bc70      	pop	{r4, r5, r6}
   198f2:	4770      	bx	lr
   198f4:	20001954 	.word	0x20001954
   198f8:	2000195c 	.word	0x2000195c
   198fc:	e000e100 	.word	0xe000e100
   19900:	e000ecfc 	.word	0xe000ecfc

00019904 <drv_rtc_start>:
}

void drv_rtc_start(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_START);
   19904:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19906:	2201      	movs	r2, #1
   19908:	601a      	str	r2, [r3, #0]
}
   1990a:	4770      	bx	lr

0001990c <drv_rtc_stop>:
   1990c:	6803      	ldr	r3, [r0, #0]
   1990e:	2201      	movs	r2, #1
   19910:	605a      	str	r2, [r3, #4]

void drv_rtc_stop(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_STOP);
}
   19912:	4770      	bx	lr

00019914 <drv_rtc_compare_set>:

void drv_rtc_compare_set(drv_rtc_t const * const p_instance,
                         uint32_t                cc,
                         uint32_t                abs_value,
                         bool                    irq_enable)
{
   19914:	b4f0      	push	{r4, r5, r6, r7}
    ASSERT(p_instance);
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
    abs_value &= RTC_COUNTER_COUNTER_Msk;

    nrf_rtc_int_disable(p_instance->p_reg, cc_int_mask);
   19916:	6804      	ldr	r4, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   19918:	f44f 3580 	mov.w	r5, #65536	; 0x10000
   1991c:	408d      	lsls	r5, r1
    p_reg->INTENCLR = mask;
   1991e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    nrf_rtc_event_disable(p_instance->p_reg, cc_int_mask);
   19922:	6806      	ldr	r6, [r0, #0]
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
   19924:	f101 0450 	add.w	r4, r1, #80	; 0x50
    p_reg->EVTENSET = mask;
}

__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19928:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
   1992c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1992e:	6806      	ldr	r6, [r0, #0]
   19930:	b2a4      	uxth	r4, r4
   19932:	2700      	movs	r7, #0
   19934:	5137      	str	r7, [r6, r4]
{
   19936:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19938:	5936      	ldr	r6, [r6, r4]
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    nrf_rtc_cc_set(p_instance->p_reg, cc,abs_value);
   1993a:	6804      	ldr	r4, [r0, #0]
   1993c:	9601      	str	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   1993e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
    abs_value &= RTC_COUNTER_COUNTER_Msk;
   19942:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    (void)dummy;
   19946:	9e01      	ldr	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   19948:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);
   1994c:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   1994e:	f8c2 5344 	str.w	r5, [r2, #836]	; 0x344

    if (irq_enable)
   19952:	b113      	cbz	r3, 1995a <drv_rtc_compare_set+0x46>
    {
        nrf_rtc_int_enable(p_instance->p_reg, cc_int_mask);
   19954:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
   19956:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    }
}
   1995a:	b002      	add	sp, #8
   1995c:	bcf0      	pop	{r4, r5, r6, r7}
   1995e:	4770      	bx	lr

00019960 <drv_rtc_windowed_compare_set>:

ret_code_t drv_rtc_windowed_compare_set(drv_rtc_t const * const p_instance,
                                        uint32_t                cc,
                                        uint32_t                abs_value,
                                        uint32_t                safe_window)
{
   19960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19964:	460d      	mov	r5, r1
    ASSERT(p_instance);
    uint32_t        prev_cc_set;
    uint32_t        now;
    uint32_t        diff;
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   19966:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   1996a:	6801      	ldr	r1, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   1996c:	40af      	lsls	r7, r5
    p_reg->EVTENCLR = mask;
   1996e:	f8c1 7348 	str.w	r7, [r1, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   19972:	6801      	ldr	r1, [r0, #0]
    p_reg->INTENCLR = mask;
   19974:	f8c1 7308 	str.w	r7, [r1, #776]	; 0x308
     * - read previous CC
     * - write current counter value to CC (furtherest in future)
     * - if previous CC was in one tick from now wait half of the 32k tick and clear event which
     *   may be set. Half tick delay is used because CC is latched in the middle of the 32k tick.
     */
    now = nrf_rtc_counter_get(p_instance->p_reg);
   19978:	6801      	ldr	r1, [r0, #0]
{
   1997a:	4604      	mov	r4, r0
   1997c:	eb01 0085 	add.w	r0, r1, r5, lsl #2
     return p_reg->COUNTER;
   19980:	f8d1 c504 	ldr.w	ip, [r1, #1284]	; 0x504
    return p_reg->CC[ch];
   19984:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    p_reg->CC[ch] = cc_val;
   19988:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);;
   1998c:	f105 0650 	add.w	r6, r5, #80	; 0x50
   19990:	00b6      	lsls	r6, r6, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19992:	6820      	ldr	r0, [r4, #0]
   19994:	b2b6      	uxth	r6, r6
   19996:	f04f 0900 	mov.w	r9, #0
   1999a:	f840 9006 	str.w	r9, [r0, r6]
{
   1999e:	b082      	sub	sp, #8
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199a0:	eba1 010c 	sub.w	r1, r1, ip
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   199a4:	5980      	ldr	r0, [r0, r6]
   199a6:	9000      	str	r0, [sp, #0]
   199a8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    prev_cc_set = nrf_rtc_cc_get(p_instance->p_reg, cc);
    nrf_rtc_cc_set(p_instance->p_reg, cc, now);
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);

    if (ticks_sub(prev_cc_set, now) == 1)
   199ac:	2901      	cmp	r1, #1
{
   199ae:	469a      	mov	sl, r3
    abs_value &=RTC_COUNTER_COUNTER_Msk;
   199b0:	f022 487f 	bic.w	r8, r2, #4278190080	; 0xff000000
    (void)dummy;
   199b4:	9b00      	ldr	r3, [sp, #0]
    if (ticks_sub(prev_cc_set, now) == 1)
   199b6:	d045      	beq.n	19a44 <drv_rtc_windowed_compare_set+0xe4>
    {
        nrf_delay_us(16);
        nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    }

    now = nrf_rtc_counter_get(p_instance->p_reg);
   199b8:	6823      	ldr	r3, [r4, #0]
     return p_reg->COUNTER;
   199ba:	f8d3 6504 	ldr.w	r6, [r3, #1284]	; 0x504
    p_reg->EVTENSET = mask;
   199be:	f8c3 7344 	str.w	r7, [r3, #836]	; 0x344
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199c2:	eba8 0306 	sub.w	r3, r8, r6
   199c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);

    /* Setting CC for +1 from now may not generate event. In that case set CC+2 and check if counter
     * changed during that process. If changed it means that 1 tick expired. */
    if (diff == 1)
   199ca:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   199cc:	f505 75a8 	add.w	r5, r5, #336	; 0x150
   199d0:	d027      	beq.n	19a22 <drv_rtc_windowed_compare_set+0xc2>
        {
            /* one tick elapsed already. */
            return NRF_ERROR_TIMEOUT;
        }
    } else {
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value);
   199d2:	6823      	ldr	r3, [r4, #0]
   199d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
        now = nrf_rtc_counter_get(p_instance->p_reg);
   199d8:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   199da:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199de:	eba8 0200 	sub.w	r2, r8, r0
        diff = ticks_sub(abs_value - 1, now);
        /* Check if counter equals cc value or is behind in the safe window. If yes it means that
         * CC expired. */
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   199e2:	f1ca 13ff 	rsb	r3, sl, #16711935	; 0xff00ff
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199e6:	3a01      	subs	r2, #1
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   199e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   199f0:	4293      	cmp	r3, r2
   199f2:	d312      	bcc.n	19a1a <drv_rtc_windowed_compare_set+0xba>
        {
            return NRF_ERROR_TIMEOUT;
        }
        else if (diff == 0)
   199f4:	b142      	cbz	r2, 19a08 <drv_rtc_windowed_compare_set+0xa8>
    p_reg->EVTENSET = mask;
   199f6:	f8c1 7344 	str.w	r7, [r1, #836]	; 0x344
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   199fa:	6823      	ldr	r3, [r4, #0]
        }
    }

    evt_enable(p_instance, cc_int_mask, true);

    return NRF_SUCCESS;
   199fc:	2000      	movs	r0, #0
    p_reg->INTENSET = mask;
   199fe:	f8c3 7304 	str.w	r7, [r3, #772]	; 0x304
}
   19a02:	b002      	add	sp, #8
   19a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   19a08:	f108 0201 	add.w	r2, r8, #1
    p_reg->CC[ch] = cc_val;
   19a0c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
            if (now != nrf_rtc_counter_get(p_instance->p_reg))
   19a10:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   19a12:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
   19a16:	4298      	cmp	r0, r3
   19a18:	d0ed      	beq.n	199f6 <drv_rtc_windowed_compare_set+0x96>
            return NRF_ERROR_TIMEOUT;
   19a1a:	200d      	movs	r0, #13
}
   19a1c:	b002      	add	sp, #8
   19a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   19a22:	6820      	ldr	r0, [r4, #0]
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   19a24:	4b0e      	ldr	r3, [pc, #56]	; (19a60 <drv_rtc_windowed_compare_set+0x100>)
   19a26:	f108 0201 	add.w	r2, r8, #1
    p_reg->CC[ch] = cc_val;
   19a2a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   19a2e:	f043 0301 	orr.w	r3, r3, #1
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   19a32:	f44f 6080 	mov.w	r0, #1024	; 0x400
   19a36:	4798      	blx	r3
        if (now != nrf_rtc_counter_get(p_instance->p_reg))
   19a38:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   19a3a:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
   19a3e:	429e      	cmp	r6, r3
   19a40:	d0d9      	beq.n	199f6 <drv_rtc_windowed_compare_set+0x96>
   19a42:	e7ea      	b.n	19a1a <drv_rtc_windowed_compare_set+0xba>
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   19a44:	4b06      	ldr	r3, [pc, #24]	; (19a60 <drv_rtc_windowed_compare_set+0x100>)
    delay_cycles(cycles);
   19a46:	f44f 6080 	mov.w	r0, #1024	; 0x400
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   19a4a:	f043 0301 	orr.w	r3, r3, #1
    delay_cycles(cycles);
   19a4e:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19a50:	6823      	ldr	r3, [r4, #0]
   19a52:	f843 9006 	str.w	r9, [r3, r6]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19a56:	599b      	ldr	r3, [r3, r6]
   19a58:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19a5a:	9b01      	ldr	r3, [sp, #4]
}
   19a5c:	e7ac      	b.n	199b8 <drv_rtc_windowed_compare_set+0x58>
   19a5e:	bf00      	nop
   19a60:	0001e9a0 	.word	0x0001e9a0

00019a64 <drv_rtc_overflow_enable>:
    nrf_rtc_event_enable(p_instance->p_reg, mask);
   19a64:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   19a66:	2302      	movs	r3, #2
   19a68:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    if (irq_enable)
   19a6c:	b111      	cbz	r1, 19a74 <drv_rtc_overflow_enable+0x10>
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   19a6e:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENSET = mask;
   19a70:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

void drv_rtc_overflow_enable(drv_rtc_t const * const p_instance, bool irq_enable)
{
    evt_enable(p_instance, NRF_RTC_INT_OVERFLOW_MASK, irq_enable);
}
   19a74:	4770      	bx	lr
   19a76:	bf00      	nop

00019a78 <drv_rtc_overflow_pending>:
    evt_disable(p_instance, NRF_RTC_INT_OVERFLOW_MASK);
}

bool drv_rtc_overflow_pending(drv_rtc_t const * const p_instance)
{
    return evt_pending(p_instance, NRF_RTC_EVENT_OVERFLOW);
   19a78:	6803      	ldr	r3, [r0, #0]
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a7a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   19a7e:	b900      	cbnz	r0, 19a82 <drv_rtc_overflow_pending+0xa>
}
   19a80:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19a82:	2200      	movs	r2, #0
{
   19a84:	b082      	sub	sp, #8
   19a86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19a8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   19a8e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19a90:	9b01      	ldr	r3, [sp, #4]
        return true;
   19a92:	2001      	movs	r0, #1
}
   19a94:	b002      	add	sp, #8
   19a96:	4770      	bx	lr

00019a98 <drv_rtc_compare_disable>:
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   19a98:	6802      	ldr	r2, [r0, #0]
    evt_enable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc, irq_enable);
}

void drv_rtc_compare_disable(drv_rtc_t const * const p_instance, uint32_t cc)
{
    evt_disable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc);
   19a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19a9e:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->EVTENCLR = mask;
   19aa2:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   19aa6:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   19aa8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
}
   19aac:	4770      	bx	lr
   19aae:	bf00      	nop

00019ab0 <drv_rtc_compare_pending>:

bool drv_rtc_compare_pending(drv_rtc_t const * const p_instance, uint32_t cc)
{
    nrf_rtc_event_t cc_evt = CC_IDX_TO_CC_EVENT(cc);
   19ab0:	3150      	adds	r1, #80	; 0x50
   19ab2:	0089      	lsls	r1, r1, #2
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ab4:	6803      	ldr	r3, [r0, #0]
   19ab6:	b289      	uxth	r1, r1
   19ab8:	5858      	ldr	r0, [r3, r1]
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   19aba:	b900      	cbnz	r0, 19abe <drv_rtc_compare_pending+0xe>
    return evt_pending(p_instance, cc_evt);
}
   19abc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19abe:	2200      	movs	r2, #0
   19ac0:	505a      	str	r2, [r3, r1]
{
   19ac2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19ac4:	585b      	ldr	r3, [r3, r1]
   19ac6:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19ac8:	9b01      	ldr	r3, [sp, #4]
        return true;
   19aca:	2001      	movs	r0, #1
}
   19acc:	b002      	add	sp, #8
   19ace:	4770      	bx	lr

00019ad0 <drv_rtc_counter_get>:

uint32_t drv_rtc_counter_get(drv_rtc_t const * const p_instance)
{
    return nrf_rtc_counter_get(p_instance->p_reg);
   19ad0:	6803      	ldr	r3, [r0, #0]
     return p_reg->COUNTER;
   19ad2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   19ad6:	4770      	bx	lr

00019ad8 <drv_rtc_irq_trigger>:

void drv_rtc_irq_trigger(drv_rtc_t const * const p_instance)
{
    NVIC_SetPendingIRQ(p_instance->irq);
   19ad8:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19adc:	4805      	ldr	r0, [pc, #20]	; (19af4 <drv_rtc_irq_trigger+0x1c>)
   19ade:	095a      	lsrs	r2, r3, #5
   19ae0:	2101      	movs	r1, #1
   19ae2:	3240      	adds	r2, #64	; 0x40
   19ae4:	f003 031f 	and.w	r3, r3, #31
   19ae8:	fa01 f303 	lsl.w	r3, r1, r3
   19aec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   19af0:	4770      	bx	lr
   19af2:	bf00      	nop
   19af4:	e000e100 	.word	0xe000e100

00019af8 <RTC1_IRQHandler>:
#endif

#if defined(APP_TIMER_V2_RTC1_ENABLED)
void drv_rtc_rtc_1_irq_handler(void)
{
    m_handlers[DRV_RTC_RTC1_INST_IDX](m_cb[DRV_RTC_RTC1_INST_IDX].p_instance);
   19af8:	4a02      	ldr	r2, [pc, #8]	; (19b04 <RTC1_IRQHandler+0xc>)
   19afa:	4b03      	ldr	r3, [pc, #12]	; (19b08 <RTC1_IRQHandler+0x10>)
   19afc:	6810      	ldr	r0, [r2, #0]
   19afe:	681b      	ldr	r3, [r3, #0]
   19b00:	4718      	bx	r3
   19b02:	bf00      	nop
   19b04:	20001954 	.word	0x20001954
   19b08:	2000195c 	.word	0x2000195c

00019b0c <nrf_atfifo_init>:
STATIC_ASSERT(sizeof(nrf_atfifo_postag_t) == sizeof(uint32_t));


ret_code_t nrf_atfifo_init(nrf_atfifo_t * const p_fifo, void * p_buf, uint16_t buf_size, uint16_t item_size)
{
    if (NULL == p_buf)
   19b0c:	b189      	cbz	r1, 19b32 <nrf_atfifo_init+0x26>
{
   19b0e:	b430      	push	{r4, r5}
    {
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. p_buf == NULL");
        return NRF_ERROR_NULL;
    }
    if (0 != (buf_size % item_size))
   19b10:	fbb2 f4f3 	udiv	r4, r2, r3
   19b14:	fb03 2414 	mls	r4, r3, r4, r2
   19b18:	4605      	mov	r5, r0
   19b1a:	b2a0      	uxth	r0, r4
   19b1c:	b930      	cbnz	r0, 19b2c <nrf_atfifo_init+0x20>
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. Buf_size not multiple of item_size");
        return NRF_ERROR_INVALID_LENGTH;
    }

    p_fifo->p_buf     = p_buf;
    p_fifo->tail.tag  = 0;
   19b1e:	e9c5 1000 	strd	r1, r0, [r5]
    p_fifo->head.tag  = 0;
   19b22:	60a8      	str	r0, [r5, #8]
    p_fifo->buf_size  = buf_size;
   19b24:	81aa      	strh	r2, [r5, #12]
    p_fifo->item_size = item_size;
   19b26:	81eb      	strh	r3, [r5, #14]

    NRF_LOG_INST_INFO(p_fifo->p_log, "Initialized.");
    return NRF_SUCCESS;
}
   19b28:	bc30      	pop	{r4, r5}
   19b2a:	4770      	bx	lr
        return NRF_ERROR_INVALID_LENGTH;
   19b2c:	2009      	movs	r0, #9
}
   19b2e:	bc30      	pop	{r4, r5}
   19b30:	4770      	bx	lr
        return NRF_ERROR_NULL;
   19b32:	200e      	movs	r0, #14
}
   19b34:	4770      	bx	lr
   19b36:	bf00      	nop

00019b38 <nrf_atfifo_item_alloc>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_alloc(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
   19b38:	b430      	push	{r4, r5}
   19b3a:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_tail;
    uint32_t new_tail;
    uint32_t temp;

    __ASM volatile(
   19b3c:	e850 3f01 	ldrex	r3, [r0, #4]
   19b40:	b29d      	uxth	r5, r3
   19b42:	89c4      	ldrh	r4, [r0, #14]
   19b44:	4425      	add	r5, r4
   19b46:	8984      	ldrh	r4, [r0, #12]
   19b48:	42a5      	cmp	r5, r4
   19b4a:	bf28      	it	cs
   19b4c:	1b2d      	subcs	r5, r5, r4
   19b4e:	8904      	ldrh	r4, [r0, #8]
   19b50:	42a5      	cmp	r5, r4
   19b52:	bf02      	ittt	eq
   19b54:	f3bf 8f2f 	clrexeq
   19b58:	2200      	moveq	r2, #0
   19b5a:	e007      	beq.n	19b6c <nrf_atfifo_item_alloc+0x34>
   19b5c:	eac5 0503 	pkhbt	r5, r5, r3
   19b60:	e840 5401 	strex	r4, r5, [r0, #4]
   19b64:	2c00      	cmp	r4, #0
   19b66:	d1e9      	bne.n	19b3c <nrf_atfifo_item_alloc+0x4>
   19b68:	f04f 0201 	mov.w	r2, #1
   19b6c:	f88d 2003 	strb.w	r2, [sp, #3]
   19b70:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_tail->tag = old_tail;
   19b72:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_tail);
    UNUSED_VARIABLE(temp);
    return ret;
   19b74:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_tail->tag = old_tail;
   19b78:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_wspace_req(p_fifo, &(p_context->last_tail)))
   19b7a:	b12a      	cbz	r2, 19b88 <nrf_atfifo_item_alloc+0x50>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_tail.pos.wr;
   19b7c:	880b      	ldrh	r3, [r1, #0]
   19b7e:	6800      	ldr	r0, [r0, #0]
   19b80:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Allocated  element (0x%08X).", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Allocation failed - no space.");
    return NULL;
}
   19b82:	b002      	add	sp, #8
   19b84:	bc30      	pop	{r4, r5}
   19b86:	4770      	bx	lr
   19b88:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   19b8c:	4618      	mov	r0, r3
}
   19b8e:	b002      	add	sp, #8
   19b90:	bc30      	pop	{r4, r5}
   19b92:	4770      	bx	lr

00019b94 <nrf_atfifo_item_put>:


bool nrf_atfifo_item_put(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
    if ((p_context->last_tail.pos.wr) == (p_context->last_tail.pos.rd))
   19b94:	880a      	ldrh	r2, [r1, #0]
   19b96:	884b      	ldrh	r3, [r1, #2]
   19b98:	429a      	cmp	r2, r3
   19b9a:	d001      	beq.n	19ba0 <nrf_atfifo_item_put+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (uninterrupted)");
        nrf_atfifo_wspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (interrupted!)");
    return false;
   19b9c:	2000      	movs	r0, #0
}
   19b9e:	4770      	bx	lr
void nrf_atfifo_wspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_tail;

    __ASM volatile(
   19ba0:	e850 2f01 	ldrex	r2, [r0, #4]
   19ba4:	eac2 4202 	pkhbt	r2, r2, r2, lsl #16
   19ba8:	e840 2301 	strex	r3, r2, [r0, #4]
   19bac:	2b00      	cmp	r3, #0
   19bae:	d1f7      	bne.n	19ba0 <nrf_atfifo_item_put+0xc>
   19bb0:	2001      	movs	r0, #1
   19bb2:	4770      	bx	lr

00019bb4 <nrf_atfifo_item_get>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_get(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
   19bb4:	b430      	push	{r4, r5}
   19bb6:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_head;
    uint32_t new_head;
    uint32_t temp;

    __ASM volatile(
   19bb8:	e850 3f02 	ldrex	r3, [r0, #8]
   19bbc:	fa1f f5a3 	uxth.w	r5, r3, ror #16
   19bc0:	88c4      	ldrh	r4, [r0, #6]
   19bc2:	42a5      	cmp	r5, r4
   19bc4:	bf02      	ittt	eq
   19bc6:	f3bf 8f2f 	clrexeq
   19bca:	2200      	moveq	r2, #0
   19bcc:	e00d      	beq.n	19bea <nrf_atfifo_item_get+0x36>
   19bce:	89c4      	ldrh	r4, [r0, #14]
   19bd0:	4425      	add	r5, r4
   19bd2:	8984      	ldrh	r4, [r0, #12]
   19bd4:	42a5      	cmp	r5, r4
   19bd6:	bf28      	it	cs
   19bd8:	1b2d      	subcs	r5, r5, r4
   19bda:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
   19bde:	e840 5402 	strex	r4, r5, [r0, #8]
   19be2:	2c00      	cmp	r4, #0
   19be4:	d1e8      	bne.n	19bb8 <nrf_atfifo_item_get+0x4>
   19be6:	f04f 0201 	mov.w	r2, #1
   19bea:	f88d 2003 	strb.w	r2, [sp, #3]
   19bee:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_head->tag = old_head;
   19bf0:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_head);
    UNUSED_VARIABLE(temp);
    return ret;
   19bf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_head->tag = old_head;
   19bf6:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_rspace_req(p_fifo, &(p_context->last_head)))
   19bf8:	b12a      	cbz	r2, 19c06 <nrf_atfifo_item_get+0x52>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_head.pos.rd;
   19bfa:	884b      	ldrh	r3, [r1, #2]
   19bfc:	6800      	ldr	r0, [r0, #0]
   19bfe:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Get element: 0x%08X", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Get failed - no item in the FIFO.");
    return NULL;
}
   19c00:	b002      	add	sp, #8
   19c02:	bc30      	pop	{r4, r5}
   19c04:	4770      	bx	lr
   19c06:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   19c0a:	4618      	mov	r0, r3
}
   19c0c:	b002      	add	sp, #8
   19c0e:	bc30      	pop	{r4, r5}
   19c10:	4770      	bx	lr
   19c12:	bf00      	nop

00019c14 <nrf_atfifo_item_free>:


bool nrf_atfifo_item_free(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
    if ((p_context->last_head.pos.wr) == (p_context->last_head.pos.rd))
   19c14:	880a      	ldrh	r2, [r1, #0]
   19c16:	884b      	ldrh	r3, [r1, #2]
   19c18:	429a      	cmp	r2, r3
   19c1a:	d001      	beq.n	19c20 <nrf_atfifo_item_free+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (uninterrupted)");
        nrf_atfifo_rspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (interrupted)");
    return false;
   19c1c:	2000      	movs	r0, #0
}
   19c1e:	4770      	bx	lr
void nrf_atfifo_rspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_head;

    __ASM volatile(
   19c20:	e850 2f02 	ldrex	r2, [r0, #8]
   19c24:	eac2 4222 	pkhtb	r2, r2, r2, asr #16
   19c28:	e840 2302 	strex	r3, r2, [r0, #8]
   19c2c:	2b00      	cmp	r3, #0
   19c2e:	d1f7      	bne.n	19c20 <nrf_atfifo_item_free+0xc>
   19c30:	2001      	movs	r0, #1
   19c32:	4770      	bx	lr

00019c34 <sd_app_evt_wait>:
 *
 * @post An application interrupt has happened or a interrupt pending flag is set.
 *
 * @retval ::NRF_SUCCESS
 */
SVCALL(SD_APP_EVT_WAIT, uint32_t, sd_app_evt_wait(void));
   19c34:	df41      	svc	65	; 0x41
   19c36:	4770      	bx	lr

00019c38 <nrf_pwr_mgmt_init>:

ret_code_t nrf_pwr_mgmt_init(void)
{
    NRF_LOG_INFO("Init");

    m_shutdown_started = false;
   19c38:	4a06      	ldr	r2, [pc, #24]	; (19c54 <nrf_pwr_mgmt_init+0x1c>)

__STATIC_INLINE void nrf_mtx_init(nrf_mtx_t * p_mtx)
{
    ASSERT(p_mtx  != NULL);

    *p_mtx = NRF_MTX_UNLOCKED;
   19c3a:	4b07      	ldr	r3, [pc, #28]	; (19c58 <nrf_pwr_mgmt_init+0x20>)
{
   19c3c:	b510      	push	{r4, lr}
    m_shutdown_started = false;
   19c3e:	2400      	movs	r4, #0
   19c40:	7014      	strb	r4, [r2, #0]
   19c42:	601c      	str	r4, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   19c44:	f3bf 8f5f 	dmb	sy
    nrf_mtx_init(&m_sysoff_mtx);
    nrf_section_iter_init(&m_handlers_iter, &pwr_mgmt_data);
   19c48:	4904      	ldr	r1, [pc, #16]	; (19c5c <nrf_pwr_mgmt_init+0x24>)
   19c4a:	4805      	ldr	r0, [pc, #20]	; (19c60 <nrf_pwr_mgmt_init+0x28>)
   19c4c:	f000 f816 	bl	19c7c <nrf_section_iter_init>
    PWR_MGMT_DEBUG_PINS_INIT();
    PWR_MGMT_STANDBY_TIMEOUT_INIT();
    PWR_MGMT_CPU_USAGE_MONITOR_INIT();

    return PWR_MGMT_TIMER_CREATE();
}
   19c50:	4620      	mov	r0, r4
   19c52:	bd10      	pop	{r4, pc}
   19c54:	20001968 	.word	0x20001968
   19c58:	2000196c 	.word	0x2000196c
   19c5c:	0001e9a8 	.word	0x0001e9a8
   19c60:	20001960 	.word	0x20001960

00019c64 <nrf_pwr_mgmt_run>:

void nrf_pwr_mgmt_run(void)
{
   19c64:	b508      	push	{r3, lr}
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_ENTER();
    PWR_MGMT_DEBUG_PIN_SET();

    // Wait for an event.
#ifdef SOFTDEVICE_PRESENT
    if (nrf_sdh_is_enabled())
   19c66:	f002 fcfd 	bl	1c664 <nrf_sdh_is_enabled>
   19c6a:	b918      	cbnz	r0, 19c74 <nrf_pwr_mgmt_run+0x10>
  __ASM volatile ("wfe");
   19c6c:	bf20      	wfe
  __ASM volatile ("sev");
   19c6e:	bf40      	sev
  __ASM volatile ("wfe");
   19c70:	bf20      	wfe
    }

    PWR_MGMT_DEBUG_PIN_CLEAR();
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_EXIT();
    PWR_MGMT_SLEEP_LOCK_RELEASE();
}
   19c72:	bd08      	pop	{r3, pc}
   19c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ret_code_t ret_code = sd_app_evt_wait();
   19c78:	f7ff bfdc 	b.w	19c34 <sd_app_evt_wait>

00019c7c <nrf_section_iter_init>:
void nrf_section_iter_init(nrf_section_iter_t * p_iter, nrf_section_set_t const * p_set)
{
    ASSERT(p_iter != NULL);
    ASSERT(p_set  != NULL);

    p_iter->p_set = p_set;
   19c7c:	6001      	str	r1, [r0, #0]

#if defined(__GNUC__)
    p_iter->p_item = p_iter->p_set->section.p_start;
   19c7e:	680b      	ldr	r3, [r1, #0]
   19c80:	6043      	str	r3, [r0, #4]
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   19c82:	684a      	ldr	r2, [r1, #4]
   19c84:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19c86:	bf04      	itt	eq
   19c88:	2300      	moveq	r3, #0
   19c8a:	6043      	streq	r3, [r0, #4]
    }
#else
    p_iter->p_section = p_set->p_first;
    nrf_section_iter_item_set(p_iter);
#endif
}
   19c8c:	4770      	bx	lr
   19c8e:	bf00      	nop

00019c90 <nrf_section_iter_next>:
void nrf_section_iter_next(nrf_section_iter_t * p_iter)
{
    ASSERT(p_iter        != NULL);
    ASSERT(p_iter->p_set != NULL);

    if (p_iter->p_item == NULL)
   19c90:	6843      	ldr	r3, [r0, #4]
   19c92:	b143      	cbz	r3, 19ca6 <nrf_section_iter_next+0x16>
    {
        return;
    }

    p_iter->p_item = (void *)((size_t)(p_iter->p_item) + p_iter->p_set->item_size);
   19c94:	6802      	ldr	r2, [r0, #0]
   19c96:	6891      	ldr	r1, [r2, #8]
   19c98:	440b      	add	r3, r1
   19c9a:	6043      	str	r3, [r0, #4]

#if defined(__GNUC__)
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   19c9c:	6852      	ldr	r2, [r2, #4]
   19c9e:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19ca0:	bf04      	itt	eq
   19ca2:	2300      	moveq	r3, #0
   19ca4:	6043      	streq	r3, [r0, #4]
    {
        p_iter->p_section++;
        nrf_section_iter_item_set(p_iter);
    }
#endif
}
   19ca6:	4770      	bx	lr

00019ca8 <nrf_sortlist_add>:
#endif // NRF_SORTLIST_CONFIG_LOG_ENABLED
#include "nrf_log.h"
NRF_LOG_MODULE_REGISTER();

void nrf_sortlist_add(nrf_sortlist_t const * p_list, nrf_sortlist_item_t * p_item)
{
   19ca8:	b570      	push	{r4, r5, r6, lr}
    ASSERT(p_list);
    ASSERT(p_item);

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   19caa:	6844      	ldr	r4, [r0, #4]
{
   19cac:	4606      	mov	r6, r0

    while(*pp_curr != NULL)
   19cae:	6820      	ldr	r0, [r4, #0]
{
   19cb0:	460d      	mov	r5, r1
    while(*pp_curr != NULL)
   19cb2:	b918      	cbnz	r0, 19cbc <nrf_sortlist_add+0x14>
   19cb4:	e008      	b.n	19cc8 <nrf_sortlist_add+0x20>
    {
        if(!(p_list->compare_func(*pp_curr, p_item)))
        {
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   19cb6:	6824      	ldr	r4, [r4, #0]
    while(*pp_curr != NULL)
   19cb8:	6820      	ldr	r0, [r4, #0]
   19cba:	b128      	cbz	r0, 19cc8 <nrf_sortlist_add+0x20>
        if(!(p_list->compare_func(*pp_curr, p_item)))
   19cbc:	68b3      	ldr	r3, [r6, #8]
   19cbe:	4629      	mov	r1, r5
   19cc0:	4798      	blx	r3
   19cc2:	2800      	cmp	r0, #0
   19cc4:	d1f7      	bne.n	19cb6 <nrf_sortlist_add+0xe>
   19cc6:	6820      	ldr	r0, [r4, #0]
    }

    p_item->p_next = *pp_curr;
   19cc8:	6028      	str	r0, [r5, #0]
    *pp_curr = p_item;
   19cca:	6025      	str	r5, [r4, #0]

    NRF_LOG_INFO("List:%s, adding element:%08X after:%08X, before:%08X",
                                  p_list->p_name, p_item, *pp_curr, p_item->p_next);
}
   19ccc:	bd70      	pop	{r4, r5, r6, pc}
   19cce:	bf00      	nop

00019cd0 <nrf_sortlist_pop>:

nrf_sortlist_item_t * nrf_sortlist_pop(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    nrf_sortlist_item_t * ret = p_list->p_cb->p_head;
   19cd0:	6843      	ldr	r3, [r0, #4]
   19cd2:	6818      	ldr	r0, [r3, #0]
    if (p_list->p_cb->p_head != NULL)
   19cd4:	b108      	cbz	r0, 19cda <nrf_sortlist_pop+0xa>
    {
        p_list->p_cb->p_head = p_list->p_cb->p_head->p_next;
   19cd6:	6802      	ldr	r2, [r0, #0]
   19cd8:	601a      	str	r2, [r3, #0]
    }
    NRF_LOG_INFO("List:%s, poping element:%08X", p_list->p_name, ret);
    return ret;
}
   19cda:	4770      	bx	lr

00019cdc <nrf_sortlist_peek>:

nrf_sortlist_item_t const * nrf_sortlist_peek(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    return p_list->p_cb->p_head;
   19cdc:	6843      	ldr	r3, [r0, #4]
}
   19cde:	6818      	ldr	r0, [r3, #0]
   19ce0:	4770      	bx	lr
   19ce2:	bf00      	nop

00019ce4 <nrf_sortlist_remove>:
{
    ASSERT(p_list);
    ASSERT(p_item);
    bool ret = false;

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   19ce4:	6843      	ldr	r3, [r0, #4]
   19ce6:	6818      	ldr	r0, [r3, #0]

    while(*pp_curr != NULL)
   19ce8:	b918      	cbnz	r0, 19cf2 <nrf_sortlist_remove+0xe>
   19cea:	e008      	b.n	19cfe <nrf_sortlist_remove+0x1a>
        {
            *pp_curr = p_item->p_next;
            ret = true;
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   19cec:	4603      	mov	r3, r0
   19cee:	6800      	ldr	r0, [r0, #0]
    while(*pp_curr != NULL)
   19cf0:	b128      	cbz	r0, 19cfe <nrf_sortlist_remove+0x1a>
        if(*pp_curr == p_item)
   19cf2:	4281      	cmp	r1, r0
   19cf4:	d1fa      	bne.n	19cec <nrf_sortlist_remove+0x8>
            *pp_curr = p_item->p_next;
   19cf6:	680a      	ldr	r2, [r1, #0]
   19cf8:	601a      	str	r2, [r3, #0]
            ret = true;
   19cfa:	2001      	movs	r0, #1
            break;
   19cfc:	4770      	bx	lr
    }

    NRF_LOG_INFO("List:%s, removing element:%08X %s",
                                  p_list->p_name, p_item, ret ? "succeeded" : "not found");
    return ret;
}
   19cfe:	4770      	bx	lr

00019d00 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19d00:	b430      	push	{r4, r5}
    #endif
    
    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19d02:	4b5f      	ldr	r3, [pc, #380]	; (19e80 <SystemInit+0x180>)
   19d04:	4d5f      	ldr	r5, [pc, #380]	; (19e84 <SystemInit+0x184>)
   19d06:	681a      	ldr	r2, [r3, #0]
    #endif
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19d08:	4b5f      	ldr	r3, [pc, #380]	; (19e88 <SystemInit+0x188>)
    return true;
}

static bool errata_103(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19d0a:	4c60      	ldr	r4, [pc, #384]	; (19e8c <SystemInit+0x18c>)
        NRF_CLOCK->EVENTS_DONE = 0;
   19d0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19d10:	f3c2 3242 	ubfx	r2, r2, #13, #3
   19d14:	602a      	str	r2, [r5, #0]
        NRF_CLOCK->EVENTS_DONE = 0;
   19d16:	2000      	movs	r0, #0
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        NRF_CLOCK->EVENTS_DONE = 0;
   19d1c:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   19d20:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   19d24:	f8c1 0538 	str.w	r0, [r1, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19d28:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
   19d2c:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19d30:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   19d34:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19d38:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   19d3c:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19d40:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
   19d44:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19d48:	f8d2 0414 	ldr.w	r0, [r2, #1044]	; 0x414
   19d4c:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19d50:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
   19d54:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19d58:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
   19d5c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19d60:	f8d2 0420 	ldr.w	r0, [r2, #1056]	; 0x420
   19d64:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19d68:	f8d2 0424 	ldr.w	r0, [r2, #1060]	; 0x424
   19d6c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19d70:	f8d2 0428 	ldr.w	r0, [r2, #1064]	; 0x428
   19d74:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19d78:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
   19d7c:	f8c3 0550 	str.w	r0, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19d80:	f8d2 0430 	ldr.w	r0, [r2, #1072]	; 0x430
   19d84:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19d88:	f8d2 0434 	ldr.w	r0, [r2, #1076]	; 0x434
   19d8c:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19d90:	f8d2 0438 	ldr.w	r0, [r2, #1080]	; 0x438
   19d94:	f8c3 0564 	str.w	r0, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19d98:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
   19d9c:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19da0:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
   19da4:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19da8:	6820      	ldr	r0, [r4, #0]
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19daa:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19dae:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19db2:	280a      	cmp	r0, #10
   19db4:	d017      	beq.n	19de6 <SystemInit+0xe6>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19db6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19dba:	07db      	lsls	r3, r3, #31
   19dbc:	d41f      	bmi.n	19dfe <SystemInit+0xfe>
        *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
   19dbe:	4a34      	ldr	r2, [pc, #208]	; (19e90 <SystemInit+0x190>)
   19dc0:	6813      	ldr	r3, [r2, #0]
   19dc2:	f043 030f 	orr.w	r3, r3, #15
   19dc6:	6013      	str	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19dc8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19dcc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19dd0:	2a00      	cmp	r2, #0
   19dd2:	db23      	blt.n	19e1c <SystemInit+0x11c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19dd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19dd8:	2b00      	cmp	r3, #0
   19dda:	db1f      	blt.n	19e1c <SystemInit+0x11c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19ddc:	4b2d      	ldr	r3, [pc, #180]	; (19e94 <SystemInit+0x194>)
   19dde:	4a2e      	ldr	r2, [pc, #184]	; (19e98 <SystemInit+0x198>)
   19de0:	601a      	str	r2, [r3, #0]
}
   19de2:	bc30      	pop	{r4, r5}
   19de4:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   19de6:	4b2d      	ldr	r3, [pc, #180]	; (19e9c <SystemInit+0x19c>)
   19de8:	681b      	ldr	r3, [r3, #0]
   19dea:	2b00      	cmp	r3, #0
   19dec:	d1e3      	bne.n	19db6 <SystemInit+0xb6>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19dee:	4b2c      	ldr	r3, [pc, #176]	; (19ea0 <SystemInit+0x1a0>)
   19df0:	22fb      	movs	r2, #251	; 0xfb
   19df2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19df6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19dfa:	07da      	lsls	r2, r3, #31
   19dfc:	d505      	bpl.n	19e0a <SystemInit+0x10a>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19e02:	f06f 0201 	mvn.w	r2, #1
   19e06:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
#endif

static bool errata_217(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19e0a:	4b20      	ldr	r3, [pc, #128]	; (19e8c <SystemInit+0x18c>)
   19e0c:	681b      	ldr	r3, [r3, #0]
   19e0e:	2b0a      	cmp	r3, #10
   19e10:	d1d5      	bne.n	19dbe <SystemInit+0xbe>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   19e12:	4b22      	ldr	r3, [pc, #136]	; (19e9c <SystemInit+0x19c>)
   19e14:	681b      	ldr	r3, [r3, #0]
   19e16:	2b00      	cmp	r3, #0
   19e18:	d0d6      	beq.n	19dc8 <SystemInit+0xc8>
   19e1a:	e7d0      	b.n	19dbe <SystemInit+0xbe>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   19e1c:	4a21      	ldr	r2, [pc, #132]	; (19ea4 <SystemInit+0x1a4>)
   19e1e:	2301      	movs	r3, #1
   19e20:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e24:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19e28:	2b00      	cmp	r3, #0
   19e2a:	d0fb      	beq.n	19e24 <SystemInit+0x124>
            NRF_UICR->PSELRESET[0] = 21;
   19e2c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e30:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e32:	4a1c      	ldr	r2, [pc, #112]	; (19ea4 <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[0] = 21;
   19e34:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e38:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19e3c:	2b00      	cmp	r3, #0
   19e3e:	d0fb      	beq.n	19e38 <SystemInit+0x138>
            NRF_UICR->PSELRESET[1] = 21;
   19e40:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e44:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e46:	4a17      	ldr	r2, [pc, #92]	; (19ea4 <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[1] = 21;
   19e48:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e4c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19e50:	2b00      	cmp	r3, #0
   19e52:	d0fb      	beq.n	19e4c <SystemInit+0x14c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   19e54:	2300      	movs	r3, #0
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e56:	4913      	ldr	r1, [pc, #76]	; (19ea4 <SystemInit+0x1a4>)
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   19e58:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e5c:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19e60:	2b00      	cmp	r3, #0
   19e62:	d0fb      	beq.n	19e5c <SystemInit+0x15c>
  __ASM volatile ("dsb 0xF":::"memory");
   19e64:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19e68:	490f      	ldr	r1, [pc, #60]	; (19ea8 <SystemInit+0x1a8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19e6a:	4b10      	ldr	r3, [pc, #64]	; (19eac <SystemInit+0x1ac>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19e6c:	68ca      	ldr	r2, [r1, #12]
   19e6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19e72:	4313      	orrs	r3, r2
   19e74:	60cb      	str	r3, [r1, #12]
   19e76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   19e7a:	bf00      	nop
   19e7c:	e7fd      	b.n	19e7a <SystemInit+0x17a>
   19e7e:	bf00      	nop
   19e80:	10000244 	.word	0x10000244
   19e84:	4000053c 	.word	0x4000053c
   19e88:	4000c000 	.word	0x4000c000
   19e8c:	10000130 	.word	0x10000130
   19e90:	40000ee4 	.word	0x40000ee4
   19e94:	20001808 	.word	0x20001808
   19e98:	03d09000 	.word	0x03d09000
   19e9c:	10000134 	.word	0x10000134
   19ea0:	4000f000 	.word	0x4000f000
   19ea4:	4001e000 	.word	0x4001e000
   19ea8:	e000ed00 	.word	0xe000ed00
   19eac:	05fa0004 	.word	0x05fa0004

00019eb0 <clock_irq_handler>:
        p_item->event_handler(evt_type);
    }
}

static void clock_irq_handler(nrfx_clock_evt_type_t evt)
{
   19eb0:	b510      	push	{r4, lr}
    if (evt == NRFX_CLOCK_EVT_HFCLK_STARTED)
   19eb2:	b968      	cbnz	r0, 19ed0 <clock_irq_handler+0x20>
    {
        m_clock_cb.hfclk_on = true;
   19eb4:	4c0e      	ldr	r4, [pc, #56]	; (19ef0 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19eb6:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19eb8:	2201      	movs	r2, #1
   19eba:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19ebc:	b13b      	cbz	r3, 19ece <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ec2:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   19ec4:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   19ec6:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19ec8:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d1f7      	bne.n	19ebe <clock_irq_handler+0xe>
            m_clock_cb.cal_done_handler(aborted ?
                NRF_DRV_CLOCK_EVT_CAL_ABORTED : NRF_DRV_CLOCK_EVT_CAL_DONE);
        }
    }
#endif // CALIBRATION_SUPPORT
}
   19ece:	bd10      	pop	{r4, pc}
    if (evt == NRFX_CLOCK_EVT_LFCLK_STARTED)
   19ed0:	2801      	cmp	r0, #1
   19ed2:	d1fc      	bne.n	19ece <clock_irq_handler+0x1e>
        m_clock_cb.lfclk_on = true;
   19ed4:	4c06      	ldr	r4, [pc, #24]	; (19ef0 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19ed6:	6923      	ldr	r3, [r4, #16]
        m_clock_cb.lfclk_on = true;
   19ed8:	70a0      	strb	r0, [r4, #2]
    if (p_item)
   19eda:	2b00      	cmp	r3, #0
   19edc:	d0f7      	beq.n	19ece <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ee2:	2001      	movs	r0, #1
        *p_head = p_item->p_next;
   19ee4:	6122      	str	r2, [r4, #16]
        p_item->event_handler(evt_type);
   19ee6:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19ee8:	6923      	ldr	r3, [r4, #16]
    if (p_item)
   19eea:	2b00      	cmp	r3, #0
   19eec:	d1f7      	bne.n	19ede <clock_irq_handler+0x2e>
}
   19eee:	bd10      	pop	{r4, pc}
   19ef0:	20001970 	.word	0x20001970

00019ef4 <soc_evt_handler>:
 * @param[in] evt_id    SoC event.
 * @param[in] p_context Context.
 */
static void soc_evt_handler(uint32_t evt_id, void * p_context)
{
    if (evt_id == NRF_EVT_HFCLKSTARTED)
   19ef4:	b970      	cbnz	r0, 19f14 <soc_evt_handler+0x20>
{
   19ef6:	b510      	push	{r4, lr}
    {
        m_clock_cb.hfclk_on = true;
   19ef8:	4c07      	ldr	r4, [pc, #28]	; (19f18 <soc_evt_handler+0x24>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19efa:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19efc:	2201      	movs	r2, #1
   19efe:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19f00:	b13b      	cbz	r3, 19f12 <soc_evt_handler+0x1e>
        p_item->event_handler(evt_type);
   19f02:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f06:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   19f08:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   19f0a:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19f0c:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19f0e:	2b00      	cmp	r3, #0
   19f10:	d1f7      	bne.n	19f02 <soc_evt_handler+0xe>
        clock_clk_started_notify(NRF_DRV_CLOCK_EVT_HFCLK_STARTED);
    }
}
   19f12:	bd10      	pop	{r4, pc}
   19f14:	4770      	bx	lr
   19f16:	bf00      	nop
   19f18:	20001970 	.word	0x20001970

00019f1c <sd_state_evt_handler>:
 *
 * @param[in] state     State.
 * @param[in] p_context Context.
 */
static void sd_state_evt_handler(nrf_sdh_state_evt_t state, void * p_context)
{
   19f1c:	b530      	push	{r4, r5, lr}
    switch (state)
   19f1e:	2801      	cmp	r0, #1
{
   19f20:	b083      	sub	sp, #12
    switch (state)
   19f22:	d004      	beq.n	19f2e <sd_state_evt_handler+0x12>
   19f24:	2803      	cmp	r0, #3
   19f26:	d01d      	beq.n	19f64 <sd_state_evt_handler+0x48>
   19f28:	b1b0      	cbz	r0, 19f58 <sd_state_evt_handler+0x3c>
            break;

        default:
            break;
    }
}
   19f2a:	b003      	add	sp, #12
   19f2c:	bd30      	pop	{r4, r5, pc}
            if (!m_clock_cb.module_initialized)
   19f2e:	4c22      	ldr	r4, [pc, #136]	; (19fb8 <sd_state_evt_handler+0x9c>)
            CRITICAL_REGION_ENTER();
   19f30:	2300      	movs	r3, #0
   19f32:	f10d 0007 	add.w	r0, sp, #7
   19f36:	f88d 3007 	strb.w	r3, [sp, #7]
   19f3a:	f7ff fc63 	bl	19804 <app_util_critical_region_enter>
            if (!m_clock_cb.module_initialized)
   19f3e:	7823      	ldrb	r3, [r4, #0]
   19f40:	b34b      	cbz	r3, 19f96 <sd_state_evt_handler+0x7a>
            ++(m_clock_cb.lfclk_requests);
   19f42:	68e3      	ldr	r3, [r4, #12]
            CRITICAL_REGION_EXIT();
   19f44:	f89d 0007 	ldrb.w	r0, [sp, #7]
            ++(m_clock_cb.lfclk_requests);
   19f48:	3301      	adds	r3, #1
            m_clock_cb.lfclk_on = true;
   19f4a:	2201      	movs	r2, #1
            ++(m_clock_cb.lfclk_requests);
   19f4c:	60e3      	str	r3, [r4, #12]
            m_clock_cb.lfclk_on = true;
   19f4e:	70a2      	strb	r2, [r4, #2]
            CRITICAL_REGION_EXIT();
   19f50:	f7ff fc7e 	bl	19850 <app_util_critical_region_exit>
}
   19f54:	b003      	add	sp, #12
   19f56:	bd30      	pop	{r4, r5, pc}
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19f58:	4b18      	ldr	r3, [pc, #96]	; (19fbc <sd_state_evt_handler+0xa0>)
   19f5a:	2201      	movs	r2, #1
   19f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   19f60:	b003      	add	sp, #12
   19f62:	bd30      	pop	{r4, r5, pc}
    --(m_clock_cb.lfclk_requests);
   19f64:	4c14      	ldr	r4, [pc, #80]	; (19fb8 <sd_state_evt_handler+0x9c>)
            nrfx_clock_enable();
   19f66:	f000 f839 	bl	19fdc <nrfx_clock_enable>
    CRITICAL_REGION_ENTER();
   19f6a:	2300      	movs	r3, #0
   19f6c:	f10d 0007 	add.w	r0, sp, #7
   19f70:	f88d 3007 	strb.w	r3, [sp, #7]
   19f74:	f7ff fc46 	bl	19804 <app_util_critical_region_enter>
    --(m_clock_cb.lfclk_requests);
   19f78:	68e3      	ldr	r3, [r4, #12]
   19f7a:	3b01      	subs	r3, #1
   19f7c:	60e3      	str	r3, [r4, #12]
    if (m_clock_cb.lfclk_requests == 0)
   19f7e:	68e5      	ldr	r5, [r4, #12]
   19f80:	b12d      	cbz	r5, 19f8e <sd_state_evt_handler+0x72>
    CRITICAL_REGION_EXIT();
   19f82:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19f86:	f7ff fc63 	bl	19850 <app_util_critical_region_exit>
}
   19f8a:	b003      	add	sp, #12
   19f8c:	bd30      	pop	{r4, r5, pc}
    nrfx_clock_lfclk_stop();
   19f8e:	f000 f837 	bl	1a000 <nrfx_clock_lfclk_stop>
    m_clock_cb.lfclk_on = false;
   19f92:	70a5      	strb	r5, [r4, #2]
}
   19f94:	e7f5      	b.n	19f82 <sd_state_evt_handler+0x66>
        err_code = nrfx_clock_init(clock_irq_handler);
   19f96:	480a      	ldr	r0, [pc, #40]	; (19fc0 <sd_state_evt_handler+0xa4>)
        m_clock_cb.hfclk_requests = 0;
   19f98:	6063      	str	r3, [r4, #4]
        m_clock_cb.p_hf_head      = NULL;
   19f9a:	60a3      	str	r3, [r4, #8]
        m_clock_cb.p_lf_head      = NULL;
   19f9c:	6123      	str	r3, [r4, #16]
        m_clock_cb.lfclk_requests = 0;
   19f9e:	60e3      	str	r3, [r4, #12]
        err_code = nrfx_clock_init(clock_irq_handler);
   19fa0:	f000 f810 	bl	19fc4 <nrfx_clock_init>
        if (!nrf_sdh_is_enabled())
   19fa4:	f002 fb5e 	bl	1c664 <nrf_sdh_is_enabled>
   19fa8:	b110      	cbz	r0, 19fb0 <sd_state_evt_handler+0x94>
        m_clock_cb.module_initialized = true;
   19faa:	2301      	movs	r3, #1
   19fac:	7023      	strb	r3, [r4, #0]
    return err_code;
   19fae:	e7c8      	b.n	19f42 <sd_state_evt_handler+0x26>
            nrfx_clock_enable();
   19fb0:	f000 f814 	bl	19fdc <nrfx_clock_enable>
   19fb4:	e7f9      	b.n	19faa <sd_state_evt_handler+0x8e>
   19fb6:	bf00      	nop
   19fb8:	20001970 	.word	0x20001970
   19fbc:	e000e100 	.word	0xe000e100
   19fc0:	00019eb1 	.word	0x00019eb1

00019fc4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19fc4:	4a04      	ldr	r2, [pc, #16]	; (19fd8 <nrfx_clock_init+0x14>)
   19fc6:	7913      	ldrb	r3, [r2, #4]
   19fc8:	b923      	cbnz	r3, 19fd4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   19fca:	2101      	movs	r1, #1
        m_clock_cb.event_handler = event_handler;
   19fcc:	6010      	str	r0, [r2, #0]
        m_clock_cb.module_initialized = true;
   19fce:	8091      	strh	r1, [r2, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19fd0:	4618      	mov	r0, r3
   19fd2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19fd4:	2085      	movs	r0, #133	; 0x85
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19fd6:	4770      	bx	lr
   19fd8:	20001984 	.word	0x20001984

00019fdc <nrfx_clock_enable>:
 * @retval false Otherwise.
 */
#define NRFX_IRQ_IS_ENABLED(irq_number)  _NRFX_IRQ_IS_ENABLED(irq_number)
static inline bool _NRFX_IRQ_IS_ENABLED(IRQn_Type irq_number)
{
    return 0 != (NVIC->ISER[irq_number / 32] & (1UL << (irq_number % 32)));
   19fdc:	4b07      	ldr	r3, [pc, #28]	; (19ffc <nrfx_clock_enable+0x20>)
   19fde:	681a      	ldr	r2, [r3, #0]
    priority = NRFX_CLOCK_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19fe0:	07d2      	lsls	r2, r2, #31
   19fe2:	d404      	bmi.n	19fee <nrfx_clock_enable+0x12>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19fe4:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19fe6:	2201      	movs	r2, #1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19fe8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19fec:	601a      	str	r2, [r3, #0]
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   19fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19ff2:	2201      	movs	r2, #1
   19ff4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   19ff8:	4770      	bx	lr
   19ffa:	bf00      	nop
   19ffc:	e000e100 	.word	0xe000e100

0001a000 <nrfx_clock_lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   1a000:	4b04      	ldr	r3, [pc, #16]	; (1a014 <nrfx_clock_lfclk_stop+0x14>)
   1a002:	2201      	movs	r2, #1
   1a004:	601a      	str	r2, [r3, #0]
                                CLOCK_LFCLKSRCCOPY_SRC_Msk) >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}

__STATIC_INLINE bool nrf_clock_lf_is_running(void)
{
    return ((NRF_CLOCK->LFCLKSTAT &
   1a006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a00a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418

void nrfx_clock_lfclk_stop(void)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrf_clock_task_trigger(NRF_CLOCK_TASK_LFCLKSTOP);
    while (nrf_clock_lf_is_running())
   1a00e:	03db      	lsls	r3, r3, #15
   1a010:	d4fb      	bmi.n	1a00a <nrfx_clock_lfclk_stop+0xa>
    {}
}
   1a012:	4770      	bx	lr
   1a014:	4000000c 	.word	0x4000000c

0001a018 <POWER_CLOCK_IRQHandler>:
    nrf_clock_task_trigger(NRF_CLOCK_TASK_CTSTOP);
#endif
}

void nrfx_clock_irq_handler(void)
{
   1a018:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1a01a:	4b17      	ldr	r3, [pc, #92]	; (1a078 <POWER_CLOCK_IRQHandler+0x60>)
   1a01c:	681a      	ldr	r2, [r3, #0]
   1a01e:	b082      	sub	sp, #8
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_HFCLKSTARTED))
   1a020:	b162      	cbz	r2, 1a03c <POWER_CLOCK_IRQHandler+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1a022:	2100      	movs	r1, #0
        nrf_clock_event_clear(NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_HFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1a024:	4a15      	ldr	r2, [pc, #84]	; (1a07c <POWER_CLOCK_IRQHandler+0x64>)
   1a026:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   1a028:	681b      	ldr	r3, [r3, #0]
   1a02a:	7950      	ldrb	r0, [r2, #5]
   1a02c:	9300      	str	r3, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   1a02e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1a032:	2301      	movs	r3, #1
    (void)dummy;
   1a034:	9c00      	ldr	r4, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   1a036:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
   1a03a:	b198      	cbz	r0, 1a064 <POWER_CLOCK_IRQHandler+0x4c>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1a03c:	4b10      	ldr	r3, [pc, #64]	; (1a080 <POWER_CLOCK_IRQHandler+0x68>)
   1a03e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   1a040:	b1ba      	cbz	r2, 1a072 <POWER_CLOCK_IRQHandler+0x5a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1a042:	2200      	movs	r2, #0
   1a044:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	9301      	str	r3, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   1a04a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a04e:	2102      	movs	r1, #2
    {
        nrf_clock_event_clear(NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_LFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_LF_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a050:	4b0a      	ldr	r3, [pc, #40]	; (1a07c <POWER_CLOCK_IRQHandler+0x64>)
    (void)dummy;
   1a052:	9801      	ldr	r0, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   1a054:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
   1a058:	681b      	ldr	r3, [r3, #0]
   1a05a:	2001      	movs	r0, #1
        nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif //  NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
}
   1a05c:	b002      	add	sp, #8
   1a05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a062:	4718      	bx	r3
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a064:	6811      	ldr	r1, [r2, #0]
            m_clock_cb.hfclk_started = true;
   1a066:	7153      	strb	r3, [r2, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a068:	4788      	blx	r1
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1a06a:	4b05      	ldr	r3, [pc, #20]	; (1a080 <POWER_CLOCK_IRQHandler+0x68>)
   1a06c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   1a06e:	2a00      	cmp	r2, #0
   1a070:	d1e7      	bne.n	1a042 <POWER_CLOCK_IRQHandler+0x2a>
}
   1a072:	b002      	add	sp, #8
   1a074:	bd10      	pop	{r4, pc}
   1a076:	bf00      	nop
   1a078:	40000100 	.word	0x40000100
   1a07c:	20001984 	.word	0x20001984
   1a080:	40000104 	.word	0x40000104

0001a084 <sd_flash_write>:
* @retval ::NRF_ERROR_BUSY           The previous command has not yet completed.
* @retval ::NRF_ERROR_INVALID_LENGTH Size was 0, or higher than the maximum allowed size.
* @retval ::NRF_ERROR_FORBIDDEN      Tried to write to an address outside the application flash area.
* @retval ::NRF_SUCCESS              The command was accepted.
*/
SVCALL(SD_FLASH_WRITE, uint32_t, sd_flash_write(uint32_t * p_dst, uint32_t const * p_src, uint32_t size));
   1a084:	df29      	svc	41	; 0x29
   1a086:	4770      	bx	lr

0001a088 <sd_flash_page_erase>:
* @retval ::NRF_ERROR_INVALID_ADDR  Tried to erase to a non existing flash page.
* @retval ::NRF_ERROR_BUSY          The previous command has not yet completed.
* @retval ::NRF_ERROR_FORBIDDEN     Tried to erase a page outside the application flash area.
* @retval ::NRF_SUCCESS             The command was accepted.
*/
SVCALL(SD_FLASH_PAGE_ERASE, uint32_t, sd_flash_page_erase(uint32_t page_number));
   1a088:	df28      	svc	40	; 0x28
   1a08a:	4770      	bx	lr

0001a08c <sd_ble_gap_adv_set_configure>:
 * @retval ::NRF_ERROR_NOT_SUPPORTED                   Unsupported data length or advertising parameter configuration.
 * @retval ::NRF_ERROR_NO_MEM                          Not enough memory to configure a new advertising handle. Update an
 *                                                     existing advertising handle instead.
 * @retval ::BLE_ERROR_GAP_UUID_LIST_MISMATCH Invalid UUID list supplied.
 */
SVCALL(SD_BLE_GAP_ADV_SET_CONFIGURE, uint32_t, sd_ble_gap_adv_set_configure(uint8_t *p_adv_handle, ble_gap_adv_data_t const *p_adv_data, ble_gap_adv_params_t const *p_adv_params));
   1a08c:	df72      	svc	114	; 0x72
   1a08e:	4770      	bx	lr

0001a090 <sd_ble_gap_adv_start>:
 *                                        - p_adv_params is configured with connectable advertising, but the event_length parameter
 *                                          associated with conn_cfg_tag is too small to be able to establish a connection on
 *                                          the selected advertising phys. Use @ref sd_ble_cfg_set to increase the event length.
 * @retval ::NRF_ERROR_NOT_SUPPORTED Unsupported PHYs supplied to the call.
 */
SVCALL(SD_BLE_GAP_ADV_START, uint32_t, sd_ble_gap_adv_start(uint8_t adv_handle, uint8_t conn_cfg_tag));
   1a090:	df73      	svc	115	; 0x73
   1a092:	4770      	bx	lr

0001a094 <sd_ble_gap_adv_stop>:
 *
 * @retval ::NRF_SUCCESS The BLE stack has stopped advertising.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Invalid advertising handle.
 * @retval ::NRF_ERROR_INVALID_STATE The advertising handle is not advertising.
 */
SVCALL(SD_BLE_GAP_ADV_STOP, uint32_t, sd_ble_gap_adv_stop(uint8_t adv_handle));
   1a094:	df74      	svc	116	; 0x74
   1a096:	4770      	bx	lr

0001a098 <sd_ble_gap_tx_power_set>:
 * @retval ::NRF_SUCCESS Successfully changed the transmit power.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid parameter(s) supplied.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Advertising handle not found.
 * @retval ::BLE_ERROR_INVALID_CONN_HANDLE Invalid connection handle supplied.
 */
SVCALL(SD_BLE_GAP_TX_POWER_SET, uint32_t, sd_ble_gap_tx_power_set(uint8_t role, uint16_t handle, int8_t tx_power));
   1a098:	df77      	svc	119	; 0x77
   1a09a:	4770      	bx	lr

0001a09c <sd_ble_gap_ppcp_set>:
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid pointer supplied.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid parameter(s) supplied.
 * @retval ::NRF_ERROR_NOT_SUPPORTED The characteristic is not included in the Attribute Table,
                                     see @ref ble_gap_cfg_ppcp_incl_cfg_t.
 */
SVCALL(SD_BLE_GAP_PPCP_SET, uint32_t, sd_ble_gap_ppcp_set(ble_gap_conn_params_t const *p_conn_params));
   1a09c:	df7a      	svc	122	; 0x7a
   1a09e:	4770      	bx	lr

0001a0a0 <sd_ble_gap_device_name_set>:
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid pointer supplied.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid parameter(s) supplied.
 * @retval ::NRF_ERROR_DATA_SIZE Invalid data size(s) supplied.
 * @retval ::NRF_ERROR_FORBIDDEN Device name is not writable.
 */
SVCALL(SD_BLE_GAP_DEVICE_NAME_SET, uint32_t, sd_ble_gap_device_name_set(ble_gap_conn_sec_mode_t const *p_write_perm, uint8_t const *p_dev_name, uint16_t len));
   1a0a0:	df7c      	svc	124	; 0x7c
   1a0a2:	4770      	bx	lr

0001a0a4 <sd_ble_gap_device_name_get>:
 *
 * @retval ::NRF_SUCCESS GAP device name retrieved successfully.
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid pointer supplied.
 * @retval ::NRF_ERROR_DATA_SIZE Invalid data size(s) supplied.
 */
SVCALL(SD_BLE_GAP_DEVICE_NAME_GET, uint32_t, sd_ble_gap_device_name_get(uint8_t *p_dev_name, uint16_t *p_len));
   1a0a4:	df7d      	svc	125	; 0x7d
   1a0a6:	4770      	bx	lr

0001a0a8 <sd_ble_gap_phy_update>:
 * @retval ::NRF_ERROR_NOT_SUPPORTED Unsupported PHYs supplied to the call.
 * @retval ::NRF_ERROR_INVALID_STATE No link has been established.
 * @retval ::NRF_ERROR_BUSY Procedure is already in progress or not allowed at this time. Process pending events and wait for the pending procedure to complete and retry.
 *
 */
SVCALL(SD_BLE_GAP_PHY_UPDATE, uint32_t, sd_ble_gap_phy_update(uint16_t conn_handle, ble_gap_phys_t const *p_gap_phys));
   1a0a8:	df8f      	svc	143	; 0x8f
   1a0aa:	4770      	bx	lr

0001a0ac <ServiceData16::make(unsigned char*, unsigned short, unsigned char*, unsigned char) [clone .constprop.0]>:
    size [4+datlen]
------------------------------------------------------------------------------*/
struct ServiceData16 {

SA  make            (u8* buf, u16 uuid, u8* dat, u8 datlen) {
                        buf[0] = 3 + datlen;
   1a0ac:	4b02      	ldr	r3, [pc, #8]	; (1a0b8 <ServiceData16::make(unsigned char*, unsigned short, unsigned char*, unsigned char) [clone .constprop.0]+0xc>)
   1a0ae:	6003      	str	r3, [r0, #0]
                        buf[1] = 0x16;
                        buf[2] = uuid;
                        buf[3] = uuid>>8;
                        for( auto i = 4; i < datlen+4; i++ ) buf[i] = *dat++;
   1a0b0:	780b      	ldrb	r3, [r1, #0]
   1a0b2:	7103      	strb	r3, [r0, #4]
                        return buf[0] + 1;
                    }
   1a0b4:	2005      	movs	r0, #5
   1a0b6:	4770      	bx	lr
   1a0b8:	180f1604 	.word	0x180f1604

0001a0bc <BL651tempBoard::alive()>:
                ledGreen.init( OUTPUT, S0S1 ); //standard drive 1
                sw1.init( INPUT, PULLUP );
            }

            //signal board is alive
SA  alive   () {
   1a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
SA  latchOn     ()          { reg.DETECTMODE = 1; }

//------------
//  status
//------------
SA  isOutput    ()          { return reg.DIRP; }
   1a0c0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a0c4:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
                //in places that sets a peripheral pin
                //  PSEL.SCA = board.sca.pinNumber();
SCA pinNumber   ()          { return Pin_; }

SA  blinkN      (uint16_t n, uint32_t mson, uint32_t msoff = 0, uint32_t lastdelayms = 0) {
                    if( not isOutput() ) return;
   1a0c8:	07de      	lsls	r6, r3, #31
   1a0ca:	d52e      	bpl.n	1a12a <BL651tempBoard::alive()+0x6e>
   1a0cc:	4e32      	ldr	r6, [pc, #200]	; (1a198 <BL651tempBoard::alive()+0xdc>)
   1a0ce:	f04f 0802 	mov.w	r8, #2
   1a0d2:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a0d6:	f44f 7780 	mov.w	r7, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a0da:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a0de:	05d8      	lsls	r0, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a0e0:	bf4c      	ite	mi
   1a0e2:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a0e6:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a0ea:	2532      	movs	r5, #50	; 0x32
   1a0ec:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a0f0:	47b0      	blx	r6
        return;
    }

    do {
        nrf_delay_us(1000);
    } while (--ms_time);
   1a0f2:	3d01      	subs	r5, #1
   1a0f4:	d1fa      	bne.n	1a0ec <BL651tempBoard::alive()+0x30>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a0f6:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a0fa:	05d9      	lsls	r1, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a0fc:	bf4c      	ite	mi
   1a0fe:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a102:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a106:	2532      	movs	r5, #50	; 0x32
   1a108:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a10c:	47b0      	blx	r6
   1a10e:	3d01      	subs	r5, #1
   1a110:	d1fa      	bne.n	1a108 <BL651tempBoard::alive()+0x4c>
                    if( not msoff ) msoff = mson;
                    while( n-- ){ 
   1a112:	f1b8 0f01 	cmp.w	r8, #1
   1a116:	d002      	beq.n	1a11e <BL651tempBoard::alive()+0x62>
   1a118:	f04f 0801 	mov.w	r8, #1
   1a11c:	e7dd      	b.n	1a0da <BL651tempBoard::alive()+0x1e>
   1a11e:	24c8      	movs	r4, #200	; 0xc8
   1a120:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a124:	47b0      	blx	r6
   1a126:	3c01      	subs	r4, #1
   1a128:	d1fa      	bne.n	1a120 <BL651tempBoard::alive()+0x64>
SA  isOutput    ()          { return reg.DIRP; }
   1a12a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a12e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1a132:	07dd      	lsls	r5, r3, #31
   1a134:	d52d      	bpl.n	1a192 <BL651tempBoard::alive()+0xd6>
   1a136:	4e18      	ldr	r6, [pc, #96]	; (1a198 <BL651tempBoard::alive()+0xdc>)
   1a138:	f04f 0802 	mov.w	r8, #2
   1a13c:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a140:	2780      	movs	r7, #128	; 0x80
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a142:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a146:	061a      	lsls	r2, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a148:	bf4c      	ite	mi
   1a14a:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a14e:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a152:	2532      	movs	r5, #50	; 0x32
   1a154:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a158:	47b0      	blx	r6
   1a15a:	3d01      	subs	r5, #1
   1a15c:	d1fa      	bne.n	1a154 <BL651tempBoard::alive()+0x98>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a15e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a162:	061b      	lsls	r3, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a164:	bf4c      	ite	mi
   1a166:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a16a:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a16e:	2532      	movs	r5, #50	; 0x32
   1a170:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a174:	47b0      	blx	r6
   1a176:	3d01      	subs	r5, #1
   1a178:	d1fa      	bne.n	1a170 <BL651tempBoard::alive()+0xb4>
                    while( n-- ){ 
   1a17a:	f1b8 0f01 	cmp.w	r8, #1
   1a17e:	d002      	beq.n	1a186 <BL651tempBoard::alive()+0xca>
   1a180:	f04f 0801 	mov.w	r8, #1
   1a184:	e7dd      	b.n	1a142 <BL651tempBoard::alive()+0x86>
   1a186:	24c8      	movs	r4, #200	; 0xc8
   1a188:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a18c:	47b0      	blx	r6
   1a18e:	3c01      	subs	r4, #1
   1a190:	d1fa      	bne.n	1a188 <BL651tempBoard::alive()+0xcc>
                ledGreen.blinkN(2,50,50,200);
                ledRed.blinkN(2,50,50,200);
            }
   1a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a196:	bf00      	nop
   1a198:	0001eeb0 	.word	0x0001eeb0

0001a19c <Saadc::isBusy()>:
    reg { *(reinterpret_cast<Saadc_*>(base_)) };

//--------------------
//  control, status
//--------------------
SA  isBusy          ()          { return reg.STATUS; } //conversion in progress?
   1a19c:	4b01      	ldr	r3, [pc, #4]	; (1a1a4 <Saadc::isBusy()+0x8>)
   1a19e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   1a1a2:	4770      	bx	lr
   1a1a4:	40007000 	.word	0x40007000

0001a1a8 <Saadc::enable()>:
SA  enable          ()          { reg.ENABLE = 1; }
   1a1a8:	4b02      	ldr	r3, [pc, #8]	; (1a1b4 <Saadc::enable()+0xc>)
   1a1aa:	2201      	movs	r2, #1
   1a1ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a1b0:	4770      	bx	lr
   1a1b2:	bf00      	nop
   1a1b4:	40007000 	.word	0x40007000

0001a1b8 <Saadc::disable()>:
SA  disable         ()          { reg.ENABLE = 0; }
   1a1b8:	4b02      	ldr	r3, [pc, #8]	; (1a1c4 <Saadc::disable()+0xc>)
   1a1ba:	2200      	movs	r2, #0
   1a1bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a1c0:	4770      	bx	lr
   1a1c2:	bf00      	nop
   1a1c4:	40007000 	.word	0x40007000

0001a1c8 <Saadc::clearStarted()>:
SA  isEnabled       ()          { return reg.ENABLE; }

//--------------------
//  events
//--------------------
SA  clearStarted    ()          { reg.EVENTS.STARTED = 0; }
   1a1c8:	4b02      	ldr	r3, [pc, #8]	; (1a1d4 <Saadc::clearStarted()+0xc>)
   1a1ca:	2200      	movs	r2, #0
   1a1cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a1d0:	4770      	bx	lr
   1a1d2:	bf00      	nop
   1a1d4:	40007000 	.word	0x40007000

0001a1d8 <Saadc::clearBufferFull()>:
SA  clearBufferFull ()          { reg.EVENTS.END = 0; }
   1a1d8:	4b02      	ldr	r3, [pc, #8]	; (1a1e4 <Saadc::clearBufferFull()+0xc>)
   1a1da:	2200      	movs	r2, #0
   1a1dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a1e0:	4770      	bx	lr
   1a1e2:	bf00      	nop
   1a1e4:	40007000 	.word	0x40007000

0001a1e8 <Saadc::clearConversion()>:
SA  clearConversion ()          { reg.EVENTS.DONE = 0; }
   1a1e8:	4b02      	ldr	r3, [pc, #8]	; (1a1f4 <Saadc::clearConversion()+0xc>)
   1a1ea:	2200      	movs	r2, #0
   1a1ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a1f0:	4770      	bx	lr
   1a1f2:	bf00      	nop
   1a1f4:	40007000 	.word	0x40007000

0001a1f8 <Saadc::clearResult()>:
SA  clearResult     ()          { reg.EVENTS.RESULTDONE = 0; }
   1a1f8:	4b02      	ldr	r3, [pc, #8]	; (1a204 <Saadc::clearResult()+0xc>)
   1a1fa:	2200      	movs	r2, #0
   1a1fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   1a200:	4770      	bx	lr
   1a202:	bf00      	nop
   1a204:	40007000 	.word	0x40007000

0001a208 <Saadc::clearCalibrated()>:
SA  clearCalibrated ()          { reg.EVENTS.CALIBRATEDONE = 0; }
   1a208:	4b02      	ldr	r3, [pc, #8]	; (1a214 <Saadc::clearCalibrated()+0xc>)
   1a20a:	2200      	movs	r2, #0
   1a20c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a210:	4770      	bx	lr
   1a212:	bf00      	nop
   1a214:	40007000 	.word	0x40007000

0001a218 <Saadc::clearStopped()>:
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1a218:	4b02      	ldr	r3, [pc, #8]	; (1a224 <Saadc::clearStopped()+0xc>)
   1a21a:	2200      	movs	r2, #0
   1a21c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1a220:	4770      	bx	lr
   1a222:	bf00      	nop
   1a224:	40007000 	.word	0x40007000

0001a228 <Saadc::clearEvents()>:
SA  clearLimitHigh  (CH e)      { reg.EVENTS.LIMIT[e].H = 0; }
SA  clearLimitLow   (CH e)      { reg.EVENTS.LIMIT[e].L = 0; }
SA  clearEvents     ()          { 
   1a228:	b508      	push	{r3, lr}
                                    clearStarted();
   1a22a:	f7ff ffcd 	bl	1a1c8 <Saadc::clearStarted()>
                                    clearBufferFull();
   1a22e:	f7ff ffd3 	bl	1a1d8 <Saadc::clearBufferFull()>
                                    clearConversion();
   1a232:	f7ff ffd9 	bl	1a1e8 <Saadc::clearConversion()>
                                    clearResult();
   1a236:	f7ff ffdf 	bl	1a1f8 <Saadc::clearResult()>
                                    clearStopped();
   1a23a:	f7ff ffed 	bl	1a218 <Saadc::clearStopped()>
                                }
   1a23e:	bd08      	pop	{r3, pc}

0001a240 <Saadc::isResult()>:

SA  isStarted       ()          { return reg.EVENTS.STARTED; }
SA  isBufferFull    ()          { return reg.EVENTS.END; } //ram buffer is filled
SA  isConversion    ()          { return reg.EVENTS.DONE; } //a conversion was done
SA  isResult        ()          { return reg.EVENTS.RESULTDONE; } //when conversion(s) stored to ram
   1a240:	4b01      	ldr	r3, [pc, #4]	; (1a248 <Saadc::isResult()+0x8>)
   1a242:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   1a246:	4770      	bx	lr
   1a248:	40007000 	.word	0x40007000

0001a24c <Saadc::isCalibrated()>:
SA  isCalibrated    ()          { return reg.EVENTS.CALIBRATEDONE; }
   1a24c:	4b01      	ldr	r3, [pc, #4]	; (1a254 <Saadc::isCalibrated()+0x8>)
   1a24e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1a252:	4770      	bx	lr
   1a254:	40007000 	.word	0x40007000

0001a258 <Saadc::start()>:
SA  isLimitLow      (CH e)      { return reg.EVENTS.LIMIT[e].L; }

//--------------------
//  tasks
//--------------------
SA  start           ()          { enable(); reg.TASKS.START = 1; } 
   1a258:	b508      	push	{r3, lr}
   1a25a:	f7ff ffa5 	bl	1a1a8 <Saadc::enable()>
   1a25e:	4b02      	ldr	r3, [pc, #8]	; (1a268 <Saadc::start()+0x10>)
   1a260:	2201      	movs	r2, #1
   1a262:	601a      	str	r2, [r3, #0]
   1a264:	bd08      	pop	{r3, pc}
   1a266:	bf00      	nop
   1a268:	40007000 	.word	0x40007000

0001a26c <Saadc::sample()>:
SA  sample          ()          { reg.TASKS.SAMPLE = 1; } 
   1a26c:	4b01      	ldr	r3, [pc, #4]	; (1a274 <Saadc::sample()+0x8>)
   1a26e:	2201      	movs	r2, #1
   1a270:	605a      	str	r2, [r3, #4]
   1a272:	4770      	bx	lr
   1a274:	40007000 	.word	0x40007000

0001a278 <Saadc::calibrate()>:
SA  stop            ()          { reg.TASKS.STOP = 1; } 
SA  calibrate       ()          {   
   1a278:	b508      	push	{r3, lr}
                                    enable();
   1a27a:	f7ff ff95 	bl	1a1a8 <Saadc::enable()>
                                    reg.TASKS.CALIBRATE = 1;
   1a27e:	4b05      	ldr	r3, [pc, #20]	; (1a294 <Saadc::calibrate()+0x1c>)
   1a280:	2201      	movs	r2, #1
   1a282:	60da      	str	r2, [r3, #12]
                                    while( not isCalibrated() );
   1a284:	f7ff ffe2 	bl	1a24c <Saadc::isCalibrated()>
   1a288:	2800      	cmp	r0, #0
   1a28a:	d0fb      	beq.n	1a284 <Saadc::calibrate()+0xc>
                                    clearCalibrated();
   1a28c:	f7ff ffbc 	bl	1a208 <Saadc::clearCalibrated()>
                                    //leave enabled
                                }
   1a290:	bd08      	pop	{r3, pc}
   1a292:	bf00      	nop
   1a294:	40007000 	.word	0x40007000

0001a298 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>:

//--------------------
//  channel config
//--------------------
SA  isChannelUsed   (CH e)      { return inuse_ bitand (1<<e); }
SA  channelSetup    (CH e, u32 cfg, PSEL p, PSEL n = NC) { 
   1a298:	b470      	push	{r4, r5, r6}
                                    if( p or n ) inuse_ or_eq (1<<e);
   1a29a:	ea52 0403 	orrs.w	r4, r2, r3
   1a29e:	d005      	beq.n	1a2ac <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x14>
   1a2a0:	4d09      	ldr	r5, [pc, #36]	; (1a2c8 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x30>)
   1a2a2:	2401      	movs	r4, #1
   1a2a4:	782e      	ldrb	r6, [r5, #0]
   1a2a6:	4084      	lsls	r4, r0
   1a2a8:	4334      	orrs	r4, r6
   1a2aa:	702c      	strb	r4, [r5, #0]
                                    reg.CHCONFIG[e].PSELP = p;
   1a2ac:	0100      	lsls	r0, r0, #4
   1a2ae:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
   1a2b2:	f504 44e0 	add.w	r4, r4, #28672	; 0x7000
   1a2b6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = n; 
   1a2ba:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
                                    reg.CHCONFIG[e].CONFIG = cfg;                      
   1a2be:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
                                }
   1a2c2:	bc70      	pop	{r4, r5, r6}
   1a2c4:	4770      	bx	lr
   1a2c6:	bf00      	nop
   1a2c8:	20001a47 	.word	0x20001a47

0001a2cc <Saadc::channelRelease(Saadc::CH)>:
SA  channelRelease  (CH e)      {
   1a2cc:	b410      	push	{r4}
                                    inuse_ and_eq compl (1<<e); 
   1a2ce:	4c0a      	ldr	r4, [pc, #40]	; (1a2f8 <Saadc::channelRelease(Saadc::CH)+0x2c>)
   1a2d0:	0103      	lsls	r3, r0, #4
   1a2d2:	7822      	ldrb	r2, [r4, #0]
   1a2d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a2d8:	2101      	movs	r1, #1
   1a2da:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1a2de:	fa01 f000 	lsl.w	r0, r1, r0
   1a2e2:	ea22 0000 	bic.w	r0, r2, r0
                                    reg.CHCONFIG[e].PSELP = NC;
   1a2e6:	2200      	movs	r2, #0
   1a2e8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = NC;
   1a2ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                    inuse_ and_eq compl (1<<e); 
   1a2f0:	7020      	strb	r0, [r4, #0]
                                }
   1a2f2:	bc10      	pop	{r4}
   1a2f4:	4770      	bx	lr
   1a2f6:	bf00      	nop
   1a2f8:	20001a47 	.word	0x20001a47

0001a2fc <Saadc::channelOnly(Saadc::CH)>:
SA  channelOnly     (CH e)      {
   1a2fc:	b510      	push	{r4, lr}
                                    for( int i = CH0; i <= CH7; i++ ){
                                        if( e != i ) channelRelease( (CH)i );
   1a2fe:	4604      	mov	r4, r0
   1a300:	bb08      	cbnz	r0, 1a346 <Saadc::channelOnly(Saadc::CH)+0x4a>
   1a302:	2001      	movs	r0, #1
   1a304:	f7ff ffe2 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a308:	2002      	movs	r0, #2
   1a30a:	f7ff ffdf 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a30e:	2c03      	cmp	r4, #3
   1a310:	d10b      	bne.n	1a32a <Saadc::channelOnly(Saadc::CH)+0x2e>
   1a312:	2004      	movs	r0, #4
   1a314:	f7ff ffda 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a318:	2005      	movs	r0, #5
   1a31a:	f7ff ffd7 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a31e:	2c06      	cmp	r4, #6
   1a320:	d10b      	bne.n	1a33a <Saadc::channelOnly(Saadc::CH)+0x3e>
   1a322:	2007      	movs	r0, #7
   1a324:	f7ff ffd2 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
                                    }
                                }
   1a328:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   1a32a:	2003      	movs	r0, #3
   1a32c:	f7ff ffce 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a330:	2c04      	cmp	r4, #4
   1a332:	d115      	bne.n	1a360 <Saadc::channelOnly(Saadc::CH)+0x64>
   1a334:	2005      	movs	r0, #5
   1a336:	f7ff ffc9 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a33a:	2006      	movs	r0, #6
   1a33c:	f7ff ffc6 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a340:	2c07      	cmp	r4, #7
   1a342:	d1ee      	bne.n	1a322 <Saadc::channelOnly(Saadc::CH)+0x26>
                                }
   1a344:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   1a346:	2000      	movs	r0, #0
   1a348:	f7ff ffc0 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a34c:	2c01      	cmp	r4, #1
   1a34e:	d0db      	beq.n	1a308 <Saadc::channelOnly(Saadc::CH)+0xc>
   1a350:	2001      	movs	r0, #1
   1a352:	f7ff ffbb 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a356:	2c02      	cmp	r4, #2
   1a358:	d1d6      	bne.n	1a308 <Saadc::channelOnly(Saadc::CH)+0xc>
   1a35a:	2003      	movs	r0, #3
   1a35c:	f7ff ffb6 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a360:	2004      	movs	r0, #4
   1a362:	f7ff ffb3 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a366:	2c05      	cmp	r4, #5
   1a368:	d1d6      	bne.n	1a318 <Saadc::channelOnly(Saadc::CH)+0x1c>
   1a36a:	2006      	movs	r0, #6
   1a36c:	f7ff ffae 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
   1a370:	e7d7      	b.n	1a322 <Saadc::channelOnly(Saadc::CH)+0x26>
   1a372:	bf00      	nop

0001a374 <Saadc::resolution(Saadc::RES)>:
SA  limitHL         (CH e, i16 H, i16 L) { limitH(e,H); limitL(e,L); }

//--------------------
//  config
//--------------------
SA  resolution      (RES e)         { reg.RESOLUTION = e; }
   1a374:	4b01      	ldr	r3, [pc, #4]	; (1a37c <Saadc::resolution(Saadc::RES)+0x8>)
   1a376:	f8c3 05f0 	str.w	r0, [r3, #1520]	; 0x5f0
   1a37a:	4770      	bx	lr
   1a37c:	40007000 	.word	0x40007000

0001a380 <Saadc::resolution()>:
SA  resolution      ()              { return RES(reg.RESOLUTION); }
   1a380:	4b02      	ldr	r3, [pc, #8]	; (1a38c <Saadc::resolution()+0xc>)
   1a382:	f8d3 05f0 	ldr.w	r0, [r3, #1520]	; 0x5f0
   1a386:	b2c0      	uxtb	r0, r0
   1a388:	4770      	bx	lr
   1a38a:	bf00      	nop
   1a38c:	40007000 	.word	0x40007000

0001a390 <Saadc::overSample(Saadc::OVERSAMP)>:

SA  overSample      (OVERSAMP e)    { reg.OVERSAMPLE = e; }
   1a390:	4b01      	ldr	r3, [pc, #4]	; (1a398 <Saadc::overSample(Saadc::OVERSAMP)+0x8>)
   1a392:	f8c3 05f4 	str.w	r0, [r3, #1524]	; 0x5f4
   1a396:	4770      	bx	lr
   1a398:	40007000 	.word	0x40007000

0001a39c <Saadc::overSample()>:
SA  overSample      ()              { return OVERSAMP(reg.OVERSAMPLE); }
   1a39c:	4b02      	ldr	r3, [pc, #8]	; (1a3a8 <Saadc::overSample()+0xc>)
   1a39e:	f8d3 05f4 	ldr.w	r0, [r3, #1524]	; 0x5f4
   1a3a2:	b2c0      	uxtb	r0, r0
   1a3a4:	4770      	bx	lr
   1a3a6:	bf00      	nop
   1a3a8:	40007000 	.word	0x40007000

0001a3ac <Saadc::bufferAddr(unsigned long)>:
                                        if( v > 2047 ) v =2047;
                                        reg.SAMPLERATE = v bitor (1<<12);
                                    }
SA  sampleRateTask  ()              { reg.SAMPLERATE = 0; }

SA  bufferAddr      (u32 v)         { reg.RESULTPTR = v; }
   1a3ac:	4b01      	ldr	r3, [pc, #4]	; (1a3b4 <Saadc::bufferAddr(unsigned long)+0x8>)
   1a3ae:	f8c3 062c 	str.w	r0, [r3, #1580]	; 0x62c
   1a3b2:	4770      	bx	lr
   1a3b4:	40007000 	.word	0x40007000

0001a3b8 <Saadc::bufferSize(unsigned short)>:
SA  bufferAddr      ()              { return reg.RESULTPTR; }
SA  bufferSize      (u16 v)         { reg.RESULTMAXCNT = v; } //15bits (max 32767)
   1a3b8:	4b01      	ldr	r3, [pc, #4]	; (1a3c0 <Saadc::bufferSize(unsigned short)+0x8>)
   1a3ba:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   1a3be:	4770      	bx	lr
   1a3c0:	40007000 	.word	0x40007000

0001a3c4 <Saadc::bufferSet(unsigned long, unsigned short)>:
SA  bufferSize      ()              { return reg.RESULTMAXCNT; }
SA  bufferSet       (u32 v, u16 n)  { bufferAddr(v); bufferSize(n); }
   1a3c4:	b510      	push	{r4, lr}
   1a3c6:	460c      	mov	r4, r1
   1a3c8:	f7ff fff0 	bl	1a3ac <Saadc::bufferAddr(unsigned long)>
   1a3cc:	4620      	mov	r0, r4
   1a3ce:	f7ff fff3 	bl	1a3b8 <Saadc::bufferSize(unsigned short)>
   1a3d2:	bd10      	pop	{r4, pc}

0001a3d4 <SaadcChan::setConfig(short&)>:
    private:
//============

                    //setup our channel config and buffer in Saadc
                    //take exclusive use of Saadc
SA setConfig        (i16& v) {
   1a3d4:	b538      	push	{r3, r4, r5, lr}
   1a3d6:	4604      	mov	r4, r0
                        if( isBusy() ) return false;        //is in use
   1a3d8:	f7ff fee0 	bl	1a19c <Saadc::isBusy()>
   1a3dc:	b9a8      	cbnz	r0, 1a40a <SaadcChan::setConfig(short&)+0x36>
                        if( pselP_ == NC and pselN_ == NC ) return false; //or we are not init
   1a3de:	4a0c      	ldr	r2, [pc, #48]	; (1a410 <SaadcChan::setConfig(short&)+0x3c>)
   1a3e0:	4b0c      	ldr	r3, [pc, #48]	; (1a414 <SaadcChan::setConfig(short&)+0x40>)
   1a3e2:	7812      	ldrb	r2, [r2, #0]
   1a3e4:	781b      	ldrb	r3, [r3, #0]
   1a3e6:	ea52 0003 	orrs.w	r0, r2, r3
   1a3ea:	d00d      	beq.n	1a408 <SaadcChan::setConfig(short&)+0x34>
                        channelSetup( ch_, config_, pselP_, pselN_ );  //set config and inputs
   1a3ec:	4d0a      	ldr	r5, [pc, #40]	; (1a418 <SaadcChan::setConfig(short&)+0x44>)
   1a3ee:	490b      	ldr	r1, [pc, #44]	; (1a41c <SaadcChan::setConfig(short&)+0x48>)
   1a3f0:	7828      	ldrb	r0, [r5, #0]
   1a3f2:	6809      	ldr	r1, [r1, #0]
   1a3f4:	f7ff ff50 	bl	1a298 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>
                        bufferSet( (u32)&v, 1 );
   1a3f8:	4620      	mov	r0, r4
   1a3fa:	2101      	movs	r1, #1
   1a3fc:	f7ff ffe2 	bl	1a3c4 <Saadc::bufferSet(unsigned long, unsigned short)>
                        channelOnly( ch_ );                 //disable all other channels
   1a400:	7828      	ldrb	r0, [r5, #0]
   1a402:	f7ff ff7b 	bl	1a2fc <Saadc::channelOnly(Saadc::CH)>
                        return true;
   1a406:	2001      	movs	r0, #1
                    }
   1a408:	bd38      	pop	{r3, r4, r5, pc}
                        if( isBusy() ) return false;        //is in use
   1a40a:	2000      	movs	r0, #0
                    }
   1a40c:	bd38      	pop	{r3, r4, r5, pc}
   1a40e:	bf00      	nop
   1a410:	20001a45 	.word	0x20001a45
   1a414:	20001a44 	.word	0x20001a44
   1a418:	20001a46 	.word	0x20001a46
   1a41c:	20001a40 	.word	0x20001a40

0001a420 <SaadcChan::result1()>:
                    }

                    //get a single result (blocking) - 
                    //could be >1 sample if oversample is on
                    //TODO, should have timeout here  
SA  result1         () {
   1a420:	b508      	push	{r3, lr}
                        clearResult();
   1a422:	f7ff fee9 	bl	1a1f8 <Saadc::clearResult()>
   1a426:	e001      	b.n	1a42c <SaadcChan::result1()+0xc>
                        for( ; not isResult(); sample() );  
   1a428:	f7ff ff20 	bl	1a26c <Saadc::sample()>
   1a42c:	f7ff ff08 	bl	1a240 <Saadc::isResult()>
   1a430:	2800      	cmp	r0, #0
   1a432:	d0f9      	beq.n	1a428 <SaadcChan::result1()+0x8>
                    }
   1a434:	bd08      	pop	{r3, pc}
   1a436:	bf00      	nop

0001a438 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>:
//============
    public:
//============

                    //get with a specific resolution, and number of samples
SA  read            (i16& v, RES r, OVERSAMP s = OVEROFF) {
   1a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a43a:	460e      	mov	r6, r1
   1a43c:	4615      	mov	r5, r2
                        if( not setConfig( v ) ) return false;
   1a43e:	f7ff ffc9 	bl	1a3d4 <SaadcChan::setConfig(short&)>
   1a442:	4604      	mov	r4, r0
   1a444:	b1f0      	cbz	r0, 1a484 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x4c>
                        RES rr = resolution();          //save old
   1a446:	f7ff ff9b 	bl	1a380 <Saadc::resolution()>
   1a44a:	4607      	mov	r7, r0
                        OVERSAMP ss = overSample();
   1a44c:	f7ff ffa6 	bl	1a39c <Saadc::overSample()>
   1a450:	4603      	mov	r3, r0
                        resolution( r );                //set new
   1a452:	4630      	mov	r0, r6
                        OVERSAMP ss = overSample();
   1a454:	461e      	mov	r6, r3
                        resolution( r );                //set new
   1a456:	f7ff ff8d 	bl	1a374 <Saadc::resolution(Saadc::RES)>
                        overSample( s );
   1a45a:	4628      	mov	r0, r5
   1a45c:	f7ff ff98 	bl	1a390 <Saadc::overSample(Saadc::OVERSAMP)>
                        start();                        //start will also enable
   1a460:	f7ff fefa 	bl	1a258 <Saadc::start()>
                        result1();
   1a464:	f7ff ffdc 	bl	1a420 <SaadcChan::result1()>
                        resolution( rr );               //restore old
   1a468:	4638      	mov	r0, r7
   1a46a:	f7ff ff83 	bl	1a374 <Saadc::resolution(Saadc::RES)>
                        overSample( ss );
   1a46e:	4630      	mov	r0, r6
   1a470:	f7ff ff8e 	bl	1a390 <Saadc::overSample(Saadc::OVERSAMP)>
                        disable();
   1a474:	f7ff fea0 	bl	1a1b8 <Saadc::disable()>
                        clearEvents();
   1a478:	f7ff fed6 	bl	1a228 <Saadc::clearEvents()>
                        channelRelease( ch_ );
   1a47c:	4b02      	ldr	r3, [pc, #8]	; (1a488 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x50>)
   1a47e:	7818      	ldrb	r0, [r3, #0]
   1a480:	f7ff ff24 	bl	1a2cc <Saadc::channelRelease(Saadc::CH)>
                        return true;
                    }
   1a484:	4620      	mov	r0, r4
   1a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a488:	20001a46 	.word	0x20001a46

0001a48c <Flags01::make(unsigned char*, unsigned char)>:
                        buf[0] = 2;
   1a48c:	2202      	movs	r2, #2
                        buf[1] = 1;
   1a48e:	2301      	movs	r3, #1
                        buf[2] = flags;
   1a490:	7081      	strb	r1, [r0, #2]
                        buf[0] = 2;
   1a492:	7002      	strb	r2, [r0, #0]
                        buf[1] = 1;
   1a494:	7043      	strb	r3, [r0, #1]
                    }
   1a496:	2003      	movs	r0, #3
   1a498:	4770      	bx	lr
   1a49a:	bf00      	nop

0001a49c <CompleteName09::make(unsigned char*, char const*, unsigned char)>:
SA  make            (u8* buf, const char* str, u8 maxlen) {
   1a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a49e:	4605      	mov	r5, r0
                        u8 slen = strlen( str );
   1a4a0:	4608      	mov	r0, r1
SA  make            (u8* buf, const char* str, u8 maxlen) {
   1a4a2:	4617      	mov	r7, r2
   1a4a4:	460e      	mov	r6, r1
                        u8 slen = strlen( str );
   1a4a6:	f002 fa3f 	bl	1c928 <strlen>
   1a4aa:	b2c4      	uxtb	r4, r0
                        if( slen > maxlen ) slen = maxlen;
   1a4ac:	42bc      	cmp	r4, r7
   1a4ae:	bf28      	it	cs
   1a4b0:	463c      	movcs	r4, r7
                        buf[0] = slen + 1;
   1a4b2:	1c62      	adds	r2, r4, #1
                        buf[1] = 9;
   1a4b4:	2309      	movs	r3, #9
                        buf[0] = slen + 1;
   1a4b6:	702a      	strb	r2, [r5, #0]
                        memcpy( &buf[2], str, slen );
   1a4b8:	4631      	mov	r1, r6
                        buf[1] = 9;
   1a4ba:	706b      	strb	r3, [r5, #1]
                        memcpy( &buf[2], str, slen );
   1a4bc:	1ca8      	adds	r0, r5, #2
   1a4be:	4622      	mov	r2, r4
   1a4c0:	f002 f9e0 	bl	1c884 <memcpy>
                    }
   1a4c4:	1ca0      	adds	r0, r4, #2
   1a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4c8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::isStopped()>:
//===========

                    //call from  ble connected event handler to update the state
                    //of advertising since the soft device stopped it
SA  isStopped       () { 
                        isActive_ = false; 
   1a4c8:	4b01      	ldr	r3, [pc, #4]	; (1a4d0 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::isStopped()+0x8>)
   1a4ca:	2200      	movs	r2, #0
   1a4cc:	701a      	strb	r2, [r3, #0]
                    }
   1a4ce:	4770      	bx	lr
   1a4d0:	200019d0 	.word	0x200019d0

0001a4d4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::connectable(bool)>:

                    //turn on/off connectable, so can make connectable intially 
                    //to change name, turn off when no longer wanted
SA  connectable     (bool tf) { 
                        isConnectable_ = tf; 
   1a4d4:	4b01      	ldr	r3, [pc, #4]	; (1a4dc <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::connectable(bool)+0x8>)
   1a4d6:	7018      	strb	r0, [r3, #0]
                    }
   1a4d8:	4770      	bx	lr
   1a4da:	bf00      	nop
   1a4dc:	20001811 	.word	0x20001811

0001a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>:
    { MKhash("underline"),  "4m" },

};

template<typename Dev_>
int Markup(Dev_ dev, const char* str){
   1a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    auto startStr = str;
    auto count = 0;
    for( ; *str; ){
   1a4e4:	7808      	ldrb	r0, [r1, #0]
   1a4e6:	2800      	cmp	r0, #0
   1a4e8:	f000 80c6 	beq.w	1a678 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x198>

        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
        startStr = str;
        if( not *str ) break; //incomplete markup
        str++; startStr++; //skip }
        if( not markupON ) continue;
   1a4ec:	4e6b      	ldr	r6, [pc, #428]	; (1a69c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1bc>)
        return SEGGER_RTT_Write(N, buf, len);
   1a4ee:	4f6c      	ldr	r7, [pc, #432]	; (1a6a0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c0>)
   1a4f0:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 1a6e8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x208>
   1a4f4:	468a      	mov	sl, r1
    for( ; *str; ){
   1a4f6:	460c      	mov	r4, r1
    auto count = 0;
   1a4f8:	f04f 0900 	mov.w	r9, #0
   1a4fc:	e004      	b.n	1a508 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            str++;
   1a4fe:	f10a 0a01 	add.w	sl, sl, #1
    for( ; *str; ){
   1a502:	f89a 0000 	ldrb.w	r0, [sl]
   1a506:	b348      	cbz	r0, 1a55c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x7c>
        if( *str != '{' ){ 
   1a508:	287b      	cmp	r0, #123	; 0x7b
   1a50a:	d1f8      	bne.n	1a4fe <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e>
        if( n ) count += dev.write( startStr, n );
   1a50c:	ebba 0204 	subs.w	r2, sl, r4
   1a510:	d16c      	bne.n	1a5ec <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x10c>
        if( *str == '{' ){ 
   1a512:	f89a 5001 	ldrb.w	r5, [sl, #1]
   1a516:	2d7b      	cmp	r5, #123	; 0x7b
        str++; //skip {
   1a518:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   1a51c:	d071      	beq.n	1a602 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x122>
        if( fg or bg ) str++;
   1a51e:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1a522:	2b42      	cmp	r3, #66	; 0x42
   1a524:	bf0a      	itet	eq
   1a526:	f89a 3002 	ldrbeq.w	r3, [sl, #2]
   1a52a:	462b      	movne	r3, r5
   1a52c:	f10a 0102 	addeq.w	r1, sl, #2
        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
   1a530:	b1bb      	cbz	r3, 1a562 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   1a532:	2400      	movs	r4, #0
   1a534:	e003      	b.n	1a53e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x5e>
   1a536:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a53a:	b294      	uxth	r4, r2
   1a53c:	b18b      	cbz	r3, 1a562 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   1a53e:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   1a542:	2b7d      	cmp	r3, #125	; 0x7d
   1a544:	fa13 f282 	uxtah	r2, r3, r2
   1a548:	d1f5      	bne.n	1a536 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x56>
        if( not markupON ) continue;
   1a54a:	7833      	ldrb	r3, [r6, #0]
        str++; startStr++; //skip }
   1a54c:	f101 0a01 	add.w	sl, r1, #1
        if( not markupON ) continue;
   1a550:	b953      	cbnz	r3, 1a568 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x88>
    for( ; *str; ){
   1a552:	f89a 0000 	ldrb.w	r0, [sl]
        str++; startStr++; //skip }
   1a556:	4654      	mov	r4, sl
    for( ; *str; ){
   1a558:	2800      	cmp	r0, #0
   1a55a:	d1d5      	bne.n	1a508 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            break;
        }
    }
    //print any remaining chars
    auto n = str - startStr;
    if( n ) count += dev.write( startStr, n );    
   1a55c:	ebba 0204 	subs.w	r2, sl, r4
   1a560:	d169      	bne.n	1a636 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x156>
    return count;
}
   1a562:	4648      	mov	r0, r9
   1a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( c.hash != hash ) continue;
   1a568:	f244 431d 	movw	r3, #17437	; 0x441d
   1a56c:	429c      	cmp	r4, r3
   1a56e:	d050      	beq.n	1a612 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x132>
   1a570:	f24f 235b 	movw	r3, #62043	; 0xf25b
   1a574:	429c      	cmp	r4, r3
   1a576:	d067      	beq.n	1a648 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x168>
   1a578:	f641 2331 	movw	r3, #6705	; 0x1a31
   1a57c:	429c      	cmp	r4, r3
   1a57e:	d073      	beq.n	1a668 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x188>
   1a580:	f24f 231c 	movw	r3, #61980	; 0xf21c
   1a584:	429c      	cmp	r4, r3
   1a586:	d05d      	beq.n	1a644 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x164>
   1a588:	f649 0308 	movw	r3, #38920	; 0x9808
   1a58c:	429c      	cmp	r4, r3
   1a58e:	d06f      	beq.n	1a670 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x190>
   1a590:	f246 439d 	movw	r3, #25757	; 0x649d
   1a594:	429c      	cmp	r4, r3
   1a596:	d069      	beq.n	1a66c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x18c>
   1a598:	f645 132b 	movw	r3, #22827	; 0x592b
   1a59c:	429c      	cmp	r4, r3
   1a59e:	d069      	beq.n	1a674 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x194>
   1a5a0:	f643 1361 	movw	r3, #14689	; 0x3961
   1a5a4:	429c      	cmp	r4, r3
   1a5a6:	d06b      	beq.n	1a680 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a0>
   1a5a8:	f649 139c 	movw	r3, #39324	; 0x999c
   1a5ac:	429c      	cmp	r4, r3
   1a5ae:	d069      	beq.n	1a684 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a4>
   1a5b0:	f246 7358 	movw	r3, #26456	; 0x6758
   1a5b4:	429c      	cmp	r4, r3
   1a5b6:	d061      	beq.n	1a67c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x19c>
   1a5b8:	f24b 3382 	movw	r3, #45954	; 0xb382
   1a5bc:	429c      	cmp	r4, r3
   1a5be:	d063      	beq.n	1a688 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a8>
   1a5c0:	f64e 6309 	movw	r3, #60937	; 0xee09
   1a5c4:	429c      	cmp	r4, r3
   1a5c6:	d061      	beq.n	1a68c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ac>
   1a5c8:	f244 2363 	movw	r3, #16995	; 0x4263
   1a5cc:	429c      	cmp	r4, r3
   1a5ce:	d063      	beq.n	1a698 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b8>
   1a5d0:	f64c 6396 	movw	r3, #52886	; 0xce96
   1a5d4:	429c      	cmp	r4, r3
   1a5d6:	d05d      	beq.n	1a694 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b4>
   1a5d8:	f247 43e9 	movw	r3, #29929	; 0x74e9
   1a5dc:	429c      	cmp	r4, r3
   1a5de:	d057      	beq.n	1a690 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b0>
   1a5e0:	f24d 03a6 	movw	r3, #53414	; 0xd0a6
   1a5e4:	429c      	cmp	r4, r3
   1a5e6:	d1b4      	bne.n	1a552 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x72>
        for( auto& c : markupCodes ){
   1a5e8:	4c2e      	ldr	r4, [pc, #184]	; (1a6a4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c4>)
   1a5ea:	e013      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   1a5ec:	4621      	mov	r1, r4
   1a5ee:	2000      	movs	r0, #0
   1a5f0:	f001 fd7e 	bl	1c0f0 <SEGGER_RTT_Write>
        if( *str == '{' ){ 
   1a5f4:	f89a 5001 	ldrb.w	r5, [sl, #1]
   1a5f8:	2d7b      	cmp	r5, #123	; 0x7b
        if( n ) count += dev.write( startStr, n );
   1a5fa:	4481      	add	r9, r0
        str++; //skip {
   1a5fc:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   1a600:	d18d      	bne.n	1a51e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x3e>
        return SEGGER_RTT_Write(N, buf, len);
   1a602:	2201      	movs	r2, #1
   1a604:	2000      	movs	r0, #0
   1a606:	f001 fd73 	bl	1c0f0 <SEGGER_RTT_Write>
            str++; 
   1a60a:	f10a 0a02 	add.w	sl, sl, #2
            count += dev.write( str, 1 ); 
   1a60e:	4481      	add	r9, r0
            continue; 
   1a610:	e777      	b.n	1a502 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        for( auto& c : markupCodes ){
   1a612:	4c25      	ldr	r4, [pc, #148]	; (1a6a8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c8>)
        return SEGGER_RTT_Write(N, buf, len);
   1a614:	2202      	movs	r2, #2
   1a616:	4639      	mov	r1, r7
   1a618:	2000      	movs	r0, #0
   1a61a:	f001 fd69 	bl	1c0f0 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   1a61e:	2d46      	cmp	r5, #70	; 0x46
            count += dev.write( "\033[", 2 );
   1a620:	4481      	add	r9, r0
            if( fg ) count += dev.write( "38;2;", 5 );
   1a622:	d01a      	beq.n	1a65a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x17a>
            if( bg ) count += dev.write( "48;2;", 5 );
   1a624:	2d42      	cmp	r5, #66	; 0x42
   1a626:	d011      	beq.n	1a64c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x16c>
        return SEGGER_RTT_WriteString(N, buf);
   1a628:	6861      	ldr	r1, [r4, #4]
   1a62a:	2000      	movs	r0, #0
   1a62c:	f001 fe72 	bl	1c314 <SEGGER_RTT_WriteString>
        str++; startStr++; //skip }
   1a630:	4654      	mov	r4, sl
            count += dev.write( c.str );
   1a632:	4481      	add	r9, r0
            break;
   1a634:	e765      	b.n	1a502 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        return SEGGER_RTT_Write(N, buf, len);
   1a636:	4621      	mov	r1, r4
   1a638:	f001 fd5a 	bl	1c0f0 <SEGGER_RTT_Write>
    if( n ) count += dev.write( startStr, n );    
   1a63c:	4481      	add	r9, r0
}
   1a63e:	4648      	mov	r0, r9
   1a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for( auto& c : markupCodes ){
   1a644:	4c19      	ldr	r4, [pc, #100]	; (1a6ac <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1cc>)
   1a646:	e7e5      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a648:	4c19      	ldr	r4, [pc, #100]	; (1a6b0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d0>)
   1a64a:	e7e3      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   1a64c:	2205      	movs	r2, #5
   1a64e:	4641      	mov	r1, r8
   1a650:	2000      	movs	r0, #0
   1a652:	f001 fd4d 	bl	1c0f0 <SEGGER_RTT_Write>
            if( bg ) count += dev.write( "48;2;", 5 );
   1a656:	4481      	add	r9, r0
   1a658:	e7e6      	b.n	1a628 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        return SEGGER_RTT_Write(N, buf, len);
   1a65a:	4916      	ldr	r1, [pc, #88]	; (1a6b4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d4>)
   1a65c:	2205      	movs	r2, #5
   1a65e:	2000      	movs	r0, #0
   1a660:	f001 fd46 	bl	1c0f0 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   1a664:	4481      	add	r9, r0
   1a666:	e7df      	b.n	1a628 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        for( auto& c : markupCodes ){
   1a668:	4c13      	ldr	r4, [pc, #76]	; (1a6b8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d8>)
   1a66a:	e7d3      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a66c:	4c13      	ldr	r4, [pc, #76]	; (1a6bc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1dc>)
   1a66e:	e7d1      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a670:	4c13      	ldr	r4, [pc, #76]	; (1a6c0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e0>)
   1a672:	e7cf      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a674:	4c13      	ldr	r4, [pc, #76]	; (1a6c4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e4>)
   1a676:	e7cd      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
    auto count = 0;
   1a678:	4681      	mov	r9, r0
    return count;
   1a67a:	e772      	b.n	1a562 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
        for( auto& c : markupCodes ){
   1a67c:	4c12      	ldr	r4, [pc, #72]	; (1a6c8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e8>)
   1a67e:	e7c9      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a680:	4c12      	ldr	r4, [pc, #72]	; (1a6cc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ec>)
   1a682:	e7c7      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a684:	4c12      	ldr	r4, [pc, #72]	; (1a6d0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f0>)
   1a686:	e7c5      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a688:	4c12      	ldr	r4, [pc, #72]	; (1a6d4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f4>)
   1a68a:	e7c3      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a68c:	4c12      	ldr	r4, [pc, #72]	; (1a6d8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f8>)
   1a68e:	e7c1      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a690:	4c12      	ldr	r4, [pc, #72]	; (1a6dc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1fc>)
   1a692:	e7bf      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a694:	4c12      	ldr	r4, [pc, #72]	; (1a6e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x200>)
   1a696:	e7bd      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a698:	4c12      	ldr	r4, [pc, #72]	; (1a6e4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x204>)
   1a69a:	e7bb      	b.n	1a614 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1a69c:	20001838 	.word	0x20001838
   1a6a0:	0001e9b4 	.word	0x0001e9b4
   1a6a4:	0001ef30 	.word	0x0001ef30
   1a6a8:	0001eeb8 	.word	0x0001eeb8
   1a6ac:	0001eed0 	.word	0x0001eed0
   1a6b0:	0001eec0 	.word	0x0001eec0
   1a6b4:	0001e9b8 	.word	0x0001e9b8
   1a6b8:	0001eec8 	.word	0x0001eec8
   1a6bc:	0001eee0 	.word	0x0001eee0
   1a6c0:	0001eed8 	.word	0x0001eed8
   1a6c4:	0001eee8 	.word	0x0001eee8
   1a6c8:	0001ef00 	.word	0x0001ef00
   1a6cc:	0001eef0 	.word	0x0001eef0
   1a6d0:	0001eef8 	.word	0x0001eef8
   1a6d4:	0001ef08 	.word	0x0001ef08
   1a6d8:	0001ef10 	.word	0x0001ef10
   1a6dc:	0001ef28 	.word	0x0001ef28
   1a6e0:	0001ef20 	.word	0x0001ef20
   1a6e4:	0001ef18 	.word	0x0001ef18
   1a6e8:	0001e9c0 	.word	0x0001e9c0

0001a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>:
            bool markupON in nRFconfig.hpp

        if disabled, the existing markup code is ignored
------------------------------------------------------------------------------*/
template<typename Dev, typename...Ts>
int Print(Dev dev, const char* fmt, Ts...ts){
   1a6ec:	b510      	push	{r4, lr}
   1a6ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1a6f2:	4602      	mov	r2, r0
   1a6f4:	460b      	mov	r3, r1
    char buf[512];
    int n = snprintf( buf, 512, fmt, ts... );
   1a6f6:	4668      	mov	r0, sp
   1a6f8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a6fc:	f002 f8d8 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a700:	b150      	cbz	r0, 1a718 <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a702:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a706:	4669      	mov	r1, sp
   1a708:	db02      	blt.n	1a710 <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]+0x24>
   1a70a:	4c0a      	ldr	r4, [pc, #40]	; (1a734 <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]+0x48>)
   1a70c:	7823      	ldrb	r3, [r4, #0]
   1a70e:	b933      	cbnz	r3, 1a71e <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]+0x32>
   1a710:	f04f 0000 	mov.w	r0, #0
   1a714:	f7ff fee4 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    //ansi code
    markupON = false;
    n = Markup( dev, buf );
    markupON = true;
    return n;
}
   1a718:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a71c:	bd10      	pop	{r4, pc}
    markupON = false;
   1a71e:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a720:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a724:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a726:	f7ff fedb 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a72a:	2301      	movs	r3, #1
   1a72c:	7023      	strb	r3, [r4, #0]
}
   1a72e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a732:	bd10      	pop	{r4, pc}
   1a734:	20001838 	.word	0x20001838

0001a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a738:	b510      	push	{r4, lr}
   1a73a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1a73e:	4602      	mov	r2, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a740:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a744:	4668      	mov	r0, sp
   1a746:	f002 f8b3 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a74a:	b150      	cbz	r0, 1a762 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x2a>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a74c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a750:	4669      	mov	r1, sp
   1a752:	db02      	blt.n	1a75a <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x22>
   1a754:	4c0a      	ldr	r4, [pc, #40]	; (1a780 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x48>)
   1a756:	7823      	ldrb	r3, [r4, #0]
   1a758:	b933      	cbnz	r3, 1a768 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x30>
   1a75a:	f04f 0000 	mov.w	r0, #0
   1a75e:	f7ff febf 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a762:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a766:	bd10      	pop	{r4, pc}
    markupON = false;
   1a768:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a76a:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a76e:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a770:	f7ff feb6 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a774:	2301      	movs	r3, #1
   1a776:	7023      	strb	r3, [r4, #0]
}
   1a778:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a77c:	bd10      	pop	{r4, pc}
   1a77e:	bf00      	nop
   1a780:	20001838 	.word	0x20001838

0001a784 <BL651tempBoard::init()>:
SA  init    () {
   1a784:	b510      	push	{r4, lr}
                Debug( "BL651tempBoard::init...\n" );
   1a786:	480a      	ldr	r0, [pc, #40]	; (1a7b0 <BL651tempBoard::init()+0x2c>)
   1a788:	f7ff ffd6 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a78c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a790:	2201      	movs	r2, #1
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a792:	2480      	movs	r4, #128	; 0x80
   1a794:	f44f 7080 	mov.w	r0, #256	; 0x100
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a798:	210c      	movs	r1, #12
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a79a:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a79e:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a7a2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a7a6:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1a7aa:	f8c3 176c 	str.w	r1, [r3, #1900]	; 0x76c
            }
   1a7ae:	bd10      	pop	{r4, pc}
   1a7b0:	0001e9c8 	.word	0x0001e9c8

0001a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a7b4:	b510      	push	{r4, lr}
   1a7b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1a7ba:	4602      	mov	r2, r0
   1a7bc:	460b      	mov	r3, r1
    int n = snprintf( buf, 512, fmt, ts... );
   1a7be:	4668      	mov	r0, sp
   1a7c0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a7c4:	f002 f874 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a7c8:	b150      	cbz	r0, 1a7e0 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a7ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a7ce:	4669      	mov	r1, sp
   1a7d0:	db02      	blt.n	1a7d8 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]+0x24>
   1a7d2:	4c0a      	ldr	r4, [pc, #40]	; (1a7fc <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]+0x48>)
   1a7d4:	7823      	ldrb	r3, [r4, #0]
   1a7d6:	b933      	cbnz	r3, 1a7e6 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]+0x32>
   1a7d8:	f04f 0000 	mov.w	r0, #0
   1a7dc:	f7ff fe80 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a7e0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a7e4:	bd10      	pop	{r4, pc}
    markupON = false;
   1a7e6:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a7e8:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a7ec:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a7ee:	f7ff fe77 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a7f2:	2301      	movs	r3, #1
   1a7f4:	7023      	strb	r3, [r4, #0]
}
   1a7f6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a7fa:	bd10      	pop	{r4, pc}
   1a7fc:	20001838 	.word	0x20001838

0001a800 <Flash::init()>:
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
                    }

    public:
                    //stored flash name to ram, or use default if not set
SA  init            () {
   1a800:	b510      	push	{r4, lr}
                        Debug( "Flash::init...\n" );  
   1a802:	4815      	ldr	r0, [pc, #84]	; (1a858 <Flash::init()+0x58>)
   1a804:	f7ff ff98 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            if( fullnameFlash_[i] == 0 ) return true;
   1a808:	4b14      	ldr	r3, [pc, #80]	; (1a85c <Flash::init()+0x5c>)
   1a80a:	681c      	ldr	r4, [r3, #0]
   1a80c:	1e63      	subs	r3, r4, #1
   1a80e:	f104 001f 	add.w	r0, r4, #31
   1a812:	e001      	b.n	1a818 <Flash::init()+0x18>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1a814:	4283      	cmp	r3, r0
   1a816:	d011      	beq.n	1a83c <Flash::init()+0x3c>
                            if( fullnameFlash_[i] == 0 ) return true;
   1a818:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a81c:	2a00      	cmp	r2, #0
   1a81e:	d1f9      	bne.n	1a814 <Flash::init()+0x14>
                        if( fullnameValid() ){
                            //copy to ram (include 0 terminator)
                            memcpy( (void*)fullnameRam_, (void*)fullnameFlash_, strlen(fullnameFlash_)+1 );
   1a820:	4620      	mov	r0, r4
   1a822:	f002 f881 	bl	1c928 <strlen>
   1a826:	4621      	mov	r1, r4
   1a828:	1c42      	adds	r2, r0, #1
   1a82a:	480d      	ldr	r0, [pc, #52]	; (1a860 <Flash::init()+0x60>)
   1a82c:	f002 f82a 	bl	1c884 <memcpy>
                        } else {
                            memcpy( (void*)fullnameRam_, (void*)"NoName", strlen("NoName")+1 );
                        }
                        Debug( "    name: %s\n", fullnameRam_ );
                    }
   1a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        Debug( "    name: %s\n", fullnameRam_ );
   1a834:	490a      	ldr	r1, [pc, #40]	; (1a860 <Flash::init()+0x60>)
   1a836:	480b      	ldr	r0, [pc, #44]	; (1a864 <Flash::init()+0x64>)
   1a838:	f7ff bfbc 	b.w	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
                            memcpy( (void*)fullnameRam_, (void*)"NoName", strlen("NoName")+1 );
   1a83c:	480a      	ldr	r0, [pc, #40]	; (1a868 <Flash::init()+0x68>)
   1a83e:	f002 f873 	bl	1c928 <strlen>
   1a842:	4909      	ldr	r1, [pc, #36]	; (1a868 <Flash::init()+0x68>)
   1a844:	1c42      	adds	r2, r0, #1
   1a846:	4806      	ldr	r0, [pc, #24]	; (1a860 <Flash::init()+0x60>)
   1a848:	f002 f81c 	bl	1c884 <memcpy>
                    }
   1a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        Debug( "    name: %s\n", fullnameRam_ );
   1a850:	4903      	ldr	r1, [pc, #12]	; (1a860 <Flash::init()+0x60>)
   1a852:	4804      	ldr	r0, [pc, #16]	; (1a864 <Flash::init()+0x64>)
   1a854:	f7ff bfae 	b.w	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
   1a858:	0001e9e4 	.word	0x0001e9e4
   1a85c:	20001834 	.word	0x20001834
   1a860:	20001a1c 	.word	0x20001a1c
   1a864:	0001e9f4 	.word	0x0001e9f4
   1a868:	0001ea04 	.word	0x0001ea04

0001a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a86c:	b570      	push	{r4, r5, r6, lr}
   1a86e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
   1a872:	e9dd 5488 	ldrd	r5, r4, [sp, #544]	; 0x220
   1a876:	988a      	ldr	r0, [sp, #552]	; 0x228
    int n = snprintf( buf, 512, fmt, ts... );
   1a878:	9300      	str	r3, [sp, #0]
int Print(Dev dev, const char* fmt, Ts...ts){
   1a87a:	4616      	mov	r6, r2
    int n = snprintf( buf, 512, fmt, ts... );
   1a87c:	9003      	str	r0, [sp, #12]
   1a87e:	460a      	mov	r2, r1
   1a880:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1a884:	4633      	mov	r3, r6
   1a886:	a804      	add	r0, sp, #16
   1a888:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a88c:	f002 f810 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a890:	b150      	cbz	r0, 1a8a8 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)+0x3c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a892:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a896:	a904      	add	r1, sp, #16
   1a898:	db02      	blt.n	1a8a0 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)+0x34>
   1a89a:	4c0a      	ldr	r4, [pc, #40]	; (1a8c4 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)+0x58>)
   1a89c:	7823      	ldrb	r3, [r4, #0]
   1a89e:	b933      	cbnz	r3, 1a8ae <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)+0x42>
   1a8a0:	f04f 0000 	mov.w	r0, #0
   1a8a4:	f7ff fe1c 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a8a8:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1a8ac:	bd70      	pop	{r4, r5, r6, pc}
    markupON = false;
   1a8ae:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a8b0:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a8b4:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a8b6:	f7ff fe13 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a8ba:	2301      	movs	r3, #1
   1a8bc:	7023      	strb	r3, [r4, #0]
}
   1a8be:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1a8c2:	bd70      	pop	{r4, r5, r6, pc}
   1a8c4:	20001838 	.word	0x20001838

0001a8c8 <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a8c8:	b510      	push	{r4, lr}
   1a8ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1a8ce:	4602      	mov	r2, r0
   1a8d0:	460b      	mov	r3, r1
    int n = snprintf( buf, 512, fmt, ts... );
   1a8d2:	4668      	mov	r0, sp
   1a8d4:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a8d8:	f001 ffea 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a8dc:	b150      	cbz	r0, 1a8f4 <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a8de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a8e2:	4669      	mov	r1, sp
   1a8e4:	db02      	blt.n	1a8ec <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]+0x24>
   1a8e6:	4c0a      	ldr	r4, [pc, #40]	; (1a910 <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]+0x48>)
   1a8e8:	7823      	ldrb	r3, [r4, #0]
   1a8ea:	b933      	cbnz	r3, 1a8fa <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]+0x32>
   1a8ec:	f04f 0000 	mov.w	r0, #0
   1a8f0:	f7ff fdf6 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a8f4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a8f8:	bd10      	pop	{r4, pc}
    markupON = false;
   1a8fa:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a8fc:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a900:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a902:	f7ff fded 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a906:	2301      	movs	r3, #1
   1a908:	7023      	strb	r3, [r4, #0]
}
   1a90a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a90e:	bd10      	pop	{r4, pc}
   1a910:	20001838 	.word	0x20001838

0001a914 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a914:	b510      	push	{r4, lr}
   1a916:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1a91a:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a91c:	4a0f      	ldr	r2, [pc, #60]	; (1a95c <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x48>)
   1a91e:	4668      	mov	r0, sp
   1a920:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a924:	f001 ffc4 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a928:	b150      	cbz	r0, 1a940 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a92a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a92e:	4669      	mov	r1, sp
   1a930:	db02      	blt.n	1a938 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x24>
   1a932:	4c0b      	ldr	r4, [pc, #44]	; (1a960 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1a934:	7823      	ldrb	r3, [r4, #0]
   1a936:	b933      	cbnz	r3, 1a946 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x32>
   1a938:	f04f 0000 	mov.w	r0, #0
   1a93c:	f7ff fdd0 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a940:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a944:	bd10      	pop	{r4, pc}
    markupON = false;
   1a946:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a948:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a94c:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a94e:	f7ff fdc7 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a952:	2301      	movs	r3, #1
   1a954:	7023      	strb	r3, [r4, #0]
}
   1a956:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1a95a:	bd10      	pop	{r4, pc}
   1a95c:	0001ed30 	.word	0x0001ed30
   1a960:	20001838 	.word	0x20001838

0001a964 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a964:	b510      	push	{r4, lr}
   1a966:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    int n = snprintf( buf, 512, fmt, ts... );
   1a96a:	e9cd 1200 	strd	r1, r2, [sp]
int Print(Dev dev, const char* fmt, Ts...ts){
   1a96e:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a970:	4a0f      	ldr	r2, [pc, #60]	; (1a9b0 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1a972:	a802      	add	r0, sp, #8
   1a974:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a978:	f001 ff9a 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a97c:	b150      	cbz	r0, 1a994 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x30>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a97e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a982:	a902      	add	r1, sp, #8
   1a984:	db02      	blt.n	1a98c <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x28>
   1a986:	4c0b      	ldr	r4, [pc, #44]	; (1a9b4 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x50>)
   1a988:	7823      	ldrb	r3, [r4, #0]
   1a98a:	b933      	cbnz	r3, 1a99a <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x36>
   1a98c:	f04f 0000 	mov.w	r0, #0
   1a990:	f7ff fda6 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a994:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1a998:	bd10      	pop	{r4, pc}
    markupON = false;
   1a99a:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a99c:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a9a0:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a9a2:	f7ff fd9d 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a9a6:	2301      	movs	r3, #1
   1a9a8:	7023      	strb	r3, [r4, #0]
}
   1a9aa:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1a9ae:	bd10      	pop	{r4, pc}
   1a9b0:	0001ea0c 	.word	0x0001ea0c
   1a9b4:	20001838 	.word	0x20001838

0001a9b8 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1a9b8:	b510      	push	{r4, lr}
   1a9ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1a9be:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1a9c0:	9100      	str	r1, [sp, #0]
   1a9c2:	4a10      	ldr	r2, [pc, #64]	; (1aa04 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1a9c4:	a802      	add	r0, sp, #8
   1a9c6:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a9ca:	f001 ff71 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1a9ce:	b150      	cbz	r0, 1a9e6 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1a9d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a9d4:	a902      	add	r1, sp, #8
   1a9d6:	db02      	blt.n	1a9de <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x26>
   1a9d8:	4c0b      	ldr	r4, [pc, #44]	; (1aa08 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x50>)
   1a9da:	7823      	ldrb	r3, [r4, #0]
   1a9dc:	b933      	cbnz	r3, 1a9ec <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x34>
   1a9de:	f04f 0000 	mov.w	r0, #0
   1a9e2:	f7ff fd7d 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1a9e6:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1a9ea:	bd10      	pop	{r4, pc}
    markupON = false;
   1a9ec:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1a9ee:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1a9f2:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1a9f4:	f7ff fd74 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1a9f8:	2301      	movs	r3, #1
   1a9fa:	7023      	strb	r3, [r4, #0]
}
   1a9fc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1aa00:	bd10      	pop	{r4, pc}
   1aa02:	bf00      	nop
   1aa04:	0001ea2c 	.word	0x0001ea2c
   1aa08:	20001838 	.word	0x20001838

0001aa0c <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1aa0c:	b510      	push	{r4, lr}
   1aa0e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1aa12:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1aa14:	9100      	str	r1, [sp, #0]
   1aa16:	4a10      	ldr	r2, [pc, #64]	; (1aa58 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1aa18:	a802      	add	r0, sp, #8
   1aa1a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aa1e:	f001 ff47 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1aa22:	b150      	cbz	r0, 1aa3a <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1aa24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1aa28:	a902      	add	r1, sp, #8
   1aa2a:	db02      	blt.n	1aa32 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x26>
   1aa2c:	4c0b      	ldr	r4, [pc, #44]	; (1aa5c <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x50>)
   1aa2e:	7823      	ldrb	r3, [r4, #0]
   1aa30:	b933      	cbnz	r3, 1aa40 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x34>
   1aa32:	f04f 0000 	mov.w	r0, #0
   1aa36:	f7ff fd53 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1aa3a:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1aa3e:	bd10      	pop	{r4, pc}
    markupON = false;
   1aa40:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1aa42:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1aa46:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1aa48:	f7ff fd4a 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1aa4c:	2301      	movs	r3, #1
   1aa4e:	7023      	strb	r3, [r4, #0]
}
   1aa50:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1aa54:	bd10      	pop	{r4, pc}
   1aa56:	bf00      	nop
   1aa58:	0001ea4c 	.word	0x0001ea4c
   1aa5c:	20001838 	.word	0x20001838

0001aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1aa60:	b510      	push	{r4, lr}
   1aa62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1aa66:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1aa68:	4a0f      	ldr	r2, [pc, #60]	; (1aaa8 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]+0x48>)
   1aa6a:	4668      	mov	r0, sp
   1aa6c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aa70:	f001 ff1e 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1aa74:	b150      	cbz	r0, 1aa8c <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1aa76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1aa7a:	4669      	mov	r1, sp
   1aa7c:	db02      	blt.n	1aa84 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]+0x24>
   1aa7e:	4c0b      	ldr	r4, [pc, #44]	; (1aaac <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1aa80:	7823      	ldrb	r3, [r4, #0]
   1aa82:	b933      	cbnz	r3, 1aa92 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]+0x32>
   1aa84:	f04f 0000 	mov.w	r0, #0
   1aa88:	f7ff fd2a 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1aa8c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1aa90:	bd10      	pop	{r4, pc}
    markupON = false;
   1aa92:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1aa94:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1aa98:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1aa9a:	f7ff fd21 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1aa9e:	2301      	movs	r3, #1
   1aaa0:	7023      	strb	r3, [r4, #0]
}
   1aaa2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1aaa6:	bd10      	pop	{r4, pc}
   1aaa8:	0001ea54 	.word	0x0001ea54
   1aaac:	20001838 	.word	0x20001838

0001aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1aab0:	b510      	push	{r4, lr}
   1aab2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1aab6:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1aab8:	4a0f      	ldr	r2, [pc, #60]	; (1aaf8 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]+0x48>)
   1aaba:	4668      	mov	r0, sp
   1aabc:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aac0:	f001 fef6 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1aac4:	b150      	cbz	r0, 1aadc <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1aac6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1aaca:	4669      	mov	r1, sp
   1aacc:	db02      	blt.n	1aad4 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]+0x24>
   1aace:	4c0b      	ldr	r4, [pc, #44]	; (1aafc <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]+0x4c>)
   1aad0:	7823      	ldrb	r3, [r4, #0]
   1aad2:	b933      	cbnz	r3, 1aae2 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]+0x32>
   1aad4:	f04f 0000 	mov.w	r0, #0
   1aad8:	f7ff fd02 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1aadc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1aae0:	bd10      	pop	{r4, pc}
    markupON = false;
   1aae2:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1aae4:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1aae8:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1aaea:	f7ff fcf9 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1aaee:	2301      	movs	r3, #1
   1aaf0:	7023      	strb	r3, [r4, #0]
}
   1aaf2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1aaf6:	bd10      	pop	{r4, pc}
   1aaf8:	0001ea5c 	.word	0x0001ea5c
   1aafc:	20001838 	.word	0x20001838

0001ab00 <Flash::evtHandler(unsigned long, void*)>:
SA  evtHandler      (u32 evtId, void* ctx) -> void {
   1ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                        Debug( "Flash::handler event : %d\n", evtId );
   1ab04:	4601      	mov	r1, r0
SA  evtHandler      (u32 evtId, void* ctx) -> void {
   1ab06:	4604      	mov	r4, r0
                        Debug( "Flash::handler event : %d\n", evtId );
   1ab08:	4825      	ldr	r0, [pc, #148]	; (1aba0 <Flash::evtHandler(unsigned long, void*)+0xa0>)
   1ab0a:	f7ff fdef 	bl	1a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>
                        if( evtId == NRF_EVT_FLASH_OPERATION_SUCCESS ){
   1ab0e:	2c02      	cmp	r4, #2
   1ab10:	d003      	beq.n	1ab1a <Flash::evtHandler(unsigned long, void*)+0x1a>
                        if( evtId == NRF_EVT_FLASH_OPERATION_ERROR ){
   1ab12:	2c03      	cmp	r4, #3
   1ab14:	d03b      	beq.n	1ab8e <Flash::evtHandler(unsigned long, void*)+0x8e>
                    }
   1ab16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                            Debug( "    success\n" );
   1ab1a:	4822      	ldr	r0, [pc, #136]	; (1aba4 <Flash::evtHandler(unsigned long, void*)+0xa4>)
                            Debug( "%02X", fullnameFlash_[i] );
   1ab1c:	4e22      	ldr	r6, [pc, #136]	; (1aba8 <Flash::evtHandler(unsigned long, void*)+0xa8>)
                                Debug(" ");
   1ab1e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1abc0 <Flash::evtHandler(unsigned long, void*)+0xc0>
                                Debug("\n    ");
   1ab22:	4f22      	ldr	r7, [pc, #136]	; (1abac <Flash::evtHandler(unsigned long, void*)+0xac>)
                            Debug( "    success\n" );
   1ab24:	f7ff fe08 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        Debug( "fullname flash values:\n    " );
   1ab28:	4821      	ldr	r0, [pc, #132]	; (1abb0 <Flash::evtHandler(unsigned long, void*)+0xb0>)
   1ab2a:	f7ff fe05 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            Debug( "%02X", fullnameFlash_[i] );
   1ab2e:	6833      	ldr	r3, [r6, #0]
   1ab30:	7818      	ldrb	r0, [r3, #0]
   1ab32:	f7ff ff95 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1ab36:	2401      	movs	r4, #1
   1ab38:	e002      	b.n	1ab40 <Flash::evtHandler(unsigned long, void*)+0x40>
   1ab3a:	3401      	adds	r4, #1
   1ab3c:	2c20      	cmp	r4, #32
   1ab3e:	d01e      	beq.n	1ab7e <Flash::evtHandler(unsigned long, void*)+0x7e>
                            Debug( "%02X", fullnameFlash_[i] );
   1ab40:	6833      	ldr	r3, [r6, #0]
   1ab42:	5d18      	ldrb	r0, [r3, r4]
   1ab44:	f7ff ff8c 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                            if( (i bitand 15) == 15 ){
   1ab48:	f004 030f 	and.w	r3, r4, #15
   1ab4c:	2b0f      	cmp	r3, #15
   1ab4e:	d1f4      	bne.n	1ab3a <Flash::evtHandler(unsigned long, void*)+0x3a>
                                Debug(" ");
   1ab50:	4640      	mov	r0, r8
   1ab52:	f7ff fdf1 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                for( auto j = i-15; j <= i; j++ ){
   1ab56:	f1a4 050f 	sub.w	r5, r4, #15
   1ab5a:	3401      	adds	r4, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1ab5c:	6833      	ldr	r3, [r6, #0]
   1ab5e:	5d58      	ldrb	r0, [r3, r5]
   1ab60:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   1ab64:	2b5e      	cmp	r3, #94	; 0x5e
   1ab66:	bf88      	it	hi
   1ab68:	202e      	movhi	r0, #46	; 0x2e
                                for( auto j = i-15; j <= i; j++ ){
   1ab6a:	3501      	adds	r5, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1ab6c:	f7ff ffa0 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1ab70:	42a5      	cmp	r5, r4
   1ab72:	d1f3      	bne.n	1ab5c <Flash::evtHandler(unsigned long, void*)+0x5c>
                                Debug("\n    ");
   1ab74:	4638      	mov	r0, r7
   1ab76:	f7ff fddf 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1ab7a:	2c20      	cmp	r4, #32
   1ab7c:	d1e0      	bne.n	1ab40 <Flash::evtHandler(unsigned long, void*)+0x40>
                        Debug( "\n" );
   1ab7e:	480d      	ldr	r0, [pc, #52]	; (1abb4 <Flash::evtHandler(unsigned long, void*)+0xb4>)
   1ab80:	f7ff fdda 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            busy_ = false;
   1ab84:	4b0c      	ldr	r3, [pc, #48]	; (1abb8 <Flash::evtHandler(unsigned long, void*)+0xb8>)
   1ab86:	2200      	movs	r2, #0
   1ab88:	701a      	strb	r2, [r3, #0]
                    }
   1ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                            Debug( "    error\n" );
   1ab8e:	480b      	ldr	r0, [pc, #44]	; (1abbc <Flash::evtHandler(unsigned long, void*)+0xbc>)
   1ab90:	f7ff fdd2 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            busy_ = false;
   1ab94:	4b08      	ldr	r3, [pc, #32]	; (1abb8 <Flash::evtHandler(unsigned long, void*)+0xb8>)
   1ab96:	2200      	movs	r2, #0
   1ab98:	701a      	strb	r2, [r3, #0]
                    }
   1ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab9e:	bf00      	nop
   1aba0:	0001ea60 	.word	0x0001ea60
   1aba4:	0001ea7c 	.word	0x0001ea7c
   1aba8:	20001834 	.word	0x20001834
   1abac:	0001eaa8 	.word	0x0001eaa8
   1abb0:	0001ea8c 	.word	0x0001ea8c
   1abb4:	0001eb64 	.word	0x0001eb64
   1abb8:	20001a1a 	.word	0x20001a1a
   1abbc:	0001eab0 	.word	0x0001eab0
   1abc0:	0001eaac 	.word	0x0001eaac

0001abc4 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1abc4:	b510      	push	{r4, lr}
   1abc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1abca:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1abcc:	4a0f      	ldr	r2, [pc, #60]	; (1ac0c <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]+0x48>)
   1abce:	4668      	mov	r0, sp
   1abd0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1abd4:	f001 fe6c 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1abd8:	b150      	cbz	r0, 1abf0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1abda:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1abde:	4669      	mov	r1, sp
   1abe0:	db02      	blt.n	1abe8 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]+0x24>
   1abe2:	4c0b      	ldr	r4, [pc, #44]	; (1ac10 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]+0x4c>)
   1abe4:	7823      	ldrb	r3, [r4, #0]
   1abe6:	b933      	cbnz	r3, 1abf6 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]+0x32>
   1abe8:	f04f 0000 	mov.w	r0, #0
   1abec:	f7ff fc78 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1abf0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1abf4:	bd10      	pop	{r4, pc}
    markupON = false;
   1abf6:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1abf8:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1abfc:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1abfe:	f7ff fc6f 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1ac02:	2301      	movs	r3, #1
   1ac04:	7023      	strb	r3, [r4, #0]
}
   1ac06:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1ac0a:	bd10      	pop	{r4, pc}
   1ac0c:	0001eabc 	.word	0x0001eabc
   1ac10:	20001838 	.word	0x20001838

0001ac14 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1ac14:	b510      	push	{r4, lr}
   1ac16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1ac1a:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1ac1c:	9100      	str	r1, [sp, #0]
   1ac1e:	4a10      	ldr	r2, [pc, #64]	; (1ac60 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1ac20:	a802      	add	r0, sp, #8
   1ac22:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ac26:	f001 fe43 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1ac2a:	b150      	cbz	r0, 1ac42 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1ac2c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1ac30:	a902      	add	r1, sp, #8
   1ac32:	db02      	blt.n	1ac3a <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]+0x26>
   1ac34:	4c0b      	ldr	r4, [pc, #44]	; (1ac64 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]+0x50>)
   1ac36:	7823      	ldrb	r3, [r4, #0]
   1ac38:	b933      	cbnz	r3, 1ac48 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]+0x34>
   1ac3a:	f04f 0000 	mov.w	r0, #0
   1ac3e:	f7ff fc4f 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1ac42:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1ac46:	bd10      	pop	{r4, pc}
    markupON = false;
   1ac48:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1ac4a:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1ac4e:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1ac50:	f7ff fc46 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1ac54:	2301      	movs	r3, #1
   1ac56:	7023      	strb	r3, [r4, #0]
}
   1ac58:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1ac5c:	bd10      	pop	{r4, pc}
   1ac5e:	bf00      	nop
   1ac60:	0001eac4 	.word	0x0001eac4
   1ac64:	20001838 	.word	0x20001838

0001ac68 <BatteryService180F::make(unsigned char*)>:
SA  make            (u8* buf) {
   1ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // adc*3600/1024
    SI i16 voltage_{ 0 }; 

SA  update          () {
                        static u8 count;
                        if( count == 0 ) {
   1ac6c:	4f41      	ldr	r7, [pc, #260]	; (1ad74 <BatteryService180F::make(unsigned char*)+0x10c>)
   1ac6e:	783c      	ldrb	r4, [r7, #0]
   1ac70:	b086      	sub	sp, #24
   1ac72:	4605      	mov	r5, r0
                            vdd_.calibrate();
                            i16 v = 0;
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   1ac74:	f10d 0616 	add.w	r6, sp, #22
                        if( count == 0 ) {
   1ac78:	2c00      	cmp	r4, #0
   1ac7a:	d03d      	beq.n	1acf8 <BatteryService180F::make(unsigned char*)+0x90>
   1ac7c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1ad8c <BatteryService180F::make(unsigned char*)+0x124>
                            //make sure we are in some sane range
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
                            Debug( "Battery::update  %u.%03uV\n", voltage_/1000, voltage_%1000 );
                        }
                        if( ++count >= updateInterval_ ) count = 0;  
   1ac80:	3401      	adds	r4, #1
   1ac82:	b2e4      	uxtb	r4, r4
   1ac84:	2c3b      	cmp	r4, #59	; 0x3b
   1ac86:	bf8a      	itet	hi
   1ac88:	2300      	movhi	r3, #0
   1ac8a:	703c      	strbls	r4, [r7, #0]
   1ac8c:	703b      	strbhi	r3, [r7, #0]
                        u16 bv = battery.read();
   1ac8e:	f8b8 4000 	ldrh.w	r4, [r8]
                        DebugFuncHeader();
   1ac92:	f7fe fdb1 	bl	197f8 <app_timer_cnt_get>
   1ac96:	4938      	ldr	r1, [pc, #224]	; (1ad78 <BatteryService180F::make(unsigned char*)+0x110>)
   1ac98:	4a38      	ldr	r2, [pc, #224]	; (1ad7c <BatteryService180F::make(unsigned char*)+0x114>)
   1ac9a:	9202      	str	r2, [sp, #8]
   1ac9c:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1aca0:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1aca4:	2768      	movs	r7, #104	; 0x68
   1aca6:	0b82      	lsrs	r2, r0, #14
   1aca8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1acac:	e9cd 1700 	strd	r1, r7, [sp]
   1acb0:	f04f 0000 	mov.w	r0, #0
   1acb4:	4932      	ldr	r1, [pc, #200]	; (1ad80 <BatteryService180F::make(unsigned char*)+0x118>)
   1acb6:	f7ff fdd9 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        Debug( "  battery: %dmV\n", bv );
   1acba:	4832      	ldr	r0, [pc, #200]	; (1ad84 <BatteryService180F::make(unsigned char*)+0x11c>)
   1acbc:	4621      	mov	r1, r4
   1acbe:	f7ff fe03 	bl	1a8c8 <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]>
                        u8 dat = bv > 3000 ? 100 :
   1acc2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1acc6:	429c      	cmp	r4, r3
   1acc8:	d80a      	bhi.n	1ace0 <BatteryService180F::make(unsigned char*)+0x78>
   1acca:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   1acce:	d311      	bcc.n	1acf4 <BatteryService180F::make(unsigned char*)+0x8c>
                                 (bv - 2000)/10;
   1acd0:	4b2d      	ldr	r3, [pc, #180]	; (1ad88 <BatteryService180F::make(unsigned char*)+0x120>)
   1acd2:	f5a4 64fa 	sub.w	r4, r4, #2000	; 0x7d0
   1acd6:	fba3 3404 	umull	r3, r4, r3, r4
                        u8 dat = bv > 3000 ? 100 :
   1acda:	f3c4 04c7 	ubfx	r4, r4, #3, #8
   1acde:	e000      	b.n	1ace2 <BatteryService180F::make(unsigned char*)+0x7a>
   1ace0:	2464      	movs	r4, #100	; 0x64
                        return ServiceData16::make( buf, 0x180F, &dat, 1 );
   1ace2:	4631      	mov	r1, r6
   1ace4:	4628      	mov	r0, r5
                        u8 dat = bv > 3000 ? 100 :
   1ace6:	f88d 4016 	strb.w	r4, [sp, #22]
                        return ServiceData16::make( buf, 0x180F, &dat, 1 );
   1acea:	f7ff f9df 	bl	1a0ac <ServiceData16::make(unsigned char*, unsigned short, unsigned char*, unsigned char) [clone .constprop.0]>
                    }
   1acee:	b006      	add	sp, #24
   1acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        u8 dat = bv > 3000 ? 100 :
   1acf4:	2400      	movs	r4, #0
   1acf6:	e7f4      	b.n	1ace2 <BatteryService180F::make(unsigned char*)+0x7a>
                            vdd_.calibrate();
   1acf8:	f7ff fabe 	bl	1a278 <Saadc::calibrate()>
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   1acfc:	4630      	mov	r0, r6
   1acfe:	2203      	movs	r2, #3
   1ad00:	2101      	movs	r1, #1
                            i16 v = 0;
   1ad02:	f8ad 4016 	strh.w	r4, [sp, #22]
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   1ad06:	f7ff fb97 	bl	1a438 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>
                            voltage_ = (i32)v * 3600 / 1024;
   1ad0a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   1ad0e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ad12:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ad16:	011b      	lsls	r3, r3, #4
   1ad18:	bf48      	it	mi
   1ad1a:	f203 33ff 	addwmi	r3, r3, #1023	; 0x3ff
   1ad1e:	f343 238f 	sbfx	r3, r3, #10, #16
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   1ad22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1ad26:	db0f      	blt.n	1ad48 <BatteryService180F::make(unsigned char*)+0xe0>
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
   1ad28:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
   1ad2c:	dd14      	ble.n	1ad58 <BatteryService180F::make(unsigned char*)+0xf0>
   1ad2e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ad8c <BatteryService180F::make(unsigned char*)+0x124>
   1ad32:	f242 730f 	movw	r3, #9999	; 0x270f
   1ad36:	f8a8 3000 	strh.w	r3, [r8]
   1ad3a:	f240 31e7 	movw	r1, #999	; 0x3e7
   1ad3e:	2009      	movs	r0, #9
                            Debug( "Battery::update  %u.%03uV\n", voltage_/1000, voltage_%1000 );
   1ad40:	f7ff ff68 	bl	1ac14 <int Print<DevRtt<0>, int, int>(DevRtt<0>, char const*, int, int) [clone .isra.0] [clone .constprop.0]>
   1ad44:	783c      	ldrb	r4, [r7, #0]
   1ad46:	e79b      	b.n	1ac80 <BatteryService180F::make(unsigned char*)+0x18>
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   1ad48:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1ad8c <BatteryService180F::make(unsigned char*)+0x124>
   1ad4c:	2300      	movs	r3, #0
   1ad4e:	4619      	mov	r1, r3
   1ad50:	f8a8 3000 	strh.w	r3, [r8]
   1ad54:	4618      	mov	r0, r3
   1ad56:	e7f3      	b.n	1ad40 <BatteryService180F::make(unsigned char*)+0xd8>
   1ad58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                            voltage_ = (i32)v * 3600 / 1024;
   1ad5c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1ad8c <BatteryService180F::make(unsigned char*)+0x124>
   1ad60:	fb93 f0f2 	sdiv	r0, r3, r2
   1ad64:	fb02 3210 	mls	r2, r2, r0, r3
   1ad68:	b211      	sxth	r1, r2
   1ad6a:	b200      	sxth	r0, r0
   1ad6c:	f8a8 3000 	strh.w	r3, [r8]
   1ad70:	e7e6      	b.n	1ad40 <BatteryService180F::make(unsigned char*)+0xd8>
   1ad72:	bf00      	nop
   1ad74:	20001a3c 	.word	0x20001a3c
   1ad78:	0001eb14 	.word	0x0001eb14
   1ad7c:	0001eb0c 	.word	0x0001eb0c
   1ad80:	0001eae0 	.word	0x0001eae0
   1ad84:	0001eb28 	.word	0x0001eb28
   1ad88:	cccccccd 	.word	0xcccccccd
   1ad8c:	20001a3e 	.word	0x20001a3e

0001ad90 <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1ad90:	b510      	push	{r4, lr}
   1ad92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1ad96:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1ad98:	4a0f      	ldr	r2, [pc, #60]	; (1add8 <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]+0x48>)
   1ad9a:	4668      	mov	r0, sp
   1ad9c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ada0:	f001 fd86 	bl	1c8b0 <sniprintf>
    if( n == 0 ) return 0;
   1ada4:	b150      	cbz	r0, 1adbc <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1ada6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1adaa:	4669      	mov	r1, sp
   1adac:	db02      	blt.n	1adb4 <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]+0x24>
   1adae:	4c0b      	ldr	r4, [pc, #44]	; (1addc <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1adb0:	7823      	ldrb	r3, [r4, #0]
   1adb2:	b933      	cbnz	r3, 1adc2 <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]+0x32>
   1adb4:	f04f 0000 	mov.w	r0, #0
   1adb8:	f7ff fb92 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1adbc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1adc0:	bd10      	pop	{r4, pc}
    markupON = false;
   1adc2:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1adc4:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1adc8:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1adca:	f7ff fb89 	bl	1a4e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1adce:	2301      	movs	r3, #1
   1add0:	7023      	strb	r3, [r4, #0]
}
   1add2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1add6:	bd10      	pop	{r4, pc}
   1add8:	0001eb3c 	.word	0x0001eb3c
   1addc:	20001838 	.word	0x20001838

0001ade0 <Errors::check(short, bool) [clone .constprop.0]>:
struct Errors {

                //if error, show error code 3 times, 
                //reset unless also pass in false
SA  check       (i16 err, bool reboot = true) {
                    if( err == 0 ) return;
   1ade0:	b900      	cbnz	r0, 1ade4 <Errors::check(short, bool) [clone .constprop.0]+0x4>
   1ade2:	4770      	bx	lr
SA  check       (i16 err, bool reboot = true) {
   1ade4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade8:	4680      	mov	r8, r0
                    Debug( "{Fred}Error: %d{normal}\n", err );
   1adea:	4e45      	ldr	r6, [pc, #276]	; (1af00 <Errors::check(short, bool) [clone .constprop.0]+0x120>)
   1adec:	f7ff ffd0 	bl	1ad90 <int Print<DevRtt<0>, short>(DevRtt<0>, char const*, short) [clone .isra.0] [clone .constprop.0]>
                    for( auto i = 0; i < 3; i++ ){
   1adf0:	fa1f f888 	uxth.w	r8, r8
   1adf4:	f046 0601 	orr.w	r6, r6, #1
                    Debug( "{Fred}Error: %d{normal}\n", err );
   1adf8:	f04f 0903 	mov.w	r9, #3
SA  isOutput    ()          { return reg.DIRP; }
   1adfc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000

            //show error code via led's, skip leading 0's
            //show 1-15 blinks for each nibble (0x01-0x0f)
            //a zero will be a short green blink
SA  error   (u16 hex) {
                bool lz = true;
   1ae00:	2501      	movs	r5, #1
                for( auto i = 12; i >= 0; i -= 4 ){
   1ae02:	270c      	movs	r7, #12
                    u8 v = (hex>>i) bitand 0xf;
   1ae04:	fa48 f307 	asr.w	r3, r8, r7
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   1ae08:	f013 030f 	ands.w	r3, r3, #15
   1ae0c:	d04e      	beq.n	1aeac <Errors::check(short, bool) [clone .constprop.0]+0xcc>
   1ae0e:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1ae12:	07d5      	lsls	r5, r2, #31
   1ae14:	d529      	bpl.n	1ae6a <Errors::check(short, bool) [clone .constprop.0]+0x8a>
                    while( n-- ){ 
   1ae16:	3b01      	subs	r3, #1
   1ae18:	b29d      	uxth	r5, r3
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae1a:	f04f 0a80 	mov.w	sl, #128	; 0x80
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1ae1e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1ae22:	0618      	lsls	r0, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ae24:	bf4c      	ite	mi
   1ae26:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae2a:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   1ae2e:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   1ae32:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae36:	47b0      	blx	r6
   1ae38:	f1bb 0b01 	subs.w	fp, fp, #1
   1ae3c:	d1f9      	bne.n	1ae32 <Errors::check(short, bool) [clone .constprop.0]+0x52>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1ae3e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1ae42:	0619      	lsls	r1, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ae44:	bf4c      	ite	mi
   1ae46:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae4a:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
   1ae4e:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   1ae52:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae56:	47b0      	blx	r6
   1ae58:	f1bb 0b01 	subs.w	fp, fp, #1
   1ae5c:	d1f9      	bne.n	1ae52 <Errors::check(short, bool) [clone .constprop.0]+0x72>
                    while( n-- ){ 
   1ae5e:	3d01      	subs	r5, #1
   1ae60:	b2ad      	uxth	r5, r5
   1ae62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ae66:	429d      	cmp	r5, r3
   1ae68:	d1d9      	bne.n	1ae1e <Errors::check(short, bool) [clone .constprop.0]+0x3e>
   1ae6a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
   1ae6e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae72:	47b0      	blx	r6
   1ae74:	3d01      	subs	r5, #1
   1ae76:	d1fa      	bne.n	1ae6e <Errors::check(short, bool) [clone .constprop.0]+0x8e>
   1ae78:	3f04      	subs	r7, #4
   1ae7a:	1d3b      	adds	r3, r7, #4
   1ae7c:	d1c2      	bne.n	1ae04 <Errors::check(short, bool) [clone .constprop.0]+0x24>
   1ae7e:	f640 35b8 	movw	r5, #3000	; 0xbb8
   1ae82:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae86:	47b0      	blx	r6
   1ae88:	3d01      	subs	r5, #1
   1ae8a:	d1fa      	bne.n	1ae82 <Errors::check(short, bool) [clone .constprop.0]+0xa2>
                    for( auto i = 0; i < 3; i++ ){
   1ae8c:	f1b9 0901 	subs.w	r9, r9, #1
   1ae90:	d1b6      	bne.n	1ae00 <Errors::check(short, bool) [clone .constprop.0]+0x20>
  __ASM volatile ("dsb 0xF":::"memory");
   1ae92:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ae96:	491b      	ldr	r1, [pc, #108]	; (1af04 <Errors::check(short, bool) [clone .constprop.0]+0x124>)
   1ae98:	4b1b      	ldr	r3, [pc, #108]	; (1af08 <Errors::check(short, bool) [clone .constprop.0]+0x128>)
   1ae9a:	68ca      	ldr	r2, [r1, #12]
   1ae9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1aea0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1aea2:	60cb      	str	r3, [r1, #12]
   1aea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   1aea8:	bf00      	nop
   1aeaa:	e7fd      	b.n	1aea8 <Errors::check(short, bool) [clone .constprop.0]+0xc8>
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   1aeac:	2d00      	cmp	r5, #0
   1aeae:	d1e3      	bne.n	1ae78 <Errors::check(short, bool) [clone .constprop.0]+0x98>
SA  isOutput    ()          { return reg.DIRP; }
   1aeb0:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
                    if( not isOutput() ) return;
   1aeb4:	07da      	lsls	r2, r3, #31
   1aeb6:	d5d8      	bpl.n	1ae6a <Errors::check(short, bool) [clone .constprop.0]+0x8a>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1aeb8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1aebc:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1aec4:	bf14      	ite	ne
   1aec6:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1aeca:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   1aece:	2532      	movs	r5, #50	; 0x32
   1aed0:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1aed4:	47b0      	blx	r6
   1aed6:	3d01      	subs	r5, #1
   1aed8:	d1fa      	bne.n	1aed0 <Errors::check(short, bool) [clone .constprop.0]+0xf0>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1aeda:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1aede:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1aee2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1aee6:	bf14      	ite	ne
   1aee8:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1aeec:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
   1aef0:	2532      	movs	r5, #50	; 0x32
   1aef2:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1aef6:	47b0      	blx	r6
   1aef8:	3d01      	subs	r5, #1
   1aefa:	d1fa      	bne.n	1aef2 <Errors::check(short, bool) [clone .constprop.0]+0x112>
   1aefc:	e7b5      	b.n	1ae6a <Errors::check(short, bool) [clone .constprop.0]+0x8a>
   1aefe:	bf00      	nop
   1af00:	0001eeb0 	.word	0x0001eeb0
   1af04:	e000ed00 	.word	0xe000ed00
   1af08:	05fa0004 	.word	0x05fa0004
   1af0c:	00000000 	.word	0x00000000

0001af10 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()>:
                        //=== Debug ===

                        start();
                    }

SA  timerOn         () {
   1af10:	b538      	push	{r3, r4, r5, lr}
                        return __builtin_ceil( ms*(RTC_HZ/1000.0) );
                    }

                    //init timer module on first use, applies to all instances
SA init             () {
                        if( isTimerModuleInit_ ) return;
   1af12:	4c17      	ldr	r4, [pc, #92]	; (1af70 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x60>)
                        timerAdvUpdate_.init( timerInterval_, update, timerAdvUpdate_.REPEATED );
   1af14:	4a17      	ldr	r2, [pc, #92]	; (1af74 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x64>)
   1af16:	7823      	ldrb	r3, [r4, #0]
   1af18:	6815      	ldr	r5, [r2, #0]
   1af1a:	b91b      	cbnz	r3, 1af24 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x14>
                        app_timer_init(); //always success
   1af1c:	f7fe fbc0 	bl	196a0 <app_timer_init>
                        isTimerModuleInit_ = true;
   1af20:	2301      	movs	r3, #1
   1af22:	7023      	strb	r3, [r4, #0]
    Timer           (){}
                    
                    //for each instance
auto init           (u32 ms, void(*cb)(void*), TIMER_TYPE typ = ONCE) -> void {
                        init();
                        error.check( app_timer_create(&ptimerId_, 
   1af24:	4a14      	ldr	r2, [pc, #80]	; (1af78 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x68>)
   1af26:	4815      	ldr	r0, [pc, #84]	; (1af7c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x6c>)
   1af28:	2101      	movs	r1, #1
   1af2a:	f7fe fbef 	bl	1970c <app_timer_create>
   1af2e:	b200      	sxth	r0, r0
   1af30:	f7ff ff56 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        return __builtin_ceil( ms*(RTC_HZ/1000.0) );
   1af34:	4812      	ldr	r0, [pc, #72]	; (1af80 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x70>)
   1af36:	42a8      	cmp	r0, r5
   1af38:	bf28      	it	cs
   1af3a:	4628      	movcs	r0, r5
   1af3c:	f002 fc48 	bl	1d7d0 <__aeabi_ui2d>
   1af40:	a309      	add	r3, pc, #36	; (adr r3, 1af68 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x58>)
   1af42:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af46:	f002 f9d7 	bl	1d2f8 <__aeabi_dmul>
   1af4a:	f002 f959 	bl	1d200 <ceil>
                            typ == ONCE ? APP_TIMER_MODE_SINGLE_SHOT : 
                                APP_TIMER_MODE_REPEATED, cb) 
                        );
                        error.check( app_timer_start(ptimerId_, appTimerTicks(ms), NULL) );
   1af4e:	f002 fd41 	bl	1d9d4 <__aeabi_d2uiz>
   1af52:	4b0c      	ldr	r3, [pc, #48]	; (1af84 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()+0x74>)
   1af54:	4601      	mov	r1, r0
   1af56:	2200      	movs	r2, #0
   1af58:	6a18      	ldr	r0, [r3, #32]
   1af5a:	f7fe fbe5 	bl	19728 <app_timer_start>
                    }
   1af5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1af62:	b200      	sxth	r0, r0
   1af64:	f7ff bf3c 	b.w	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
   1af68:	d2f1a9fc 	.word	0xd2f1a9fc
   1af6c:	4030624d 	.word	0x4030624d
   1af70:	20001a48 	.word	0x20001a48
   1af74:	2000180c 	.word	0x2000180c
   1af78:	0001b9ed 	.word	0x0001b9ed
   1af7c:	200019c8 	.word	0x200019c8
   1af80:	05265c00 	.word	0x05265c00
   1af84:	200019a8 	.word	0x200019a8

0001af88 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOff()>:

SA  timerOff        () {
   1af88:	b508      	push	{r3, lr}
                    }

auto stop           (){ error.check( app_timer_stop(ptimerId_) ); }
   1af8a:	4b04      	ldr	r3, [pc, #16]	; (1af9c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOff()+0x14>)
   1af8c:	6a18      	ldr	r0, [r3, #32]
   1af8e:	f7fe fc11 	bl	197b4 <app_timer_stop>
                        timerAdvUpdate_.stop();
                    }
   1af92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1af96:	b200      	sxth	r0, r0
   1af98:	f7ff bf22 	b.w	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
   1af9c:	200019a8 	.word	0x200019a8

0001afa0 <Ble::init()>:

//===========
    public:
//===========

SA  init            () {
   1afa0:	b510      	push	{r4, lr}
   1afa2:	b082      	sub	sp, #8
                        Debug( "Ble::init...\n" );
                        uint32_t ram_start = 0;
   1afa4:	2400      	movs	r4, #0
                        Debug( "Ble::init...\n" );
   1afa6:	480e      	ldr	r0, [pc, #56]	; (1afe0 <Ble::init()+0x40>)
   1afa8:	f7ff fbc6 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        uint32_t ram_start = 0;
   1afac:	9401      	str	r4, [sp, #4]
                        error.check( nrf_sdh_enable_request() );
   1afae:	f001 facd 	bl	1c54c <nrf_sdh_enable_request>
   1afb2:	b200      	sxth	r0, r0
   1afb4:	f7ff ff14 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_default_cfg_set(BLE_CONN_CFG_TAG_DEFAULT, &ram_start) );
   1afb8:	a901      	add	r1, sp, #4
   1afba:	4620      	mov	r0, r4
   1afbc:	f001 fba2 	bl	1c704 <nrf_sdh_ble_default_cfg_set>
   1afc0:	b200      	sxth	r0, r0
   1afc2:	f7ff ff0d 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_enable(&ram_start) );
   1afc6:	a801      	add	r0, sp, #4
   1afc8:	f001 fbf2 	bl	1c7b0 <nrf_sdh_ble_enable>
   1afcc:	b200      	sxth	r0, r0
   1afce:	f7ff ff07 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        Debug( "    ram start: 0x%08X\n", ram_start );
   1afd2:	9901      	ldr	r1, [sp, #4]
   1afd4:	4803      	ldr	r0, [pc, #12]	; (1afe4 <Ble::init()+0x44>)
   1afd6:	f7ff fb89 	bl	1a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>
                        //_name, _prio, _handler, _context
                        NRF_SDH_BLE_OBSERVER(bleObserver_, 3, eventHandler, NULL);
                    }
   1afda:	b002      	add	sp, #8
   1afdc:	bd10      	pop	{r4, pc}
   1afde:	bf00      	nop
   1afe0:	0001eb58 	.word	0x0001eb58
   1afe4:	0001eb68 	.word	0x0001eb68

0001afe8 <Gap::init()>:
/*------------------------------------------------------------------------------
    Gap
------------------------------------------------------------------------------*/
struct Gap {

SA  init        () {
   1afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        saveName_ = true;
                    }

SA  readName        () {
                        //was updated?, need to save in flash
                        if( saveName_ ) saveName();                        
   1afec:	4e98      	ldr	r6, [pc, #608]	; (1b250 <Gap::init()+0x268>)
                    Debug( "Gap::init...\n" );                    
   1afee:	4899      	ldr	r0, [pc, #612]	; (1b254 <Gap::init()+0x26c>)
SA  init        () {
   1aff0:	b085      	sub	sp, #20
                    Debug( "Gap::init...\n" );                    
   1aff2:	f7ff fba1 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1aff6:	7833      	ldrb	r3, [r6, #0]

                    ble_gap_conn_params_t   gap_conn_params;
                    ble_gap_conn_sec_mode_t sec_mode;

                    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
   1aff8:	2211      	movs	r2, #17
   1affa:	f88d 2004 	strb.w	r2, [sp, #4]
   1affe:	b9f3      	cbnz	r3, 1b03e <Gap::init()+0x56>

                    error.check( 
                        sd_ble_gap_device_name_set( &sec_mode, (const uint8_t*)flash.readName(), strlen( flash.readName() ) )
   1b000:	4895      	ldr	r0, [pc, #596]	; (1b258 <Gap::init()+0x270>)
   1b002:	f001 fc91 	bl	1c928 <strlen>
   1b006:	4994      	ldr	r1, [pc, #592]	; (1b258 <Gap::init()+0x270>)
   1b008:	b282      	uxth	r2, r0
   1b00a:	a801      	add	r0, sp, #4
   1b00c:	f7ff f848 	bl	1a0a0 <sd_ble_gap_device_name_set>
                    error.check( 
   1b010:	b200      	sxth	r0, r0
   1b012:	f7ff fee5 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                     );

                    memset(&gap_conn_params, 0, sizeof(gap_conn_params));
   1b016:	2208      	movs	r2, #8
   1b018:	2100      	movs	r1, #0
   1b01a:	a802      	add	r0, sp, #8
   1b01c:	f001 fc40 	bl	1c8a0 <memset>

                    gap_conn_params.min_conn_interval = MSEC_TO_UNITS(100, UNIT_1_25_MS);
   1b020:	4b8e      	ldr	r3, [pc, #568]	; (1b25c <Gap::init()+0x274>)
   1b022:	9302      	str	r3, [sp, #8]
                    gap_conn_params.max_conn_interval = MSEC_TO_UNITS(200, UNIT_1_25_MS);
                    gap_conn_params.conn_sup_timeout  = MSEC_TO_UNITS(4000, UNIT_10_MS);

                    error.check( sd_ble_gap_ppcp_set(&gap_conn_params) );
   1b024:	a802      	add	r0, sp, #8
                    gap_conn_params.conn_sup_timeout  = MSEC_TO_UNITS(4000, UNIT_10_MS);
   1b026:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1b02a:	f8ad 300e 	strh.w	r3, [sp, #14]
                    error.check( sd_ble_gap_ppcp_set(&gap_conn_params) );
   1b02e:	f7ff f835 	bl	1a09c <sd_ble_gap_ppcp_set>
   1b032:	b200      	sxth	r0, r0
   1b034:	f7ff fed4 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                }
   1b038:	b005      	add	sp, #20
   1b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        Debug( "Flash::saveName : %s\n", fullnameRam_ );          
   1b03e:	4986      	ldr	r1, [pc, #536]	; (1b258 <Gap::init()+0x270>)
   1b040:	4887      	ldr	r0, [pc, #540]	; (1b260 <Gap::init()+0x278>)
   1b042:	f7ff fbb7 	bl	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
                        if( not nrf_sdh_is_enabled() ) return; //these functions use sd
   1b046:	f001 fb0d 	bl	1c664 <nrf_sdh_is_enabled>
   1b04a:	2800      	cmp	r0, #0
   1b04c:	d151      	bne.n	1b0f2 <Gap::init()+0x10a>
                        if( saveName_ ) saveName();                        
   1b04e:	7833      	ldrb	r3, [r6, #0]
   1b050:	2b00      	cmp	r3, #0
   1b052:	d0d5      	beq.n	1b000 <Gap::init()+0x18>
                        Debug( "Flash::saveName : %s\n", fullnameRam_ );          
   1b054:	4980      	ldr	r1, [pc, #512]	; (1b258 <Gap::init()+0x270>)
   1b056:	4882      	ldr	r0, [pc, #520]	; (1b260 <Gap::init()+0x278>)
   1b058:	f7ff fbac 	bl	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
                        if( not nrf_sdh_is_enabled() ) return; //these functions use sd
   1b05c:	f001 fb02 	bl	1c664 <nrf_sdh_is_enabled>
   1b060:	4607      	mov	r7, r0
   1b062:	2800      	cmp	r0, #0
   1b064:	d0cc      	beq.n	1b000 <Gap::init()+0x18>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b066:	4d7f      	ldr	r5, [pc, #508]	; (1b264 <Gap::init()+0x27c>)
   1b068:	6829      	ldr	r1, [r5, #0]
   1b06a:	1e4b      	subs	r3, r1, #1
   1b06c:	311f      	adds	r1, #31
   1b06e:	e002      	b.n	1b076 <Gap::init()+0x8e>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b070:	428b      	cmp	r3, r1
   1b072:	f000 80a1 	beq.w	1b1b8 <Gap::init()+0x1d0>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b076:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b07a:	2aff      	cmp	r2, #255	; 0xff
   1b07c:	d0f8      	beq.n	1b070 <Gap::init()+0x88>
                        if( busy_ ){
   1b07e:	f8df 8200 	ldr.w	r8, [pc, #512]	; 1b280 <Gap::init()+0x298>
                        Debug( "Flash::sdErasePage\n" );
   1b082:	4879      	ldr	r0, [pc, #484]	; (1b268 <Gap::init()+0x280>)
   1b084:	f7ff fb58 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b088:	f898 3000 	ldrb.w	r3, [r8]
   1b08c:	2b00      	cmp	r3, #0
   1b08e:	f040 80d6 	bne.w	1b23e <Gap::init()+0x256>
                        Debug( "fullname flash values:\n    " );
   1b092:	4876      	ldr	r0, [pc, #472]	; (1b26c <Gap::init()+0x284>)
                                Debug(" ");
   1b094:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 1b284 <Gap::init()+0x29c>
                                Debug("\n    ");
   1b098:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 1b288 <Gap::init()+0x2a0>
                        Debug( "fullname flash values:\n    " );
   1b09c:	f7ff fb4c 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            Debug( "%02X", fullnameFlash_[i] );
   1b0a0:	682b      	ldr	r3, [r5, #0]
   1b0a2:	7818      	ldrb	r0, [r3, #0]
   1b0a4:	f7ff fcdc 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b0a8:	2401      	movs	r4, #1
   1b0aa:	e003      	b.n	1b0b4 <Gap::init()+0xcc>
   1b0ac:	3401      	adds	r4, #1
   1b0ae:	2c20      	cmp	r4, #32
   1b0b0:	f000 80aa 	beq.w	1b208 <Gap::init()+0x220>
                            Debug( "%02X", fullnameFlash_[i] );
   1b0b4:	682b      	ldr	r3, [r5, #0]
   1b0b6:	5d18      	ldrb	r0, [r3, r4]
   1b0b8:	f7ff fcd2 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                            if( (i bitand 15) == 15 ){
   1b0bc:	f004 030f 	and.w	r3, r4, #15
   1b0c0:	2b0f      	cmp	r3, #15
   1b0c2:	d1f3      	bne.n	1b0ac <Gap::init()+0xc4>
                                Debug(" ");
   1b0c4:	4650      	mov	r0, sl
   1b0c6:	f7ff fb37 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                for( auto j = i-15; j <= i; j++ ){
   1b0ca:	f1a4 0b0f 	sub.w	fp, r4, #15
   1b0ce:	3401      	adds	r4, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b0d0:	682b      	ldr	r3, [r5, #0]
   1b0d2:	f813 000b 	ldrb.w	r0, [r3, fp]
   1b0d6:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   1b0da:	2b5e      	cmp	r3, #94	; 0x5e
                                for( auto j = i-15; j <= i; j++ ){
   1b0dc:	f10b 0b01 	add.w	fp, fp, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b0e0:	d84a      	bhi.n	1b178 <Gap::init()+0x190>
   1b0e2:	f7ff fce5 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1b0e6:	45a3      	cmp	fp, r4
   1b0e8:	d1f2      	bne.n	1b0d0 <Gap::init()+0xe8>
                                Debug("\n    ");
   1b0ea:	4648      	mov	r0, r9
   1b0ec:	f7ff fb24 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1b0f0:	e7dd      	b.n	1b0ae <Gap::init()+0xc6>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b0f2:	4d5c      	ldr	r5, [pc, #368]	; (1b264 <Gap::init()+0x27c>)
   1b0f4:	6829      	ldr	r1, [r5, #0]
   1b0f6:	1e4b      	subs	r3, r1, #1
   1b0f8:	311f      	adds	r1, #31
   1b0fa:	e001      	b.n	1b100 <Gap::init()+0x118>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b0fc:	428b      	cmp	r3, r1
   1b0fe:	d041      	beq.n	1b184 <Gap::init()+0x19c>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b100:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b104:	2aff      	cmp	r2, #255	; 0xff
   1b106:	d0f9      	beq.n	1b0fc <Gap::init()+0x114>
                        if( busy_ ){
   1b108:	f8df 8174 	ldr.w	r8, [pc, #372]	; 1b280 <Gap::init()+0x298>
                        Debug( "Flash::sdErasePage\n" );
   1b10c:	4856      	ldr	r0, [pc, #344]	; (1b268 <Gap::init()+0x280>)
   1b10e:	f7ff fb13 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b112:	f898 3000 	ldrb.w	r3, [r8]
   1b116:	2b00      	cmp	r3, #0
   1b118:	f040 8095 	bne.w	1b246 <Gap::init()+0x25e>
                        Debug( "fullname flash values:\n    " );
   1b11c:	4853      	ldr	r0, [pc, #332]	; (1b26c <Gap::init()+0x284>)
                                Debug(" ");
   1b11e:	f8df a164 	ldr.w	sl, [pc, #356]	; 1b284 <Gap::init()+0x29c>
                                Debug("\n    ");
   1b122:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1b288 <Gap::init()+0x2a0>
                        Debug( "fullname flash values:\n    " );
   1b126:	f7ff fb07 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            Debug( "%02X", fullnameFlash_[i] );
   1b12a:	682b      	ldr	r3, [r5, #0]
   1b12c:	7818      	ldrb	r0, [r3, #0]
   1b12e:	f7ff fc97 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b132:	2401      	movs	r4, #1
   1b134:	e002      	b.n	1b13c <Gap::init()+0x154>
   1b136:	3401      	adds	r4, #1
   1b138:	2c20      	cmp	r4, #32
   1b13a:	d058      	beq.n	1b1ee <Gap::init()+0x206>
                            Debug( "%02X", fullnameFlash_[i] );
   1b13c:	682b      	ldr	r3, [r5, #0]
   1b13e:	5d18      	ldrb	r0, [r3, r4]
   1b140:	f7ff fc8e 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                            if( (i bitand 15) == 15 ){
   1b144:	f004 030f 	and.w	r3, r4, #15
   1b148:	2b0f      	cmp	r3, #15
   1b14a:	d1f4      	bne.n	1b136 <Gap::init()+0x14e>
                                Debug(" ");
   1b14c:	4650      	mov	r0, sl
   1b14e:	f7ff faf3 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                for( auto j = i-15; j <= i; j++ ){
   1b152:	f1a4 070f 	sub.w	r7, r4, #15
   1b156:	3401      	adds	r4, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b158:	682b      	ldr	r3, [r5, #0]
   1b15a:	5dd8      	ldrb	r0, [r3, r7]
   1b15c:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   1b160:	2b5e      	cmp	r3, #94	; 0x5e
   1b162:	bf88      	it	hi
   1b164:	202e      	movhi	r0, #46	; 0x2e
                                for( auto j = i-15; j <= i; j++ ){
   1b166:	3701      	adds	r7, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b168:	f7ff fca2 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1b16c:	42bc      	cmp	r4, r7
   1b16e:	d1f3      	bne.n	1b158 <Gap::init()+0x170>
                                Debug("\n    ");
   1b170:	4648      	mov	r0, r9
   1b172:	f7ff fae1 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1b176:	e7df      	b.n	1b138 <Gap::init()+0x150>
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b178:	202e      	movs	r0, #46	; 0x2e
   1b17a:	f7ff fc99 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1b17e:	455c      	cmp	r4, fp
   1b180:	d1a6      	bne.n	1b0d0 <Gap::init()+0xe8>
   1b182:	e7b2      	b.n	1b0ea <Gap::init()+0x102>
   1b184:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1b280 <Gap::init()+0x298>
                        Debug( "Flash::sdFlashWrite32\n" );
   1b188:	4839      	ldr	r0, [pc, #228]	; (1b270 <Gap::init()+0x288>)
   1b18a:	f7ff fad5 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b18e:	f898 3000 	ldrb.w	r3, [r8]
   1b192:	2b00      	cmp	r3, #0
   1b194:	d14d      	bne.n	1b232 <Gap::init()+0x24a>
                        u32 err = sd_flash_write((u32*)fullnameFlash_, vals, valsN );
   1b196:	4930      	ldr	r1, [pc, #192]	; (1b258 <Gap::init()+0x270>)
   1b198:	6828      	ldr	r0, [r5, #0]
   1b19a:	2208      	movs	r2, #8
   1b19c:	f7fe ff72 	bl	1a084 <sd_flash_write>
                        Debug( "    return val: %u\n", err );
   1b1a0:	4601      	mov	r1, r0
                        u32 err = sd_flash_write((u32*)fullnameFlash_, vals, valsN );
   1b1a2:	4604      	mov	r4, r0
                        Debug( "    return val: %u\n", err );
   1b1a4:	4833      	ldr	r0, [pc, #204]	; (1b274 <Gap::init()+0x28c>)
   1b1a6:	f7ff faa1 	bl	1a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b1aa:	2301      	movs	r3, #1
                        if( err != NRF_SUCCESS ) return false;
   1b1ac:	2c00      	cmp	r4, #0
   1b1ae:	d13a      	bne.n	1b226 <Gap::init()+0x23e>
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b1b0:	7034      	strb	r4, [r6, #0]
                        busy_ = true;
   1b1b2:	f888 3000 	strb.w	r3, [r8]
                        if( saveName_ ) saveName();                        
   1b1b6:	e723      	b.n	1b000 <Gap::init()+0x18>
   1b1b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1b280 <Gap::init()+0x298>
                        Debug( "Flash::sdFlashWrite32\n" );
   1b1bc:	482c      	ldr	r0, [pc, #176]	; (1b270 <Gap::init()+0x288>)
   1b1be:	f7ff fabb 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b1c2:	f898 9000 	ldrb.w	r9, [r8]
   1b1c6:	f1b9 0f00 	cmp.w	r9, #0
   1b1ca:	d12e      	bne.n	1b22a <Gap::init()+0x242>
                        u32 err = sd_flash_write((u32*)fullnameFlash_, vals, valsN );
   1b1cc:	4922      	ldr	r1, [pc, #136]	; (1b258 <Gap::init()+0x270>)
   1b1ce:	6828      	ldr	r0, [r5, #0]
   1b1d0:	2208      	movs	r2, #8
   1b1d2:	f7fe ff57 	bl	1a084 <sd_flash_write>
   1b1d6:	4604      	mov	r4, r0
                        Debug( "    return val: %u\n", err );
   1b1d8:	4601      	mov	r1, r0
   1b1da:	4826      	ldr	r0, [pc, #152]	; (1b274 <Gap::init()+0x28c>)
   1b1dc:	f7ff fa86 	bl	1a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>
                        if( err != NRF_SUCCESS ) return false;
   1b1e0:	b9fc      	cbnz	r4, 1b222 <Gap::init()+0x23a>
                        busy_ = true;
   1b1e2:	2301      	movs	r3, #1
   1b1e4:	f888 3000 	strb.w	r3, [r8]
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b1e8:	f886 9000 	strb.w	r9, [r6]
   1b1ec:	e708      	b.n	1b000 <Gap::init()+0x18>
                        Debug( "\n" );
   1b1ee:	4822      	ldr	r0, [pc, #136]	; (1b278 <Gap::init()+0x290>)
   1b1f0:	f7ff faa2 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        u32 err = sd_flash_page_erase(lastPageFlash_);
   1b1f4:	202f      	movs	r0, #47	; 0x2f
   1b1f6:	f7fe ff47 	bl	1a088 <sd_flash_page_erase>
                        if( err != NRF_SUCCESS ) return false;
   1b1fa:	2800      	cmp	r0, #0
   1b1fc:	f47f af27 	bne.w	1b04e <Gap::init()+0x66>
                        busy_ = true;
   1b200:	2301      	movs	r3, #1
   1b202:	f888 3000 	strb.w	r3, [r8]
                        return true;
   1b206:	e7bf      	b.n	1b188 <Gap::init()+0x1a0>
                        Debug( "\n" );
   1b208:	481b      	ldr	r0, [pc, #108]	; (1b278 <Gap::init()+0x290>)
   1b20a:	f7ff fa95 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        u32 err = sd_flash_page_erase(lastPageFlash_);
   1b20e:	202f      	movs	r0, #47	; 0x2f
   1b210:	f7fe ff3a 	bl	1a088 <sd_flash_page_erase>
                        if( err != NRF_SUCCESS ) return false;
   1b214:	2800      	cmp	r0, #0
   1b216:	f47f aef3 	bne.w	1b000 <Gap::init()+0x18>
                        busy_ = true;
   1b21a:	2301      	movs	r3, #1
   1b21c:	f888 3000 	strb.w	r3, [r8]
                        return true;
   1b220:	e7cc      	b.n	1b1bc <Gap::init()+0x1d4>
   1b222:	46b9      	mov	r9, r7
   1b224:	e7e0      	b.n	1b1e8 <Gap::init()+0x200>
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b226:	7033      	strb	r3, [r6, #0]
                        if( saveName_ ) saveName();                        
   1b228:	e714      	b.n	1b054 <Gap::init()+0x6c>
                            Debug( "    flash busy\n" );
   1b22a:	4814      	ldr	r0, [pc, #80]	; (1b27c <Gap::init()+0x294>)
   1b22c:	f7ff fa84 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            return false;
   1b230:	e7da      	b.n	1b1e8 <Gap::init()+0x200>
                            Debug( "    flash busy\n" );
   1b232:	4812      	ldr	r0, [pc, #72]	; (1b27c <Gap::init()+0x294>)
   1b234:	f7ff fa80 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b238:	2301      	movs	r3, #1
   1b23a:	7033      	strb	r3, [r6, #0]
                        if( saveName_ ) saveName();                        
   1b23c:	e70a      	b.n	1b054 <Gap::init()+0x6c>
                            Debug( "    flash busy\n" );
   1b23e:	480f      	ldr	r0, [pc, #60]	; (1b27c <Gap::init()+0x294>)
   1b240:	f7ff fa7a 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            return false;
   1b244:	e6dc      	b.n	1b000 <Gap::init()+0x18>
                            Debug( "    flash busy\n" );
   1b246:	480d      	ldr	r0, [pc, #52]	; (1b27c <Gap::init()+0x294>)
   1b248:	f7ff fa76 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1b24c:	e6ff      	b.n	1b04e <Gap::init()+0x66>
   1b24e:	bf00      	nop
   1b250:	20001a1b 	.word	0x20001a1b
   1b254:	0001eb80 	.word	0x0001eb80
   1b258:	20001a1c 	.word	0x20001a1c
   1b25c:	00a00050 	.word	0x00a00050
   1b260:	0001eb90 	.word	0x0001eb90
   1b264:	20001834 	.word	0x20001834
   1b268:	0001ebe4 	.word	0x0001ebe4
   1b26c:	0001ea8c 	.word	0x0001ea8c
   1b270:	0001ebb8 	.word	0x0001ebb8
   1b274:	0001ebd0 	.word	0x0001ebd0
   1b278:	0001eb64 	.word	0x0001eb64
   1b27c:	0001eba8 	.word	0x0001eba8
   1b280:	20001a1a 	.word	0x20001a1a
   1b284:	0001eaac 	.word	0x0001eaac
   1b288:	0001eaa8 	.word	0x0001eaa8

0001b28c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::stop()>:
                        power( txPower_ );
                        if( battery.isOk() ) board.ok(); else board.caution();

                    }

SA  stop            () -> void {
   1b28c:	b510      	push	{r4, lr}
                        if( not isActive_ ) return;
   1b28e:	4c07      	ldr	r4, [pc, #28]	; (1b2ac <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::stop()+0x20>)
   1b290:	7823      	ldrb	r3, [r4, #0]
   1b292:	b903      	cbnz	r3, 1b296 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::stop()+0xa>
                        error.check( sd_ble_gap_adv_stop(handle_) );
                        isActive_ = false;
                    }
   1b294:	bd10      	pop	{r4, pc}
                        error.check( sd_ble_gap_adv_stop(handle_) );
   1b296:	4b06      	ldr	r3, [pc, #24]	; (1b2b0 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::stop()+0x24>)
   1b298:	7818      	ldrb	r0, [r3, #0]
   1b29a:	f7fe fefb 	bl	1a094 <sd_ble_gap_adv_stop>
   1b29e:	b200      	sxth	r0, r0
   1b2a0:	f7ff fd9e 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        isActive_ = false;
   1b2a4:	2300      	movs	r3, #0
   1b2a6:	7023      	strb	r3, [r4, #0]
                    }
   1b2a8:	bd10      	pop	{r4, pc}
   1b2aa:	bf00      	nop
   1b2ac:	200019d0 	.word	0x200019d0
   1b2b0:	20001830 	.word	0x20001830

0001b2b4 <TemperatureTmp117<(unsigned char)5>::read()>:

SA  average         () { return tempH.average(); }
SA  histSize        () { return HistSiz_; }

                    // -999 = failed (and is not added to history)
SA  read            () {
   1b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

public:
SA  disable         ()          { reg.ENABLE = 0; }
SA  isEnabled       ()          { return reg.ENABLE; }
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
SA  address         (u8 v)      { reg.ADDRESS = v; } //0-127
   1b2b8:	4ba9      	ldr	r3, [pc, #676]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1b2ba:	4eaa      	ldr	r6, [pc, #680]	; (1b564 <TemperatureTmp117<(unsigned char)5>::read()+0x2b0>)
        public:
    //============

SA  init        ()              { twi_.init( Addr_, twi_.K400 );
                                  nrf_delay_ms( 2 ); //startup time is 2ms
                                  isInit_ = true;
   1b2bc:	4faa      	ldr	r7, [pc, #680]	; (1b568 <TemperatureTmp117<(unsigned char)5>::read()+0x2b4>)
                    reg.PIN_CNF = it.INIT_CNF;
   1b2be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b2c2:	2148      	movs	r1, #72	; 0x48
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b2c4:	f04f 60c8 	mov.w	r0, #104857600	; 0x6400000
SA  address         (u8 v)      { reg.ADDRESS = v; } //0-127
   1b2c8:	f8c3 1588 	str.w	r1, [r3, #1416]	; 0x588
                        reg.PSEL_SCL = e;
                        if( not on ) pinSclDisconnect();
                    } 

SA  pinSda          (PIN e, bool on = true) {
                        reg.PSEL_SDA = e;
   1b2cc:	240d      	movs	r4, #13
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b2ce:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b2d2:	f240 610c 	movw	r1, #1548	; 0x60c
                        reg.PSEL_SCL = e;
   1b2d6:	200f      	movs	r0, #15
                    reg.PIN_CNF = it.INIT_CNF;
   1b2d8:	f8c2 1734 	str.w	r1, [r2, #1844]	; 0x734
   1b2dc:	f8c2 173c 	str.w	r1, [r2, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1b2e0:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b2e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
                        reg.PSEL_SCL = e;
   1b2e8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1b2ec:	2406      	movs	r4, #6
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b2ee:	f240 2001 	movw	r0, #513	; 0x201
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b2f2:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
   1b2f6:	b087      	sub	sp, #28
                    reg.PIN_CNF = it.INIT_CNF;
   1b2f8:	f8c2 0744 	str.w	r0, [r2, #1860]	; 0x744
   1b2fc:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b300:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    delay_cycles(cycles);
   1b304:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b308:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
   1b30c:	47b0      	blx	r6
   1b30e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b312:	47b0      	blx	r6
   1b314:	2301      	movs	r3, #1
   1b316:	703b      	strb	r3, [r7, #0]
                                }
   1b318:	247d      	movs	r4, #125	; 0x7d
   1b31a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b31e:	47b0      	blx	r6
   1b320:	3c01      	subs	r4, #1
   1b322:	d1fa      	bne.n	1b31a <TemperatureTmp117<(unsigned char)5>::read()+0x66>
SA  address         (u8 v)      { reg.ADDRESS = v; } //0-127
   1b324:	4c8e      	ldr	r4, [pc, #568]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
   1b326:	f10d 0910 	add.w	r9, sp, #16
   1b32a:	f10d 0814 	add.w	r8, sp, #20
   1b32e:	2514      	movs	r5, #20
   1b330:	f04f 0a48 	mov.w	sl, #72	; 0x48
                                  isInit_ = true;
   1b334:	f04f 0b01 	mov.w	fp, #1
                    if( not isInit_ ) init();
   1b338:	783b      	ldrb	r3, [r7, #0]
   1b33a:	2b00      	cmp	r3, #0
   1b33c:	d073      	beq.n	1b426 <TemperatureTmp117<(unsigned char)5>::read()+0x172>

//--------------------
//  events
//--------------------
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b33e:	2300      	movs	r3, #0
                        reg.RXD.MAXCNT = len;
   1b340:	2002      	movs	r0, #2
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b342:	2107      	movs	r1, #7
SA  startRxStop     ()          { clearEvents(); shortsSetup(LASTRX_STOP); startRx(); }

//--------------------
//  shorts
//--------------------
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b344:	f44f 5284 	mov.w	r2, #4224	; 0x1080
                    u8 tbuf[1] = { r }; //register
   1b348:	f88d b010 	strb.w	fp, [sp, #16]
                        reg.TXD.MAXCNT = len;
   1b34c:	f8c4 b548 	str.w	fp, [r4, #1352]	; 0x548
                        reg.TXD.PTR = addr;
   1b350:	f8c4 9544 	str.w	r9, [r4, #1348]	; 0x544
                        reg.RXD.MAXCNT = len;
   1b354:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1b358:	f8c4 8534 	str.w	r8, [r4, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b35c:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1b360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1b364:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1b368:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1b36c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1b370:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1b374:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1b378:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b37c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1b380:	f8c4 b008 	str.w	fp, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1b384:	e003      	b.n	1b38e <TemperatureTmp117<(unsigned char)5>::read()+0xda>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1b386:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124

//TODO - add timeouts so if something wrong we don't block forever

SA  waitForStop     () {
                        while( not isStopped() ){
                            if( isError() ){
   1b38a:	2b00      	cmp	r3, #0
   1b38c:	d144      	bne.n	1b418 <TemperatureTmp117<(unsigned char)5>::read()+0x164>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b38e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                        while( not isStopped() ){
   1b392:	2b00      	cmp	r3, #0
   1b394:	d0f7      	beq.n	1b386 <TemperatureTmp117<(unsigned char)5>::read()+0xd2>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1b396:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
SA  writeRead       (const u8 (&txbuf)[NT], T (&rxbuf)[NR]) {  
                        txBufferSet( txbuf );
                        rxBufferSet( rxbuf );
                        startTxRxStop(); 
                        if( not waitForStop() ) return false;
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b39a:	2b01      	cmp	r3, #1
   1b39c:	d06d      	beq.n	1b47a <TemperatureTmp117<(unsigned char)5>::read()+0x1c6>
SA  disable         ()          { reg.ENABLE = 0; }
   1b39e:	2300      	movs	r3, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b3a0:	2107      	movs	r1, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1b3a2:	2206      	movs	r2, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1b3a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b3a8:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1b3ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b3b0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1b3b4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1b3b8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b3bc:	47b0      	blx	r6
                        // while( i and not tmp117.oneShot1() ){ nrf_delay_ms(1); i--; }
                        // nrf_delay_ms(16); //~15.5ms for 1 conversion 
nrf_delay_ms(125);
                        //poll for data ready (up to 20ms)
                        i = 20; //20ms
                        while( i and not tmp117.isDataReady() ){ nrf_delay_ms(1); i--; }
   1b3be:	3d01      	subs	r5, #1
   1b3c0:	d1ba      	bne.n	1b338 <TemperatureTmp117<(unsigned char)5>::read()+0x84>
SA  disable         ()          { reg.ENABLE = 0; }
   1b3c2:	4b67      	ldr	r3, [pc, #412]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
                        bool ok = i and tmp117.tempRaw(t);
                        tmp117.deinit(); //turn off power to ic

                        DebugFuncHeader();
                        if( not i )      { Debug("  {Fred}timeout, ready bit not set{Fwhite}\n"); return f; }
   1b3c4:	4c69      	ldr	r4, [pc, #420]	; (1b56c <TemperatureTmp117<(unsigned char)5>::read()+0x2b8>)
   1b3c6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b3ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    reg.PIN_CNF = it.INIT_CNF;
   1b3ce:	2202      	movs	r2, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b3d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1b3d4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b3d8:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1b3dc:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b3e0:	703d      	strb	r5, [r7, #0]
                        DebugFuncHeader();
   1b3e2:	f7fe fa09 	bl	197f8 <app_timer_cnt_get>
   1b3e6:	4962      	ldr	r1, [pc, #392]	; (1b570 <TemperatureTmp117<(unsigned char)5>::read()+0x2bc>)
   1b3e8:	4a62      	ldr	r2, [pc, #392]	; (1b574 <TemperatureTmp117<(unsigned char)5>::read()+0x2c0>)
   1b3ea:	9202      	str	r2, [sp, #8]
   1b3ec:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b3f0:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
   1b3f4:	257b      	movs	r5, #123	; 0x7b
   1b3f6:	e9cd 1500 	strd	r1, r5, [sp]
   1b3fa:	0b82      	lsrs	r2, r0, #14
   1b3fc:	495e      	ldr	r1, [pc, #376]	; (1b578 <TemperatureTmp117<(unsigned char)5>::read()+0x2c4>)
   1b3fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1b402:	f04f 0000 	mov.w	r0, #0
   1b406:	f7ff fa31 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        if( not i )      { Debug("  {Fred}timeout, ready bit not set{Fwhite}\n"); return f; }
   1b40a:	485c      	ldr	r0, [pc, #368]	; (1b57c <TemperatureTmp117<(unsigned char)5>::read()+0x2c8>)
   1b40c:	f7ff f994 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>

                        f = tmp117.x10F( t );
                        f = tempH.addHistory( f );
                        Debug("  Tmp117 raw: %d  F: %02d.%d\n", t, f/10, f%10);
                        return f;
                    }
   1b410:	4620      	mov	r0, r4
   1b412:	b007      	add	sp, #28
   1b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1b418:	f8c4 b014 	str.w	fp, [r4, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b41c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                                while( not isStopped() ){}
   1b420:	2b00      	cmp	r3, #0
   1b422:	d0fb      	beq.n	1b41c <TemperatureTmp117<(unsigned char)5>::read()+0x168>
   1b424:	e7c8      	b.n	1b3b8 <TemperatureTmp117<(unsigned char)5>::read()+0x104>
   1b426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b42a:	f04f 61c8 	mov.w	r1, #104857600	; 0x6400000
SA  address         (u8 v)      { reg.ADDRESS = v; } //0-127
   1b42e:	f8c4 a588 	str.w	sl, [r4, #1416]	; 0x588
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b432:	f240 620c 	movw	r2, #1548	; 0x60c
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b436:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524
                        reg.PSEL_SDA = e;
   1b43a:	200d      	movs	r0, #13
                        reg.PSEL_SCL = e;
   1b43c:	210f      	movs	r1, #15
                    reg.PIN_CNF = it.INIT_CNF;
   1b43e:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1b442:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1b446:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b44a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                        reg.PSEL_SCL = e;
   1b44e:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b452:	f240 2001 	movw	r0, #513	; 0x201
SA  enable          ()          { reg.ENABLE = 6; }
   1b456:	2106      	movs	r1, #6
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b458:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b45c:	f8c3 0744 	str.w	r0, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b460:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1b464:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b468:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1b46c:	47b0      	blx	r6
   1b46e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b472:	47b0      	blx	r6
                                  isInit_ = true;
   1b474:	f887 b000 	strb.w	fp, [r7]
                                }
   1b478:	e761      	b.n	1b33e <TemperatureTmp117<(unsigned char)5>::read()+0x8a>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1b47a:	f8d4 153c 	ldr.w	r1, [r4, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b47e:	2902      	cmp	r1, #2
   1b480:	d18d      	bne.n	1b39e <TemperatureTmp117<(unsigned char)5>::read()+0xea>
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b482:	f89d 2014 	ldrb.w	r2, [sp, #20]
                        while( i and not tmp117.isDataReady() ){ nrf_delay_ms(1); i--; }
   1b486:	0692      	lsls	r2, r2, #26
   1b488:	d596      	bpl.n	1b3b8 <TemperatureTmp117<(unsigned char)5>::read()+0x104>
                    u8 tbuf[1] = { r }; //register
   1b48a:	2000      	movs	r0, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b48c:	2607      	movs	r6, #7
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b48e:	f44f 5584 	mov.w	r5, #4224	; 0x1080
   1b492:	f88d 0010 	strb.w	r0, [sp, #16]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b496:	4a32      	ldr	r2, [pc, #200]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
                        reg.TXD.MAXCNT = len;
   1b498:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
                        reg.TXD.PTR = addr;
   1b49c:	f8c4 9544 	str.w	r9, [r4, #1348]	; 0x544
                        reg.RXD.MAXCNT = len;
   1b4a0:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1b4a4:	f8c4 8534 	str.w	r8, [r4, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b4a8:	f8c4 64c4 	str.w	r6, [r4, #1220]	; 0x4c4
   1b4ac:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1b4b0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1b4b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1b4b8:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1b4bc:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1b4c0:	f8c4 015c 	str.w	r0, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1b4c4:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b4c8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1b4cc:	60a3      	str	r3, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1b4ce:	e004      	b.n	1b4da <TemperatureTmp117<(unsigned char)5>::read()+0x226>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1b4d0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
                            if( isError() ){
   1b4d4:	2b00      	cmp	r3, #0
   1b4d6:	f040 80c0 	bne.w	1b65a <TemperatureTmp117<(unsigned char)5>::read()+0x3a6>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b4da:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
                        while( not isStopped() ){
   1b4de:	2b00      	cmp	r3, #0
   1b4e0:	d0f6      	beq.n	1b4d0 <TemperatureTmp117<(unsigned char)5>::read()+0x21c>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1b4e2:	f8d2 454c 	ldr.w	r4, [r2, #1356]	; 0x54c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b4e6:	2c01      	cmp	r4, #1
   1b4e8:	d04c      	beq.n	1b584 <TemperatureTmp117<(unsigned char)5>::read()+0x2d0>
SA  disable         ()          { reg.ENABLE = 0; }
   1b4ea:	4b1d      	ldr	r3, [pc, #116]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
   1b4ec:	2200      	movs	r2, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b4ee:	2007      	movs	r0, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1b4f0:	2106      	movs	r1, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1b4f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b4f6:	f8c3 04c4 	str.w	r0, [r3, #1220]	; 0x4c4
   1b4fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b4fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1b502:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
SA  disable         ()          { reg.ENABLE = 0; }
   1b506:	4916      	ldr	r1, [pc, #88]	; (1b560 <TemperatureTmp117<(unsigned char)5>::read()+0x2ac>)
                        if( not ok )     { Debug("  {Fred}failed to read temp value{Fwhite}\n"); return f; }
   1b508:	4c18      	ldr	r4, [pc, #96]	; (1b56c <TemperatureTmp117<(unsigned char)5>::read()+0x2b8>)
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b50a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b50e:	2200      	movs	r2, #0
   1b510:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
   1b514:	f44f 3000 	mov.w	r0, #131072	; 0x20000
                    reg.PIN_CNF = it.INIT_CNF;
   1b518:	2102      	movs	r1, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b51a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b51e:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
   1b522:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b526:	703a      	strb	r2, [r7, #0]
                        DebugFuncHeader();
   1b528:	f7fe f966 	bl	197f8 <app_timer_cnt_get>
   1b52c:	4910      	ldr	r1, [pc, #64]	; (1b570 <TemperatureTmp117<(unsigned char)5>::read()+0x2bc>)
   1b52e:	4a11      	ldr	r2, [pc, #68]	; (1b574 <TemperatureTmp117<(unsigned char)5>::read()+0x2c0>)
   1b530:	9202      	str	r2, [sp, #8]
   1b532:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b536:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
   1b53a:	257b      	movs	r5, #123	; 0x7b
   1b53c:	0b82      	lsrs	r2, r0, #14
   1b53e:	e9cd 1500 	strd	r1, r5, [sp]
   1b542:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1b546:	490c      	ldr	r1, [pc, #48]	; (1b578 <TemperatureTmp117<(unsigned char)5>::read()+0x2c4>)
   1b548:	f04f 0000 	mov.w	r0, #0
   1b54c:	f7ff f98e 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        if( not ok )     { Debug("  {Fred}failed to read temp value{Fwhite}\n"); return f; }
   1b550:	480b      	ldr	r0, [pc, #44]	; (1b580 <TemperatureTmp117<(unsigned char)5>::read()+0x2cc>)
   1b552:	f7ff f8f1 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    }
   1b556:	4620      	mov	r0, r4
   1b558:	b007      	add	sp, #28
   1b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b55e:	bf00      	nop
   1b560:	40003000 	.word	0x40003000
   1b564:	0001eeb0 	.word	0x0001eeb0
   1b568:	20001a0d 	.word	0x20001a0d
   1b56c:	fffffc19 	.word	0xfffffc19
   1b570:	0001ec00 	.word	0x0001ec00
   1b574:	0001ebf8 	.word	0x0001ebf8
   1b578:	0001eae0 	.word	0x0001eae0
   1b57c:	0001ec60 	.word	0x0001ec60
   1b580:	0001ec14 	.word	0x0001ec14
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1b584:	f8d2 053c 	ldr.w	r0, [r2, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b588:	2802      	cmp	r0, #2
   1b58a:	d1ae      	bne.n	1b4ea <TemperatureTmp117<(unsigned char)5>::read()+0x236>
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b58c:	f89d 6014 	ldrb.w	r6, [sp, #20]
   1b590:	f89d 5015 	ldrb.w	r5, [sp, #21]
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  disable         ()          { reg.ENABLE = 0; }
   1b598:	2100      	movs	r1, #0
   1b59a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
   1b59e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   1b5a2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1b5a6:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b5aa:	f8c3 0734 	str.w	r0, [r3, #1844]	; 0x734
   1b5ae:	f8c3 073c 	str.w	r0, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b5b2:	7039      	strb	r1, [r7, #0]
                        DebugFuncHeader();
   1b5b4:	f7fe f920 	bl	197f8 <app_timer_cnt_get>
   1b5b8:	492e      	ldr	r1, [pc, #184]	; (1b674 <TemperatureTmp117<(unsigned char)5>::read()+0x3c0>)
   1b5ba:	4a2f      	ldr	r2, [pc, #188]	; (1b678 <TemperatureTmp117<(unsigned char)5>::read()+0x3c4>)
   1b5bc:	9202      	str	r2, [sp, #8]
   1b5be:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b5c2:	ebc3 1703 	rsb	r7, r3, r3, lsl #4
   1b5c6:	267b      	movs	r6, #123	; 0x7b
   1b5c8:	e9cd 1600 	strd	r1, r6, [sp]
   1b5cc:	0b82      	lsrs	r2, r0, #14
   1b5ce:	492b      	ldr	r1, [pc, #172]	; (1b67c <TemperatureTmp117<(unsigned char)5>::read()+0x3c8>)
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b5d0:	b22d      	sxth	r5, r5
   1b5d2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1b5d6:	f04f 0000 	mov.w	r0, #0
   1b5da:	f7ff f947 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        if( t == -32768 ){ Debug("  returned default temp value\n"); return f; }
   1b5de:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
   1b5e2:	d042      	beq.n	1b66a <TemperatureTmp117<(unsigned char)5>::read()+0x3b6>
                        if( not isInit ){ //first time, populate all with same value
   1b5e4:	4826      	ldr	r0, [pc, #152]	; (1b680 <TemperatureTmp117<(unsigned char)5>::read()+0x3cc>)
    x10 = 5/64 = .078125, x100 = 25/32 = 0.78125, x1000 = 125/16 = 7.8125

    normal mul/div- x100C -> v*78125/100000, x100F -> v*140625/100000 + 3200
    */

SA  x10F    (i16 v) -> i16      { return ((v * 9L)>>6) + 320; }
   1b5e6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1b5ea:	119b      	asrs	r3, r3, #6
   1b5ec:	7802      	ldrb	r2, [r0, #0]
   1b5ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   1b5f2:	b21b      	sxth	r3, r3
   1b5f4:	b33a      	cbz	r2, 1b646 <TemperatureTmp117<(unsigned char)5>::read()+0x392>
   1b5f6:	4923      	ldr	r1, [pc, #140]	; (1b684 <TemperatureTmp117<(unsigned char)5>::read()+0x3d0>)
                        tempHistory_[idx++] = v;
   1b5f8:	4a23      	ldr	r2, [pc, #140]	; (1b688 <TemperatureTmp117<(unsigned char)5>::read()+0x3d4>)
   1b5fa:	4c24      	ldr	r4, [pc, #144]	; (1b68c <TemperatureTmp117<(unsigned char)5>::read()+0x3d8>)
   1b5fc:	7810      	ldrb	r0, [r2, #0]
   1b5fe:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   1b602:	bfa8      	it	ge
   1b604:	f44f 63e1 	movge.w	r3, #1800	; 0x708
   1b608:	429c      	cmp	r4, r3
   1b60a:	bfb8      	it	lt
   1b60c:	461c      	movlt	r4, r3
   1b60e:	1c43      	adds	r3, r0, #1
   1b610:	b2db      	uxtb	r3, r3
                        if( idx >= HistSiz_ ) idx = 0;
   1b612:	2b04      	cmp	r3, #4
                        tempHistory_[idx++] = v;
   1b614:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   1b616:	bf84      	itt	hi
   1b618:	2300      	movhi	r3, #0
   1b61a:	7013      	strbhi	r3, [r2, #0]
                        Debug("  Tmp117 raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1b61c:	4b1c      	ldr	r3, [pc, #112]	; (1b690 <TemperatureTmp117<(unsigned char)5>::read()+0x3dc>)
                        tempHistory_[idx++] = v;
   1b61e:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
                        Debug("  Tmp117 raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1b622:	fb83 2304 	smull	r2, r3, r3, r4
   1b626:	17e1      	asrs	r1, r4, #31
   1b628:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
   1b62c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1b630:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
   1b634:	4628      	mov	r0, r5
   1b636:	b212      	sxth	r2, r2
   1b638:	b209      	sxth	r1, r1
   1b63a:	f7ff f993 	bl	1a964 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]>
                    }
   1b63e:	4620      	mov	r0, r4
   1b640:	b007      	add	sp, #28
   1b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            for( auto& i : tempHistory_ ) i = v;
   1b646:	490f      	ldr	r1, [pc, #60]	; (1b684 <TemperatureTmp117<(unsigned char)5>::read()+0x3d0>)
                            isInit = true;
   1b648:	7004      	strb	r4, [r0, #0]
   1b64a:	f363 020f 	bfi	r2, r3, #0, #16
   1b64e:	f363 421f 	bfi	r2, r3, #16, #16
                            for( auto& i : tempHistory_ ) i = v;
   1b652:	600a      	str	r2, [r1, #0]
   1b654:	604a      	str	r2, [r1, #4]
   1b656:	810b      	strh	r3, [r1, #8]
   1b658:	e7ce      	b.n	1b5f8 <TemperatureTmp117<(unsigned char)5>::read()+0x344>
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1b65a:	2301      	movs	r3, #1
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b65c:	490d      	ldr	r1, [pc, #52]	; (1b694 <TemperatureTmp117<(unsigned char)5>::read()+0x3e0>)
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1b65e:	6153      	str	r3, [r2, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b660:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
                                while( not isStopped() ){}
   1b664:	2b00      	cmp	r3, #0
   1b666:	d0fb      	beq.n	1b660 <TemperatureTmp117<(unsigned char)5>::read()+0x3ac>
   1b668:	e74d      	b.n	1b506 <TemperatureTmp117<(unsigned char)5>::read()+0x252>
                        if( t == -32768 ){ Debug("  returned default temp value\n"); return f; }
   1b66a:	480b      	ldr	r0, [pc, #44]	; (1b698 <TemperatureTmp117<(unsigned char)5>::read()+0x3e4>)
   1b66c:	4c0b      	ldr	r4, [pc, #44]	; (1b69c <TemperatureTmp117<(unsigned char)5>::read()+0x3e8>)
   1b66e:	f7ff f863 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1b672:	e6cd      	b.n	1b410 <TemperatureTmp117<(unsigned char)5>::read()+0x15c>
   1b674:	0001ec00 	.word	0x0001ec00
   1b678:	0001ebf8 	.word	0x0001ebf8
   1b67c:	0001eae0 	.word	0x0001eae0
   1b680:	200019a5 	.word	0x200019a5
   1b684:	20001a10 	.word	0x20001a10
   1b688:	200019a4 	.word	0x200019a4
   1b68c:	fffffe70 	.word	0xfffffe70
   1b690:	66666667 	.word	0x66666667
   1b694:	40003000 	.word	0x40003000
   1b698:	0001ec40 	.word	0x0001ec40
   1b69c:	fffffc19 	.word	0xfffffc19

0001b6a0 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])>:
SA  update          ( u8 (&buf)[31] ) -> void {
   1b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a4:	b08b      	sub	sp, #44	; 0x2c
   1b6a6:	4607      	mov	r7, r0
                        i16 f = temp_.read(); //~50us
   1b6a8:	f7ff fe04 	bl	1b2b4 <TemperatureTmp117<(unsigned char)5>::read()>
                        u8 f10 = (f < 0) ? -f%10 : f%10;
   1b6ac:	2800      	cmp	r0, #0
   1b6ae:	db36      	blt.n	1b71e <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x7e>
   1b6b0:	4c64      	ldr	r4, [pc, #400]	; (1b844 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1a4>)
   1b6b2:	17c6      	asrs	r6, r0, #31
   1b6b4:	fb84 3400 	smull	r3, r4, r4, r0
   1b6b8:	ebc6 04a4 	rsb	r4, r6, r4, asr #2
   1b6bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1b6c0:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
   1b6c4:	b224      	sxth	r4, r4
                        f = f/10;
   1b6c6:	4b5f      	ldr	r3, [pc, #380]	; (1b844 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1a4>)
                        if( saveName_ ) saveName();                        
   1b6c8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 1b87c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1dc>
   1b6cc:	fb83 3000 	smull	r3, r0, r3, r0
   1b6d0:	f899 3000 	ldrb.w	r3, [r9]
   1b6d4:	ebc6 00a0 	rsb	r0, r6, r0, asr #2
                        snprintf( nambuf, 23, "%d.%uF %s", f, f10, flash.readName() );
   1b6d8:	b206      	sxth	r6, r0
   1b6da:	bb5b      	cbnz	r3, 1b734 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x94>
   1b6dc:	4a5a      	ldr	r2, [pc, #360]	; (1b848 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1a8>)
   1b6de:	9400      	str	r4, [sp, #0]
   1b6e0:	4633      	mov	r3, r6
   1b6e2:	9201      	str	r2, [sp, #4]
   1b6e4:	2117      	movs	r1, #23
   1b6e6:	4a59      	ldr	r2, [pc, #356]	; (1b84c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1ac>)
   1b6e8:	a804      	add	r0, sp, #16
   1b6ea:	f001 f8e1 	bl	1c8b0 <sniprintf>
                        u8 idx = Flags01::make( buf, BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED ); //3
   1b6ee:	2104      	movs	r1, #4
   1b6f0:	4638      	mov	r0, r7
   1b6f2:	f7fe fecb 	bl	1a48c <Flags01::make(unsigned char*, unsigned char)>
   1b6f6:	b2c4      	uxtb	r4, r0
                        idx += BatteryService180F::make( &buf[idx] ); //4
   1b6f8:	1938      	adds	r0, r7, r4
   1b6fa:	f7ff fab5 	bl	1ac68 <BatteryService180F::make(unsigned char*)>
   1b6fe:	4404      	add	r4, r0
   1b700:	b2e4      	uxtb	r4, r4
                        idx += CompleteName09::make( &buf[idx], nambuf, 31-7-2 ); // up to 22 chars
   1b702:	1938      	adds	r0, r7, r4
   1b704:	a904      	add	r1, sp, #16
   1b706:	2216      	movs	r2, #22
   1b708:	f7fe fec8 	bl	1a49c <CompleteName09::make(unsigned char*, char const*, unsigned char)>
   1b70c:	4404      	add	r4, r0
   1b70e:	b2e4      	uxtb	r4, r4
                        if( idx < 31 ) buf[idx] = 0;
   1b710:	2c1e      	cmp	r4, #30
   1b712:	d801      	bhi.n	1b718 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x78>
   1b714:	2300      	movs	r3, #0
   1b716:	553b      	strb	r3, [r7, r4]
                    }
   1b718:	b00b      	add	sp, #44	; 0x2c
   1b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        u8 f10 = (f < 0) ? -f%10 : f%10;
   1b71e:	4c4c      	ldr	r4, [pc, #304]	; (1b850 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1b0>)
   1b720:	4243      	negs	r3, r0
   1b722:	fba4 2403 	umull	r2, r4, r4, r3
   1b726:	08e4      	lsrs	r4, r4, #3
   1b728:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1b72c:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
   1b730:	17c6      	asrs	r6, r0, #31
   1b732:	e7c8      	b.n	1b6c6 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x26>
                        Debug( "Flash::saveName : %s\n", fullnameRam_ );          
   1b734:	4944      	ldr	r1, [pc, #272]	; (1b848 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1a8>)
   1b736:	4847      	ldr	r0, [pc, #284]	; (1b854 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1b4>)
   1b738:	f7ff f83c 	bl	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
                        if( not nrf_sdh_is_enabled() ) return; //these functions use sd
   1b73c:	f000 ff92 	bl	1c664 <nrf_sdh_is_enabled>
   1b740:	4682      	mov	sl, r0
   1b742:	2800      	cmp	r0, #0
   1b744:	d0ca      	beq.n	1b6dc <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x3c>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b746:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1b880 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1e0>
   1b74a:	f8d8 1000 	ldr.w	r1, [r8]
   1b74e:	1e4b      	subs	r3, r1, #1
   1b750:	311f      	adds	r1, #31
   1b752:	e001      	b.n	1b758 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0xb8>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b754:	428b      	cmp	r3, r1
   1b756:	d040      	beq.n	1b7da <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x13a>
                            if( fullnameFlash_[i] != 0xFF ) return false;
   1b758:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b75c:	2aff      	cmp	r2, #255	; 0xff
   1b75e:	d0f9      	beq.n	1b754 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0xb4>
                        if( busy_ ){
   1b760:	4b3d      	ldr	r3, [pc, #244]	; (1b858 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1b8>)
                        Debug( "Flash::sdErasePage\n" );
   1b762:	483e      	ldr	r0, [pc, #248]	; (1b85c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1bc>)
                        if( busy_ ){
   1b764:	9302      	str	r3, [sp, #8]
   1b766:	461d      	mov	r5, r3
                        Debug( "Flash::sdErasePage\n" );
   1b768:	f7fe ffe6 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b76c:	782b      	ldrb	r3, [r5, #0]
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d164      	bne.n	1b83c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x19c>
                        Debug( "fullname flash values:\n    " );
   1b772:	483b      	ldr	r0, [pc, #236]	; (1b860 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1c0>)
   1b774:	f7fe ffe0 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            Debug( "%02X", fullnameFlash_[i] );
   1b778:	f8d8 3000 	ldr.w	r3, [r8]
   1b77c:	7818      	ldrb	r0, [r3, #0]
   1b77e:	f7ff f96f 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                        for( auto i = 0; i < fullnameSiz_; i++ ){
   1b782:	2501      	movs	r5, #1
   1b784:	e002      	b.n	1b78c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0xec>
   1b786:	3501      	adds	r5, #1
   1b788:	2d20      	cmp	r5, #32
   1b78a:	d042      	beq.n	1b812 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x172>
                            Debug( "%02X", fullnameFlash_[i] );
   1b78c:	f8d8 3000 	ldr.w	r3, [r8]
   1b790:	5d58      	ldrb	r0, [r3, r5]
   1b792:	f7ff f965 	bl	1aa60 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.0]>
                            if( (i bitand 15) == 15 ){
   1b796:	f005 030f 	and.w	r3, r5, #15
   1b79a:	2b0f      	cmp	r3, #15
   1b79c:	d1f3      	bne.n	1b786 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0xe6>
                                Debug(" ");
   1b79e:	4831      	ldr	r0, [pc, #196]	; (1b864 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1c4>)
   1b7a0:	f7fe ffca 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                for( auto j = i-15; j <= i; j++ ){
   1b7a4:	f1a5 0b0f 	sub.w	fp, r5, #15
   1b7a8:	3501      	adds	r5, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b7aa:	f8d8 2000 	ldr.w	r2, [r8]
   1b7ae:	f812 000b 	ldrb.w	r0, [r2, fp]
   1b7b2:	f1a0 0221 	sub.w	r2, r0, #33	; 0x21
   1b7b6:	2a5e      	cmp	r2, #94	; 0x5e
                                for( auto j = i-15; j <= i; j++ ){
   1b7b8:	f10b 0b01 	add.w	fp, fp, #1
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b7bc:	d807      	bhi.n	1b7ce <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x12e>
   1b7be:	f7ff f977 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1b7c2:	455d      	cmp	r5, fp
   1b7c4:	d1f1      	bne.n	1b7aa <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x10a>
                                Debug("\n    ");
   1b7c6:	4828      	ldr	r0, [pc, #160]	; (1b868 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1c8>)
   1b7c8:	f7fe ffb6 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1b7cc:	e7dc      	b.n	1b788 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0xe8>
                                    Debug("%c", fullnameFlash_[j] > ' ' and fullnameFlash_[j] < 128 ? 
   1b7ce:	202e      	movs	r0, #46	; 0x2e
   1b7d0:	f7ff f96e 	bl	1aab0 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.1]>
                                for( auto j = i-15; j <= i; j++ ){
   1b7d4:	45ab      	cmp	fp, r5
   1b7d6:	d1e8      	bne.n	1b7aa <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x10a>
   1b7d8:	e7f5      	b.n	1b7c6 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x126>
   1b7da:	4b1f      	ldr	r3, [pc, #124]	; (1b858 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1b8>)
   1b7dc:	9302      	str	r3, [sp, #8]
                        Debug( "Flash::sdFlashWrite32\n" );
   1b7de:	4823      	ldr	r0, [pc, #140]	; (1b86c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1cc>)
   1b7e0:	f7fe ffaa 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        if( busy_ ){
   1b7e4:	9b02      	ldr	r3, [sp, #8]
   1b7e6:	781b      	ldrb	r3, [r3, #0]
   1b7e8:	bb13      	cbnz	r3, 1b830 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x190>
                        u32 err = sd_flash_write((u32*)fullnameFlash_, vals, valsN );
   1b7ea:	4917      	ldr	r1, [pc, #92]	; (1b848 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1a8>)
   1b7ec:	f8d8 0000 	ldr.w	r0, [r8]
   1b7f0:	9303      	str	r3, [sp, #12]
   1b7f2:	2208      	movs	r2, #8
   1b7f4:	f7fe fc46 	bl	1a084 <sd_flash_write>
   1b7f8:	4605      	mov	r5, r0
                        Debug( "    return val: %u\n", err );
   1b7fa:	4601      	mov	r1, r0
   1b7fc:	481c      	ldr	r0, [pc, #112]	; (1b870 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1d0>)
   1b7fe:	f7fe ff75 	bl	1a6ec <int Print<DevRtt<0>, unsigned long>(DevRtt<0>, char const*, unsigned long) [clone .isra.0]>
                        if( err != NRF_SUCCESS ) return false;
   1b802:	b99d      	cbnz	r5, 1b82c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x18c>
                        busy_ = true;
   1b804:	9b02      	ldr	r3, [sp, #8]
   1b806:	2201      	movs	r2, #1
   1b808:	701a      	strb	r2, [r3, #0]
                        return true;                       
   1b80a:	9b03      	ldr	r3, [sp, #12]
                        saveName_ = not sdFlashWrite32( (const u32*)fullnameRam_, fullnameSiz_/4 );
   1b80c:	f889 3000 	strb.w	r3, [r9]
   1b810:	e764      	b.n	1b6dc <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x3c>
                        Debug( "\n" );
   1b812:	4818      	ldr	r0, [pc, #96]	; (1b874 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1d4>)
   1b814:	f7fe ff90 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        u32 err = sd_flash_page_erase(lastPageFlash_);
   1b818:	202f      	movs	r0, #47	; 0x2f
   1b81a:	f7fe fc35 	bl	1a088 <sd_flash_page_erase>
                        if( err != NRF_SUCCESS ) return false;
   1b81e:	2800      	cmp	r0, #0
   1b820:	f47f af5c 	bne.w	1b6dc <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x3c>
                        busy_ = true;
   1b824:	9a02      	ldr	r2, [sp, #8]
   1b826:	2301      	movs	r3, #1
   1b828:	7013      	strb	r3, [r2, #0]
                        return true;
   1b82a:	e7d8      	b.n	1b7de <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x13e>
   1b82c:	4653      	mov	r3, sl
   1b82e:	e7ed      	b.n	1b80c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x16c>
                            Debug( "    flash busy\n" );
   1b830:	4811      	ldr	r0, [pc, #68]	; (1b878 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1d8>)
   1b832:	9302      	str	r3, [sp, #8]
   1b834:	f7fe ff80 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            return false;
   1b838:	9b02      	ldr	r3, [sp, #8]
   1b83a:	e7e7      	b.n	1b80c <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x16c>
                            Debug( "    flash busy\n" );
   1b83c:	480e      	ldr	r0, [pc, #56]	; (1b878 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x1d8>)
   1b83e:	f7fe ff7b 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                            return false;
   1b842:	e74b      	b.n	1b6dc <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])+0x3c>
   1b844:	66666667 	.word	0x66666667
   1b848:	20001a1c 	.word	0x20001a1c
   1b84c:	0001ec8c 	.word	0x0001ec8c
   1b850:	cccccccd 	.word	0xcccccccd
   1b854:	0001eb90 	.word	0x0001eb90
   1b858:	20001a1a 	.word	0x20001a1a
   1b85c:	0001ebe4 	.word	0x0001ebe4
   1b860:	0001ea8c 	.word	0x0001ea8c
   1b864:	0001eaac 	.word	0x0001eaac
   1b868:	0001eaa8 	.word	0x0001eaa8
   1b86c:	0001ebb8 	.word	0x0001ebb8
   1b870:	0001ebd0 	.word	0x0001ebd0
   1b874:	0001eb64 	.word	0x0001eb64
   1b878:	0001eba8 	.word	0x0001eba8
   1b87c:	20001a1b 	.word	0x20001a1b
   1b880:	20001834 	.word	0x20001834

0001b884 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::power(unsigned char)>:
SA  power           (u8 v) {
   1b884:	b508      	push	{r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   1b886:	2809      	cmp	r0, #9
   1b888:	4b06      	ldr	r3, [pc, #24]	; (1b8a4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::power(unsigned char)+0x20>)
   1b88a:	4a07      	ldr	r2, [pc, #28]	; (1b8a8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::power(unsigned char)+0x24>)
   1b88c:	7819      	ldrb	r1, [r3, #0]
   1b88e:	bf28      	it	cs
   1b890:	2009      	movcs	r0, #9
   1b892:	5612      	ldrsb	r2, [r2, r0]
   1b894:	2001      	movs	r0, #1
   1b896:	f7fe fbff 	bl	1a098 <sd_ble_gap_tx_power_set>
                    }
   1b89a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   1b89e:	b200      	sxth	r0, r0
   1b8a0:	f7ff ba9e 	b.w	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
   1b8a4:	20001830 	.word	0x20001830
   1b8a8:	0001ee9c 	.word	0x0001ee9c

0001b8ac <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()>:
SA  start           () -> void {
   1b8ac:	b538      	push	{r3, r4, r5, lr}
                        if( isActive_ ) return;
   1b8ae:	4c46      	ldr	r4, [pc, #280]	; (1b9c8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x11c>)
   1b8b0:	7823      	ldrb	r3, [r4, #0]
   1b8b2:	2b00      	cmp	r3, #0
   1b8b4:	d158      	bne.n	1b968 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xbc>
                        if( connectableTimeout_ and not --connectableTimeout_ ) connectable( false );
   1b8b6:	4b45      	ldr	r3, [pc, #276]	; (1b9cc <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x120>)
   1b8b8:	7818      	ldrb	r0, [r3, #0]
   1b8ba:	b120      	cbz	r0, 1b8c6 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x1a>
   1b8bc:	3801      	subs	r0, #1
   1b8be:	b2c0      	uxtb	r0, r0
   1b8c0:	7018      	strb	r0, [r3, #0]
   1b8c2:	2800      	cmp	r0, #0
   1b8c4:	d07d      	beq.n	1b9c2 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x116>
                        params_.properties.type = isConnectable_ ?
   1b8c6:	4b42      	ldr	r3, [pc, #264]	; (1b9d0 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x124>)
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   1b8c8:	4d42      	ldr	r5, [pc, #264]	; (1b9d4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x128>)
                        params_.properties.type = isConnectable_ ?
   1b8ca:	781b      	ldrb	r3, [r3, #0]
   1b8cc:	4a42      	ldr	r2, [pc, #264]	; (1b9d8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x12c>)
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   1b8ce:	4943      	ldr	r1, [pc, #268]	; (1b9dc <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x130>)
                        params_.properties.type = isConnectable_ ?
   1b8d0:	2b00      	cmp	r3, #0
   1b8d2:	bf14      	ite	ne
   1b8d4:	2301      	movne	r3, #1
   1b8d6:	2305      	moveq	r3, #5
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   1b8d8:	4628      	mov	r0, r5
                        params_.properties.type = isConnectable_ ?
   1b8da:	7013      	strb	r3, [r2, #0]
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   1b8dc:	f7fe fbd6 	bl	1a08c <sd_ble_gap_adv_set_configure>
   1b8e0:	b200      	sxth	r0, r0
   1b8e2:	f7ff fa7d 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( sd_ble_gap_adv_start(handle_, BLE_CONN_CFG_TAG_DEFAULT) );
   1b8e6:	2100      	movs	r1, #0
   1b8e8:	7828      	ldrb	r0, [r5, #0]
   1b8ea:	f7fe fbd1 	bl	1a090 <sd_ble_gap_adv_start>
   1b8ee:	b200      	sxth	r0, r0
   1b8f0:	f7ff fa76 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                        power( txPower_ );
   1b8f4:	4a3a      	ldr	r2, [pc, #232]	; (1b9e0 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x134>)
                        isActive_ = true;
   1b8f6:	2301      	movs	r3, #1
                        power( txPower_ );
   1b8f8:	7810      	ldrb	r0, [r2, #0]
                        isActive_ = true;
   1b8fa:	7023      	strb	r3, [r4, #0]
                        power( txPower_ );
   1b8fc:	f7ff ffc2 	bl	1b884 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::power(unsigned char)>
    public:
//============

SA  read            () { return update(); }

SA  isOk            () { return voltage_ > 2100 ; }
   1b900:	4b38      	ldr	r3, [pc, #224]	; (1b9e4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x138>)
                        if( battery.isOk() ) board.ok(); else board.caution();
   1b902:	f9b3 2000 	ldrsh.w	r2, [r3]
   1b906:	f640 0334 	movw	r3, #2100	; 0x834
   1b90a:	429a      	cmp	r2, r3
SA  isOutput    ()          { return reg.DIRP; }
   1b90c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b910:	dd2b      	ble.n	1b96a <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xbe>
   1b912:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                    if( not isOutput() ) return;
   1b916:	07d1      	lsls	r1, r2, #31
   1b918:	d526      	bpl.n	1b968 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xbc>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b91a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b91e:	4c32      	ldr	r4, [pc, #200]	; (1b9e8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x13c>)
   1b920:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b924:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b928:	bf14      	ite	ne
   1b92a:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b92e:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
                        params_.properties.type = isConnectable_ ?
   1b932:	2505      	movs	r5, #5
   1b934:	f044 0401 	orr.w	r4, r4, #1
   1b938:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b93c:	47a0      	blx	r4
   1b93e:	3d01      	subs	r5, #1
   1b940:	d1fa      	bne.n	1b938 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x8c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b942:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b946:	2505      	movs	r5, #5
   1b948:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b94c:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b950:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b954:	bf14      	ite	ne
   1b956:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b95a:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1b95e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b962:	47a0      	blx	r4
   1b964:	3d01      	subs	r5, #1
   1b966:	d1fa      	bne.n	1b95e <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xb2>
                    }
   1b968:	bd38      	pop	{r3, r4, r5, pc}
SA  isOutput    ()          { return reg.DIRP; }
   1b96a:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1b96e:	07d2      	lsls	r2, r2, #31
   1b970:	d5fa      	bpl.n	1b968 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xbc>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b972:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b976:	4c1c      	ldr	r4, [pc, #112]	; (1b9e8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x13c>)
   1b978:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b97c:	f04f 0280 	mov.w	r2, #128	; 0x80
   1b980:	bf14      	ite	ne
   1b982:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b986:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
                        params_.properties.type = isConnectable_ ?
   1b98a:	2505      	movs	r5, #5
   1b98c:	f044 0401 	orr.w	r4, r4, #1
   1b990:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b994:	47a0      	blx	r4
   1b996:	3d01      	subs	r5, #1
   1b998:	d1fa      	bne.n	1b990 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0xe4>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b99a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b99e:	2505      	movs	r5, #5
   1b9a0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b9a4:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b9a8:	f04f 0280 	mov.w	r2, #128	; 0x80
   1b9ac:	bf14      	ite	ne
   1b9ae:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b9b2:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1b9b6:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b9ba:	47a0      	blx	r4
   1b9bc:	3d01      	subs	r5, #1
   1b9be:	d1fa      	bne.n	1b9b6 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x10a>
                    }
   1b9c0:	bd38      	pop	{r3, r4, r5, pc}
                        if( connectableTimeout_ and not --connectableTimeout_ ) connectable( false );
   1b9c2:	f7fe fd87 	bl	1a4d4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::connectable(bool)>
   1b9c6:	e77e      	b.n	1b8c6 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()+0x1a>
   1b9c8:	200019d0 	.word	0x200019d0
   1b9cc:	20001810 	.word	0x20001810
   1b9d0:	20001811 	.word	0x20001811
   1b9d4:	20001830 	.word	0x20001830
   1b9d8:	200019f4 	.word	0x200019f4
   1b9dc:	20001820 	.word	0x20001820
   1b9e0:	20001a0c 	.word	0x20001a0c
   1b9e4:	20001a3e 	.word	0x20001a3e
   1b9e8:	0001eeb0 	.word	0x0001eeb0

0001b9ec <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)>:
SA  update          (void* pcontext = nullptr) -> void {
   1b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                        ADdata_.update(buffer_);
   1b9f0:	4f2c      	ldr	r7, [pc, #176]	; (1baa4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xb8>)
SA  update          (void* pcontext = nullptr) -> void {
   1b9f2:	b084      	sub	sp, #16
                        stop();
   1b9f4:	f7ff fc4a 	bl	1b28c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::stop()>
                        ADdata_.update(buffer_);
   1b9f8:	4638      	mov	r0, r7
   1b9fa:	f7ff fe51 	bl	1b6a0 <MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >::update(unsigned char (&) [31])>
                        DebugFuncHeader();
   1b9fe:	f7fd fefb 	bl	197f8 <app_timer_cnt_get>
   1ba02:	4929      	ldr	r1, [pc, #164]	; (1baa8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xbc>)
   1ba04:	4a29      	ldr	r2, [pc, #164]	; (1baac <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xc0>)
   1ba06:	9202      	str	r2, [sp, #8]
   1ba08:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1ba0c:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
   1ba10:	24d2      	movs	r4, #210	; 0xd2
   1ba12:	0b82      	lsrs	r2, r0, #14
   1ba14:	e9cd 1400 	strd	r1, r4, [sp]
   1ba18:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1ba1c:	4924      	ldr	r1, [pc, #144]	; (1bab0 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xc4>)
   1ba1e:	f04f 0000 	mov.w	r0, #0
   1ba22:	f7fe ff23 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        Debug( "{Fcyan}  -advertising packet-{Fwhite}\n" );
   1ba26:	4823      	ldr	r0, [pc, #140]	; (1bab4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xc8>)
   1ba28:	f7fe fe86 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        while( buffer_[i] ){
   1ba2c:	7838      	ldrb	r0, [r7, #0]
   1ba2e:	b310      	cbz	r0, 1ba76 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x8a>
                            Debug( "\n" );
   1ba30:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1bab8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xcc>
                        auto i = 0;
   1ba34:	2500      	movs	r5, #0
   1ba36:	f107 0a02 	add.w	sl, r7, #2
                            auto typ = buffer_[i++];
   1ba3a:	197b      	adds	r3, r7, r5
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1ba3c:	1e46      	subs	r6, r0, #1
                            auto typ = buffer_[i++];
   1ba3e:	785c      	ldrb	r4, [r3, #1]
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1ba40:	4621      	mov	r1, r4
   1ba42:	f7fe ffb9 	bl	1a9b8 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]>
                            if( typ == 9 ){ Debug( "%.*s ", len, &buffer_[i] ); }
   1ba46:	2c09      	cmp	r4, #9
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1ba48:	b2f6      	uxtb	r6, r6
                            auto typ = buffer_[i++];
   1ba4a:	f105 0802 	add.w	r8, r5, #2
                            if( typ == 9 ){ Debug( "%.*s ", len, &buffer_[i] ); }
   1ba4e:	d01a      	beq.n	1ba86 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x9a>
                                for( auto j = 0; j < len; j++ ){ Debug( "%02X ", buffer_[i+j] ); }
   1ba50:	b14e      	cbz	r6, 1ba66 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x7a>
   1ba52:	4455      	add	r5, sl
   1ba54:	4435      	add	r5, r6
   1ba56:	eb07 0408 	add.w	r4, r7, r8
   1ba5a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ba5e:	f7ff f8b1 	bl	1abc4 <int Print<DevRtt<0>, char>(DevRtt<0>, char const*, char) [clone .isra.0] [clone .constprop.2]>
   1ba62:	42ac      	cmp	r4, r5
   1ba64:	d1f9      	bne.n	1ba5a <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x6e>
                            i += len;
   1ba66:	eb08 0506 	add.w	r5, r8, r6
                            Debug( "\n" );
   1ba6a:	4648      	mov	r0, r9
   1ba6c:	f7fe fe64 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        while( buffer_[i] ){
   1ba70:	5d78      	ldrb	r0, [r7, r5]
   1ba72:	2800      	cmp	r0, #0
   1ba74:	d1e1      	bne.n	1ba3a <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x4e>
                        Debug( "\n" );
   1ba76:	4810      	ldr	r0, [pc, #64]	; (1bab8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0xcc>)
   1ba78:	f7fe fe5e 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        start();
   1ba7c:	f7ff ff16 	bl	1b8ac <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::start()>
                    }
   1ba80:	b004      	add	sp, #16
   1ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                            if( typ == 9 ){ Debug( "%.*s ", len, &buffer_[i] ); }
   1ba86:	eb07 0108 	add.w	r1, r7, r8
   1ba8a:	4630      	mov	r0, r6
                            i += len;
   1ba8c:	eb08 0506 	add.w	r5, r8, r6
                            if( typ == 9 ){ Debug( "%.*s ", len, &buffer_[i] ); }
   1ba90:	f7fe ffbc 	bl	1aa0c <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]>
                            Debug( "\n" );
   1ba94:	4648      	mov	r0, r9
   1ba96:	f7fe fe4f 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        while( buffer_[i] ){
   1ba9a:	5d78      	ldrb	r0, [r7, r5]
   1ba9c:	2800      	cmp	r0, #0
   1ba9e:	d1cc      	bne.n	1ba3a <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x4e>
   1baa0:	e7e9      	b.n	1ba76 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)+0x8a>
   1baa2:	bf00      	nop
   1baa4:	200019d4 	.word	0x200019d4
   1baa8:	0001eb14 	.word	0x0001eb14
   1baac:	0001ec98 	.word	0x0001ec98
   1bab0:	0001eae0 	.word	0x0001eae0
   1bab4:	0001eca0 	.word	0x0001eca0
   1bab8:	0001eb64 	.word	0x0001eb64

0001babc <Ble::eventHandler(ble_evt_t const*, void*)>:
SA  eventHandler    (ble_evt_t const * p_ble_evt, void * p_context) {
   1babc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1babe:	b087      	sub	sp, #28
   1bac0:	af04      	add	r7, sp, #16
   1bac2:	4604      	mov	r4, r0
                        DebugFuncHeader();
   1bac4:	f7fd fe98 	bl	197f8 <app_timer_cnt_get>
   1bac8:	495b      	ldr	r1, [pc, #364]	; (1bc38 <Ble::eventHandler(ble_evt_t const*, void*)+0x17c>)
   1baca:	4a5c      	ldr	r2, [pc, #368]	; (1bc3c <Ble::eventHandler(ble_evt_t const*, void*)+0x180>)
   1bacc:	9202      	str	r2, [sp, #8]
   1bace:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1bad2:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
   1bad6:	2518      	movs	r5, #24
   1bad8:	0b82      	lsrs	r2, r0, #14
   1bada:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1bade:	e9cd 1500 	strd	r1, r5, [sp]
   1bae2:	f04f 0000 	mov.w	r0, #0
   1bae6:	4956      	ldr	r1, [pc, #344]	; (1bc40 <Ble::eventHandler(ble_evt_t const*, void*)+0x184>)
   1bae8:	f7fe fec0 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                        Debug( "{normal}header.event_id: %d\n", p_ble_evt->header.evt_id );
   1baec:	8821      	ldrh	r1, [r4, #0]
   1baee:	4855      	ldr	r0, [pc, #340]	; (1bc44 <Ble::eventHandler(ble_evt_t const*, void*)+0x188>)
   1baf0:	f7fe feea 	bl	1a8c8 <int Print<DevRtt<0>, unsigned short>(DevRtt<0>, char const*, unsigned short) [clone .isra.0]>
                        switch (p_ble_evt->header.evt_id){
   1baf4:	8823      	ldrh	r3, [r4, #0]
   1baf6:	2b21      	cmp	r3, #33	; 0x21
   1baf8:	d051      	beq.n	1bb9e <Ble::eventHandler(ble_evt_t const*, void*)+0xe2>
   1bafa:	d816      	bhi.n	1bb2a <Ble::eventHandler(ble_evt_t const*, void*)+0x6e>
   1bafc:	2b10      	cmp	r3, #16
   1bafe:	d05d      	beq.n	1bbbc <Ble::eventHandler(ble_evt_t const*, void*)+0x100>
   1bb00:	2b11      	cmp	r3, #17
   1bb02:	d165      	bne.n	1bbd0 <Ble::eventHandler(ble_evt_t const*, void*)+0x114>
                                Debug( "disconnected\n" );
   1bb04:	4850      	ldr	r0, [pc, #320]	; (1bc48 <Ble::eventHandler(ble_evt_t const*, void*)+0x18c>)
   1bb06:	f7fe fe17 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    cp_init.disconnect_on_fail             = true;

                    error.check( ble_conn_params_init(&cp_init) );
                }

SA  stop        () { error.check( ble_conn_params_stop() ); }
   1bb0a:	f000 fae1 	bl	1c0d0 <ble_conn_params_stop>
   1bb0e:	b200      	sxth	r0, r0
   1bb10:	f7ff f966 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                                adv.connectable( false ); //no longer need to be connectable
   1bb14:	2000      	movs	r0, #0
   1bb16:	f7fe fcdd 	bl	1a4d4 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::connectable(bool)>
                                adv.update(); //restart advertising
   1bb1a:	2000      	movs	r0, #0
   1bb1c:	f7ff ff66 	bl	1b9ec <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)>
                                adv.timerOn(); //restart adv update timer
   1bb20:	f7ff f9f6 	bl	1af10 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()>
                    }
   1bb24:	370c      	adds	r7, #12
   1bb26:	46bd      	mov	sp, r7
   1bb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        switch (p_ble_evt->header.evt_id){
   1bb2a:	2b50      	cmp	r3, #80	; 0x50
   1bb2c:	d150      	bne.n	1bbd0 <Ble::eventHandler(ble_evt_t const*, void*)+0x114>
                                Debug( "BLE_GATTS_EVT_WRITE: \n" );
   1bb2e:	4847      	ldr	r0, [pc, #284]	; (1bc4c <Ble::eventHandler(ble_evt_t const*, void*)+0x190>)
   1bb30:	f7fe fe02 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                if( p_ble_evt->evt.gatts_evt.params.write.uuid.uuid == BLE_UUID_GAP_CHARACTERISTIC_DEVICE_NAME ){
   1bb34:	8923      	ldrh	r3, [r4, #8]
   1bb36:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
   1bb3a:	d1f3      	bne.n	1bb24 <Ble::eventHandler(ble_evt_t const*, void*)+0x68>
                                    uint16_t len = 0;
   1bb3c:	2500      	movs	r5, #0
                                    sd_ble_gap_device_name_get( NULL, &len );
   1bb3e:	4628      	mov	r0, r5
   1bb40:	1d39      	adds	r1, r7, #4
                                    uint16_t len = 0;
   1bb42:	80bd      	strh	r5, [r7, #4]
                                    sd_ble_gap_device_name_get( NULL, &len );
   1bb44:	f7fe faae 	bl	1a0a4 <sd_ble_gap_device_name_get>
                                    uint8_t buf[len+1];
   1bb48:	88bb      	ldrh	r3, [r7, #4]
   1bb4a:	3308      	adds	r3, #8
                                    Debug("%s\n", buf);
   1bb4c:	466e      	mov	r6, sp
                                    uint8_t buf[len+1];
   1bb4e:	08db      	lsrs	r3, r3, #3
   1bb50:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   1bb54:	469d      	mov	sp, r3
   1bb56:	ac04      	add	r4, sp, #16
                                    sd_ble_gap_device_name_get( buf, &len );
   1bb58:	1d39      	adds	r1, r7, #4
   1bb5a:	4620      	mov	r0, r4
   1bb5c:	f7fe faa2 	bl	1a0a4 <sd_ble_gap_device_name_get>
                                    buf[len] = 0; //0 terminate string
   1bb60:	88bb      	ldrh	r3, [r7, #4]
                        Debug( "Flash::updateName : %s\n", str );
   1bb62:	483b      	ldr	r0, [pc, #236]	; (1bc50 <Ble::eventHandler(ble_evt_t const*, void*)+0x194>)
   1bb64:	54e5      	strb	r5, [r4, r3]
   1bb66:	4621      	mov	r1, r4
   1bb68:	f7fe fe24 	bl	1a7b4 <int Print<DevRtt<0>, char const*>(DevRtt<0>, char const*, char const*) [clone .isra.0]>
                        auto len = strlen(str);
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	f000 fedb 	bl	1c928 <strlen>
                        memset( (void*)fullnameRam_, 0, fullnameSiz_ ); //clear all
   1bb72:	4629      	mov	r1, r5
   1bb74:	2220      	movs	r2, #32
                        auto len = strlen(str);
   1bb76:	4605      	mov	r5, r0
                        memset( (void*)fullnameRam_, 0, fullnameSiz_ ); //clear all
   1bb78:	4836      	ldr	r0, [pc, #216]	; (1bc54 <Ble::eventHandler(ble_evt_t const*, void*)+0x198>)
   1bb7a:	f000 fe91 	bl	1c8a0 <memset>
                        memcpy( (void*)fullnameRam_, (void*)str, len );
   1bb7e:	2d1f      	cmp	r5, #31
   1bb80:	462a      	mov	r2, r5
   1bb82:	4621      	mov	r1, r4
   1bb84:	bf28      	it	cs
   1bb86:	221f      	movcs	r2, #31
   1bb88:	4832      	ldr	r0, [pc, #200]	; (1bc54 <Ble::eventHandler(ble_evt_t const*, void*)+0x198>)
   1bb8a:	f000 fe7b 	bl	1c884 <memcpy>
                        saveName_ = true;
   1bb8e:	4b32      	ldr	r3, [pc, #200]	; (1bc58 <Ble::eventHandler(ble_evt_t const*, void*)+0x19c>)
   1bb90:	2201      	movs	r2, #1
                                    Debug("%s\n", buf);
   1bb92:	4620      	mov	r0, r4
   1bb94:	701a      	strb	r2, [r3, #0]
   1bb96:	f7fe febd 	bl	1a914 <int Print<DevRtt<0>, unsigned char*>(DevRtt<0>, char const*, unsigned char*) [clone .isra.0] [clone .constprop.0]>
   1bb9a:	46b5      	mov	sp, r6
   1bb9c:	e7c2      	b.n	1bb24 <Ble::eventHandler(ble_evt_t const*, void*)+0x68>
                                Debug( "BLE_GAP_EVT_PHY_UPDATE_REQUEST\n" );
   1bb9e:	482f      	ldr	r0, [pc, #188]	; (1bc5c <Ble::eventHandler(ble_evt_t const*, void*)+0x1a0>)
   1bba0:	f7fe fdca 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                ble_gap_phys_t const phys{ BLE_GAP_PHY_AUTO, BLE_GAP_PHY_AUTO, };
   1bba4:	2300      	movs	r3, #0
                                error.check( sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys) );
   1bba6:	1d39      	adds	r1, r7, #4
   1bba8:	88a0      	ldrh	r0, [r4, #4]
                                ble_gap_phys_t const phys{ BLE_GAP_PHY_AUTO, BLE_GAP_PHY_AUTO, };
   1bbaa:	80bb      	strh	r3, [r7, #4]
                                error.check( sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys) );
   1bbac:	f7fe fa7c 	bl	1a0a8 <sd_ble_gap_phy_update>
   1bbb0:	b200      	sxth	r0, r0
   1bbb2:	f7ff f915 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
                    }
   1bbb6:	370c      	adds	r7, #12
   1bbb8:	46bd      	mov	sp, r7
   1bbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                Debug( "connected\n" );
   1bbbc:	4828      	ldr	r0, [pc, #160]	; (1bc60 <Ble::eventHandler(ble_evt_t const*, void*)+0x1a4>)
   1bbbe:	f7fe fdbb 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                                adv.timerOff(); //stop the adv update timer
   1bbc2:	f7ff f9e1 	bl	1af88 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOff()>
                                adv.isStopped(); //and let adv know it is stopped
   1bbc6:	f7fe fc7f 	bl	1a4c8 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::isStopped()>
                    }
   1bbca:	370c      	adds	r7, #12
   1bbcc:	46bd      	mov	sp, r7
   1bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                Debug( "{Fred}unhandled event\n{normal}" );
   1bbd0:	4824      	ldr	r0, [pc, #144]	; (1bc64 <Ble::eventHandler(ble_evt_t const*, void*)+0x1a8>)
   1bbd2:	f7fe fdb1 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
SA  isOutput    ()          { return reg.DIRP; }
   1bbd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1bbda:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1bbde:	07d2      	lsls	r2, r2, #31
   1bbe0:	d5a0      	bpl.n	1bb24 <Ble::eventHandler(ble_evt_t const*, void*)+0x68>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1bbe2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1bbe6:	4c20      	ldr	r4, [pc, #128]	; (1bc68 <Ble::eventHandler(ble_evt_t const*, void*)+0x1ac>)
   1bbe8:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bbec:	f04f 0280 	mov.w	r2, #128	; 0x80
   1bbf0:	bf14      	ite	ne
   1bbf2:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1bbf6:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
SA  eventHandler    (ble_evt_t const * p_ble_evt, void * p_context) {
   1bbfa:	2505      	movs	r5, #5
   1bbfc:	f044 0401 	orr.w	r4, r4, #1
   1bc00:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1bc04:	47a0      	blx	r4
   1bc06:	3d01      	subs	r5, #1
   1bc08:	d1fa      	bne.n	1bc00 <Ble::eventHandler(ble_evt_t const*, void*)+0x144>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1bc0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1bc0e:	2505      	movs	r5, #5
   1bc10:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1bc14:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bc18:	f04f 0280 	mov.w	r2, #128	; 0x80
   1bc1c:	bf14      	ite	ne
   1bc1e:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1bc22:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1bc26:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1bc2a:	47a0      	blx	r4
   1bc2c:	3d01      	subs	r5, #1
   1bc2e:	d1fa      	bne.n	1bc26 <Ble::eventHandler(ble_evt_t const*, void*)+0x16a>
                    }
   1bc30:	370c      	adds	r7, #12
   1bc32:	46bd      	mov	sp, r7
   1bc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc36:	bf00      	nop
   1bc38:	0001ecd8 	.word	0x0001ecd8
   1bc3c:	0001ecc8 	.word	0x0001ecc8
   1bc40:	0001eae0 	.word	0x0001eae0
   1bc44:	0001ece4 	.word	0x0001ece4
   1bc48:	0001ed40 	.word	0x0001ed40
   1bc4c:	0001ed04 	.word	0x0001ed04
   1bc50:	0001ed1c 	.word	0x0001ed1c
   1bc54:	20001a1c 	.word	0x20001a1c
   1bc58:	20001a1b 	.word	0x20001a1b
   1bc5c:	0001ed50 	.word	0x0001ed50
   1bc60:	0001ed34 	.word	0x0001ed34
   1bc64:	0001ed70 	.word	0x0001ed70
   1bc68:	0001eeb0 	.word	0x0001eeb0

0001bc6c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::init()>:
SA  init            () {
   1bc6c:	b510      	push	{r4, lr}
                        Debug( "Advertising::init...\n" );
   1bc6e:	4808      	ldr	r0, [pc, #32]	; (1bc90 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::init()+0x24>)
                        params_.interval = paramInterval_;
   1bc70:	4c08      	ldr	r4, [pc, #32]	; (1bc94 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::init()+0x28>)
                        Debug( "Advertising::init...\n" );
   1bc72:	f7fe fd61 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        params_.interval = paramInterval_;
   1bc76:	4b08      	ldr	r3, [pc, #32]	; (1bc98 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::init()+0x2c>)
   1bc78:	e9d3 0100 	ldrd	r0, r1, [r3]
   1bc7c:	f001 feaa 	bl	1d9d4 <__aeabi_d2uiz>
   1bc80:	4603      	mov	r3, r0
                        update();
   1bc82:	2000      	movs	r0, #0
                        params_.interval = paramInterval_;
   1bc84:	60a3      	str	r3, [r4, #8]
                        update();
   1bc86:	f7ff feb1 	bl	1b9ec <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::update(void*)>
                        timerOn();
   1bc8a:	f7ff f941 	bl	1af10 <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::timerOn()>
                    }
   1bc8e:	bd10      	pop	{r4, pc}
   1bc90:	0001ed90 	.word	0x0001ed90
   1bc94:	200019f4 	.word	0x200019f4
   1bc98:	20001818 	.word	0x20001818

0001bc9c <main>:


/*-----------------------------------------------------------------------------
    functions
-----------------------------------------------------------------------------*/
int main() {
   1bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}

    Debug( "{normal}{Fgreen}\nBoot start...\n" );
   1bc9e:	4827      	ldr	r0, [pc, #156]	; (1bd3c <main+0xa0>)
   1bca0:	4f27      	ldr	r7, [pc, #156]	; (1bd40 <main+0xa4>)
   1bca2:	4e28      	ldr	r6, [pc, #160]	; (1bd44 <main+0xa8>)
                    error.check( nrf_pwr_mgmt_init() );
                    //enable REG1 Dc-Dc (instead of LDO, for 1.8v system)
                    nrf_power_dcdcen_set( true );
                }
SA  sleep       () { 
                    DebugFuncHeader();
   1bca4:	4d28      	ldr	r5, [pc, #160]	; (1bd48 <main+0xac>)
int main() {
   1bca6:	b08d      	sub	sp, #52	; 0x34
    Debug( "{normal}{Fgreen}\nBoot start...\n" );
   1bca8:	f7fe fd46 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>

    board.init();           //init board pins
   1bcac:	f7fe fd6a 	bl	1a784 <BL651tempBoard::init()>
    board.alive();          //blink led's to show boot
   1bcb0:	f7fe fa04 	bl	1a0bc <BL651tempBoard::alive()>
                    Debug( "Power::init...\n" );                    
   1bcb4:	4825      	ldr	r0, [pc, #148]	; (1bd4c <main+0xb0>)
   1bcb6:	f7fe fd3f 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    error.check( nrf_pwr_mgmt_init() );
   1bcba:	f7fd ffbd 	bl	19c38 <nrf_pwr_mgmt_init>
   1bcbe:	b200      	sxth	r0, r0
   1bcc0:	f7ff f88e 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
   1bcc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bcc8:	2401      	movs	r4, #1
   1bcca:	f8c3 4578 	str.w	r4, [r3, #1400]	; 0x578
    power.init();           //start power management
    flash.init();           //get name from flash
   1bcce:	f7fe fd97 	bl	1a800 <Flash::init()>
    ble.init();             //ble stack init
   1bcd2:	f7ff f965 	bl	1afa0 <Ble::init()>
    ////// now can use sd_* functions //////
    gap.init();             //gap init
   1bcd6:	f7ff f987 	bl	1afe8 <Gap::init()>
                    Debug( "Conn::init...\n" );                    
   1bcda:	481d      	ldr	r0, [pc, #116]	; (1bd50 <main+0xb4>)
   1bcdc:	f7fe fd2c 	bl	1a738 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    memset(&cp_init, 0, sizeof(cp_init));
   1bce0:	221c      	movs	r2, #28
   1bce2:	2100      	movs	r1, #0
   1bce4:	a805      	add	r0, sp, #20
   1bce6:	f000 fddb 	bl	1c8a0 <memset>
                    cp_init.first_conn_params_update_delay = APP_TIMER_TICKS(20000);
   1bcea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                    cp_init.next_conn_params_update_delay  = APP_TIMER_TICKS(5000);
   1bcee:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
                    cp_init.max_conn_params_update_count   = 3;
   1bcf2:	2303      	movs	r3, #3
                    error.check( ble_conn_params_init(&cp_init) );
   1bcf4:	a805      	add	r0, sp, #20
                    cp_init.next_conn_params_update_delay  = APP_TIMER_TICKS(5000);
   1bcf6:	e9cd 1206 	strd	r1, r2, [sp, #24]
                    cp_init.max_conn_params_update_count   = 3;
   1bcfa:	f88d 3020 	strb.w	r3, [sp, #32]
                    cp_init.disconnect_on_fail             = true;
   1bcfe:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
                    error.check( ble_conn_params_init(&cp_init) );
   1bd02:	f000 f9a9 	bl	1c058 <ble_conn_params_init>
   1bd06:	b200      	sxth	r0, r0
   1bd08:	f7ff f86a 	bl	1ade0 <Errors::check(short, bool) [clone .constprop.0]>
    conn.init();            //connection init
    adv.init();             //advertising init
   1bd0c:	f7ff ffae 	bl	1bc6c <Advertising<MyTemperatureAD<TemperatureTmp117<(unsigned char)5> >, (unsigned short)3000, 20000ul>::init()>
                    DebugFuncHeader();
   1bd10:	241a      	movs	r4, #26
   1bd12:	f7fd fd71 	bl	197f8 <app_timer_cnt_get>
   1bd16:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1bd1a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1bd1e:	0b82      	lsrs	r2, r0, #14
   1bd20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1bd24:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1bd28:	4629      	mov	r1, r5
   1bd2a:	9600      	str	r6, [sp, #0]
   1bd2c:	f04f 0000 	mov.w	r0, #0
   1bd30:	f7fe fd9c 	bl	1a86c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*)>
                    nrf_pwr_mgmt_run(); 
   1bd34:	f7fd ff96 	bl	19c64 <nrf_pwr_mgmt_run>
   1bd38:	e7eb      	b.n	1bd12 <main+0x76>
   1bd3a:	bf00      	nop
   1bd3c:	0001eda8 	.word	0x0001eda8
   1bd40:	0001ede8 	.word	0x0001ede8
   1bd44:	0001edf0 	.word	0x0001edf0
   1bd48:	0001eae0 	.word	0x0001eae0
   1bd4c:	0001edc8 	.word	0x0001edc8
   1bd50:	0001edd8 	.word	0x0001edd8

0001bd54 <_GLOBAL__sub_I_main>:
    SI Gpio<P0_7>  ledRed; //board label 1
   1bd54:	4b1e      	ldr	r3, [pc, #120]	; (1bdd0 <_GLOBAL__sub_I_main+0x7c>)
   1bd56:	681a      	ldr	r2, [r3, #0]
   1bd58:	07d0      	lsls	r0, r2, #31
   1bd5a:	bf5c      	itt	pl
   1bd5c:	2201      	movpl	r2, #1
   1bd5e:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_8>  ledGreen; //board label 2
   1bd60:	4b1c      	ldr	r3, [pc, #112]	; (1bdd4 <_GLOBAL__sub_I_main+0x80>)
   1bd62:	681a      	ldr	r2, [r3, #0]
   1bd64:	07d1      	lsls	r1, r2, #31
   1bd66:	bf5c      	itt	pl
   1bd68:	2201      	movpl	r2, #1
   1bd6a:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_27, LOWISON>  sw1; //SW1
   1bd6c:	4b1a      	ldr	r3, [pc, #104]	; (1bdd8 <_GLOBAL__sub_I_main+0x84>)
   1bd6e:	681a      	ldr	r2, [r3, #0]
   1bd70:	07d2      	lsls	r2, r2, #31
   1bd72:	bf5c      	itt	pl
   1bd74:	2201      	movpl	r2, #1
   1bd76:	601a      	strpl	r2, [r3, #0]
#ifdef NRF52840_DONGLE
inline Pca10059 board;
#endif

#ifdef NRF52810_BL651_TEMP
inline BL651tempBoard board;
   1bd78:	4b18      	ldr	r3, [pc, #96]	; (1bddc <_GLOBAL__sub_I_main+0x88>)
   1bd7a:	681a      	ldr	r2, [r3, #0]
   1bd7c:	07d0      	lsls	r0, r2, #31
   1bd7e:	bf5c      	itt	pl
   1bd80:	2201      	movpl	r2, #1
   1bd82:	601a      	strpl	r2, [r3, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   1bd84:	4a16      	ldr	r2, [pc, #88]	; (1bde0 <_GLOBAL__sub_I_main+0x8c>)
   1bd86:	6813      	ldr	r3, [r2, #0]
   1bd88:	f013 0301 	ands.w	r3, r3, #1
   1bd8c:	d117      	bne.n	1bdbe <_GLOBAL__sub_I_main+0x6a>
    power.loop();           //power.sleep() loop

    //power.loop will not return

}
   1bd8e:	b430      	push	{r4, r5}
                        ch_ = ch;
   1bd90:	4c14      	ldr	r4, [pc, #80]	; (1bde4 <_GLOBAL__sub_I_main+0x90>)
                        pselN_ = (PSEL)it.PSELN;
   1bd92:	4d15      	ldr	r5, [pc, #84]	; (1bde8 <_GLOBAL__sub_I_main+0x94>)
                        pselP_ = (PSEL)it.PSELP;
   1bd94:	4915      	ldr	r1, [pc, #84]	; (1bdec <_GLOBAL__sub_I_main+0x98>)
                        ch_ = ch;
   1bd96:	7023      	strb	r3, [r4, #0]
                        pselN_ = (PSEL)it.PSELN;
   1bd98:	702b      	strb	r3, [r5, #0]
                        pselP_ = (PSEL)it.PSELP;
   1bd9a:	2409      	movs	r4, #9
    SI Timer timerAdvUpdate_;
   1bd9c:	4b14      	ldr	r3, [pc, #80]	; (1bdf0 <_GLOBAL__sub_I_main+0x9c>)
   1bd9e:	700c      	strb	r4, [r1, #0]
   1bda0:	2101      	movs	r1, #1
   1bda2:	6011      	str	r1, [r2, #0]
   1bda4:	681a      	ldr	r2, [r3, #0]
                        config_ = it.CONFIG;
   1bda6:	4813      	ldr	r0, [pc, #76]	; (1bdf4 <_GLOBAL__sub_I_main+0xa0>)
   1bda8:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   1bdac:	07d1      	lsls	r1, r2, #31
   1bdae:	6004      	str	r4, [r0, #0]
   1bdb0:	d403      	bmi.n	1bdba <_GLOBAL__sub_I_main+0x66>
    Timer           (){}
   1bdb2:	4a11      	ldr	r2, [pc, #68]	; (1bdf8 <_GLOBAL__sub_I_main+0xa4>)
   1bdb4:	2101      	movs	r1, #1
   1bdb6:	6212      	str	r2, [r2, #32]
   1bdb8:	6019      	str	r1, [r3, #0]
   1bdba:	bc30      	pop	{r4, r5}
   1bdbc:	4770      	bx	lr
   1bdbe:	4b0c      	ldr	r3, [pc, #48]	; (1bdf0 <_GLOBAL__sub_I_main+0x9c>)
   1bdc0:	681a      	ldr	r2, [r3, #0]
   1bdc2:	07d2      	lsls	r2, r2, #31
   1bdc4:	bf5f      	itttt	pl
   1bdc6:	4a0c      	ldrpl	r2, [pc, #48]	; (1bdf8 <_GLOBAL__sub_I_main+0xa4>)
   1bdc8:	2101      	movpl	r1, #1
   1bdca:	6212      	strpl	r2, [r2, #32]
   1bdcc:	6019      	strpl	r1, [r3, #0]
   1bdce:	4770      	bx	lr
   1bdd0:	200019a0 	.word	0x200019a0
   1bdd4:	2000199c 	.word	0x2000199c
   1bdd8:	20001998 	.word	0x20001998
   1bddc:	20001994 	.word	0x20001994
   1bde0:	20001990 	.word	0x20001990
   1bde4:	20001a46 	.word	0x20001a46
   1bde8:	20001a44 	.word	0x20001a44
   1bdec:	20001a45 	.word	0x20001a45
   1bdf0:	2000198c 	.word	0x2000198c
   1bdf4:	20001a40 	.word	0x20001a40
   1bdf8:	200019a8 	.word	0x200019a8

0001bdfc <sd_ble_gap_conn_param_update>:
SVCALL(SD_BLE_GAP_CONN_PARAM_UPDATE, uint32_t, sd_ble_gap_conn_param_update(uint16_t conn_handle, ble_gap_conn_params_t const *p_conn_params));
   1bdfc:	df75      	svc	117	; 0x75
   1bdfe:	4770      	bx	lr

0001be00 <sd_ble_gap_disconnect>:
SVCALL(SD_BLE_GAP_DISCONNECT, uint32_t, sd_ble_gap_disconnect(uint16_t conn_handle, uint8_t hci_status_code));
   1be00:	df76      	svc	118	; 0x76
   1be02:	4770      	bx	lr

0001be04 <sd_ble_gap_ppcp_set>:
SVCALL(SD_BLE_GAP_PPCP_SET, uint32_t, sd_ble_gap_ppcp_set(ble_gap_conn_params_t const *p_conn_params));
   1be04:	df7a      	svc	122	; 0x7a
   1be06:	4770      	bx	lr

0001be08 <sd_ble_gap_ppcp_get>:
SVCALL(SD_BLE_GAP_PPCP_GET, uint32_t, sd_ble_gap_ppcp_get(ble_gap_conn_params_t *p_conn_params));
   1be08:	df7b      	svc	123	; 0x7b
   1be0a:	4770      	bx	lr

0001be0c <update_timeout_handler>:
/**@brief Function called after conn_params_update_delay has happened. This is triggered by app_timer.
 *
 * @param[in]  p_context  Context identifying which connection this is for.
 */
static void update_timeout_handler(void * p_context)
{
   1be0c:	b570      	push	{r4, r5, r6, lr}
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1be0e:	4d1b      	ldr	r5, [pc, #108]	; (1be7c <update_timeout_handler+0x70>)
   1be10:	882b      	ldrh	r3, [r5, #0]
    uint32_t                     conn_handle = (uint32_t)p_context;
    ble_conn_params_instance_t * p_instance  = instance_get(conn_handle);
   1be12:	b284      	uxth	r4, r0
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1be14:	42a3      	cmp	r3, r4
{
   1be16:	b082      	sub	sp, #8
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1be18:	d111      	bne.n	1be3e <update_timeout_handler+0x32>

    if (p_instance != NULL)
    {
        // Check if we have reached the maximum number of attempts
        if (p_instance->update_count < m_conn_params_config.max_conn_params_update_count)
   1be1a:	4e19      	ldr	r6, [pc, #100]	; (1be80 <update_timeout_handler+0x74>)
   1be1c:	7a29      	ldrb	r1, [r5, #8]
   1be1e:	7b32      	ldrb	r2, [r6, #12]
   1be20:	4291      	cmp	r1, r2
   1be22:	d30e      	bcc.n	1be42 <update_timeout_handler+0x36>
        else
        {
            p_instance->update_count = 0;

            // Negotiation failed, disconnect automatically if this has been configured
            if (m_conn_params_config.disconnect_on_fail)
   1be24:	7c33      	ldrb	r3, [r6, #16]
            p_instance->update_count = 0;
   1be26:	2200      	movs	r2, #0
   1be28:	722a      	strb	r2, [r5, #8]
            if (m_conn_params_config.disconnect_on_fail)
   1be2a:	b9db      	cbnz	r3, 1be64 <update_timeout_handler+0x58>
                    send_error_evt(err_code);
                }
            }

            // Notify the application that the procedure has failed
            if (m_conn_params_config.evt_handler != NULL)
   1be2c:	6973      	ldr	r3, [r6, #20]
   1be2e:	b133      	cbz	r3, 1be3e <update_timeout_handler+0x32>
            {
                ble_conn_params_evt_t evt;

                evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
   1be30:	2200      	movs	r2, #0
                evt.conn_handle = conn_handle;
   1be32:	f8ad 4006 	strh.w	r4, [sp, #6]
                evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
   1be36:	f88d 2004 	strb.w	r2, [sp, #4]
                m_conn_params_config.evt_handler(&evt);
   1be3a:	a801      	add	r0, sp, #4
   1be3c:	4798      	blx	r3
            }
        }
    }
}
   1be3e:	b002      	add	sp, #8
   1be40:	bd70      	pop	{r4, r5, r6, pc}
    err_code = sd_ble_gap_conn_param_update(conn_handle, p_new_conn_params);
   1be42:	4618      	mov	r0, r3
   1be44:	f105 010a 	add.w	r1, r5, #10
   1be48:	f7ff ffd8 	bl	1bdfc <sd_ble_gap_conn_param_update>
    if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_BUSY)) // NRF_ERROR_BUSY means another conn_param_update request is pending.
   1be4c:	b128      	cbz	r0, 1be5a <update_timeout_handler+0x4e>
   1be4e:	2811      	cmp	r0, #17
   1be50:	d0f5      	beq.n	1be3e <update_timeout_handler+0x32>
    if (m_conn_params_config.error_handler != NULL)
   1be52:	69b3      	ldr	r3, [r6, #24]
   1be54:	2b00      	cmp	r3, #0
   1be56:	d1f1      	bne.n	1be3c <update_timeout_handler+0x30>
   1be58:	e7f1      	b.n	1be3e <update_timeout_handler+0x32>
                p_instance->update_count++;
   1be5a:	7a2b      	ldrb	r3, [r5, #8]
   1be5c:	3301      	adds	r3, #1
   1be5e:	722b      	strb	r3, [r5, #8]
}
   1be60:	b002      	add	sp, #8
   1be62:	bd70      	pop	{r4, r5, r6, pc}
                err_code = sd_ble_gap_disconnect(conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
   1be64:	213b      	movs	r1, #59	; 0x3b
   1be66:	4620      	mov	r0, r4
   1be68:	f7ff ffca 	bl	1be00 <sd_ble_gap_disconnect>
                if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_INVALID_STATE)) // NRF_ERROR_INVALID_STATE means disconnect is already in progress.
   1be6c:	f030 0308 	bics.w	r3, r0, #8
   1be70:	d0dc      	beq.n	1be2c <update_timeout_handler+0x20>
    if (m_conn_params_config.error_handler != NULL)
   1be72:	69b3      	ldr	r3, [r6, #24]
   1be74:	2b00      	cmp	r3, #0
   1be76:	d0d9      	beq.n	1be2c <update_timeout_handler+0x20>
        m_conn_params_config.error_handler(err_code);
   1be78:	4798      	blx	r3
   1be7a:	e7d7      	b.n	1be2c <update_timeout_handler+0x20>
   1be7c:	20001a68 	.word	0x20001a68
   1be80:	20001a4c 	.word	0x20001a4c

0001be84 <ble_evt_handler>:
 *
 * @param[in]   p_ble_evt       Event received from the BLE stack.
 * @param[in]   p_context       Context.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
   1be84:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (p_ble_evt->header.evt_id)
   1be86:	8802      	ldrh	r2, [r0, #0]
   1be88:	2a12      	cmp	r2, #18
{
   1be8a:	b083      	sub	sp, #12
   1be8c:	4603      	mov	r3, r0
    switch (p_ble_evt->header.evt_id)
   1be8e:	d03e      	beq.n	1bf0e <ble_evt_handler+0x8a>
   1be90:	d815      	bhi.n	1bebe <ble_evt_handler+0x3a>
   1be92:	2a10      	cmp	r2, #16
   1be94:	d073      	beq.n	1bf7e <ble_evt_handler+0xfa>
   1be96:	2a11      	cmp	r2, #17
   1be98:	d10f      	bne.n	1beba <ble_evt_handler+0x36>
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1be9a:	4c6c      	ldr	r4, [pc, #432]	; (1c04c <ble_evt_handler+0x1c8>)
   1be9c:	8882      	ldrh	r2, [r0, #4]
   1be9e:	8823      	ldrh	r3, [r4, #0]
   1bea0:	429a      	cmp	r2, r3
   1bea2:	d10a      	bne.n	1beba <ble_evt_handler+0x36>
        err_code = app_timer_stop(p_instance->timer_id);
   1bea4:	6860      	ldr	r0, [r4, #4]
   1bea6:	f7fd fc85 	bl	197b4 <app_timer_stop>
        if (err_code != NRF_SUCCESS)
   1beaa:	b118      	cbz	r0, 1beb4 <ble_evt_handler+0x30>
    if (m_conn_params_config.error_handler != NULL)
   1beac:	4b68      	ldr	r3, [pc, #416]	; (1c050 <ble_evt_handler+0x1cc>)
   1beae:	699b      	ldr	r3, [r3, #24]
   1beb0:	b103      	cbz	r3, 1beb4 <ble_evt_handler+0x30>
        m_conn_params_config.error_handler(err_code);
   1beb2:	4798      	blx	r3
    p_instance->conn_handle = BLE_CONN_HANDLE_INVALID;
   1beb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1beb8:	8023      	strh	r3, [r4, #0]

        default:
            // No implementation needed.
            break;
    }
}
   1beba:	b003      	add	sp, #12
   1bebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (p_ble_evt->header.evt_id)
   1bebe:	2a50      	cmp	r2, #80	; 0x50
   1bec0:	d1fb      	bne.n	1beba <ble_evt_handler+0x36>
        (p_evt_write->handle == m_conn_params_config.start_on_notify_cccd_handle)
   1bec2:	4d63      	ldr	r5, [pc, #396]	; (1c050 <ble_evt_handler+0x1cc>)
    if (
   1bec4:	88c1      	ldrh	r1, [r0, #6]
   1bec6:	89ea      	ldrh	r2, [r5, #14]
   1bec8:	4291      	cmp	r1, r2
   1beca:	d1f6      	bne.n	1beba <ble_evt_handler+0x36>
        &&
   1becc:	8a02      	ldrh	r2, [r0, #16]
   1bece:	2a02      	cmp	r2, #2
   1bed0:	d1f3      	bne.n	1beba <ble_evt_handler+0x36>
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1bed2:	4c5e      	ldr	r4, [pc, #376]	; (1c04c <ble_evt_handler+0x1c8>)
        uint16_t                     conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   1bed4:	8882      	ldrh	r2, [r0, #4]
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1bed6:	8826      	ldrh	r6, [r4, #0]
   1bed8:	4296      	cmp	r6, r2
   1beda:	d1ee      	bne.n	1beba <ble_evt_handler+0x36>
            if (ble_srv_is_notification_enabled(p_evt_write->data))
   1bedc:	3012      	adds	r0, #18
   1bede:	f000 fb2f 	bl	1c540 <ble_srv_is_notification_enabled>
   1bee2:	2800      	cmp	r0, #0
   1bee4:	f000 809c 	beq.w	1c020 <ble_evt_handler+0x19c>
    if (!p_instance->params_ok)
   1bee8:	7a63      	ldrb	r3, [r4, #9]
   1beea:	2b00      	cmp	r3, #0
   1beec:	f040 809f 	bne.w	1c02e <ble_evt_handler+0x1aa>
                timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
   1bef0:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
        if (p_instance->update_count == 0)
   1bef4:	7a27      	ldrb	r7, [r4, #8]
        err_code = app_timer_start(p_instance->timer_id, timeout_ticks, (void *)(uint32_t)conn_handle);
   1bef6:	6860      	ldr	r0, [r4, #4]
   1bef8:	4632      	mov	r2, r6
   1befa:	2f00      	cmp	r7, #0
   1befc:	bf18      	it	ne
   1befe:	4619      	movne	r1, r3
   1bf00:	f7fd fc12 	bl	19728 <app_timer_start>
        if (err_code != NRF_SUCCESS)
   1bf04:	2800      	cmp	r0, #0
   1bf06:	d0d8      	beq.n	1beba <ble_evt_handler+0x36>
    if (m_conn_params_config.error_handler != NULL)
   1bf08:	69ab      	ldr	r3, [r5, #24]
   1bf0a:	bb3b      	cbnz	r3, 1bf5c <ble_evt_handler+0xd8>
   1bf0c:	e7d5      	b.n	1beba <ble_evt_handler+0x36>
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1bf0e:	4c4f      	ldr	r4, [pc, #316]	; (1c04c <ble_evt_handler+0x1c8>)
    uint16_t                     conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   1bf10:	8882      	ldrh	r2, [r0, #4]
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1bf12:	8821      	ldrh	r1, [r4, #0]
   1bf14:	4291      	cmp	r1, r2
   1bf16:	d1d0      	bne.n	1beba <ble_evt_handler+0x36>
    if   ((p_actual_conn_params->max_conn_interval < p_preferred_conn_params->min_conn_interval)
   1bf18:	8940      	ldrh	r0, [r0, #10]
   1bf1a:	8965      	ldrh	r5, [r4, #10]
   1bf1c:	4285      	cmp	r5, r0
   1bf1e:	d81f      	bhi.n	1bf60 <ble_evt_handler+0xdc>
       || (p_actual_conn_params->max_conn_interval > p_preferred_conn_params->max_conn_interval))
   1bf20:	89a5      	ldrh	r5, [r4, #12]
   1bf22:	4285      	cmp	r5, r0
   1bf24:	d31c      	bcc.n	1bf60 <ble_evt_handler+0xdc>
    uint32_t max_allowed_sl = p_preferred_conn_params->slave_latency + max_slave_latency_err;
   1bf26:	89e0      	ldrh	r0, [r4, #14]
    if   ((p_actual_conn_params->slave_latency < min_allowed_sl)
   1bf28:	899d      	ldrh	r5, [r3, #12]
                              - MIN(max_slave_latency_err, p_preferred_conn_params->slave_latency);
   1bf2a:	f240 13f3 	movw	r3, #499	; 0x1f3
   1bf2e:	4298      	cmp	r0, r3
   1bf30:	bf94      	ite	ls
   1bf32:	1a03      	subls	r3, r0, r0
   1bf34:	1ac3      	subhi	r3, r0, r3
    if   ((p_actual_conn_params->slave_latency < min_allowed_sl)
   1bf36:	42ab      	cmp	r3, r5
   1bf38:	d812      	bhi.n	1bf60 <ble_evt_handler+0xdc>
    uint32_t max_allowed_sl = p_preferred_conn_params->slave_latency + max_slave_latency_err;
   1bf3a:	f200 10f3 	addw	r0, r0, #499	; 0x1f3
       || (p_actual_conn_params->slave_latency > max_allowed_sl))
   1bf3e:	42a8      	cmp	r0, r5
   1bf40:	d30e      	bcc.n	1bf60 <ble_evt_handler+0xdc>
        if (m_conn_params_config.evt_handler != NULL)
   1bf42:	4b43      	ldr	r3, [pc, #268]	; (1c050 <ble_evt_handler+0x1cc>)
   1bf44:	695b      	ldr	r3, [r3, #20]
        p_instance->update_count = 0;
   1bf46:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bf4a:	8122      	strh	r2, [r4, #8]
        if (m_conn_params_config.evt_handler != NULL)
   1bf4c:	2b00      	cmp	r3, #0
   1bf4e:	d0b4      	beq.n	1beba <ble_evt_handler+0x36>
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1bf50:	2201      	movs	r2, #1
            evt.conn_handle = conn_handle;
   1bf52:	f8ad 1006 	strh.w	r1, [sp, #6]
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1bf56:	f88d 2004 	strb.w	r2, [sp, #4]
            m_conn_params_config.evt_handler(&evt);
   1bf5a:	a801      	add	r0, sp, #4
   1bf5c:	4798      	blx	r3
}
   1bf5e:	e7ac      	b.n	1beba <ble_evt_handler+0x36>
                timeout_ticks = m_conn_params_config.first_conn_params_update_delay;
   1bf60:	4d3b      	ldr	r5, [pc, #236]	; (1c050 <ble_evt_handler+0x1cc>)
        if (p_instance->update_count == 0)
   1bf62:	7a26      	ldrb	r6, [r4, #8]
        err_code = app_timer_start(p_instance->timer_id, timeout_ticks, (void *)(uint32_t)conn_handle);
   1bf64:	6860      	ldr	r0, [r4, #4]
                timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
   1bf66:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
        err_code = app_timer_start(p_instance->timer_id, timeout_ticks, (void *)(uint32_t)conn_handle);
   1bf6a:	2e00      	cmp	r6, #0
   1bf6c:	bf18      	it	ne
   1bf6e:	4619      	movne	r1, r3
        p_instance->params_ok = is_conn_params_ok(
   1bf70:	2300      	movs	r3, #0
   1bf72:	7263      	strb	r3, [r4, #9]
        err_code = app_timer_start(p_instance->timer_id, timeout_ticks, (void *)(uint32_t)conn_handle);
   1bf74:	f7fd fbd8 	bl	19728 <app_timer_start>
        if (err_code != NRF_SUCCESS)
   1bf78:	2800      	cmp	r0, #0
   1bf7a:	d1c5      	bne.n	1bf08 <ble_evt_handler+0x84>
   1bf7c:	e79d      	b.n	1beba <ble_evt_handler+0x36>
    if (role != BLE_GAP_ROLE_PERIPH)
   1bf7e:	7bc6      	ldrb	r6, [r0, #15]
   1bf80:	2e01      	cmp	r6, #1
   1bf82:	d19a      	bne.n	1beba <ble_evt_handler+0x36>
        if (m_conn_params_instances[i].conn_handle == conn_handle)
   1bf84:	4c31      	ldr	r4, [pc, #196]	; (1c04c <ble_evt_handler+0x1c8>)
   1bf86:	8821      	ldrh	r1, [r4, #0]
   1bf88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bf8c:	4291      	cmp	r1, r2
   1bf8e:	d13f      	bne.n	1c010 <ble_evt_handler+0x18c>
    p_instance->preferred_conn_params = m_preferred_conn_params;
   1bf90:	4d30      	ldr	r5, [pc, #192]	; (1c054 <ble_evt_handler+0x1d0>)
    uint16_t conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   1bf92:	8882      	ldrh	r2, [r0, #4]
    p_instance->conn_handle           = conn_handle;
   1bf94:	8022      	strh	r2, [r4, #0]
    p_instance->preferred_conn_params = m_preferred_conn_params;
   1bf96:	cd03      	ldmia	r5!, {r0, r1}
   1bf98:	f8c4 000a 	str.w	r0, [r4, #10]
   1bf9c:	f8c4 100e 	str.w	r1, [r4, #14]
    if   ((p_actual_conn_params->max_conn_interval < p_preferred_conn_params->min_conn_interval)
   1bfa0:	8a59      	ldrh	r1, [r3, #18]
   1bfa2:	8960      	ldrh	r0, [r4, #10]
    p_instance->update_count          = 0;
   1bfa4:	2500      	movs	r5, #0
    if   ((p_actual_conn_params->max_conn_interval < p_preferred_conn_params->min_conn_interval)
   1bfa6:	4288      	cmp	r0, r1
    p_instance->update_count          = 0;
   1bfa8:	7225      	strb	r5, [r4, #8]
    if   ((p_actual_conn_params->max_conn_interval < p_preferred_conn_params->min_conn_interval)
   1bfaa:	d822      	bhi.n	1bff2 <ble_evt_handler+0x16e>
       || (p_actual_conn_params->max_conn_interval > p_preferred_conn_params->max_conn_interval))
   1bfac:	89a0      	ldrh	r0, [r4, #12]
   1bfae:	4288      	cmp	r0, r1
   1bfb0:	d31f      	bcc.n	1bff2 <ble_evt_handler+0x16e>
    uint32_t max_allowed_sl = p_preferred_conn_params->slave_latency + max_slave_latency_err;
   1bfb2:	89e1      	ldrh	r1, [r4, #14]
    if   ((p_actual_conn_params->slave_latency < min_allowed_sl)
   1bfb4:	8a98      	ldrh	r0, [r3, #20]
                              - MIN(max_slave_latency_err, p_preferred_conn_params->slave_latency);
   1bfb6:	f240 13f3 	movw	r3, #499	; 0x1f3
   1bfba:	4299      	cmp	r1, r3
   1bfbc:	bf94      	ite	ls
   1bfbe:	1a4b      	subls	r3, r1, r1
   1bfc0:	1acb      	subhi	r3, r1, r3
    if   ((p_actual_conn_params->slave_latency < min_allowed_sl)
   1bfc2:	4283      	cmp	r3, r0
   1bfc4:	d815      	bhi.n	1bff2 <ble_evt_handler+0x16e>
    uint32_t max_allowed_sl = p_preferred_conn_params->slave_latency + max_slave_latency_err;
   1bfc6:	f201 11f3 	addw	r1, r1, #499	; 0x1f3
       || (p_actual_conn_params->slave_latency > max_allowed_sl))
   1bfca:	4281      	cmp	r1, r0
   1bfcc:	d311      	bcc.n	1bff2 <ble_evt_handler+0x16e>
    if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
   1bfce:	4d20      	ldr	r5, [pc, #128]	; (1c050 <ble_evt_handler+0x1cc>)
    p_instance->params_ok = is_conn_params_ok(&p_instance->preferred_conn_params,
   1bfd0:	7266      	strb	r6, [r4, #9]
    if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
   1bfd2:	89eb      	ldrh	r3, [r5, #14]
   1bfd4:	2b00      	cmp	r3, #0
   1bfd6:	f47f af70 	bne.w	1beba <ble_evt_handler+0x36>
        if (m_conn_params_config.evt_handler != NULL)
   1bfda:	696b      	ldr	r3, [r5, #20]
   1bfdc:	2b00      	cmp	r3, #0
   1bfde:	f43f af6c 	beq.w	1beba <ble_evt_handler+0x36>
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1bfe2:	2101      	movs	r1, #1
            evt.conn_handle = conn_handle;
   1bfe4:	f8ad 2006 	strh.w	r2, [sp, #6]
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1bfe8:	f88d 1004 	strb.w	r1, [sp, #4]
            m_conn_params_config.evt_handler(&evt);
   1bfec:	a801      	add	r0, sp, #4
   1bfee:	4798      	blx	r3
   1bff0:	e763      	b.n	1beba <ble_evt_handler+0x36>
    if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
   1bff2:	4d17      	ldr	r5, [pc, #92]	; (1c050 <ble_evt_handler+0x1cc>)
   1bff4:	89eb      	ldrh	r3, [r5, #14]
    p_instance->params_ok = is_conn_params_ok(&p_instance->preferred_conn_params,
   1bff6:	2100      	movs	r1, #0
   1bff8:	7261      	strb	r1, [r4, #9]
    if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
   1bffa:	2b00      	cmp	r3, #0
   1bffc:	f47f af5d 	bne.w	1beba <ble_evt_handler+0x36>
        err_code = app_timer_start(p_instance->timer_id, timeout_ticks, (void *)(uint32_t)conn_handle);
   1c000:	6860      	ldr	r0, [r4, #4]
   1c002:	6869      	ldr	r1, [r5, #4]
   1c004:	f7fd fb90 	bl	19728 <app_timer_start>
        if (err_code != NRF_SUCCESS)
   1c008:	2800      	cmp	r0, #0
   1c00a:	f43f af56 	beq.w	1beba <ble_evt_handler+0x36>
   1c00e:	e77b      	b.n	1bf08 <ble_evt_handler+0x84>
    if (m_conn_params_config.error_handler != NULL)
   1c010:	4b0f      	ldr	r3, [pc, #60]	; (1c050 <ble_evt_handler+0x1cc>)
   1c012:	699b      	ldr	r3, [r3, #24]
   1c014:	2b00      	cmp	r3, #0
   1c016:	f43f af50 	beq.w	1beba <ble_evt_handler+0x36>
        m_conn_params_config.error_handler(err_code);
   1c01a:	2004      	movs	r0, #4
   1c01c:	4798      	blx	r3
   1c01e:	e74c      	b.n	1beba <ble_evt_handler+0x36>
                err_code = app_timer_stop(p_instance->timer_id);
   1c020:	6860      	ldr	r0, [r4, #4]
   1c022:	f7fd fbc7 	bl	197b4 <app_timer_stop>
                if (err_code != NRF_SUCCESS)
   1c026:	2800      	cmp	r0, #0
   1c028:	f43f af47 	beq.w	1beba <ble_evt_handler+0x36>
   1c02c:	e76c      	b.n	1bf08 <ble_evt_handler+0x84>
        if (m_conn_params_config.evt_handler != NULL)
   1c02e:	696b      	ldr	r3, [r5, #20]
        p_instance->update_count = 0;
   1c030:	2200      	movs	r2, #0
   1c032:	7222      	strb	r2, [r4, #8]
        if (m_conn_params_config.evt_handler != NULL)
   1c034:	2b00      	cmp	r3, #0
   1c036:	f43f af40 	beq.w	1beba <ble_evt_handler+0x36>
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1c03a:	2201      	movs	r2, #1
            evt.conn_handle = conn_handle;
   1c03c:	f8ad 6006 	strh.w	r6, [sp, #6]
            evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
   1c040:	f88d 2004 	strb.w	r2, [sp, #4]
            m_conn_params_config.evt_handler(&evt);
   1c044:	a801      	add	r0, sp, #4
   1c046:	4798      	blx	r3
   1c048:	e737      	b.n	1beba <ble_evt_handler+0x36>
   1c04a:	bf00      	nop
   1c04c:	20001a68 	.word	0x20001a68
   1c050:	20001a4c 	.word	0x20001a4c
   1c054:	20001a7c 	.word	0x20001a7c

0001c058 <ble_conn_params_init>:
    VERIFY_PARAM_NOT_NULL(p_init);
   1c058:	b370      	cbz	r0, 1c0b8 <ble_conn_params_init+0x60>
{
   1c05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_conn_params_config = *p_init;
   1c05c:	4605      	mov	r5, r0
   1c05e:	4606      	mov	r6, r0
   1c060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c062:	4f16      	ldr	r7, [pc, #88]	; (1c0bc <ble_conn_params_init+0x64>)
   1c064:	463c      	mov	r4, r7
   1c066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (p_init->p_conn_params != NULL)
   1c068:	4684      	mov	ip, r0
    m_conn_params_config = *p_init;
   1c06a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    m_conn_params_config.p_conn_params = &m_preferred_conn_params;
   1c06e:	4d14      	ldr	r5, [pc, #80]	; (1c0c0 <ble_conn_params_init+0x68>)
   1c070:	603d      	str	r5, [r7, #0]
    m_conn_params_config = *p_init;
   1c072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (p_init->p_conn_params != NULL)
   1c076:	f1bc 0f00 	cmp.w	ip, #0
   1c07a:	d017      	beq.n	1c0ac <ble_conn_params_init+0x54>
        err_code = sd_ble_gap_ppcp_set(p_init->p_conn_params);
   1c07c:	4660      	mov	r0, ip
   1c07e:	f7ff fec1 	bl	1be04 <sd_ble_gap_ppcp_set>
        if (err_code != NRF_SUCCESS)
   1c082:	b990      	cbnz	r0, 1c0aa <ble_conn_params_init+0x52>
        m_preferred_conn_params = *p_init->p_conn_params;
   1c084:	6833      	ldr	r3, [r6, #0]
   1c086:	6818      	ldr	r0, [r3, #0]
   1c088:	6859      	ldr	r1, [r3, #4]
   1c08a:	c503      	stmia	r5!, {r0, r1}
    p_instance->conn_handle = BLE_CONN_HANDLE_INVALID;
   1c08c:	4b0d      	ldr	r3, [pc, #52]	; (1c0c4 <ble_conn_params_init+0x6c>)
        p_instance->timer_id = &m_timer_data[i];
   1c08e:	490e      	ldr	r1, [pc, #56]	; (1c0c8 <ble_conn_params_init+0x70>)
        err_code = app_timer_create(&p_instance->timer_id,
   1c090:	4a0e      	ldr	r2, [pc, #56]	; (1c0cc <ble_conn_params_init+0x74>)
        p_instance->timer_id = &m_timer_data[i];
   1c092:	4618      	mov	r0, r3
    p_instance->conn_handle = BLE_CONN_HANDLE_INVALID;
   1c094:	f64f 74ff 	movw	r4, #65535	; 0xffff
        p_instance->timer_id = &m_timer_data[i];
   1c098:	f840 1f04 	str.w	r1, [r0, #4]!
    p_instance->conn_handle = BLE_CONN_HANDLE_INVALID;
   1c09c:	801c      	strh	r4, [r3, #0]
        err_code = app_timer_create(&p_instance->timer_id,
   1c09e:	2100      	movs	r1, #0
   1c0a0:	f7fd fb34 	bl	1970c <app_timer_create>
            return NRF_ERROR_INTERNAL;
   1c0a4:	2800      	cmp	r0, #0
   1c0a6:	bf18      	it	ne
   1c0a8:	2003      	movne	r0, #3
}
   1c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        err_code = sd_ble_gap_ppcp_get(&m_preferred_conn_params);
   1c0ac:	4628      	mov	r0, r5
   1c0ae:	f7ff feab 	bl	1be08 <sd_ble_gap_ppcp_get>
        if (err_code != NRF_SUCCESS)
   1c0b2:	2800      	cmp	r0, #0
   1c0b4:	d0ea      	beq.n	1c08c <ble_conn_params_init+0x34>
}
   1c0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    VERIFY_PARAM_NOT_NULL(p_init);
   1c0b8:	200e      	movs	r0, #14
}
   1c0ba:	4770      	bx	lr
   1c0bc:	20001a4c 	.word	0x20001a4c
   1c0c0:	20001a7c 	.word	0x20001a7c
   1c0c4:	20001a68 	.word	0x20001a68
   1c0c8:	20001a88 	.word	0x20001a88
   1c0cc:	0001be0d 	.word	0x0001be0d

0001c0d0 <ble_conn_params_stop>:
{
   1c0d0:	b508      	push	{r3, lr}
        err_code = app_timer_stop(m_conn_params_instances[i].timer_id);
   1c0d2:	4b06      	ldr	r3, [pc, #24]	; (1c0ec <ble_conn_params_stop+0x1c>)
   1c0d4:	6858      	ldr	r0, [r3, #4]
   1c0d6:	f7fd fb6d 	bl	197b4 <app_timer_stop>
        switch (err_code)
   1c0da:	2804      	cmp	r0, #4
   1c0dc:	d004      	beq.n	1c0e8 <ble_conn_params_stop+0x18>
   1c0de:	f030 0008 	bics.w	r0, r0, #8
   1c0e2:	bf18      	it	ne
   1c0e4:	2003      	movne	r0, #3
}
   1c0e6:	bd08      	pop	{r3, pc}
                return NRF_ERROR_BUSY;
   1c0e8:	2011      	movs	r0, #17
}
   1c0ea:	bd08      	pop	{r3, pc}
   1c0ec:	20001a68 	.word	0x20001a68

0001c0f0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned Status;
  //
  INIT();
   1c0f4:	4f81      	ldr	r7, [pc, #516]	; (1c2fc <SEGGER_RTT_Write+0x20c>)
   1c0f6:	783b      	ldrb	r3, [r7, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c0f8:	b085      	sub	sp, #20
   1c0fa:	4680      	mov	r8, r0
   1c0fc:	468a      	mov	sl, r1
   1c0fe:	4691      	mov	r9, r2
  INIT();
   1c100:	b1eb      	cbz	r3, 1c13e <SEGGER_RTT_Write+0x4e>
  switch (pRing->Flags) {
   1c102:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1c106:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1c10a:	f04f 0b00 	mov.w	fp, #0
   1c10e:	f10d 000f 	add.w	r0, sp, #15
   1c112:	f88d b00f 	strb.w	fp, [sp, #15]
   1c116:	f7fd fb75 	bl	19804 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1c11a:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1c11c:	2e01      	cmp	r6, #1
   1c11e:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1c122:	f000 808d 	beq.w	1c240 <SEGGER_RTT_Write+0x150>
   1c126:	2e02      	cmp	r6, #2
   1c128:	d04f      	beq.n	1c1ca <SEGGER_RTT_Write+0xda>
   1c12a:	b346      	cbz	r6, 1c17e <SEGGER_RTT_Write+0x8e>
   1c12c:	465e      	mov	r6, fp
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
   1c12e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1c132:	f7fd fb8d 	bl	19850 <app_util_critical_region_exit>
  //
  return Status;
}
   1c136:	4630      	mov	r0, r6
   1c138:	b005      	add	sp, #20
   1c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c13e:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1c140:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c142:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1c144:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1c146:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c148:	4b6d      	ldr	r3, [pc, #436]	; (1c300 <SEGGER_RTT_Write+0x210>)
  p->aUp[0].sName         = "Terminal";
   1c14a:	496e      	ldr	r1, [pc, #440]	; (1c304 <SEGGER_RTT_Write+0x214>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c14c:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c14e:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c152:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c154:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c158:	4a6b      	ldr	r2, [pc, #428]	; (1c308 <SEGGER_RTT_Write+0x218>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c15a:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1c15c:	2310      	movs	r3, #16
   1c15e:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1c160:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1c162:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c164:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1c166:	4969      	ldr	r1, [pc, #420]	; (1c30c <SEGGER_RTT_Write+0x21c>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c168:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1c16a:	1df8      	adds	r0, r7, #7
   1c16c:	f000 fbd4 	bl	1c918 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1c170:	4967      	ldr	r1, [pc, #412]	; (1c310 <SEGGER_RTT_Write+0x220>)
   1c172:	4638      	mov	r0, r7
   1c174:	f000 fbd0 	bl	1c918 <strcpy>
  p->acID[6] = ' ';
   1c178:	2320      	movs	r3, #32
   1c17a:	71bb      	strb	r3, [r7, #6]
}
   1c17c:	e7c1      	b.n	1c102 <SEGGER_RTT_Write+0x12>
  RdOff = pRing->RdOff;
   1c17e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c180:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c184:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c186:	bf9c      	itt	ls
   1c188:	6a2a      	ldrls	r2, [r5, #32]
   1c18a:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1c18c:	3b01      	subs	r3, #1
   1c18e:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1c192:	4599      	cmp	r9, r3
   1c194:	d8cb      	bhi.n	1c12e <SEGGER_RTT_Write+0x3e>
  Rem = pRing->SizeOfBuffer - WrOff;
   1c196:	4444      	add	r4, r8
   1c198:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c19c:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1c1a0:	6a25      	ldr	r5, [r4, #32]
   1c1a2:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c1a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1c1aa:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c1ac:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1c1b0:	f080 8091 	bcs.w	1c2d6 <SEGGER_RTT_Write+0x1e6>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c1b4:	6878      	ldr	r0, [r7, #4]
   1c1b6:	4651      	mov	r1, sl
   1c1b8:	464a      	mov	r2, r9
   1c1ba:	4458      	add	r0, fp
   1c1bc:	f000 fb62 	bl	1c884 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c1c0:	eb09 030b 	add.w	r3, r9, fp
   1c1c4:	6263      	str	r3, [r4, #36]	; 0x24
   1c1c6:	464e      	mov	r6, r9
   1c1c8:	e7b1      	b.n	1c12e <SEGGER_RTT_Write+0x3e>
  WrOff = pRing->WrOff;
   1c1ca:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c1ce:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1c1d2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c1d4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1c1d8:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c1da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c1dc:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c1de:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c1e2:	d922      	bls.n	1c22a <SEGGER_RTT_Write+0x13a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c1e4:	1b13      	subs	r3, r2, r4
   1c1e6:	6a2a      	ldr	r2, [r5, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c1e8:	454b      	cmp	r3, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c1ea:	eb07 0108 	add.w	r1, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c1ee:	eba2 0b04 	sub.w	fp, r2, r4
   1c1f2:	bf28      	it	cs
   1c1f4:	464b      	movcs	r3, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c1f6:	459b      	cmp	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c1f8:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c1fa:	bf28      	it	cs
   1c1fc:	469b      	movcs	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c1fe:	4420      	add	r0, r4
   1c200:	4651      	mov	r1, sl
   1c202:	465a      	mov	r2, fp
   1c204:	f000 fb3e 	bl	1c884 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1c208:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1c20a:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c20c:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1c20e:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1c210:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1c214:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c216:	d00d      	beq.n	1c234 <SEGGER_RTT_Write+0x144>
    pRing->WrOff = WrOff;
   1c218:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c21a:	f1b9 0f00 	cmp.w	r9, #0
   1c21e:	d086      	beq.n	1c12e <SEGGER_RTT_Write+0x3e>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c220:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c222:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c224:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c228:	d8dc      	bhi.n	1c1e4 <SEGGER_RTT_Write+0xf4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1c22a:	6a2a      	ldr	r2, [r5, #32]
   1c22c:	4413      	add	r3, r2
   1c22e:	3b01      	subs	r3, #1
   1c230:	1b1b      	subs	r3, r3, r4
   1c232:	e7d9      	b.n	1c1e8 <SEGGER_RTT_Write+0xf8>
    pRing->WrOff = WrOff;
   1c234:	2400      	movs	r4, #0
   1c236:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c238:	f1b9 0f00 	cmp.w	r9, #0
   1c23c:	d1cd      	bne.n	1c1da <SEGGER_RTT_Write+0xea>
   1c23e:	e776      	b.n	1c12e <SEGGER_RTT_Write+0x3e>
  RdOff = pRing->RdOff;
   1c240:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c242:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c246:	455e      	cmp	r6, fp
   1c248:	d91d      	bls.n	1c286 <SEGGER_RTT_Write+0x196>
    r = RdOff - WrOff - 1u;
   1c24a:	3e01      	subs	r6, #1
   1c24c:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c250:	6a2d      	ldr	r5, [r5, #32]
   1c252:	454e      	cmp	r6, r9
   1c254:	bf28      	it	cs
   1c256:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c258:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c25c:	4296      	cmp	r6, r2
   1c25e:	d21e      	bcs.n	1c29e <SEGGER_RTT_Write+0x1ae>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c260:	f108 0301 	add.w	r3, r8, #1
   1c264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c268:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1c26c:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c26e:	6858      	ldr	r0, [r3, #4]
   1c270:	4632      	mov	r2, r6
   1c272:	4651      	mov	r1, sl
   1c274:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1c276:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c27a:	f000 fb03 	bl	1c884 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c27e:	eb0b 0206 	add.w	r2, fp, r6
   1c282:	627a      	str	r2, [r7, #36]	; 0x24
   1c284:	e753      	b.n	1c12e <SEGGER_RTT_Write+0x3e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c286:	6a2d      	ldr	r5, [r5, #32]
   1c288:	442e      	add	r6, r5
   1c28a:	3e01      	subs	r6, #1
   1c28c:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c290:	454e      	cmp	r6, r9
   1c292:	bf28      	it	cs
   1c294:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c296:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c29a:	4296      	cmp	r6, r2
   1c29c:	d3e0      	bcc.n	1c260 <SEGGER_RTT_Write+0x170>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c29e:	f108 0901 	add.w	r9, r8, #1
   1c2a2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1c2a6:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1c2aa:	4651      	mov	r1, sl
   1c2ac:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c2b0:	9201      	str	r2, [sp, #4]
   1c2b2:	4458      	add	r0, fp
   1c2b4:	f000 fae6 	bl	1c884 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1c2b8:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c2ba:	9a01      	ldr	r2, [sp, #4]
   1c2bc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1c2c0:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1c2c2:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1c2c4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c2c8:	eb0a 0102 	add.w	r1, sl, r2
   1c2cc:	462a      	mov	r2, r5
   1c2ce:	f000 fad9 	bl	1c884 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c2d2:	627d      	str	r5, [r7, #36]	; 0x24
   1c2d4:	e72b      	b.n	1c12e <SEGGER_RTT_Write+0x3e>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c2d6:	6878      	ldr	r0, [r7, #4]
   1c2d8:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1c2da:	44cb      	add	fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c2dc:	4632      	mov	r2, r6
   1c2de:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1c2e0:	ebab 0505 	sub.w	r5, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c2e4:	f000 face 	bl	1c884 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c2e8:	eb0a 0106 	add.w	r1, sl, r6
   1c2ec:	6878      	ldr	r0, [r7, #4]
   1c2ee:	462a      	mov	r2, r5
   1c2f0:	f000 fac8 	bl	1c884 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c2f4:	464e      	mov	r6, r9
   1c2f6:	6265      	str	r5, [r4, #36]	; 0x24
   1c2f8:	e719      	b.n	1c12e <SEGGER_RTT_Write+0x3e>
   1c2fa:	bf00      	nop
   1c2fc:	20001cd4 	.word	0x20001cd4
   1c300:	20001ab8 	.word	0x20001ab8
   1c304:	0001ef38 	.word	0x0001ef38
   1c308:	20001aa8 	.word	0x20001aa8
   1c30c:	0001ef44 	.word	0x0001ef44
   1c310:	0001ef48 	.word	0x0001ef48

0001c314 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INIT();
   1c318:	4f83      	ldr	r7, [pc, #524]	; (1c528 <SEGGER_RTT_WriteString+0x214>)
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c31a:	b085      	sub	sp, #20
   1c31c:	4680      	mov	r8, r0
  unsigned Len;

  Len = STRLEN(s);
   1c31e:	4608      	mov	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c320:	468a      	mov	sl, r1
  Len = STRLEN(s);
   1c322:	f000 fb01 	bl	1c928 <strlen>
  INIT();
   1c326:	783b      	ldrb	r3, [r7, #0]
  Len = STRLEN(s);
   1c328:	4681      	mov	r9, r0
  INIT();
   1c32a:	b1eb      	cbz	r3, 1c368 <SEGGER_RTT_WriteString+0x54>
  switch (pRing->Flags) {
   1c32c:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1c330:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1c334:	f04f 0b00 	mov.w	fp, #0
   1c338:	f10d 000f 	add.w	r0, sp, #15
   1c33c:	f88d b00f 	strb.w	fp, [sp, #15]
   1c340:	f7fd fa60 	bl	19804 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1c344:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1c346:	2e01      	cmp	r6, #1
   1c348:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1c34c:	f000 808d 	beq.w	1c46a <SEGGER_RTT_WriteString+0x156>
   1c350:	2e02      	cmp	r6, #2
   1c352:	d04f      	beq.n	1c3f4 <SEGGER_RTT_WriteString+0xe0>
   1c354:	b346      	cbz	r6, 1c3a8 <SEGGER_RTT_WriteString+0x94>
   1c356:	465e      	mov	r6, fp
  SEGGER_RTT_UNLOCK();
   1c358:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1c35c:	f7fd fa78 	bl	19850 <app_util_critical_region_exit>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
}
   1c360:	4630      	mov	r0, r6
   1c362:	b005      	add	sp, #20
   1c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c368:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1c36a:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c36c:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1c36e:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1c370:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c372:	4b6e      	ldr	r3, [pc, #440]	; (1c52c <SEGGER_RTT_WriteString+0x218>)
  p->aUp[0].sName         = "Terminal";
   1c374:	496e      	ldr	r1, [pc, #440]	; (1c530 <SEGGER_RTT_WriteString+0x21c>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c376:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c378:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c37c:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c37e:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c382:	4a6c      	ldr	r2, [pc, #432]	; (1c534 <SEGGER_RTT_WriteString+0x220>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c384:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1c386:	2310      	movs	r3, #16
   1c388:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1c38a:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1c38c:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c38e:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1c390:	4969      	ldr	r1, [pc, #420]	; (1c538 <SEGGER_RTT_WriteString+0x224>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c392:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1c394:	1df8      	adds	r0, r7, #7
   1c396:	f000 fabf 	bl	1c918 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1c39a:	4968      	ldr	r1, [pc, #416]	; (1c53c <SEGGER_RTT_WriteString+0x228>)
   1c39c:	4638      	mov	r0, r7
   1c39e:	f000 fabb 	bl	1c918 <strcpy>
  p->acID[6] = ' ';
   1c3a2:	2320      	movs	r3, #32
   1c3a4:	71bb      	strb	r3, [r7, #6]
}
   1c3a6:	e7c1      	b.n	1c32c <SEGGER_RTT_WriteString+0x18>
  RdOff = pRing->RdOff;
   1c3a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c3aa:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c3ae:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c3b0:	bf9c      	itt	ls
   1c3b2:	6a2a      	ldrls	r2, [r5, #32]
   1c3b4:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1c3b6:	3b01      	subs	r3, #1
   1c3b8:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1c3bc:	4599      	cmp	r9, r3
   1c3be:	d8cb      	bhi.n	1c358 <SEGGER_RTT_WriteString+0x44>
  Rem = pRing->SizeOfBuffer - WrOff;
   1c3c0:	4444      	add	r4, r8
   1c3c2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c3c6:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1c3ca:	6a25      	ldr	r5, [r4, #32]
   1c3cc:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c3d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1c3d4:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c3d6:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1c3da:	f080 8091 	bcs.w	1c500 <SEGGER_RTT_WriteString+0x1ec>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c3de:	6878      	ldr	r0, [r7, #4]
   1c3e0:	4651      	mov	r1, sl
   1c3e2:	464a      	mov	r2, r9
   1c3e4:	4458      	add	r0, fp
   1c3e6:	f000 fa4d 	bl	1c884 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c3ea:	eb09 030b 	add.w	r3, r9, fp
   1c3ee:	6263      	str	r3, [r4, #36]	; 0x24
   1c3f0:	464e      	mov	r6, r9
   1c3f2:	e7b1      	b.n	1c358 <SEGGER_RTT_WriteString+0x44>
  WrOff = pRing->WrOff;
   1c3f4:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c3f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1c3fc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c3fe:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1c402:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c404:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c406:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c408:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c40c:	d922      	bls.n	1c454 <SEGGER_RTT_WriteString+0x140>
   1c40e:	6a29      	ldr	r1, [r5, #32]
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c410:	1b12      	subs	r2, r2, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c412:	454a      	cmp	r2, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c414:	eb07 0308 	add.w	r3, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c418:	eba1 0b04 	sub.w	fp, r1, r4
   1c41c:	bf28      	it	cs
   1c41e:	464a      	movcs	r2, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c420:	4593      	cmp	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c422:	6858      	ldr	r0, [r3, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c424:	bf28      	it	cs
   1c426:	4693      	movcs	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c428:	4420      	add	r0, r4
   1c42a:	4651      	mov	r1, sl
   1c42c:	465a      	mov	r2, fp
   1c42e:	f000 fa29 	bl	1c884 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1c432:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1c434:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c436:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1c438:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1c43a:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1c43e:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c440:	d00d      	beq.n	1c45e <SEGGER_RTT_WriteString+0x14a>
    pRing->WrOff = WrOff;
   1c442:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c444:	f1b9 0f00 	cmp.w	r9, #0
   1c448:	d086      	beq.n	1c358 <SEGGER_RTT_WriteString+0x44>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c44a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c44c:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c44e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c452:	d8dc      	bhi.n	1c40e <SEGGER_RTT_WriteString+0xfa>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1c454:	6a29      	ldr	r1, [r5, #32]
   1c456:	185a      	adds	r2, r3, r1
   1c458:	3a01      	subs	r2, #1
   1c45a:	1b12      	subs	r2, r2, r4
   1c45c:	e7d9      	b.n	1c412 <SEGGER_RTT_WriteString+0xfe>
    pRing->WrOff = WrOff;
   1c45e:	2400      	movs	r4, #0
   1c460:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c462:	f1b9 0f00 	cmp.w	r9, #0
   1c466:	d1cd      	bne.n	1c404 <SEGGER_RTT_WriteString+0xf0>
   1c468:	e776      	b.n	1c358 <SEGGER_RTT_WriteString+0x44>
  RdOff = pRing->RdOff;
   1c46a:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c46c:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c470:	455e      	cmp	r6, fp
   1c472:	d91d      	bls.n	1c4b0 <SEGGER_RTT_WriteString+0x19c>
    r = RdOff - WrOff - 1u;
   1c474:	3e01      	subs	r6, #1
   1c476:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c47a:	6a2d      	ldr	r5, [r5, #32]
   1c47c:	454e      	cmp	r6, r9
   1c47e:	bf28      	it	cs
   1c480:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c482:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c486:	4296      	cmp	r6, r2
   1c488:	d21e      	bcs.n	1c4c8 <SEGGER_RTT_WriteString+0x1b4>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c48a:	f108 0301 	add.w	r3, r8, #1
   1c48e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c492:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1c496:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c498:	6858      	ldr	r0, [r3, #4]
   1c49a:	4632      	mov	r2, r6
   1c49c:	4651      	mov	r1, sl
   1c49e:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1c4a0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c4a4:	f000 f9ee 	bl	1c884 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c4a8:	eb0b 0206 	add.w	r2, fp, r6
   1c4ac:	627a      	str	r2, [r7, #36]	; 0x24
   1c4ae:	e753      	b.n	1c358 <SEGGER_RTT_WriteString+0x44>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c4b0:	6a2d      	ldr	r5, [r5, #32]
   1c4b2:	442e      	add	r6, r5
   1c4b4:	3e01      	subs	r6, #1
   1c4b6:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c4ba:	454e      	cmp	r6, r9
   1c4bc:	bf28      	it	cs
   1c4be:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c4c0:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c4c4:	4296      	cmp	r6, r2
   1c4c6:	d3e0      	bcc.n	1c48a <SEGGER_RTT_WriteString+0x176>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c4c8:	f108 0901 	add.w	r9, r8, #1
   1c4cc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1c4d0:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1c4d4:	4651      	mov	r1, sl
   1c4d6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c4da:	9201      	str	r2, [sp, #4]
   1c4dc:	4458      	add	r0, fp
   1c4de:	f000 f9d1 	bl	1c884 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1c4e2:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c4e4:	9a01      	ldr	r2, [sp, #4]
   1c4e6:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1c4ea:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1c4ec:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1c4ee:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c4f2:	eb0a 0102 	add.w	r1, sl, r2
   1c4f6:	462a      	mov	r2, r5
   1c4f8:	f000 f9c4 	bl	1c884 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c4fc:	627d      	str	r5, [r7, #36]	; 0x24
   1c4fe:	e72b      	b.n	1c358 <SEGGER_RTT_WriteString+0x44>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c500:	6878      	ldr	r0, [r7, #4]
   1c502:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1c504:	ebab 0b05 	sub.w	fp, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c508:	4632      	mov	r2, r6
   1c50a:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1c50c:	eb0b 0509 	add.w	r5, fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c510:	f000 f9b8 	bl	1c884 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c514:	eb0a 0106 	add.w	r1, sl, r6
   1c518:	6878      	ldr	r0, [r7, #4]
   1c51a:	462a      	mov	r2, r5
   1c51c:	f000 f9b2 	bl	1c884 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c520:	464e      	mov	r6, r9
   1c522:	6265      	str	r5, [r4, #36]	; 0x24
   1c524:	e718      	b.n	1c358 <SEGGER_RTT_WriteString+0x44>
   1c526:	bf00      	nop
   1c528:	20001cd4 	.word	0x20001cd4
   1c52c:	20001ab8 	.word	0x20001ab8
   1c530:	0001ef38 	.word	0x0001ef38
   1c534:	20001aa8 	.word	0x20001aa8
   1c538:	0001ef44 	.word	0x0001ef44
   1c53c:	0001ef48 	.word	0x0001ef48

0001c540 <ble_srv_is_notification_enabled>:
 *
 * @return      Decoded value.
 */
static __INLINE uint16_t uint16_decode(const uint8_t * p_encoded_data)
{
        return ( (((uint16_t)((uint8_t *)p_encoded_data)[0])) |
   1c540:	7800      	ldrb	r0, [r0, #0]

bool ble_srv_is_notification_enabled(uint8_t const * p_encoded_data)
{
    uint16_t cccd_value = uint16_decode(p_encoded_data);
    return ((cccd_value & BLE_GATT_HVX_NOTIFICATION) != 0);
}
   1c542:	f000 0001 	and.w	r0, r0, #1
   1c546:	4770      	bx	lr

0001c548 <sd_softdevice_enable>:
 * @retval ::NRF_ERROR_INVALID_STATE SoftDevice is already enabled, and the clock source and fault handler cannot be updated.
 * @retval ::NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION SoftDevice interrupt is already enabled, or an enabled interrupt has an illegal priority level.
 * @retval ::NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN Unknown low frequency clock source selected.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid clock source configuration supplied in p_clock_lf_cfg.
 */
SVCALL(SD_SOFTDEVICE_ENABLE, uint32_t, sd_softdevice_enable(nrf_clock_lf_cfg_t const * p_clock_lf_cfg, nrf_fault_handler_t fault_handler));
   1c548:	df10      	svc	16
   1c54a:	4770      	bx	lr

0001c54c <nrf_sdh_enable_request>:
#endif
}


ret_code_t nrf_sdh_enable_request(void)
{
   1c54c:	b570      	push	{r4, r5, r6, lr}
    ret_code_t ret_code;

    if (m_nrf_sdh_enabled)
   1c54e:	4d3c      	ldr	r5, [pc, #240]	; (1c640 <nrf_sdh_enable_request+0xf4>)
   1c550:	782b      	ldrb	r3, [r5, #0]
{
   1c552:	b084      	sub	sp, #16
    if (m_nrf_sdh_enabled)
   1c554:	2b00      	cmp	r3, #0
   1c556:	d166      	bne.n	1c626 <nrf_sdh_enable_request+0xda>
    {
        return NRF_ERROR_INVALID_STATE;
    }

    m_nrf_sdh_continue = true;
   1c558:	4e3a      	ldr	r6, [pc, #232]	; (1c644 <nrf_sdh_enable_request+0xf8>)
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c55a:	493b      	ldr	r1, [pc, #236]	; (1c648 <nrf_sdh_enable_request+0xfc>)
    m_nrf_sdh_continue = true;
   1c55c:	2301      	movs	r3, #1
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c55e:	a802      	add	r0, sp, #8
    m_nrf_sdh_continue = true;
   1c560:	7033      	strb	r3, [r6, #0]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c562:	f7fd fb8b 	bl	19c7c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c566:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c568:	b923      	cbnz	r3, 1c574 <nrf_sdh_enable_request+0x28>
   1c56a:	e00e      	b.n	1c58a <nrf_sdh_enable_request+0x3e>
         nrf_section_iter_next(&iter))
   1c56c:	f7fd fb90 	bl	19c90 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c570:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c572:	b153      	cbz	r3, 1c58a <nrf_sdh_enable_request+0x3e>
        if (handler(req, p_observer->p_context))
   1c574:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c578:	2000      	movs	r0, #0
   1c57a:	4790      	blx	r2
   1c57c:	4604      	mov	r4, r0
         nrf_section_iter_next(&iter))
   1c57e:	a802      	add	r0, sp, #8
        if (handler(req, p_observer->p_context))
   1c580:	2c00      	cmp	r4, #0
   1c582:	d1f3      	bne.n	1c56c <nrf_sdh_enable_request+0x20>

    // Notify observers about a finished SoftDevice enable process.
    sdh_state_observer_notify(NRF_SDH_EVT_STATE_ENABLED);

    return NRF_SUCCESS;
}
   1c584:	4620      	mov	r0, r4
   1c586:	b004      	add	sp, #16
   1c588:	bd70      	pop	{r4, r5, r6, pc}
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c58a:	4930      	ldr	r1, [pc, #192]	; (1c64c <nrf_sdh_enable_request+0x100>)
   1c58c:	a802      	add	r0, sp, #8
   1c58e:	f7fd fb75 	bl	19c7c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c592:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c594:	b14b      	cbz	r3, 1c5aa <nrf_sdh_enable_request+0x5e>
        handler(evt, p_observer->p_context);
   1c596:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c59a:	2000      	movs	r0, #0
   1c59c:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c59e:	a802      	add	r0, sp, #8
   1c5a0:	f7fd fb76 	bl	19c90 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c5a4:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c5a6:	2b00      	cmp	r3, #0
   1c5a8:	d1f5      	bne.n	1c596 <nrf_sdh_enable_request+0x4a>
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c5aa:	4a29      	ldr	r2, [pc, #164]	; (1c650 <nrf_sdh_enable_request+0x104>)
    CRITICAL_REGION_ENTER();
   1c5ac:	2300      	movs	r3, #0
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c5ae:	6812      	ldr	r2, [r2, #0]
    CRITICAL_REGION_ENTER();
   1c5b0:	f88d 3008 	strb.w	r3, [sp, #8]
   1c5b4:	a802      	add	r0, sp, #8
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c5b6:	9201      	str	r2, [sp, #4]
    CRITICAL_REGION_ENTER();
   1c5b8:	f7fd f924 	bl	19804 <app_util_critical_region_enter>
    ret_code = sd_softdevice_enable(&clock_lf_cfg, app_error_fault_handler);
   1c5bc:	4925      	ldr	r1, [pc, #148]	; (1c654 <nrf_sdh_enable_request+0x108>)
   1c5be:	a801      	add	r0, sp, #4
   1c5c0:	f7ff ffc2 	bl	1c548 <sd_softdevice_enable>
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   1c5c4:	fab0 f380 	clz	r3, r0
   1c5c8:	4604      	mov	r4, r0
   1c5ca:	095b      	lsrs	r3, r3, #5
    CRITICAL_REGION_EXIT();
   1c5cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   1c5d0:	702b      	strb	r3, [r5, #0]
    CRITICAL_REGION_EXIT();
   1c5d2:	f7fd f93d 	bl	19850 <app_util_critical_region_exit>
    if (ret_code != NRF_SUCCESS)
   1c5d6:	2c00      	cmp	r4, #0
   1c5d8:	d1d4      	bne.n	1c584 <nrf_sdh_enable_request+0x38>
    m_nrf_sdh_suspended = false;
   1c5da:	4b1f      	ldr	r3, [pc, #124]	; (1c658 <nrf_sdh_enable_request+0x10c>)
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
   1c5dc:	491f      	ldr	r1, [pc, #124]	; (1c65c <nrf_sdh_enable_request+0x110>)
   1c5de:	701c      	strb	r4, [r3, #0]
    m_nrf_sdh_continue  = false;
   1c5e0:	7034      	strb	r4, [r6, #0]
   1c5e2:	f891 2316 	ldrb.w	r2, [r1, #790]	; 0x316
   || (((1 << priority) & __NRF_NVIC_APP_IRQ_PRIOS) == 0)
   1c5e6:	23ec      	movs	r3, #236	; 0xec
   1c5e8:	0952      	lsrs	r2, r2, #5
   1c5ea:	4113      	asrs	r3, r2
   1c5ec:	07db      	lsls	r3, r3, #31
   1c5ee:	d51e      	bpl.n	1c62e <nrf_sdh_enable_request+0xe2>
  if (nrf_nvic_state.__cr_flag)
   1c5f0:	4b1b      	ldr	r3, [pc, #108]	; (1c660 <nrf_sdh_enable_request+0x114>)
   1c5f2:	689a      	ldr	r2, [r3, #8]
   1c5f4:	b302      	cbz	r2, 1c638 <nrf_sdh_enable_request+0xec>
    nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] |= (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));
   1c5f6:	681a      	ldr	r2, [r3, #0]
   1c5f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1c5fc:	601a      	str	r2, [r3, #0]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c5fe:	4913      	ldr	r1, [pc, #76]	; (1c64c <nrf_sdh_enable_request+0x100>)
   1c600:	a802      	add	r0, sp, #8
   1c602:	f7fd fb3b 	bl	19c7c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c606:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c608:	2b00      	cmp	r3, #0
   1c60a:	d0bb      	beq.n	1c584 <nrf_sdh_enable_request+0x38>
        handler(evt, p_observer->p_context);
   1c60c:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c610:	2001      	movs	r0, #1
   1c612:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c614:	a802      	add	r0, sp, #8
   1c616:	f7fd fb3b 	bl	19c90 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c61a:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c61c:	2b00      	cmp	r3, #0
   1c61e:	d1f5      	bne.n	1c60c <nrf_sdh_enable_request+0xc0>
}
   1c620:	4620      	mov	r0, r4
   1c622:	b004      	add	sp, #16
   1c624:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_INVALID_STATE;
   1c626:	2408      	movs	r4, #8
}
   1c628:	4620      	mov	r0, r4
   1c62a:	b004      	add	sp, #16
   1c62c:	bd70      	pop	{r4, r5, r6, pc}
    APP_ERROR_CHECK(ret_code);
   1c62e:	f242 0002 	movw	r0, #8194	; 0x2002
   1c632:	f7fc fe77 	bl	19324 <app_error_handler_bare>
   1c636:	e7e2      	b.n	1c5fe <nrf_sdh_enable_request+0xb2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1c638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c63c:	600b      	str	r3, [r1, #0]
   1c63e:	e7de      	b.n	1c5fe <nrf_sdh_enable_request+0xb2>
   1c640:	20001cb9 	.word	0x20001cb9
   1c644:	20001cb8 	.word	0x20001cb8
   1c648:	0001ef54 	.word	0x0001ef54
   1c64c:	0001ef6c 	.word	0x0001ef6c
   1c650:	0001ef50 	.word	0x0001ef50
   1c654:	00019345 	.word	0x00019345
   1c658:	20001cba 	.word	0x20001cba
   1c65c:	e000e100 	.word	0xe000e100
   1c660:	20001cc8 	.word	0x20001cc8

0001c664 <nrf_sdh_is_enabled>:
}


bool nrf_sdh_is_enabled(void)
{
    return m_nrf_sdh_enabled;
   1c664:	4b01      	ldr	r3, [pc, #4]	; (1c66c <nrf_sdh_is_enabled+0x8>)
}
   1c666:	7818      	ldrb	r0, [r3, #0]
   1c668:	4770      	bx	lr
   1c66a:	bf00      	nop
   1c66c:	20001cb9 	.word	0x20001cb9

0001c670 <SWI2_IRQHandler>:


#if (NRF_SDH_DISPATCH_MODEL == NRF_SDH_DISPATCH_MODEL_INTERRUPT)

void SD_EVT_IRQHandler(void)
{
   1c670:	b500      	push	{lr}
   1c672:	b083      	sub	sp, #12
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c674:	4908      	ldr	r1, [pc, #32]	; (1c698 <SWI2_IRQHandler+0x28>)
   1c676:	4668      	mov	r0, sp
   1c678:	f7fd fb00 	bl	19c7c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c67c:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c67e:	b143      	cbz	r3, 1c692 <SWI2_IRQHandler+0x22>
        handler(p_observer->p_context);
   1c680:	e9d3 2000 	ldrd	r2, r0, [r3]
   1c684:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c686:	4668      	mov	r0, sp
   1c688:	f7fd fb02 	bl	19c90 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c68c:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c68e:	2b00      	cmp	r3, #0
   1c690:	d1f6      	bne.n	1c680 <SWI2_IRQHandler+0x10>
    nrf_sdh_evts_poll();
}
   1c692:	b003      	add	sp, #12
   1c694:	f85d fb04 	ldr.w	pc, [sp], #4
   1c698:	0001ef60 	.word	0x0001ef60

0001c69c <sd_ble_enable>:
 *                                      and set the start address of the application RAM region accordingly.
 *                                    - Dynamic part of the SoftDevice RAM region is larger then 64 kB which
 *                                      is currently not supported.
 * @retval ::NRF_ERROR_RESOURCES      The total number of L2CAP Channels configured using @ref sd_ble_cfg_set is too large.
 */
SVCALL(SD_BLE_ENABLE, uint32_t, sd_ble_enable(uint32_t * p_app_ram_base));
   1c69c:	df60      	svc	96	; 0x60
   1c69e:	4770      	bx	lr

0001c6a0 <sd_ble_cfg_set>:
 * @retval ::NRF_ERROR_INVALID_ADDR   Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_INVALID_PARAM  Invalid cfg_id supplied.
 * @retval ::NRF_ERROR_NO_MEM         The amount of memory assigned to the SoftDevice by app_ram_base is not
 *                                    large enough to fit this configuration's memory requirement.
 */
SVCALL(SD_BLE_CFG_SET, uint32_t, sd_ble_cfg_set(uint32_t cfg_id, ble_cfg_t const * p_cfg, uint32_t app_ram_base));
   1c6a0:	df69      	svc	105	; 0x69
   1c6a2:	4770      	bx	lr

0001c6a4 <sd_ble_evt_get>:
 * @retval ::NRF_SUCCESS Event pulled and stored into the supplied buffer.
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_NOT_FOUND No events ready to be pulled.
 * @retval ::NRF_ERROR_DATA_SIZE Event ready but could not fit into the supplied buffer.
 */
SVCALL(SD_BLE_EVT_GET, uint32_t, sd_ble_evt_get(uint8_t *p_dest, uint16_t *p_len));
   1c6a4:	df61      	svc	97	; 0x61
   1c6a6:	4770      	bx	lr

0001c6a8 <nrf_sdh_ble_evts_poll>:
{
    UNUSED_VARIABLE(p_context);

    ret_code_t ret_code;

    if (!m_stack_is_enabled)
   1c6a8:	4b14      	ldr	r3, [pc, #80]	; (1c6fc <nrf_sdh_ble_evts_poll+0x54>)
   1c6aa:	781b      	ldrb	r3, [r3, #0]
   1c6ac:	b32b      	cbz	r3, 1c6fa <nrf_sdh_ble_evts_poll+0x52>
{
   1c6ae:	b530      	push	{r4, r5, lr}

        NRF_LOG_DEBUG("BLE event: 0x%x.", p_ble_evt->header.evt_id);

        // Forward the event to BLE observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c6b0:	4d13      	ldr	r5, [pc, #76]	; (1c700 <nrf_sdh_ble_evts_poll+0x58>)
{
   1c6b2:	b091      	sub	sp, #68	; 0x44
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1c6b4:	2434      	movs	r4, #52	; 0x34
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1c6b6:	f10d 0102 	add.w	r1, sp, #2
   1c6ba:	a803      	add	r0, sp, #12
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1c6bc:	f8ad 4002 	strh.w	r4, [sp, #2]
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1c6c0:	f7ff fff0 	bl	1c6a4 <sd_ble_evt_get>
        if (ret_code != NRF_SUCCESS)
   1c6c4:	b988      	cbnz	r0, 1c6ea <nrf_sdh_ble_evts_poll+0x42>
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c6c6:	4629      	mov	r1, r5
   1c6c8:	a801      	add	r0, sp, #4
   1c6ca:	f7fd fad7 	bl	19c7c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1c6ce:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	d0f0      	beq.n	1c6b6 <nrf_sdh_ble_evts_poll+0xe>
            nrf_sdh_ble_evt_handler_t    handler;

            p_observer = (nrf_sdh_ble_evt_observer_t *)nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(p_ble_evt, p_observer->p_context);
   1c6d4:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c6d8:	a803      	add	r0, sp, #12
   1c6da:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1c6dc:	a801      	add	r0, sp, #4
   1c6de:	f7fd fad7 	bl	19c90 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1c6e2:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c6e4:	2b00      	cmp	r3, #0
   1c6e6:	d1f5      	bne.n	1c6d4 <nrf_sdh_ble_evts_poll+0x2c>
   1c6e8:	e7e5      	b.n	1c6b6 <nrf_sdh_ble_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1c6ea:	2805      	cmp	r0, #5
   1c6ec:	d101      	bne.n	1c6f2 <nrf_sdh_ble_evts_poll+0x4a>
    {
        APP_ERROR_HANDLER(ret_code);
    }
}
   1c6ee:	b011      	add	sp, #68	; 0x44
   1c6f0:	bd30      	pop	{r4, r5, pc}
        APP_ERROR_HANDLER(ret_code);
   1c6f2:	f7fc fe17 	bl	19324 <app_error_handler_bare>
}
   1c6f6:	b011      	add	sp, #68	; 0x44
   1c6f8:	bd30      	pop	{r4, r5, pc}
   1c6fa:	4770      	bx	lr
   1c6fc:	20001cbb 	.word	0x20001cbb
   1c700:	0001ef78 	.word	0x0001ef78

0001c704 <nrf_sdh_ble_default_cfg_set>:
    if (p_app_ram_start == NULL)
   1c704:	2900      	cmp	r1, #0
   1c706:	d04f      	beq.n	1c7a8 <nrf_sdh_ble_default_cfg_set+0xa4>
{
   1c708:	b570      	push	{r4, r5, r6, lr}
    *p_app_ram_start = APP_RAM_START;
   1c70a:	4b28      	ldr	r3, [pc, #160]	; (1c7ac <nrf_sdh_ble_default_cfg_set+0xa8>)
   1c70c:	600b      	str	r3, [r1, #0]
{
   1c70e:	b084      	sub	sp, #16
   1c710:	460c      	mov	r4, r1
   1c712:	4605      	mov	r5, r0
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1c714:	220c      	movs	r2, #12
   1c716:	a801      	add	r0, sp, #4
   1c718:	2100      	movs	r1, #0
   1c71a:	f000 f8c1 	bl	1c8a0 <memset>
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   1c71e:	2601      	movs	r6, #1
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   1c720:	2306      	movs	r3, #6
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1c722:	6822      	ldr	r2, [r4, #0]
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   1c724:	f8ad 3008 	strh.w	r3, [sp, #8]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1c728:	a901      	add	r1, sp, #4
   1c72a:	2020      	movs	r0, #32
    ble_cfg.conn_cfg.conn_cfg_tag                     = conn_cfg_tag;
   1c72c:	f88d 5004 	strb.w	r5, [sp, #4]
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   1c730:	f88d 6006 	strb.w	r6, [sp, #6]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1c734:	f7ff ffb4 	bl	1c6a0 <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1c738:	a801      	add	r0, sp, #4
   1c73a:	220c      	movs	r2, #12
   1c73c:	2100      	movs	r1, #0
   1c73e:	f000 f8af 	bl	1c8a0 <memset>
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   1c742:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
   1c744:	f88d 6005 	strb.w	r6, [sp, #5]
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   1c748:	a901      	add	r1, sp, #4
   1c74a:	2040      	movs	r0, #64	; 0x40
   1c74c:	f7ff ffa8 	bl	1c6a0 <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1c750:	a801      	add	r0, sp, #4
   1c752:	220c      	movs	r2, #12
   1c754:	2100      	movs	r1, #0
   1c756:	f000 f8a3 	bl	1c8a0 <memset>
    ble_cfg.common_cfg.vs_uuid_cfg.vs_uuid_count = NRF_SDH_BLE_VS_UUID_COUNT;
   1c75a:	2500      	movs	r5, #0
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   1c75c:	6822      	ldr	r2, [r4, #0]
    ble_cfg.common_cfg.vs_uuid_cfg.vs_uuid_count = NRF_SDH_BLE_VS_UUID_COUNT;
   1c75e:	f88d 5004 	strb.w	r5, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   1c762:	a901      	add	r1, sp, #4
   1c764:	4630      	mov	r0, r6
   1c766:	f7ff ff9b 	bl	1c6a0 <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   1c76a:	4629      	mov	r1, r5
   1c76c:	a801      	add	r0, sp, #4
   1c76e:	220c      	movs	r2, #12
   1c770:	f000 f896 	bl	1c8a0 <memset>
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   1c774:	23f8      	movs	r3, #248	; 0xf8
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   1c776:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   1c778:	9301      	str	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   1c77a:	a901      	add	r1, sp, #4
   1c77c:	20a1      	movs	r0, #161	; 0xa1
   1c77e:	f7ff ff8f 	bl	1c6a0 <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   1c782:	4629      	mov	r1, r5
   1c784:	a801      	add	r0, sp, #4
   1c786:	220c      	movs	r2, #12
   1c788:	f000 f88a 	bl	1c8a0 <memset>
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1c78c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1c790:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1c792:	f365 0300 	bfi	r3, r5, #0, #1
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1c796:	a901      	add	r1, sp, #4
   1c798:	20a0      	movs	r0, #160	; 0xa0
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1c79a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1c79e:	f7ff ff7f 	bl	1c6a0 <sd_ble_cfg_set>
    return NRF_SUCCESS;
   1c7a2:	4628      	mov	r0, r5
}
   1c7a4:	b004      	add	sp, #16
   1c7a6:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_NULL;
   1c7a8:	200e      	movs	r0, #14
}
   1c7aa:	4770      	bx	lr
   1c7ac:	20001800 	.word	0x20001800

0001c7b0 <nrf_sdh_ble_enable>:
{
   1c7b0:	b508      	push	{r3, lr}
    ret_code_t ret_code = sd_ble_enable(p_app_ram_start);
   1c7b2:	f7ff ff73 	bl	1c69c <sd_ble_enable>
    if (ret_code == NRF_SUCCESS)
   1c7b6:	b910      	cbnz	r0, 1c7be <nrf_sdh_ble_enable+0xe>
        m_stack_is_enabled = true;
   1c7b8:	4b01      	ldr	r3, [pc, #4]	; (1c7c0 <nrf_sdh_ble_enable+0x10>)
   1c7ba:	2201      	movs	r2, #1
   1c7bc:	701a      	strb	r2, [r3, #0]
}
   1c7be:	bd08      	pop	{r3, pc}
   1c7c0:	20001cbb 	.word	0x20001cbb

0001c7c4 <sd_evt_get>:
SVCALL(SD_EVT_GET, uint32_t, sd_evt_get(uint32_t * p_evt_id));
   1c7c4:	df4b      	svc	75	; 0x4b
   1c7c6:	4770      	bx	lr

0001c7c8 <nrf_sdh_soc_evts_poll>:
/**@brief   Function for polling SoC events.
 *
 * @param[in]   p_context   Context of the observer.
 */
static void nrf_sdh_soc_evts_poll(void * p_context)
{
   1c7c8:	b510      	push	{r4, lr}

        NRF_LOG_DEBUG("SoC event: 0x%x.", evt_id);

        // Forward the event to SoC observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1c7ca:	4c11      	ldr	r4, [pc, #68]	; (1c810 <nrf_sdh_soc_evts_poll+0x48>)
{
   1c7cc:	b084      	sub	sp, #16
        ret_code = sd_evt_get(&evt_id);
   1c7ce:	a801      	add	r0, sp, #4
   1c7d0:	f7ff fff8 	bl	1c7c4 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1c7d4:	b9a8      	cbnz	r0, 1c802 <nrf_sdh_soc_evts_poll+0x3a>
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1c7d6:	4621      	mov	r1, r4
   1c7d8:	a802      	add	r0, sp, #8
   1c7da:	f7fd fa4f 	bl	19c7c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1c7de:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	d0f4      	beq.n	1c7ce <nrf_sdh_soc_evts_poll+0x6>
            nrf_sdh_soc_evt_handler_t    handler;

            p_observer = (nrf_sdh_soc_evt_observer_t *) nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(evt_id, p_observer->p_context);
   1c7e4:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c7e8:	9801      	ldr	r0, [sp, #4]
   1c7ea:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1c7ec:	a802      	add	r0, sp, #8
   1c7ee:	f7fd fa4f 	bl	19c90 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1c7f2:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1c7f4:	2b00      	cmp	r3, #0
   1c7f6:	d1f5      	bne.n	1c7e4 <nrf_sdh_soc_evts_poll+0x1c>
        ret_code = sd_evt_get(&evt_id);
   1c7f8:	a801      	add	r0, sp, #4
   1c7fa:	f7ff ffe3 	bl	1c7c4 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1c7fe:	2800      	cmp	r0, #0
   1c800:	d0e9      	beq.n	1c7d6 <nrf_sdh_soc_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1c802:	2805      	cmp	r0, #5
   1c804:	d001      	beq.n	1c80a <nrf_sdh_soc_evts_poll+0x42>
    {
        APP_ERROR_HANDLER(ret_code);
   1c806:	f7fc fd8d 	bl	19324 <app_error_handler_bare>
    }
}
   1c80a:	b004      	add	sp, #16
   1c80c:	bd10      	pop	{r4, pc}
   1c80e:	bf00      	nop
   1c810:	0001ef84 	.word	0x0001ef84

0001c814 <exit>:
   1c814:	b508      	push	{r3, lr}
   1c816:	4b07      	ldr	r3, [pc, #28]	; (1c834 <exit+0x20>)
   1c818:	4604      	mov	r4, r0
   1c81a:	b113      	cbz	r3, 1c822 <exit+0xe>
   1c81c:	2100      	movs	r1, #0
   1c81e:	f3af 8000 	nop.w
   1c822:	4b05      	ldr	r3, [pc, #20]	; (1c838 <exit+0x24>)
   1c824:	6818      	ldr	r0, [r3, #0]
   1c826:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1c828:	b103      	cbz	r3, 1c82c <exit+0x18>
   1c82a:	4798      	blx	r3
   1c82c:	4620      	mov	r0, r4
   1c82e:	f000 fce3 	bl	1d1f8 <_exit>
   1c832:	bf00      	nop
   1c834:	00000000 	.word	0x00000000
   1c838:	0001ef90 	.word	0x0001ef90

0001c83c <__libc_init_array>:
   1c83c:	b570      	push	{r4, r5, r6, lr}
   1c83e:	4d0d      	ldr	r5, [pc, #52]	; (1c874 <__libc_init_array+0x38>)
   1c840:	4c0d      	ldr	r4, [pc, #52]	; (1c878 <__libc_init_array+0x3c>)
   1c842:	1b64      	subs	r4, r4, r5
   1c844:	10a4      	asrs	r4, r4, #2
   1c846:	2600      	movs	r6, #0
   1c848:	42a6      	cmp	r6, r4
   1c84a:	d109      	bne.n	1c860 <__libc_init_array+0x24>
   1c84c:	4d0b      	ldr	r5, [pc, #44]	; (1c87c <__libc_init_array+0x40>)
   1c84e:	4c0c      	ldr	r4, [pc, #48]	; (1c880 <__libc_init_array+0x44>)
   1c850:	f002 f88e 	bl	1e970 <_init>
   1c854:	1b64      	subs	r4, r4, r5
   1c856:	10a4      	asrs	r4, r4, #2
   1c858:	2600      	movs	r6, #0
   1c85a:	42a6      	cmp	r6, r4
   1c85c:	d105      	bne.n	1c86a <__libc_init_array+0x2e>
   1c85e:	bd70      	pop	{r4, r5, r6, pc}
   1c860:	f855 3b04 	ldr.w	r3, [r5], #4
   1c864:	4798      	blx	r3
   1c866:	3601      	adds	r6, #1
   1c868:	e7ee      	b.n	1c848 <__libc_init_array+0xc>
   1c86a:	f855 3b04 	ldr.w	r3, [r5], #4
   1c86e:	4798      	blx	r3
   1c870:	3601      	adds	r6, #1
   1c872:	e7f2      	b.n	1c85a <__libc_init_array+0x1e>
   1c874:	200018a0 	.word	0x200018a0
   1c878:	200018a0 	.word	0x200018a0
   1c87c:	200018a0 	.word	0x200018a0
   1c880:	200018a8 	.word	0x200018a8

0001c884 <memcpy>:
   1c884:	440a      	add	r2, r1
   1c886:	4291      	cmp	r1, r2
   1c888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1c88c:	d100      	bne.n	1c890 <memcpy+0xc>
   1c88e:	4770      	bx	lr
   1c890:	b510      	push	{r4, lr}
   1c892:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c896:	f803 4f01 	strb.w	r4, [r3, #1]!
   1c89a:	4291      	cmp	r1, r2
   1c89c:	d1f9      	bne.n	1c892 <memcpy+0xe>
   1c89e:	bd10      	pop	{r4, pc}

0001c8a0 <memset>:
   1c8a0:	4402      	add	r2, r0
   1c8a2:	4603      	mov	r3, r0
   1c8a4:	4293      	cmp	r3, r2
   1c8a6:	d100      	bne.n	1c8aa <memset+0xa>
   1c8a8:	4770      	bx	lr
   1c8aa:	f803 1b01 	strb.w	r1, [r3], #1
   1c8ae:	e7f9      	b.n	1c8a4 <memset+0x4>

0001c8b0 <sniprintf>:
   1c8b0:	b40c      	push	{r2, r3}
   1c8b2:	b530      	push	{r4, r5, lr}
   1c8b4:	4b17      	ldr	r3, [pc, #92]	; (1c914 <sniprintf+0x64>)
   1c8b6:	1e0c      	subs	r4, r1, #0
   1c8b8:	681d      	ldr	r5, [r3, #0]
   1c8ba:	b09d      	sub	sp, #116	; 0x74
   1c8bc:	da08      	bge.n	1c8d0 <sniprintf+0x20>
   1c8be:	238b      	movs	r3, #139	; 0x8b
   1c8c0:	602b      	str	r3, [r5, #0]
   1c8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8c6:	b01d      	add	sp, #116	; 0x74
   1c8c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c8cc:	b002      	add	sp, #8
   1c8ce:	4770      	bx	lr
   1c8d0:	f44f 7302 	mov.w	r3, #520	; 0x208
   1c8d4:	f8ad 3014 	strh.w	r3, [sp, #20]
   1c8d8:	bf14      	ite	ne
   1c8da:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1c8de:	4623      	moveq	r3, r4
   1c8e0:	9304      	str	r3, [sp, #16]
   1c8e2:	9307      	str	r3, [sp, #28]
   1c8e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c8e8:	9002      	str	r0, [sp, #8]
   1c8ea:	9006      	str	r0, [sp, #24]
   1c8ec:	f8ad 3016 	strh.w	r3, [sp, #22]
   1c8f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c8f2:	ab21      	add	r3, sp, #132	; 0x84
   1c8f4:	a902      	add	r1, sp, #8
   1c8f6:	4628      	mov	r0, r5
   1c8f8:	9301      	str	r3, [sp, #4]
   1c8fa:	f000 f879 	bl	1c9f0 <_svfiprintf_r>
   1c8fe:	1c43      	adds	r3, r0, #1
   1c900:	bfbc      	itt	lt
   1c902:	238b      	movlt	r3, #139	; 0x8b
   1c904:	602b      	strlt	r3, [r5, #0]
   1c906:	2c00      	cmp	r4, #0
   1c908:	d0dd      	beq.n	1c8c6 <sniprintf+0x16>
   1c90a:	9b02      	ldr	r3, [sp, #8]
   1c90c:	2200      	movs	r2, #0
   1c90e:	701a      	strb	r2, [r3, #0]
   1c910:	e7d9      	b.n	1c8c6 <sniprintf+0x16>
   1c912:	bf00      	nop
   1c914:	2000183c 	.word	0x2000183c

0001c918 <strcpy>:
   1c918:	4603      	mov	r3, r0
   1c91a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c91e:	f803 2b01 	strb.w	r2, [r3], #1
   1c922:	2a00      	cmp	r2, #0
   1c924:	d1f9      	bne.n	1c91a <strcpy+0x2>
   1c926:	4770      	bx	lr

0001c928 <strlen>:
   1c928:	4603      	mov	r3, r0
   1c92a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1c92e:	2a00      	cmp	r2, #0
   1c930:	d1fb      	bne.n	1c92a <strlen+0x2>
   1c932:	1a18      	subs	r0, r3, r0
   1c934:	3801      	subs	r0, #1
   1c936:	4770      	bx	lr

0001c938 <__ssputs_r>:
   1c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c93c:	688e      	ldr	r6, [r1, #8]
   1c93e:	429e      	cmp	r6, r3
   1c940:	4682      	mov	sl, r0
   1c942:	460c      	mov	r4, r1
   1c944:	4690      	mov	r8, r2
   1c946:	461f      	mov	r7, r3
   1c948:	d838      	bhi.n	1c9bc <__ssputs_r+0x84>
   1c94a:	898a      	ldrh	r2, [r1, #12]
   1c94c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1c950:	d032      	beq.n	1c9b8 <__ssputs_r+0x80>
   1c952:	6825      	ldr	r5, [r4, #0]
   1c954:	6909      	ldr	r1, [r1, #16]
   1c956:	eba5 0901 	sub.w	r9, r5, r1
   1c95a:	6965      	ldr	r5, [r4, #20]
   1c95c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1c964:	3301      	adds	r3, #1
   1c966:	444b      	add	r3, r9
   1c968:	106d      	asrs	r5, r5, #1
   1c96a:	429d      	cmp	r5, r3
   1c96c:	bf38      	it	cc
   1c96e:	461d      	movcc	r5, r3
   1c970:	0553      	lsls	r3, r2, #21
   1c972:	d531      	bpl.n	1c9d8 <__ssputs_r+0xa0>
   1c974:	4629      	mov	r1, r5
   1c976:	f000 fb8b 	bl	1d090 <_malloc_r>
   1c97a:	4606      	mov	r6, r0
   1c97c:	b950      	cbnz	r0, 1c994 <__ssputs_r+0x5c>
   1c97e:	230c      	movs	r3, #12
   1c980:	f8ca 3000 	str.w	r3, [sl]
   1c984:	89a3      	ldrh	r3, [r4, #12]
   1c986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c98a:	81a3      	strh	r3, [r4, #12]
   1c98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c994:	6921      	ldr	r1, [r4, #16]
   1c996:	464a      	mov	r2, r9
   1c998:	f7ff ff74 	bl	1c884 <memcpy>
   1c99c:	89a3      	ldrh	r3, [r4, #12]
   1c99e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1c9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c9a6:	81a3      	strh	r3, [r4, #12]
   1c9a8:	6126      	str	r6, [r4, #16]
   1c9aa:	6165      	str	r5, [r4, #20]
   1c9ac:	444e      	add	r6, r9
   1c9ae:	eba5 0509 	sub.w	r5, r5, r9
   1c9b2:	6026      	str	r6, [r4, #0]
   1c9b4:	60a5      	str	r5, [r4, #8]
   1c9b6:	463e      	mov	r6, r7
   1c9b8:	42be      	cmp	r6, r7
   1c9ba:	d900      	bls.n	1c9be <__ssputs_r+0x86>
   1c9bc:	463e      	mov	r6, r7
   1c9be:	4632      	mov	r2, r6
   1c9c0:	6820      	ldr	r0, [r4, #0]
   1c9c2:	4641      	mov	r1, r8
   1c9c4:	f000 fafc 	bl	1cfc0 <memmove>
   1c9c8:	68a3      	ldr	r3, [r4, #8]
   1c9ca:	6822      	ldr	r2, [r4, #0]
   1c9cc:	1b9b      	subs	r3, r3, r6
   1c9ce:	4432      	add	r2, r6
   1c9d0:	60a3      	str	r3, [r4, #8]
   1c9d2:	6022      	str	r2, [r4, #0]
   1c9d4:	2000      	movs	r0, #0
   1c9d6:	e7db      	b.n	1c990 <__ssputs_r+0x58>
   1c9d8:	462a      	mov	r2, r5
   1c9da:	f000 fbb3 	bl	1d144 <_realloc_r>
   1c9de:	4606      	mov	r6, r0
   1c9e0:	2800      	cmp	r0, #0
   1c9e2:	d1e1      	bne.n	1c9a8 <__ssputs_r+0x70>
   1c9e4:	6921      	ldr	r1, [r4, #16]
   1c9e6:	4650      	mov	r0, sl
   1c9e8:	f000 fb04 	bl	1cff4 <_free_r>
   1c9ec:	e7c7      	b.n	1c97e <__ssputs_r+0x46>
	...

0001c9f0 <_svfiprintf_r>:
   1c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f4:	4698      	mov	r8, r3
   1c9f6:	898b      	ldrh	r3, [r1, #12]
   1c9f8:	061b      	lsls	r3, r3, #24
   1c9fa:	b09d      	sub	sp, #116	; 0x74
   1c9fc:	4607      	mov	r7, r0
   1c9fe:	460d      	mov	r5, r1
   1ca00:	4614      	mov	r4, r2
   1ca02:	d50e      	bpl.n	1ca22 <_svfiprintf_r+0x32>
   1ca04:	690b      	ldr	r3, [r1, #16]
   1ca06:	b963      	cbnz	r3, 1ca22 <_svfiprintf_r+0x32>
   1ca08:	2140      	movs	r1, #64	; 0x40
   1ca0a:	f000 fb41 	bl	1d090 <_malloc_r>
   1ca0e:	6028      	str	r0, [r5, #0]
   1ca10:	6128      	str	r0, [r5, #16]
   1ca12:	b920      	cbnz	r0, 1ca1e <_svfiprintf_r+0x2e>
   1ca14:	230c      	movs	r3, #12
   1ca16:	603b      	str	r3, [r7, #0]
   1ca18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca1c:	e0d1      	b.n	1cbc2 <_svfiprintf_r+0x1d2>
   1ca1e:	2340      	movs	r3, #64	; 0x40
   1ca20:	616b      	str	r3, [r5, #20]
   1ca22:	2300      	movs	r3, #0
   1ca24:	9309      	str	r3, [sp, #36]	; 0x24
   1ca26:	2320      	movs	r3, #32
   1ca28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1ca2c:	f8cd 800c 	str.w	r8, [sp, #12]
   1ca30:	2330      	movs	r3, #48	; 0x30
   1ca32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1cbdc <_svfiprintf_r+0x1ec>
   1ca36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1ca3a:	f04f 0901 	mov.w	r9, #1
   1ca3e:	4623      	mov	r3, r4
   1ca40:	469a      	mov	sl, r3
   1ca42:	f813 2b01 	ldrb.w	r2, [r3], #1
   1ca46:	b10a      	cbz	r2, 1ca4c <_svfiprintf_r+0x5c>
   1ca48:	2a25      	cmp	r2, #37	; 0x25
   1ca4a:	d1f9      	bne.n	1ca40 <_svfiprintf_r+0x50>
   1ca4c:	ebba 0b04 	subs.w	fp, sl, r4
   1ca50:	d00b      	beq.n	1ca6a <_svfiprintf_r+0x7a>
   1ca52:	465b      	mov	r3, fp
   1ca54:	4622      	mov	r2, r4
   1ca56:	4629      	mov	r1, r5
   1ca58:	4638      	mov	r0, r7
   1ca5a:	f7ff ff6d 	bl	1c938 <__ssputs_r>
   1ca5e:	3001      	adds	r0, #1
   1ca60:	f000 80aa 	beq.w	1cbb8 <_svfiprintf_r+0x1c8>
   1ca64:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ca66:	445a      	add	r2, fp
   1ca68:	9209      	str	r2, [sp, #36]	; 0x24
   1ca6a:	f89a 3000 	ldrb.w	r3, [sl]
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	f000 80a2 	beq.w	1cbb8 <_svfiprintf_r+0x1c8>
   1ca74:	2300      	movs	r3, #0
   1ca76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ca7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1ca7e:	f10a 0a01 	add.w	sl, sl, #1
   1ca82:	9304      	str	r3, [sp, #16]
   1ca84:	9307      	str	r3, [sp, #28]
   1ca86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1ca8a:	931a      	str	r3, [sp, #104]	; 0x68
   1ca8c:	4654      	mov	r4, sl
   1ca8e:	2205      	movs	r2, #5
   1ca90:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ca94:	4851      	ldr	r0, [pc, #324]	; (1cbdc <_svfiprintf_r+0x1ec>)
   1ca96:	f000 fa43 	bl	1cf20 <memchr>
   1ca9a:	9a04      	ldr	r2, [sp, #16]
   1ca9c:	b9d8      	cbnz	r0, 1cad6 <_svfiprintf_r+0xe6>
   1ca9e:	06d0      	lsls	r0, r2, #27
   1caa0:	bf44      	itt	mi
   1caa2:	2320      	movmi	r3, #32
   1caa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1caa8:	0711      	lsls	r1, r2, #28
   1caaa:	bf44      	itt	mi
   1caac:	232b      	movmi	r3, #43	; 0x2b
   1caae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1cab2:	f89a 3000 	ldrb.w	r3, [sl]
   1cab6:	2b2a      	cmp	r3, #42	; 0x2a
   1cab8:	d015      	beq.n	1cae6 <_svfiprintf_r+0xf6>
   1caba:	9a07      	ldr	r2, [sp, #28]
   1cabc:	4654      	mov	r4, sl
   1cabe:	2000      	movs	r0, #0
   1cac0:	f04f 0c0a 	mov.w	ip, #10
   1cac4:	4621      	mov	r1, r4
   1cac6:	f811 3b01 	ldrb.w	r3, [r1], #1
   1caca:	3b30      	subs	r3, #48	; 0x30
   1cacc:	2b09      	cmp	r3, #9
   1cace:	d94e      	bls.n	1cb6e <_svfiprintf_r+0x17e>
   1cad0:	b1b0      	cbz	r0, 1cb00 <_svfiprintf_r+0x110>
   1cad2:	9207      	str	r2, [sp, #28]
   1cad4:	e014      	b.n	1cb00 <_svfiprintf_r+0x110>
   1cad6:	eba0 0308 	sub.w	r3, r0, r8
   1cada:	fa09 f303 	lsl.w	r3, r9, r3
   1cade:	4313      	orrs	r3, r2
   1cae0:	9304      	str	r3, [sp, #16]
   1cae2:	46a2      	mov	sl, r4
   1cae4:	e7d2      	b.n	1ca8c <_svfiprintf_r+0x9c>
   1cae6:	9b03      	ldr	r3, [sp, #12]
   1cae8:	1d19      	adds	r1, r3, #4
   1caea:	681b      	ldr	r3, [r3, #0]
   1caec:	9103      	str	r1, [sp, #12]
   1caee:	2b00      	cmp	r3, #0
   1caf0:	bfbb      	ittet	lt
   1caf2:	425b      	neglt	r3, r3
   1caf4:	f042 0202 	orrlt.w	r2, r2, #2
   1caf8:	9307      	strge	r3, [sp, #28]
   1cafa:	9307      	strlt	r3, [sp, #28]
   1cafc:	bfb8      	it	lt
   1cafe:	9204      	strlt	r2, [sp, #16]
   1cb00:	7823      	ldrb	r3, [r4, #0]
   1cb02:	2b2e      	cmp	r3, #46	; 0x2e
   1cb04:	d10c      	bne.n	1cb20 <_svfiprintf_r+0x130>
   1cb06:	7863      	ldrb	r3, [r4, #1]
   1cb08:	2b2a      	cmp	r3, #42	; 0x2a
   1cb0a:	d135      	bne.n	1cb78 <_svfiprintf_r+0x188>
   1cb0c:	9b03      	ldr	r3, [sp, #12]
   1cb0e:	1d1a      	adds	r2, r3, #4
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	9203      	str	r2, [sp, #12]
   1cb14:	2b00      	cmp	r3, #0
   1cb16:	bfb8      	it	lt
   1cb18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1cb1c:	3402      	adds	r4, #2
   1cb1e:	9305      	str	r3, [sp, #20]
   1cb20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1cbec <_svfiprintf_r+0x1fc>
   1cb24:	7821      	ldrb	r1, [r4, #0]
   1cb26:	2203      	movs	r2, #3
   1cb28:	4650      	mov	r0, sl
   1cb2a:	f000 f9f9 	bl	1cf20 <memchr>
   1cb2e:	b140      	cbz	r0, 1cb42 <_svfiprintf_r+0x152>
   1cb30:	2340      	movs	r3, #64	; 0x40
   1cb32:	eba0 000a 	sub.w	r0, r0, sl
   1cb36:	fa03 f000 	lsl.w	r0, r3, r0
   1cb3a:	9b04      	ldr	r3, [sp, #16]
   1cb3c:	4303      	orrs	r3, r0
   1cb3e:	3401      	adds	r4, #1
   1cb40:	9304      	str	r3, [sp, #16]
   1cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
   1cb46:	4826      	ldr	r0, [pc, #152]	; (1cbe0 <_svfiprintf_r+0x1f0>)
   1cb48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1cb4c:	2206      	movs	r2, #6
   1cb4e:	f000 f9e7 	bl	1cf20 <memchr>
   1cb52:	2800      	cmp	r0, #0
   1cb54:	d038      	beq.n	1cbc8 <_svfiprintf_r+0x1d8>
   1cb56:	4b23      	ldr	r3, [pc, #140]	; (1cbe4 <_svfiprintf_r+0x1f4>)
   1cb58:	bb1b      	cbnz	r3, 1cba2 <_svfiprintf_r+0x1b2>
   1cb5a:	9b03      	ldr	r3, [sp, #12]
   1cb5c:	3307      	adds	r3, #7
   1cb5e:	f023 0307 	bic.w	r3, r3, #7
   1cb62:	3308      	adds	r3, #8
   1cb64:	9303      	str	r3, [sp, #12]
   1cb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cb68:	4433      	add	r3, r6
   1cb6a:	9309      	str	r3, [sp, #36]	; 0x24
   1cb6c:	e767      	b.n	1ca3e <_svfiprintf_r+0x4e>
   1cb6e:	fb0c 3202 	mla	r2, ip, r2, r3
   1cb72:	460c      	mov	r4, r1
   1cb74:	2001      	movs	r0, #1
   1cb76:	e7a5      	b.n	1cac4 <_svfiprintf_r+0xd4>
   1cb78:	2300      	movs	r3, #0
   1cb7a:	3401      	adds	r4, #1
   1cb7c:	9305      	str	r3, [sp, #20]
   1cb7e:	4619      	mov	r1, r3
   1cb80:	f04f 0c0a 	mov.w	ip, #10
   1cb84:	4620      	mov	r0, r4
   1cb86:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cb8a:	3a30      	subs	r2, #48	; 0x30
   1cb8c:	2a09      	cmp	r2, #9
   1cb8e:	d903      	bls.n	1cb98 <_svfiprintf_r+0x1a8>
   1cb90:	2b00      	cmp	r3, #0
   1cb92:	d0c5      	beq.n	1cb20 <_svfiprintf_r+0x130>
   1cb94:	9105      	str	r1, [sp, #20]
   1cb96:	e7c3      	b.n	1cb20 <_svfiprintf_r+0x130>
   1cb98:	fb0c 2101 	mla	r1, ip, r1, r2
   1cb9c:	4604      	mov	r4, r0
   1cb9e:	2301      	movs	r3, #1
   1cba0:	e7f0      	b.n	1cb84 <_svfiprintf_r+0x194>
   1cba2:	ab03      	add	r3, sp, #12
   1cba4:	9300      	str	r3, [sp, #0]
   1cba6:	462a      	mov	r2, r5
   1cba8:	4b0f      	ldr	r3, [pc, #60]	; (1cbe8 <_svfiprintf_r+0x1f8>)
   1cbaa:	a904      	add	r1, sp, #16
   1cbac:	4638      	mov	r0, r7
   1cbae:	f3af 8000 	nop.w
   1cbb2:	1c42      	adds	r2, r0, #1
   1cbb4:	4606      	mov	r6, r0
   1cbb6:	d1d6      	bne.n	1cb66 <_svfiprintf_r+0x176>
   1cbb8:	89ab      	ldrh	r3, [r5, #12]
   1cbba:	065b      	lsls	r3, r3, #25
   1cbbc:	f53f af2c 	bmi.w	1ca18 <_svfiprintf_r+0x28>
   1cbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cbc2:	b01d      	add	sp, #116	; 0x74
   1cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbc8:	ab03      	add	r3, sp, #12
   1cbca:	9300      	str	r3, [sp, #0]
   1cbcc:	462a      	mov	r2, r5
   1cbce:	4b06      	ldr	r3, [pc, #24]	; (1cbe8 <_svfiprintf_r+0x1f8>)
   1cbd0:	a904      	add	r1, sp, #16
   1cbd2:	4638      	mov	r0, r7
   1cbd4:	f000 f87a 	bl	1cccc <_printf_i>
   1cbd8:	e7eb      	b.n	1cbb2 <_svfiprintf_r+0x1c2>
   1cbda:	bf00      	nop
   1cbdc:	0001ef94 	.word	0x0001ef94
   1cbe0:	0001ef9e 	.word	0x0001ef9e
   1cbe4:	00000000 	.word	0x00000000
   1cbe8:	0001c939 	.word	0x0001c939
   1cbec:	0001ef9a 	.word	0x0001ef9a

0001cbf0 <_printf_common>:
   1cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbf4:	4616      	mov	r6, r2
   1cbf6:	4699      	mov	r9, r3
   1cbf8:	688a      	ldr	r2, [r1, #8]
   1cbfa:	690b      	ldr	r3, [r1, #16]
   1cbfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1cc00:	4293      	cmp	r3, r2
   1cc02:	bfb8      	it	lt
   1cc04:	4613      	movlt	r3, r2
   1cc06:	6033      	str	r3, [r6, #0]
   1cc08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1cc0c:	4607      	mov	r7, r0
   1cc0e:	460c      	mov	r4, r1
   1cc10:	b10a      	cbz	r2, 1cc16 <_printf_common+0x26>
   1cc12:	3301      	adds	r3, #1
   1cc14:	6033      	str	r3, [r6, #0]
   1cc16:	6823      	ldr	r3, [r4, #0]
   1cc18:	0699      	lsls	r1, r3, #26
   1cc1a:	bf42      	ittt	mi
   1cc1c:	6833      	ldrmi	r3, [r6, #0]
   1cc1e:	3302      	addmi	r3, #2
   1cc20:	6033      	strmi	r3, [r6, #0]
   1cc22:	6825      	ldr	r5, [r4, #0]
   1cc24:	f015 0506 	ands.w	r5, r5, #6
   1cc28:	d106      	bne.n	1cc38 <_printf_common+0x48>
   1cc2a:	f104 0a19 	add.w	sl, r4, #25
   1cc2e:	68e3      	ldr	r3, [r4, #12]
   1cc30:	6832      	ldr	r2, [r6, #0]
   1cc32:	1a9b      	subs	r3, r3, r2
   1cc34:	42ab      	cmp	r3, r5
   1cc36:	dc26      	bgt.n	1cc86 <_printf_common+0x96>
   1cc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1cc3c:	1e13      	subs	r3, r2, #0
   1cc3e:	6822      	ldr	r2, [r4, #0]
   1cc40:	bf18      	it	ne
   1cc42:	2301      	movne	r3, #1
   1cc44:	0692      	lsls	r2, r2, #26
   1cc46:	d42b      	bmi.n	1cca0 <_printf_common+0xb0>
   1cc48:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1cc4c:	4649      	mov	r1, r9
   1cc4e:	4638      	mov	r0, r7
   1cc50:	47c0      	blx	r8
   1cc52:	3001      	adds	r0, #1
   1cc54:	d01e      	beq.n	1cc94 <_printf_common+0xa4>
   1cc56:	6823      	ldr	r3, [r4, #0]
   1cc58:	68e5      	ldr	r5, [r4, #12]
   1cc5a:	6832      	ldr	r2, [r6, #0]
   1cc5c:	f003 0306 	and.w	r3, r3, #6
   1cc60:	2b04      	cmp	r3, #4
   1cc62:	bf08      	it	eq
   1cc64:	1aad      	subeq	r5, r5, r2
   1cc66:	68a3      	ldr	r3, [r4, #8]
   1cc68:	6922      	ldr	r2, [r4, #16]
   1cc6a:	bf0c      	ite	eq
   1cc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1cc70:	2500      	movne	r5, #0
   1cc72:	4293      	cmp	r3, r2
   1cc74:	bfc4      	itt	gt
   1cc76:	1a9b      	subgt	r3, r3, r2
   1cc78:	18ed      	addgt	r5, r5, r3
   1cc7a:	2600      	movs	r6, #0
   1cc7c:	341a      	adds	r4, #26
   1cc7e:	42b5      	cmp	r5, r6
   1cc80:	d11a      	bne.n	1ccb8 <_printf_common+0xc8>
   1cc82:	2000      	movs	r0, #0
   1cc84:	e008      	b.n	1cc98 <_printf_common+0xa8>
   1cc86:	2301      	movs	r3, #1
   1cc88:	4652      	mov	r2, sl
   1cc8a:	4649      	mov	r1, r9
   1cc8c:	4638      	mov	r0, r7
   1cc8e:	47c0      	blx	r8
   1cc90:	3001      	adds	r0, #1
   1cc92:	d103      	bne.n	1cc9c <_printf_common+0xac>
   1cc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cc9c:	3501      	adds	r5, #1
   1cc9e:	e7c6      	b.n	1cc2e <_printf_common+0x3e>
   1cca0:	18e1      	adds	r1, r4, r3
   1cca2:	1c5a      	adds	r2, r3, #1
   1cca4:	2030      	movs	r0, #48	; 0x30
   1cca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1ccaa:	4422      	add	r2, r4
   1ccac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1ccb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1ccb4:	3302      	adds	r3, #2
   1ccb6:	e7c7      	b.n	1cc48 <_printf_common+0x58>
   1ccb8:	2301      	movs	r3, #1
   1ccba:	4622      	mov	r2, r4
   1ccbc:	4649      	mov	r1, r9
   1ccbe:	4638      	mov	r0, r7
   1ccc0:	47c0      	blx	r8
   1ccc2:	3001      	adds	r0, #1
   1ccc4:	d0e6      	beq.n	1cc94 <_printf_common+0xa4>
   1ccc6:	3601      	adds	r6, #1
   1ccc8:	e7d9      	b.n	1cc7e <_printf_common+0x8e>
	...

0001cccc <_printf_i>:
   1cccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ccd0:	460c      	mov	r4, r1
   1ccd2:	4691      	mov	r9, r2
   1ccd4:	7e27      	ldrb	r7, [r4, #24]
   1ccd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ccd8:	2f78      	cmp	r7, #120	; 0x78
   1ccda:	4680      	mov	r8, r0
   1ccdc:	469a      	mov	sl, r3
   1ccde:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1cce2:	d807      	bhi.n	1ccf4 <_printf_i+0x28>
   1cce4:	2f62      	cmp	r7, #98	; 0x62
   1cce6:	d80a      	bhi.n	1ccfe <_printf_i+0x32>
   1cce8:	2f00      	cmp	r7, #0
   1ccea:	f000 80d8 	beq.w	1ce9e <_printf_i+0x1d2>
   1ccee:	2f58      	cmp	r7, #88	; 0x58
   1ccf0:	f000 80a3 	beq.w	1ce3a <_printf_i+0x16e>
   1ccf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1ccf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1ccfc:	e03a      	b.n	1cd74 <_printf_i+0xa8>
   1ccfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1cd02:	2b15      	cmp	r3, #21
   1cd04:	d8f6      	bhi.n	1ccf4 <_printf_i+0x28>
   1cd06:	a001      	add	r0, pc, #4	; (adr r0, 1cd0c <_printf_i+0x40>)
   1cd08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1cd0c:	0001cd65 	.word	0x0001cd65
   1cd10:	0001cd79 	.word	0x0001cd79
   1cd14:	0001ccf5 	.word	0x0001ccf5
   1cd18:	0001ccf5 	.word	0x0001ccf5
   1cd1c:	0001ccf5 	.word	0x0001ccf5
   1cd20:	0001ccf5 	.word	0x0001ccf5
   1cd24:	0001cd79 	.word	0x0001cd79
   1cd28:	0001ccf5 	.word	0x0001ccf5
   1cd2c:	0001ccf5 	.word	0x0001ccf5
   1cd30:	0001ccf5 	.word	0x0001ccf5
   1cd34:	0001ccf5 	.word	0x0001ccf5
   1cd38:	0001ce85 	.word	0x0001ce85
   1cd3c:	0001cda9 	.word	0x0001cda9
   1cd40:	0001ce67 	.word	0x0001ce67
   1cd44:	0001ccf5 	.word	0x0001ccf5
   1cd48:	0001ccf5 	.word	0x0001ccf5
   1cd4c:	0001cea7 	.word	0x0001cea7
   1cd50:	0001ccf5 	.word	0x0001ccf5
   1cd54:	0001cda9 	.word	0x0001cda9
   1cd58:	0001ccf5 	.word	0x0001ccf5
   1cd5c:	0001ccf5 	.word	0x0001ccf5
   1cd60:	0001ce6f 	.word	0x0001ce6f
   1cd64:	680b      	ldr	r3, [r1, #0]
   1cd66:	1d1a      	adds	r2, r3, #4
   1cd68:	681b      	ldr	r3, [r3, #0]
   1cd6a:	600a      	str	r2, [r1, #0]
   1cd6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1cd70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1cd74:	2301      	movs	r3, #1
   1cd76:	e0a3      	b.n	1cec0 <_printf_i+0x1f4>
   1cd78:	6825      	ldr	r5, [r4, #0]
   1cd7a:	6808      	ldr	r0, [r1, #0]
   1cd7c:	062e      	lsls	r6, r5, #24
   1cd7e:	f100 0304 	add.w	r3, r0, #4
   1cd82:	d50a      	bpl.n	1cd9a <_printf_i+0xce>
   1cd84:	6805      	ldr	r5, [r0, #0]
   1cd86:	600b      	str	r3, [r1, #0]
   1cd88:	2d00      	cmp	r5, #0
   1cd8a:	da03      	bge.n	1cd94 <_printf_i+0xc8>
   1cd8c:	232d      	movs	r3, #45	; 0x2d
   1cd8e:	426d      	negs	r5, r5
   1cd90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1cd94:	485e      	ldr	r0, [pc, #376]	; (1cf10 <_printf_i+0x244>)
   1cd96:	230a      	movs	r3, #10
   1cd98:	e019      	b.n	1cdce <_printf_i+0x102>
   1cd9a:	f015 0f40 	tst.w	r5, #64	; 0x40
   1cd9e:	6805      	ldr	r5, [r0, #0]
   1cda0:	600b      	str	r3, [r1, #0]
   1cda2:	bf18      	it	ne
   1cda4:	b22d      	sxthne	r5, r5
   1cda6:	e7ef      	b.n	1cd88 <_printf_i+0xbc>
   1cda8:	680b      	ldr	r3, [r1, #0]
   1cdaa:	6825      	ldr	r5, [r4, #0]
   1cdac:	1d18      	adds	r0, r3, #4
   1cdae:	6008      	str	r0, [r1, #0]
   1cdb0:	0628      	lsls	r0, r5, #24
   1cdb2:	d501      	bpl.n	1cdb8 <_printf_i+0xec>
   1cdb4:	681d      	ldr	r5, [r3, #0]
   1cdb6:	e002      	b.n	1cdbe <_printf_i+0xf2>
   1cdb8:	0669      	lsls	r1, r5, #25
   1cdba:	d5fb      	bpl.n	1cdb4 <_printf_i+0xe8>
   1cdbc:	881d      	ldrh	r5, [r3, #0]
   1cdbe:	4854      	ldr	r0, [pc, #336]	; (1cf10 <_printf_i+0x244>)
   1cdc0:	2f6f      	cmp	r7, #111	; 0x6f
   1cdc2:	bf0c      	ite	eq
   1cdc4:	2308      	moveq	r3, #8
   1cdc6:	230a      	movne	r3, #10
   1cdc8:	2100      	movs	r1, #0
   1cdca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1cdce:	6866      	ldr	r6, [r4, #4]
   1cdd0:	60a6      	str	r6, [r4, #8]
   1cdd2:	2e00      	cmp	r6, #0
   1cdd4:	bfa2      	ittt	ge
   1cdd6:	6821      	ldrge	r1, [r4, #0]
   1cdd8:	f021 0104 	bicge.w	r1, r1, #4
   1cddc:	6021      	strge	r1, [r4, #0]
   1cdde:	b90d      	cbnz	r5, 1cde4 <_printf_i+0x118>
   1cde0:	2e00      	cmp	r6, #0
   1cde2:	d04d      	beq.n	1ce80 <_printf_i+0x1b4>
   1cde4:	4616      	mov	r6, r2
   1cde6:	fbb5 f1f3 	udiv	r1, r5, r3
   1cdea:	fb03 5711 	mls	r7, r3, r1, r5
   1cdee:	5dc7      	ldrb	r7, [r0, r7]
   1cdf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1cdf4:	462f      	mov	r7, r5
   1cdf6:	42bb      	cmp	r3, r7
   1cdf8:	460d      	mov	r5, r1
   1cdfa:	d9f4      	bls.n	1cde6 <_printf_i+0x11a>
   1cdfc:	2b08      	cmp	r3, #8
   1cdfe:	d10b      	bne.n	1ce18 <_printf_i+0x14c>
   1ce00:	6823      	ldr	r3, [r4, #0]
   1ce02:	07df      	lsls	r7, r3, #31
   1ce04:	d508      	bpl.n	1ce18 <_printf_i+0x14c>
   1ce06:	6923      	ldr	r3, [r4, #16]
   1ce08:	6861      	ldr	r1, [r4, #4]
   1ce0a:	4299      	cmp	r1, r3
   1ce0c:	bfde      	ittt	le
   1ce0e:	2330      	movle	r3, #48	; 0x30
   1ce10:	f806 3c01 	strble.w	r3, [r6, #-1]
   1ce14:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1ce18:	1b92      	subs	r2, r2, r6
   1ce1a:	6122      	str	r2, [r4, #16]
   1ce1c:	f8cd a000 	str.w	sl, [sp]
   1ce20:	464b      	mov	r3, r9
   1ce22:	aa03      	add	r2, sp, #12
   1ce24:	4621      	mov	r1, r4
   1ce26:	4640      	mov	r0, r8
   1ce28:	f7ff fee2 	bl	1cbf0 <_printf_common>
   1ce2c:	3001      	adds	r0, #1
   1ce2e:	d14c      	bne.n	1ceca <_printf_i+0x1fe>
   1ce30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ce34:	b004      	add	sp, #16
   1ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce3a:	4835      	ldr	r0, [pc, #212]	; (1cf10 <_printf_i+0x244>)
   1ce3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1ce40:	6823      	ldr	r3, [r4, #0]
   1ce42:	680e      	ldr	r6, [r1, #0]
   1ce44:	061f      	lsls	r7, r3, #24
   1ce46:	f856 5b04 	ldr.w	r5, [r6], #4
   1ce4a:	600e      	str	r6, [r1, #0]
   1ce4c:	d514      	bpl.n	1ce78 <_printf_i+0x1ac>
   1ce4e:	07d9      	lsls	r1, r3, #31
   1ce50:	bf44      	itt	mi
   1ce52:	f043 0320 	orrmi.w	r3, r3, #32
   1ce56:	6023      	strmi	r3, [r4, #0]
   1ce58:	b91d      	cbnz	r5, 1ce62 <_printf_i+0x196>
   1ce5a:	6823      	ldr	r3, [r4, #0]
   1ce5c:	f023 0320 	bic.w	r3, r3, #32
   1ce60:	6023      	str	r3, [r4, #0]
   1ce62:	2310      	movs	r3, #16
   1ce64:	e7b0      	b.n	1cdc8 <_printf_i+0xfc>
   1ce66:	6823      	ldr	r3, [r4, #0]
   1ce68:	f043 0320 	orr.w	r3, r3, #32
   1ce6c:	6023      	str	r3, [r4, #0]
   1ce6e:	2378      	movs	r3, #120	; 0x78
   1ce70:	4828      	ldr	r0, [pc, #160]	; (1cf14 <_printf_i+0x248>)
   1ce72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1ce76:	e7e3      	b.n	1ce40 <_printf_i+0x174>
   1ce78:	065e      	lsls	r6, r3, #25
   1ce7a:	bf48      	it	mi
   1ce7c:	b2ad      	uxthmi	r5, r5
   1ce7e:	e7e6      	b.n	1ce4e <_printf_i+0x182>
   1ce80:	4616      	mov	r6, r2
   1ce82:	e7bb      	b.n	1cdfc <_printf_i+0x130>
   1ce84:	680b      	ldr	r3, [r1, #0]
   1ce86:	6826      	ldr	r6, [r4, #0]
   1ce88:	6960      	ldr	r0, [r4, #20]
   1ce8a:	1d1d      	adds	r5, r3, #4
   1ce8c:	600d      	str	r5, [r1, #0]
   1ce8e:	0635      	lsls	r5, r6, #24
   1ce90:	681b      	ldr	r3, [r3, #0]
   1ce92:	d501      	bpl.n	1ce98 <_printf_i+0x1cc>
   1ce94:	6018      	str	r0, [r3, #0]
   1ce96:	e002      	b.n	1ce9e <_printf_i+0x1d2>
   1ce98:	0671      	lsls	r1, r6, #25
   1ce9a:	d5fb      	bpl.n	1ce94 <_printf_i+0x1c8>
   1ce9c:	8018      	strh	r0, [r3, #0]
   1ce9e:	2300      	movs	r3, #0
   1cea0:	6123      	str	r3, [r4, #16]
   1cea2:	4616      	mov	r6, r2
   1cea4:	e7ba      	b.n	1ce1c <_printf_i+0x150>
   1cea6:	680b      	ldr	r3, [r1, #0]
   1cea8:	1d1a      	adds	r2, r3, #4
   1ceaa:	600a      	str	r2, [r1, #0]
   1ceac:	681e      	ldr	r6, [r3, #0]
   1ceae:	6862      	ldr	r2, [r4, #4]
   1ceb0:	2100      	movs	r1, #0
   1ceb2:	4630      	mov	r0, r6
   1ceb4:	f000 f834 	bl	1cf20 <memchr>
   1ceb8:	b108      	cbz	r0, 1cebe <_printf_i+0x1f2>
   1ceba:	1b80      	subs	r0, r0, r6
   1cebc:	6060      	str	r0, [r4, #4]
   1cebe:	6863      	ldr	r3, [r4, #4]
   1cec0:	6123      	str	r3, [r4, #16]
   1cec2:	2300      	movs	r3, #0
   1cec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1cec8:	e7a8      	b.n	1ce1c <_printf_i+0x150>
   1ceca:	6923      	ldr	r3, [r4, #16]
   1cecc:	4632      	mov	r2, r6
   1cece:	4649      	mov	r1, r9
   1ced0:	4640      	mov	r0, r8
   1ced2:	47d0      	blx	sl
   1ced4:	3001      	adds	r0, #1
   1ced6:	d0ab      	beq.n	1ce30 <_printf_i+0x164>
   1ced8:	6823      	ldr	r3, [r4, #0]
   1ceda:	079b      	lsls	r3, r3, #30
   1cedc:	d413      	bmi.n	1cf06 <_printf_i+0x23a>
   1cede:	68e0      	ldr	r0, [r4, #12]
   1cee0:	9b03      	ldr	r3, [sp, #12]
   1cee2:	4298      	cmp	r0, r3
   1cee4:	bfb8      	it	lt
   1cee6:	4618      	movlt	r0, r3
   1cee8:	e7a4      	b.n	1ce34 <_printf_i+0x168>
   1ceea:	2301      	movs	r3, #1
   1ceec:	4632      	mov	r2, r6
   1ceee:	4649      	mov	r1, r9
   1cef0:	4640      	mov	r0, r8
   1cef2:	47d0      	blx	sl
   1cef4:	3001      	adds	r0, #1
   1cef6:	d09b      	beq.n	1ce30 <_printf_i+0x164>
   1cef8:	3501      	adds	r5, #1
   1cefa:	68e3      	ldr	r3, [r4, #12]
   1cefc:	9903      	ldr	r1, [sp, #12]
   1cefe:	1a5b      	subs	r3, r3, r1
   1cf00:	42ab      	cmp	r3, r5
   1cf02:	dcf2      	bgt.n	1ceea <_printf_i+0x21e>
   1cf04:	e7eb      	b.n	1cede <_printf_i+0x212>
   1cf06:	2500      	movs	r5, #0
   1cf08:	f104 0619 	add.w	r6, r4, #25
   1cf0c:	e7f5      	b.n	1cefa <_printf_i+0x22e>
   1cf0e:	bf00      	nop
   1cf10:	0001efa5 	.word	0x0001efa5
   1cf14:	0001efb6 	.word	0x0001efb6
	...

0001cf20 <memchr>:
   1cf20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cf24:	2a10      	cmp	r2, #16
   1cf26:	db2b      	blt.n	1cf80 <memchr+0x60>
   1cf28:	f010 0f07 	tst.w	r0, #7
   1cf2c:	d008      	beq.n	1cf40 <memchr+0x20>
   1cf2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cf32:	3a01      	subs	r2, #1
   1cf34:	428b      	cmp	r3, r1
   1cf36:	d02d      	beq.n	1cf94 <memchr+0x74>
   1cf38:	f010 0f07 	tst.w	r0, #7
   1cf3c:	b342      	cbz	r2, 1cf90 <memchr+0x70>
   1cf3e:	d1f6      	bne.n	1cf2e <memchr+0xe>
   1cf40:	b4f0      	push	{r4, r5, r6, r7}
   1cf42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1cf46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1cf4a:	f022 0407 	bic.w	r4, r2, #7
   1cf4e:	f07f 0700 	mvns.w	r7, #0
   1cf52:	2300      	movs	r3, #0
   1cf54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1cf58:	3c08      	subs	r4, #8
   1cf5a:	ea85 0501 	eor.w	r5, r5, r1
   1cf5e:	ea86 0601 	eor.w	r6, r6, r1
   1cf62:	fa85 f547 	uadd8	r5, r5, r7
   1cf66:	faa3 f587 	sel	r5, r3, r7
   1cf6a:	fa86 f647 	uadd8	r6, r6, r7
   1cf6e:	faa5 f687 	sel	r6, r5, r7
   1cf72:	b98e      	cbnz	r6, 1cf98 <memchr+0x78>
   1cf74:	d1ee      	bne.n	1cf54 <memchr+0x34>
   1cf76:	bcf0      	pop	{r4, r5, r6, r7}
   1cf78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1cf7c:	f002 0207 	and.w	r2, r2, #7
   1cf80:	b132      	cbz	r2, 1cf90 <memchr+0x70>
   1cf82:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cf86:	3a01      	subs	r2, #1
   1cf88:	ea83 0301 	eor.w	r3, r3, r1
   1cf8c:	b113      	cbz	r3, 1cf94 <memchr+0x74>
   1cf8e:	d1f8      	bne.n	1cf82 <memchr+0x62>
   1cf90:	2000      	movs	r0, #0
   1cf92:	4770      	bx	lr
   1cf94:	3801      	subs	r0, #1
   1cf96:	4770      	bx	lr
   1cf98:	2d00      	cmp	r5, #0
   1cf9a:	bf06      	itte	eq
   1cf9c:	4635      	moveq	r5, r6
   1cf9e:	3803      	subeq	r0, #3
   1cfa0:	3807      	subne	r0, #7
   1cfa2:	f015 0f01 	tst.w	r5, #1
   1cfa6:	d107      	bne.n	1cfb8 <memchr+0x98>
   1cfa8:	3001      	adds	r0, #1
   1cfaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   1cfae:	bf02      	ittt	eq
   1cfb0:	3001      	addeq	r0, #1
   1cfb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1cfb6:	3001      	addeq	r0, #1
   1cfb8:	bcf0      	pop	{r4, r5, r6, r7}
   1cfba:	3801      	subs	r0, #1
   1cfbc:	4770      	bx	lr
   1cfbe:	bf00      	nop

0001cfc0 <memmove>:
   1cfc0:	4288      	cmp	r0, r1
   1cfc2:	b510      	push	{r4, lr}
   1cfc4:	eb01 0402 	add.w	r4, r1, r2
   1cfc8:	d902      	bls.n	1cfd0 <memmove+0x10>
   1cfca:	4284      	cmp	r4, r0
   1cfcc:	4623      	mov	r3, r4
   1cfce:	d807      	bhi.n	1cfe0 <memmove+0x20>
   1cfd0:	1e43      	subs	r3, r0, #1
   1cfd2:	42a1      	cmp	r1, r4
   1cfd4:	d008      	beq.n	1cfe8 <memmove+0x28>
   1cfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   1cfda:	f803 2f01 	strb.w	r2, [r3, #1]!
   1cfde:	e7f8      	b.n	1cfd2 <memmove+0x12>
   1cfe0:	4402      	add	r2, r0
   1cfe2:	4601      	mov	r1, r0
   1cfe4:	428a      	cmp	r2, r1
   1cfe6:	d100      	bne.n	1cfea <memmove+0x2a>
   1cfe8:	bd10      	pop	{r4, pc}
   1cfea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1cfee:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1cff2:	e7f7      	b.n	1cfe4 <memmove+0x24>

0001cff4 <_free_r>:
   1cff4:	b538      	push	{r3, r4, r5, lr}
   1cff6:	4605      	mov	r5, r0
   1cff8:	2900      	cmp	r1, #0
   1cffa:	d045      	beq.n	1d088 <_free_r+0x94>
   1cffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d000:	1f0c      	subs	r4, r1, #4
   1d002:	2b00      	cmp	r3, #0
   1d004:	bfb8      	it	lt
   1d006:	18e4      	addlt	r4, r4, r3
   1d008:	f000 f8d2 	bl	1d1b0 <__malloc_lock>
   1d00c:	4a1f      	ldr	r2, [pc, #124]	; (1d08c <_free_r+0x98>)
   1d00e:	6813      	ldr	r3, [r2, #0]
   1d010:	4610      	mov	r0, r2
   1d012:	b933      	cbnz	r3, 1d022 <_free_r+0x2e>
   1d014:	6063      	str	r3, [r4, #4]
   1d016:	6014      	str	r4, [r2, #0]
   1d018:	4628      	mov	r0, r5
   1d01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d01e:	f000 b8cd 	b.w	1d1bc <__malloc_unlock>
   1d022:	42a3      	cmp	r3, r4
   1d024:	d90b      	bls.n	1d03e <_free_r+0x4a>
   1d026:	6821      	ldr	r1, [r4, #0]
   1d028:	1862      	adds	r2, r4, r1
   1d02a:	4293      	cmp	r3, r2
   1d02c:	bf04      	itt	eq
   1d02e:	681a      	ldreq	r2, [r3, #0]
   1d030:	685b      	ldreq	r3, [r3, #4]
   1d032:	6063      	str	r3, [r4, #4]
   1d034:	bf04      	itt	eq
   1d036:	1852      	addeq	r2, r2, r1
   1d038:	6022      	streq	r2, [r4, #0]
   1d03a:	6004      	str	r4, [r0, #0]
   1d03c:	e7ec      	b.n	1d018 <_free_r+0x24>
   1d03e:	461a      	mov	r2, r3
   1d040:	685b      	ldr	r3, [r3, #4]
   1d042:	b10b      	cbz	r3, 1d048 <_free_r+0x54>
   1d044:	42a3      	cmp	r3, r4
   1d046:	d9fa      	bls.n	1d03e <_free_r+0x4a>
   1d048:	6811      	ldr	r1, [r2, #0]
   1d04a:	1850      	adds	r0, r2, r1
   1d04c:	42a0      	cmp	r0, r4
   1d04e:	d10b      	bne.n	1d068 <_free_r+0x74>
   1d050:	6820      	ldr	r0, [r4, #0]
   1d052:	4401      	add	r1, r0
   1d054:	1850      	adds	r0, r2, r1
   1d056:	4283      	cmp	r3, r0
   1d058:	6011      	str	r1, [r2, #0]
   1d05a:	d1dd      	bne.n	1d018 <_free_r+0x24>
   1d05c:	6818      	ldr	r0, [r3, #0]
   1d05e:	685b      	ldr	r3, [r3, #4]
   1d060:	6053      	str	r3, [r2, #4]
   1d062:	4401      	add	r1, r0
   1d064:	6011      	str	r1, [r2, #0]
   1d066:	e7d7      	b.n	1d018 <_free_r+0x24>
   1d068:	d902      	bls.n	1d070 <_free_r+0x7c>
   1d06a:	230c      	movs	r3, #12
   1d06c:	602b      	str	r3, [r5, #0]
   1d06e:	e7d3      	b.n	1d018 <_free_r+0x24>
   1d070:	6820      	ldr	r0, [r4, #0]
   1d072:	1821      	adds	r1, r4, r0
   1d074:	428b      	cmp	r3, r1
   1d076:	bf04      	itt	eq
   1d078:	6819      	ldreq	r1, [r3, #0]
   1d07a:	685b      	ldreq	r3, [r3, #4]
   1d07c:	6063      	str	r3, [r4, #4]
   1d07e:	bf04      	itt	eq
   1d080:	1809      	addeq	r1, r1, r0
   1d082:	6021      	streq	r1, [r4, #0]
   1d084:	6054      	str	r4, [r2, #4]
   1d086:	e7c7      	b.n	1d018 <_free_r+0x24>
   1d088:	bd38      	pop	{r3, r4, r5, pc}
   1d08a:	bf00      	nop
   1d08c:	20001cbc 	.word	0x20001cbc

0001d090 <_malloc_r>:
   1d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d092:	1ccd      	adds	r5, r1, #3
   1d094:	f025 0503 	bic.w	r5, r5, #3
   1d098:	3508      	adds	r5, #8
   1d09a:	2d0c      	cmp	r5, #12
   1d09c:	bf38      	it	cc
   1d09e:	250c      	movcc	r5, #12
   1d0a0:	2d00      	cmp	r5, #0
   1d0a2:	4606      	mov	r6, r0
   1d0a4:	db01      	blt.n	1d0aa <_malloc_r+0x1a>
   1d0a6:	42a9      	cmp	r1, r5
   1d0a8:	d903      	bls.n	1d0b2 <_malloc_r+0x22>
   1d0aa:	230c      	movs	r3, #12
   1d0ac:	6033      	str	r3, [r6, #0]
   1d0ae:	2000      	movs	r0, #0
   1d0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d0b2:	f000 f87d 	bl	1d1b0 <__malloc_lock>
   1d0b6:	4921      	ldr	r1, [pc, #132]	; (1d13c <_malloc_r+0xac>)
   1d0b8:	680a      	ldr	r2, [r1, #0]
   1d0ba:	4614      	mov	r4, r2
   1d0bc:	b99c      	cbnz	r4, 1d0e6 <_malloc_r+0x56>
   1d0be:	4f20      	ldr	r7, [pc, #128]	; (1d140 <_malloc_r+0xb0>)
   1d0c0:	683b      	ldr	r3, [r7, #0]
   1d0c2:	b923      	cbnz	r3, 1d0ce <_malloc_r+0x3e>
   1d0c4:	4621      	mov	r1, r4
   1d0c6:	4630      	mov	r0, r6
   1d0c8:	f000 f862 	bl	1d190 <_sbrk_r>
   1d0cc:	6038      	str	r0, [r7, #0]
   1d0ce:	4629      	mov	r1, r5
   1d0d0:	4630      	mov	r0, r6
   1d0d2:	f000 f85d 	bl	1d190 <_sbrk_r>
   1d0d6:	1c43      	adds	r3, r0, #1
   1d0d8:	d123      	bne.n	1d122 <_malloc_r+0x92>
   1d0da:	230c      	movs	r3, #12
   1d0dc:	6033      	str	r3, [r6, #0]
   1d0de:	4630      	mov	r0, r6
   1d0e0:	f000 f86c 	bl	1d1bc <__malloc_unlock>
   1d0e4:	e7e3      	b.n	1d0ae <_malloc_r+0x1e>
   1d0e6:	6823      	ldr	r3, [r4, #0]
   1d0e8:	1b5b      	subs	r3, r3, r5
   1d0ea:	d417      	bmi.n	1d11c <_malloc_r+0x8c>
   1d0ec:	2b0b      	cmp	r3, #11
   1d0ee:	d903      	bls.n	1d0f8 <_malloc_r+0x68>
   1d0f0:	6023      	str	r3, [r4, #0]
   1d0f2:	441c      	add	r4, r3
   1d0f4:	6025      	str	r5, [r4, #0]
   1d0f6:	e004      	b.n	1d102 <_malloc_r+0x72>
   1d0f8:	6863      	ldr	r3, [r4, #4]
   1d0fa:	42a2      	cmp	r2, r4
   1d0fc:	bf0c      	ite	eq
   1d0fe:	600b      	streq	r3, [r1, #0]
   1d100:	6053      	strne	r3, [r2, #4]
   1d102:	4630      	mov	r0, r6
   1d104:	f000 f85a 	bl	1d1bc <__malloc_unlock>
   1d108:	f104 000b 	add.w	r0, r4, #11
   1d10c:	1d23      	adds	r3, r4, #4
   1d10e:	f020 0007 	bic.w	r0, r0, #7
   1d112:	1ac2      	subs	r2, r0, r3
   1d114:	d0cc      	beq.n	1d0b0 <_malloc_r+0x20>
   1d116:	1a1b      	subs	r3, r3, r0
   1d118:	50a3      	str	r3, [r4, r2]
   1d11a:	e7c9      	b.n	1d0b0 <_malloc_r+0x20>
   1d11c:	4622      	mov	r2, r4
   1d11e:	6864      	ldr	r4, [r4, #4]
   1d120:	e7cc      	b.n	1d0bc <_malloc_r+0x2c>
   1d122:	1cc4      	adds	r4, r0, #3
   1d124:	f024 0403 	bic.w	r4, r4, #3
   1d128:	42a0      	cmp	r0, r4
   1d12a:	d0e3      	beq.n	1d0f4 <_malloc_r+0x64>
   1d12c:	1a21      	subs	r1, r4, r0
   1d12e:	4630      	mov	r0, r6
   1d130:	f000 f82e 	bl	1d190 <_sbrk_r>
   1d134:	3001      	adds	r0, #1
   1d136:	d1dd      	bne.n	1d0f4 <_malloc_r+0x64>
   1d138:	e7cf      	b.n	1d0da <_malloc_r+0x4a>
   1d13a:	bf00      	nop
   1d13c:	20001cbc 	.word	0x20001cbc
   1d140:	20001cc0 	.word	0x20001cc0

0001d144 <_realloc_r>:
   1d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d146:	4607      	mov	r7, r0
   1d148:	4614      	mov	r4, r2
   1d14a:	460e      	mov	r6, r1
   1d14c:	b921      	cbnz	r1, 1d158 <_realloc_r+0x14>
   1d14e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d152:	4611      	mov	r1, r2
   1d154:	f7ff bf9c 	b.w	1d090 <_malloc_r>
   1d158:	b922      	cbnz	r2, 1d164 <_realloc_r+0x20>
   1d15a:	f7ff ff4b 	bl	1cff4 <_free_r>
   1d15e:	4625      	mov	r5, r4
   1d160:	4628      	mov	r0, r5
   1d162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d164:	f000 f830 	bl	1d1c8 <_malloc_usable_size_r>
   1d168:	42a0      	cmp	r0, r4
   1d16a:	d20f      	bcs.n	1d18c <_realloc_r+0x48>
   1d16c:	4621      	mov	r1, r4
   1d16e:	4638      	mov	r0, r7
   1d170:	f7ff ff8e 	bl	1d090 <_malloc_r>
   1d174:	4605      	mov	r5, r0
   1d176:	2800      	cmp	r0, #0
   1d178:	d0f2      	beq.n	1d160 <_realloc_r+0x1c>
   1d17a:	4631      	mov	r1, r6
   1d17c:	4622      	mov	r2, r4
   1d17e:	f7ff fb81 	bl	1c884 <memcpy>
   1d182:	4631      	mov	r1, r6
   1d184:	4638      	mov	r0, r7
   1d186:	f7ff ff35 	bl	1cff4 <_free_r>
   1d18a:	e7e9      	b.n	1d160 <_realloc_r+0x1c>
   1d18c:	4635      	mov	r5, r6
   1d18e:	e7e7      	b.n	1d160 <_realloc_r+0x1c>

0001d190 <_sbrk_r>:
   1d190:	b538      	push	{r3, r4, r5, lr}
   1d192:	4d06      	ldr	r5, [pc, #24]	; (1d1ac <_sbrk_r+0x1c>)
   1d194:	2300      	movs	r3, #0
   1d196:	4604      	mov	r4, r0
   1d198:	4608      	mov	r0, r1
   1d19a:	602b      	str	r3, [r5, #0]
   1d19c:	f000 f81e 	bl	1d1dc <_sbrk>
   1d1a0:	1c43      	adds	r3, r0, #1
   1d1a2:	d102      	bne.n	1d1aa <_sbrk_r+0x1a>
   1d1a4:	682b      	ldr	r3, [r5, #0]
   1d1a6:	b103      	cbz	r3, 1d1aa <_sbrk_r+0x1a>
   1d1a8:	6023      	str	r3, [r4, #0]
   1d1aa:	bd38      	pop	{r3, r4, r5, pc}
   1d1ac:	20001d4c 	.word	0x20001d4c

0001d1b0 <__malloc_lock>:
   1d1b0:	4801      	ldr	r0, [pc, #4]	; (1d1b8 <__malloc_lock+0x8>)
   1d1b2:	f000 b811 	b.w	1d1d8 <__retarget_lock_acquire_recursive>
   1d1b6:	bf00      	nop
   1d1b8:	20001d54 	.word	0x20001d54

0001d1bc <__malloc_unlock>:
   1d1bc:	4801      	ldr	r0, [pc, #4]	; (1d1c4 <__malloc_unlock+0x8>)
   1d1be:	f000 b80c 	b.w	1d1da <__retarget_lock_release_recursive>
   1d1c2:	bf00      	nop
   1d1c4:	20001d54 	.word	0x20001d54

0001d1c8 <_malloc_usable_size_r>:
   1d1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d1cc:	1f18      	subs	r0, r3, #4
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	bfbc      	itt	lt
   1d1d2:	580b      	ldrlt	r3, [r1, r0]
   1d1d4:	18c0      	addlt	r0, r0, r3
   1d1d6:	4770      	bx	lr

0001d1d8 <__retarget_lock_acquire_recursive>:
   1d1d8:	4770      	bx	lr

0001d1da <__retarget_lock_release_recursive>:
   1d1da:	4770      	bx	lr

0001d1dc <_sbrk>:
   1d1dc:	4a04      	ldr	r2, [pc, #16]	; (1d1f0 <_sbrk+0x14>)
   1d1de:	4905      	ldr	r1, [pc, #20]	; (1d1f4 <_sbrk+0x18>)
   1d1e0:	6813      	ldr	r3, [r2, #0]
   1d1e2:	2b00      	cmp	r3, #0
   1d1e4:	bf08      	it	eq
   1d1e6:	460b      	moveq	r3, r1
   1d1e8:	4418      	add	r0, r3
   1d1ea:	6010      	str	r0, [r2, #0]
   1d1ec:	4618      	mov	r0, r3
   1d1ee:	4770      	bx	lr
   1d1f0:	20001cc4 	.word	0x20001cc4
   1d1f4:	20001d60 	.word	0x20001d60

0001d1f8 <_exit>:
   1d1f8:	e7fe      	b.n	1d1f8 <_exit>
   1d1fa:	bf00      	nop
   1d1fc:	0000      	movs	r0, r0
	...

0001d200 <ceil>:
   1d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d202:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1d206:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
   1d20a:	2d13      	cmp	r5, #19
   1d20c:	460b      	mov	r3, r1
   1d20e:	460c      	mov	r4, r1
   1d210:	4602      	mov	r2, r0
   1d212:	4606      	mov	r6, r0
   1d214:	dc32      	bgt.n	1d27c <ceil+0x7c>
   1d216:	2d00      	cmp	r5, #0
   1d218:	db1e      	blt.n	1d258 <ceil+0x58>
   1d21a:	4f35      	ldr	r7, [pc, #212]	; (1d2f0 <ceil+0xf0>)
   1d21c:	412f      	asrs	r7, r5
   1d21e:	ea01 0c07 	and.w	ip, r1, r7
   1d222:	ea5c 0c00 	orrs.w	ip, ip, r0
   1d226:	d014      	beq.n	1d252 <ceil+0x52>
   1d228:	a32f      	add	r3, pc, #188	; (adr r3, 1d2e8 <ceil+0xe8>)
   1d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d22e:	f000 f993 	bl	1d558 <__adddf3>
   1d232:	2200      	movs	r2, #0
   1d234:	2300      	movs	r3, #0
   1d236:	f000 fbc3 	bl	1d9c0 <__aeabi_dcmpgt>
   1d23a:	b140      	cbz	r0, 1d24e <ceil+0x4e>
   1d23c:	2c00      	cmp	r4, #0
   1d23e:	dd03      	ble.n	1d248 <ceil+0x48>
   1d240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1d244:	412b      	asrs	r3, r5
   1d246:	441c      	add	r4, r3
   1d248:	ea24 0407 	bic.w	r4, r4, r7
   1d24c:	2600      	movs	r6, #0
   1d24e:	4632      	mov	r2, r6
   1d250:	4623      	mov	r3, r4
   1d252:	4610      	mov	r0, r2
   1d254:	4619      	mov	r1, r3
   1d256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d258:	a323      	add	r3, pc, #140	; (adr r3, 1d2e8 <ceil+0xe8>)
   1d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d25e:	f000 f97b 	bl	1d558 <__adddf3>
   1d262:	2200      	movs	r2, #0
   1d264:	2300      	movs	r3, #0
   1d266:	f000 fbab 	bl	1d9c0 <__aeabi_dcmpgt>
   1d26a:	2800      	cmp	r0, #0
   1d26c:	d0ef      	beq.n	1d24e <ceil+0x4e>
   1d26e:	2c00      	cmp	r4, #0
   1d270:	db34      	blt.n	1d2dc <ceil+0xdc>
   1d272:	4326      	orrs	r6, r4
   1d274:	d02e      	beq.n	1d2d4 <ceil+0xd4>
   1d276:	4c1f      	ldr	r4, [pc, #124]	; (1d2f4 <ceil+0xf4>)
   1d278:	2600      	movs	r6, #0
   1d27a:	e7e8      	b.n	1d24e <ceil+0x4e>
   1d27c:	2d33      	cmp	r5, #51	; 0x33
   1d27e:	dd07      	ble.n	1d290 <ceil+0x90>
   1d280:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1d284:	d1e5      	bne.n	1d252 <ceil+0x52>
   1d286:	f000 f967 	bl	1d558 <__adddf3>
   1d28a:	4602      	mov	r2, r0
   1d28c:	460b      	mov	r3, r1
   1d28e:	e7e0      	b.n	1d252 <ceil+0x52>
   1d290:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1d294:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1d298:	fa2c f707 	lsr.w	r7, ip, r7
   1d29c:	4207      	tst	r7, r0
   1d29e:	d0d8      	beq.n	1d252 <ceil+0x52>
   1d2a0:	a311      	add	r3, pc, #68	; (adr r3, 1d2e8 <ceil+0xe8>)
   1d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2a6:	f000 f957 	bl	1d558 <__adddf3>
   1d2aa:	2200      	movs	r2, #0
   1d2ac:	2300      	movs	r3, #0
   1d2ae:	f000 fb87 	bl	1d9c0 <__aeabi_dcmpgt>
   1d2b2:	2800      	cmp	r0, #0
   1d2b4:	d0cb      	beq.n	1d24e <ceil+0x4e>
   1d2b6:	2c00      	cmp	r4, #0
   1d2b8:	dd09      	ble.n	1d2ce <ceil+0xce>
   1d2ba:	2d14      	cmp	r5, #20
   1d2bc:	d00c      	beq.n	1d2d8 <ceil+0xd8>
   1d2be:	2201      	movs	r2, #1
   1d2c0:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
   1d2c4:	fa02 f303 	lsl.w	r3, r2, r3
   1d2c8:	199e      	adds	r6, r3, r6
   1d2ca:	bf28      	it	cs
   1d2cc:	18a4      	addcs	r4, r4, r2
   1d2ce:	ea26 0607 	bic.w	r6, r6, r7
   1d2d2:	e7bc      	b.n	1d24e <ceil+0x4e>
   1d2d4:	4634      	mov	r4, r6
   1d2d6:	e7ba      	b.n	1d24e <ceil+0x4e>
   1d2d8:	3401      	adds	r4, #1
   1d2da:	e7f8      	b.n	1d2ce <ceil+0xce>
   1d2dc:	2600      	movs	r6, #0
   1d2de:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   1d2e2:	e7b4      	b.n	1d24e <ceil+0x4e>
   1d2e4:	f3af 8000 	nop.w
   1d2e8:	8800759c 	.word	0x8800759c
   1d2ec:	7e37e43c 	.word	0x7e37e43c
   1d2f0:	000fffff 	.word	0x000fffff
   1d2f4:	3ff00000 	.word	0x3ff00000

0001d2f8 <__aeabi_dmul>:
   1d2f8:	b570      	push	{r4, r5, r6, lr}
   1d2fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1d2fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1d302:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1d306:	bf1d      	ittte	ne
   1d308:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1d30c:	ea94 0f0c 	teqne	r4, ip
   1d310:	ea95 0f0c 	teqne	r5, ip
   1d314:	f000 f8de 	bleq	1d4d4 <__aeabi_dmul+0x1dc>
   1d318:	442c      	add	r4, r5
   1d31a:	ea81 0603 	eor.w	r6, r1, r3
   1d31e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1d322:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1d326:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1d32a:	bf18      	it	ne
   1d32c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1d330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1d334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d338:	d038      	beq.n	1d3ac <__aeabi_dmul+0xb4>
   1d33a:	fba0 ce02 	umull	ip, lr, r0, r2
   1d33e:	f04f 0500 	mov.w	r5, #0
   1d342:	fbe1 e502 	umlal	lr, r5, r1, r2
   1d346:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1d34a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1d34e:	f04f 0600 	mov.w	r6, #0
   1d352:	fbe1 5603 	umlal	r5, r6, r1, r3
   1d356:	f09c 0f00 	teq	ip, #0
   1d35a:	bf18      	it	ne
   1d35c:	f04e 0e01 	orrne.w	lr, lr, #1
   1d360:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1d364:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1d368:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1d36c:	d204      	bcs.n	1d378 <__aeabi_dmul+0x80>
   1d36e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1d372:	416d      	adcs	r5, r5
   1d374:	eb46 0606 	adc.w	r6, r6, r6
   1d378:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1d37c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1d380:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1d384:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1d388:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1d38c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1d390:	bf88      	it	hi
   1d392:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1d396:	d81e      	bhi.n	1d3d6 <__aeabi_dmul+0xde>
   1d398:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1d39c:	bf08      	it	eq
   1d39e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1d3a2:	f150 0000 	adcs.w	r0, r0, #0
   1d3a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1d3aa:	bd70      	pop	{r4, r5, r6, pc}
   1d3ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1d3b0:	ea46 0101 	orr.w	r1, r6, r1
   1d3b4:	ea40 0002 	orr.w	r0, r0, r2
   1d3b8:	ea81 0103 	eor.w	r1, r1, r3
   1d3bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1d3c0:	bfc2      	ittt	gt
   1d3c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   1d3c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1d3ca:	bd70      	popgt	{r4, r5, r6, pc}
   1d3cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1d3d0:	f04f 0e00 	mov.w	lr, #0
   1d3d4:	3c01      	subs	r4, #1
   1d3d6:	f300 80ab 	bgt.w	1d530 <__aeabi_dmul+0x238>
   1d3da:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1d3de:	bfde      	ittt	le
   1d3e0:	2000      	movle	r0, #0
   1d3e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1d3e6:	bd70      	pople	{r4, r5, r6, pc}
   1d3e8:	f1c4 0400 	rsb	r4, r4, #0
   1d3ec:	3c20      	subs	r4, #32
   1d3ee:	da35      	bge.n	1d45c <__aeabi_dmul+0x164>
   1d3f0:	340c      	adds	r4, #12
   1d3f2:	dc1b      	bgt.n	1d42c <__aeabi_dmul+0x134>
   1d3f4:	f104 0414 	add.w	r4, r4, #20
   1d3f8:	f1c4 0520 	rsb	r5, r4, #32
   1d3fc:	fa00 f305 	lsl.w	r3, r0, r5
   1d400:	fa20 f004 	lsr.w	r0, r0, r4
   1d404:	fa01 f205 	lsl.w	r2, r1, r5
   1d408:	ea40 0002 	orr.w	r0, r0, r2
   1d40c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1d410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1d414:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1d418:	fa21 f604 	lsr.w	r6, r1, r4
   1d41c:	eb42 0106 	adc.w	r1, r2, r6
   1d420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1d424:	bf08      	it	eq
   1d426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1d42a:	bd70      	pop	{r4, r5, r6, pc}
   1d42c:	f1c4 040c 	rsb	r4, r4, #12
   1d430:	f1c4 0520 	rsb	r5, r4, #32
   1d434:	fa00 f304 	lsl.w	r3, r0, r4
   1d438:	fa20 f005 	lsr.w	r0, r0, r5
   1d43c:	fa01 f204 	lsl.w	r2, r1, r4
   1d440:	ea40 0002 	orr.w	r0, r0, r2
   1d444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1d448:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1d44c:	f141 0100 	adc.w	r1, r1, #0
   1d450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1d454:	bf08      	it	eq
   1d456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1d45a:	bd70      	pop	{r4, r5, r6, pc}
   1d45c:	f1c4 0520 	rsb	r5, r4, #32
   1d460:	fa00 f205 	lsl.w	r2, r0, r5
   1d464:	ea4e 0e02 	orr.w	lr, lr, r2
   1d468:	fa20 f304 	lsr.w	r3, r0, r4
   1d46c:	fa01 f205 	lsl.w	r2, r1, r5
   1d470:	ea43 0302 	orr.w	r3, r3, r2
   1d474:	fa21 f004 	lsr.w	r0, r1, r4
   1d478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1d47c:	fa21 f204 	lsr.w	r2, r1, r4
   1d480:	ea20 0002 	bic.w	r0, r0, r2
   1d484:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1d488:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1d48c:	bf08      	it	eq
   1d48e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1d492:	bd70      	pop	{r4, r5, r6, pc}
   1d494:	f094 0f00 	teq	r4, #0
   1d498:	d10f      	bne.n	1d4ba <__aeabi_dmul+0x1c2>
   1d49a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1d49e:	0040      	lsls	r0, r0, #1
   1d4a0:	eb41 0101 	adc.w	r1, r1, r1
   1d4a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1d4a8:	bf08      	it	eq
   1d4aa:	3c01      	subeq	r4, #1
   1d4ac:	d0f7      	beq.n	1d49e <__aeabi_dmul+0x1a6>
   1d4ae:	ea41 0106 	orr.w	r1, r1, r6
   1d4b2:	f095 0f00 	teq	r5, #0
   1d4b6:	bf18      	it	ne
   1d4b8:	4770      	bxne	lr
   1d4ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1d4be:	0052      	lsls	r2, r2, #1
   1d4c0:	eb43 0303 	adc.w	r3, r3, r3
   1d4c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1d4c8:	bf08      	it	eq
   1d4ca:	3d01      	subeq	r5, #1
   1d4cc:	d0f7      	beq.n	1d4be <__aeabi_dmul+0x1c6>
   1d4ce:	ea43 0306 	orr.w	r3, r3, r6
   1d4d2:	4770      	bx	lr
   1d4d4:	ea94 0f0c 	teq	r4, ip
   1d4d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1d4dc:	bf18      	it	ne
   1d4de:	ea95 0f0c 	teqne	r5, ip
   1d4e2:	d00c      	beq.n	1d4fe <__aeabi_dmul+0x206>
   1d4e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1d4e8:	bf18      	it	ne
   1d4ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1d4ee:	d1d1      	bne.n	1d494 <__aeabi_dmul+0x19c>
   1d4f0:	ea81 0103 	eor.w	r1, r1, r3
   1d4f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1d4f8:	f04f 0000 	mov.w	r0, #0
   1d4fc:	bd70      	pop	{r4, r5, r6, pc}
   1d4fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1d502:	bf06      	itte	eq
   1d504:	4610      	moveq	r0, r2
   1d506:	4619      	moveq	r1, r3
   1d508:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1d50c:	d019      	beq.n	1d542 <__aeabi_dmul+0x24a>
   1d50e:	ea94 0f0c 	teq	r4, ip
   1d512:	d102      	bne.n	1d51a <__aeabi_dmul+0x222>
   1d514:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1d518:	d113      	bne.n	1d542 <__aeabi_dmul+0x24a>
   1d51a:	ea95 0f0c 	teq	r5, ip
   1d51e:	d105      	bne.n	1d52c <__aeabi_dmul+0x234>
   1d520:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1d524:	bf1c      	itt	ne
   1d526:	4610      	movne	r0, r2
   1d528:	4619      	movne	r1, r3
   1d52a:	d10a      	bne.n	1d542 <__aeabi_dmul+0x24a>
   1d52c:	ea81 0103 	eor.w	r1, r1, r3
   1d530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1d534:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1d538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1d53c:	f04f 0000 	mov.w	r0, #0
   1d540:	bd70      	pop	{r4, r5, r6, pc}
   1d542:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1d546:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1d54a:	bd70      	pop	{r4, r5, r6, pc}

0001d54c <__aeabi_drsub>:
   1d54c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1d550:	e002      	b.n	1d558 <__adddf3>
   1d552:	bf00      	nop

0001d554 <__aeabi_dsub>:
   1d554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001d558 <__adddf3>:
   1d558:	b530      	push	{r4, r5, lr}
   1d55a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1d55e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1d562:	ea94 0f05 	teq	r4, r5
   1d566:	bf08      	it	eq
   1d568:	ea90 0f02 	teqeq	r0, r2
   1d56c:	bf1f      	itttt	ne
   1d56e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1d572:	ea55 0c02 	orrsne.w	ip, r5, r2
   1d576:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1d57a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1d57e:	f000 80e2 	beq.w	1d746 <__adddf3+0x1ee>
   1d582:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1d586:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1d58a:	bfb8      	it	lt
   1d58c:	426d      	neglt	r5, r5
   1d58e:	dd0c      	ble.n	1d5aa <__adddf3+0x52>
   1d590:	442c      	add	r4, r5
   1d592:	ea80 0202 	eor.w	r2, r0, r2
   1d596:	ea81 0303 	eor.w	r3, r1, r3
   1d59a:	ea82 0000 	eor.w	r0, r2, r0
   1d59e:	ea83 0101 	eor.w	r1, r3, r1
   1d5a2:	ea80 0202 	eor.w	r2, r0, r2
   1d5a6:	ea81 0303 	eor.w	r3, r1, r3
   1d5aa:	2d36      	cmp	r5, #54	; 0x36
   1d5ac:	bf88      	it	hi
   1d5ae:	bd30      	pophi	{r4, r5, pc}
   1d5b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1d5b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1d5b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1d5bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1d5c0:	d002      	beq.n	1d5c8 <__adddf3+0x70>
   1d5c2:	4240      	negs	r0, r0
   1d5c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d5c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1d5cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1d5d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1d5d4:	d002      	beq.n	1d5dc <__adddf3+0x84>
   1d5d6:	4252      	negs	r2, r2
   1d5d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1d5dc:	ea94 0f05 	teq	r4, r5
   1d5e0:	f000 80a7 	beq.w	1d732 <__adddf3+0x1da>
   1d5e4:	f1a4 0401 	sub.w	r4, r4, #1
   1d5e8:	f1d5 0e20 	rsbs	lr, r5, #32
   1d5ec:	db0d      	blt.n	1d60a <__adddf3+0xb2>
   1d5ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   1d5f2:	fa22 f205 	lsr.w	r2, r2, r5
   1d5f6:	1880      	adds	r0, r0, r2
   1d5f8:	f141 0100 	adc.w	r1, r1, #0
   1d5fc:	fa03 f20e 	lsl.w	r2, r3, lr
   1d600:	1880      	adds	r0, r0, r2
   1d602:	fa43 f305 	asr.w	r3, r3, r5
   1d606:	4159      	adcs	r1, r3
   1d608:	e00e      	b.n	1d628 <__adddf3+0xd0>
   1d60a:	f1a5 0520 	sub.w	r5, r5, #32
   1d60e:	f10e 0e20 	add.w	lr, lr, #32
   1d612:	2a01      	cmp	r2, #1
   1d614:	fa03 fc0e 	lsl.w	ip, r3, lr
   1d618:	bf28      	it	cs
   1d61a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1d61e:	fa43 f305 	asr.w	r3, r3, r5
   1d622:	18c0      	adds	r0, r0, r3
   1d624:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1d628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d62c:	d507      	bpl.n	1d63e <__adddf3+0xe6>
   1d62e:	f04f 0e00 	mov.w	lr, #0
   1d632:	f1dc 0c00 	rsbs	ip, ip, #0
   1d636:	eb7e 0000 	sbcs.w	r0, lr, r0
   1d63a:	eb6e 0101 	sbc.w	r1, lr, r1
   1d63e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1d642:	d31b      	bcc.n	1d67c <__adddf3+0x124>
   1d644:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1d648:	d30c      	bcc.n	1d664 <__adddf3+0x10c>
   1d64a:	0849      	lsrs	r1, r1, #1
   1d64c:	ea5f 0030 	movs.w	r0, r0, rrx
   1d650:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1d654:	f104 0401 	add.w	r4, r4, #1
   1d658:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1d65c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1d660:	f080 809a 	bcs.w	1d798 <__adddf3+0x240>
   1d664:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1d668:	bf08      	it	eq
   1d66a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1d66e:	f150 0000 	adcs.w	r0, r0, #0
   1d672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1d676:	ea41 0105 	orr.w	r1, r1, r5
   1d67a:	bd30      	pop	{r4, r5, pc}
   1d67c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1d680:	4140      	adcs	r0, r0
   1d682:	eb41 0101 	adc.w	r1, r1, r1
   1d686:	3c01      	subs	r4, #1
   1d688:	bf28      	it	cs
   1d68a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1d68e:	d2e9      	bcs.n	1d664 <__adddf3+0x10c>
   1d690:	f091 0f00 	teq	r1, #0
   1d694:	bf04      	itt	eq
   1d696:	4601      	moveq	r1, r0
   1d698:	2000      	moveq	r0, #0
   1d69a:	fab1 f381 	clz	r3, r1
   1d69e:	bf08      	it	eq
   1d6a0:	3320      	addeq	r3, #32
   1d6a2:	f1a3 030b 	sub.w	r3, r3, #11
   1d6a6:	f1b3 0220 	subs.w	r2, r3, #32
   1d6aa:	da0c      	bge.n	1d6c6 <__adddf3+0x16e>
   1d6ac:	320c      	adds	r2, #12
   1d6ae:	dd08      	ble.n	1d6c2 <__adddf3+0x16a>
   1d6b0:	f102 0c14 	add.w	ip, r2, #20
   1d6b4:	f1c2 020c 	rsb	r2, r2, #12
   1d6b8:	fa01 f00c 	lsl.w	r0, r1, ip
   1d6bc:	fa21 f102 	lsr.w	r1, r1, r2
   1d6c0:	e00c      	b.n	1d6dc <__adddf3+0x184>
   1d6c2:	f102 0214 	add.w	r2, r2, #20
   1d6c6:	bfd8      	it	le
   1d6c8:	f1c2 0c20 	rsble	ip, r2, #32
   1d6cc:	fa01 f102 	lsl.w	r1, r1, r2
   1d6d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d6d4:	bfdc      	itt	le
   1d6d6:	ea41 010c 	orrle.w	r1, r1, ip
   1d6da:	4090      	lslle	r0, r2
   1d6dc:	1ae4      	subs	r4, r4, r3
   1d6de:	bfa2      	ittt	ge
   1d6e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1d6e4:	4329      	orrge	r1, r5
   1d6e6:	bd30      	popge	{r4, r5, pc}
   1d6e8:	ea6f 0404 	mvn.w	r4, r4
   1d6ec:	3c1f      	subs	r4, #31
   1d6ee:	da1c      	bge.n	1d72a <__adddf3+0x1d2>
   1d6f0:	340c      	adds	r4, #12
   1d6f2:	dc0e      	bgt.n	1d712 <__adddf3+0x1ba>
   1d6f4:	f104 0414 	add.w	r4, r4, #20
   1d6f8:	f1c4 0220 	rsb	r2, r4, #32
   1d6fc:	fa20 f004 	lsr.w	r0, r0, r4
   1d700:	fa01 f302 	lsl.w	r3, r1, r2
   1d704:	ea40 0003 	orr.w	r0, r0, r3
   1d708:	fa21 f304 	lsr.w	r3, r1, r4
   1d70c:	ea45 0103 	orr.w	r1, r5, r3
   1d710:	bd30      	pop	{r4, r5, pc}
   1d712:	f1c4 040c 	rsb	r4, r4, #12
   1d716:	f1c4 0220 	rsb	r2, r4, #32
   1d71a:	fa20 f002 	lsr.w	r0, r0, r2
   1d71e:	fa01 f304 	lsl.w	r3, r1, r4
   1d722:	ea40 0003 	orr.w	r0, r0, r3
   1d726:	4629      	mov	r1, r5
   1d728:	bd30      	pop	{r4, r5, pc}
   1d72a:	fa21 f004 	lsr.w	r0, r1, r4
   1d72e:	4629      	mov	r1, r5
   1d730:	bd30      	pop	{r4, r5, pc}
   1d732:	f094 0f00 	teq	r4, #0
   1d736:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1d73a:	bf06      	itte	eq
   1d73c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1d740:	3401      	addeq	r4, #1
   1d742:	3d01      	subne	r5, #1
   1d744:	e74e      	b.n	1d5e4 <__adddf3+0x8c>
   1d746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1d74a:	bf18      	it	ne
   1d74c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1d750:	d029      	beq.n	1d7a6 <__adddf3+0x24e>
   1d752:	ea94 0f05 	teq	r4, r5
   1d756:	bf08      	it	eq
   1d758:	ea90 0f02 	teqeq	r0, r2
   1d75c:	d005      	beq.n	1d76a <__adddf3+0x212>
   1d75e:	ea54 0c00 	orrs.w	ip, r4, r0
   1d762:	bf04      	itt	eq
   1d764:	4619      	moveq	r1, r3
   1d766:	4610      	moveq	r0, r2
   1d768:	bd30      	pop	{r4, r5, pc}
   1d76a:	ea91 0f03 	teq	r1, r3
   1d76e:	bf1e      	ittt	ne
   1d770:	2100      	movne	r1, #0
   1d772:	2000      	movne	r0, #0
   1d774:	bd30      	popne	{r4, r5, pc}
   1d776:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1d77a:	d105      	bne.n	1d788 <__adddf3+0x230>
   1d77c:	0040      	lsls	r0, r0, #1
   1d77e:	4149      	adcs	r1, r1
   1d780:	bf28      	it	cs
   1d782:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1d786:	bd30      	pop	{r4, r5, pc}
   1d788:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1d78c:	bf3c      	itt	cc
   1d78e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1d792:	bd30      	popcc	{r4, r5, pc}
   1d794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d798:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1d79c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1d7a0:	f04f 0000 	mov.w	r0, #0
   1d7a4:	bd30      	pop	{r4, r5, pc}
   1d7a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1d7aa:	bf1a      	itte	ne
   1d7ac:	4619      	movne	r1, r3
   1d7ae:	4610      	movne	r0, r2
   1d7b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1d7b4:	bf1c      	itt	ne
   1d7b6:	460b      	movne	r3, r1
   1d7b8:	4602      	movne	r2, r0
   1d7ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1d7be:	bf06      	itte	eq
   1d7c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1d7c4:	ea91 0f03 	teqeq	r1, r3
   1d7c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1d7cc:	bd30      	pop	{r4, r5, pc}
   1d7ce:	bf00      	nop

0001d7d0 <__aeabi_ui2d>:
   1d7d0:	f090 0f00 	teq	r0, #0
   1d7d4:	bf04      	itt	eq
   1d7d6:	2100      	moveq	r1, #0
   1d7d8:	4770      	bxeq	lr
   1d7da:	b530      	push	{r4, r5, lr}
   1d7dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d7e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d7e4:	f04f 0500 	mov.w	r5, #0
   1d7e8:	f04f 0100 	mov.w	r1, #0
   1d7ec:	e750      	b.n	1d690 <__adddf3+0x138>
   1d7ee:	bf00      	nop

0001d7f0 <__aeabi_i2d>:
   1d7f0:	f090 0f00 	teq	r0, #0
   1d7f4:	bf04      	itt	eq
   1d7f6:	2100      	moveq	r1, #0
   1d7f8:	4770      	bxeq	lr
   1d7fa:	b530      	push	{r4, r5, lr}
   1d7fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d800:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d804:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1d808:	bf48      	it	mi
   1d80a:	4240      	negmi	r0, r0
   1d80c:	f04f 0100 	mov.w	r1, #0
   1d810:	e73e      	b.n	1d690 <__adddf3+0x138>
   1d812:	bf00      	nop

0001d814 <__aeabi_f2d>:
   1d814:	0042      	lsls	r2, r0, #1
   1d816:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1d81a:	ea4f 0131 	mov.w	r1, r1, rrx
   1d81e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1d822:	bf1f      	itttt	ne
   1d824:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1d828:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1d82c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1d830:	4770      	bxne	lr
   1d832:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1d836:	bf08      	it	eq
   1d838:	4770      	bxeq	lr
   1d83a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1d83e:	bf04      	itt	eq
   1d840:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1d844:	4770      	bxeq	lr
   1d846:	b530      	push	{r4, r5, lr}
   1d848:	f44f 7460 	mov.w	r4, #896	; 0x380
   1d84c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1d854:	e71c      	b.n	1d690 <__adddf3+0x138>
   1d856:	bf00      	nop

0001d858 <__aeabi_ul2d>:
   1d858:	ea50 0201 	orrs.w	r2, r0, r1
   1d85c:	bf08      	it	eq
   1d85e:	4770      	bxeq	lr
   1d860:	b530      	push	{r4, r5, lr}
   1d862:	f04f 0500 	mov.w	r5, #0
   1d866:	e00a      	b.n	1d87e <__aeabi_l2d+0x16>

0001d868 <__aeabi_l2d>:
   1d868:	ea50 0201 	orrs.w	r2, r0, r1
   1d86c:	bf08      	it	eq
   1d86e:	4770      	bxeq	lr
   1d870:	b530      	push	{r4, r5, lr}
   1d872:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1d876:	d502      	bpl.n	1d87e <__aeabi_l2d+0x16>
   1d878:	4240      	negs	r0, r0
   1d87a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d87e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d882:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d886:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1d88a:	f43f aed8 	beq.w	1d63e <__adddf3+0xe6>
   1d88e:	f04f 0203 	mov.w	r2, #3
   1d892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1d896:	bf18      	it	ne
   1d898:	3203      	addne	r2, #3
   1d89a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1d89e:	bf18      	it	ne
   1d8a0:	3203      	addne	r2, #3
   1d8a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1d8a6:	f1c2 0320 	rsb	r3, r2, #32
   1d8aa:	fa00 fc03 	lsl.w	ip, r0, r3
   1d8ae:	fa20 f002 	lsr.w	r0, r0, r2
   1d8b2:	fa01 fe03 	lsl.w	lr, r1, r3
   1d8b6:	ea40 000e 	orr.w	r0, r0, lr
   1d8ba:	fa21 f102 	lsr.w	r1, r1, r2
   1d8be:	4414      	add	r4, r2
   1d8c0:	e6bd      	b.n	1d63e <__adddf3+0xe6>
   1d8c2:	bf00      	nop

0001d8c4 <__gedf2>:
   1d8c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1d8c8:	e006      	b.n	1d8d8 <__cmpdf2+0x4>
   1d8ca:	bf00      	nop

0001d8cc <__ledf2>:
   1d8cc:	f04f 0c01 	mov.w	ip, #1
   1d8d0:	e002      	b.n	1d8d8 <__cmpdf2+0x4>
   1d8d2:	bf00      	nop

0001d8d4 <__cmpdf2>:
   1d8d4:	f04f 0c01 	mov.w	ip, #1
   1d8d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   1d8dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d8e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d8e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d8e8:	bf18      	it	ne
   1d8ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1d8ee:	d01b      	beq.n	1d928 <__cmpdf2+0x54>
   1d8f0:	b001      	add	sp, #4
   1d8f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1d8f6:	bf0c      	ite	eq
   1d8f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1d8fc:	ea91 0f03 	teqne	r1, r3
   1d900:	bf02      	ittt	eq
   1d902:	ea90 0f02 	teqeq	r0, r2
   1d906:	2000      	moveq	r0, #0
   1d908:	4770      	bxeq	lr
   1d90a:	f110 0f00 	cmn.w	r0, #0
   1d90e:	ea91 0f03 	teq	r1, r3
   1d912:	bf58      	it	pl
   1d914:	4299      	cmppl	r1, r3
   1d916:	bf08      	it	eq
   1d918:	4290      	cmpeq	r0, r2
   1d91a:	bf2c      	ite	cs
   1d91c:	17d8      	asrcs	r0, r3, #31
   1d91e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1d922:	f040 0001 	orr.w	r0, r0, #1
   1d926:	4770      	bx	lr
   1d928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d92c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d930:	d102      	bne.n	1d938 <__cmpdf2+0x64>
   1d932:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d936:	d107      	bne.n	1d948 <__cmpdf2+0x74>
   1d938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d93c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d940:	d1d6      	bne.n	1d8f0 <__cmpdf2+0x1c>
   1d942:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d946:	d0d3      	beq.n	1d8f0 <__cmpdf2+0x1c>
   1d948:	f85d 0b04 	ldr.w	r0, [sp], #4
   1d94c:	4770      	bx	lr
   1d94e:	bf00      	nop

0001d950 <__aeabi_cdrcmple>:
   1d950:	4684      	mov	ip, r0
   1d952:	4610      	mov	r0, r2
   1d954:	4662      	mov	r2, ip
   1d956:	468c      	mov	ip, r1
   1d958:	4619      	mov	r1, r3
   1d95a:	4663      	mov	r3, ip
   1d95c:	e000      	b.n	1d960 <__aeabi_cdcmpeq>
   1d95e:	bf00      	nop

0001d960 <__aeabi_cdcmpeq>:
   1d960:	b501      	push	{r0, lr}
   1d962:	f7ff ffb7 	bl	1d8d4 <__cmpdf2>
   1d966:	2800      	cmp	r0, #0
   1d968:	bf48      	it	mi
   1d96a:	f110 0f00 	cmnmi.w	r0, #0
   1d96e:	bd01      	pop	{r0, pc}

0001d970 <__aeabi_dcmpeq>:
   1d970:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d974:	f7ff fff4 	bl	1d960 <__aeabi_cdcmpeq>
   1d978:	bf0c      	ite	eq
   1d97a:	2001      	moveq	r0, #1
   1d97c:	2000      	movne	r0, #0
   1d97e:	f85d fb08 	ldr.w	pc, [sp], #8
   1d982:	bf00      	nop

0001d984 <__aeabi_dcmplt>:
   1d984:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d988:	f7ff ffea 	bl	1d960 <__aeabi_cdcmpeq>
   1d98c:	bf34      	ite	cc
   1d98e:	2001      	movcc	r0, #1
   1d990:	2000      	movcs	r0, #0
   1d992:	f85d fb08 	ldr.w	pc, [sp], #8
   1d996:	bf00      	nop

0001d998 <__aeabi_dcmple>:
   1d998:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d99c:	f7ff ffe0 	bl	1d960 <__aeabi_cdcmpeq>
   1d9a0:	bf94      	ite	ls
   1d9a2:	2001      	movls	r0, #1
   1d9a4:	2000      	movhi	r0, #0
   1d9a6:	f85d fb08 	ldr.w	pc, [sp], #8
   1d9aa:	bf00      	nop

0001d9ac <__aeabi_dcmpge>:
   1d9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d9b0:	f7ff ffce 	bl	1d950 <__aeabi_cdrcmple>
   1d9b4:	bf94      	ite	ls
   1d9b6:	2001      	movls	r0, #1
   1d9b8:	2000      	movhi	r0, #0
   1d9ba:	f85d fb08 	ldr.w	pc, [sp], #8
   1d9be:	bf00      	nop

0001d9c0 <__aeabi_dcmpgt>:
   1d9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d9c4:	f7ff ffc4 	bl	1d950 <__aeabi_cdrcmple>
   1d9c8:	bf34      	ite	cc
   1d9ca:	2001      	movcc	r0, #1
   1d9cc:	2000      	movcs	r0, #0
   1d9ce:	f85d fb08 	ldr.w	pc, [sp], #8
   1d9d2:	bf00      	nop

0001d9d4 <__aeabi_d2uiz>:
   1d9d4:	004a      	lsls	r2, r1, #1
   1d9d6:	d211      	bcs.n	1d9fc <__aeabi_d2uiz+0x28>
   1d9d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d9dc:	d211      	bcs.n	1da02 <__aeabi_d2uiz+0x2e>
   1d9de:	d50d      	bpl.n	1d9fc <__aeabi_d2uiz+0x28>
   1d9e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d9e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d9e8:	d40e      	bmi.n	1da08 <__aeabi_d2uiz+0x34>
   1d9ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d9ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d9f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d9f6:	fa23 f002 	lsr.w	r0, r3, r2
   1d9fa:	4770      	bx	lr
   1d9fc:	f04f 0000 	mov.w	r0, #0
   1da00:	4770      	bx	lr
   1da02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1da06:	d102      	bne.n	1da0e <__aeabi_d2uiz+0x3a>
   1da08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da0c:	4770      	bx	lr
   1da0e:	f04f 0000 	mov.w	r0, #0
   1da12:	4770      	bx	lr

0001da14 <selfrel_offset31>:
   1da14:	6803      	ldr	r3, [r0, #0]
   1da16:	005a      	lsls	r2, r3, #1
   1da18:	bf4c      	ite	mi
   1da1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1da1e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1da22:	4418      	add	r0, r3
   1da24:	4770      	bx	lr
   1da26:	bf00      	nop

0001da28 <search_EIT_table>:
   1da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da2c:	b329      	cbz	r1, 1da7a <search_EIT_table+0x52>
   1da2e:	1e4f      	subs	r7, r1, #1
   1da30:	4604      	mov	r4, r0
   1da32:	4615      	mov	r5, r2
   1da34:	463e      	mov	r6, r7
   1da36:	f04f 0800 	mov.w	r8, #0
   1da3a:	eb08 0106 	add.w	r1, r8, r6
   1da3e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   1da42:	1049      	asrs	r1, r1, #1
   1da44:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   1da48:	4648      	mov	r0, r9
   1da4a:	f7ff ffe3 	bl	1da14 <selfrel_offset31>
   1da4e:	4603      	mov	r3, r0
   1da50:	00c8      	lsls	r0, r1, #3
   1da52:	3008      	adds	r0, #8
   1da54:	428f      	cmp	r7, r1
   1da56:	4420      	add	r0, r4
   1da58:	d009      	beq.n	1da6e <search_EIT_table+0x46>
   1da5a:	42ab      	cmp	r3, r5
   1da5c:	d809      	bhi.n	1da72 <search_EIT_table+0x4a>
   1da5e:	f7ff ffd9 	bl	1da14 <selfrel_offset31>
   1da62:	3801      	subs	r0, #1
   1da64:	42a8      	cmp	r0, r5
   1da66:	d20a      	bcs.n	1da7e <search_EIT_table+0x56>
   1da68:	f101 0801 	add.w	r8, r1, #1
   1da6c:	e7e5      	b.n	1da3a <search_EIT_table+0x12>
   1da6e:	42ab      	cmp	r3, r5
   1da70:	d905      	bls.n	1da7e <search_EIT_table+0x56>
   1da72:	4588      	cmp	r8, r1
   1da74:	d001      	beq.n	1da7a <search_EIT_table+0x52>
   1da76:	1e4e      	subs	r6, r1, #1
   1da78:	e7df      	b.n	1da3a <search_EIT_table+0x12>
   1da7a:	f04f 0900 	mov.w	r9, #0
   1da7e:	4648      	mov	r0, r9
   1da80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001da84 <__gnu_unwind_get_pr_addr>:
   1da84:	2801      	cmp	r0, #1
   1da86:	d007      	beq.n	1da98 <__gnu_unwind_get_pr_addr+0x14>
   1da88:	2802      	cmp	r0, #2
   1da8a:	d007      	beq.n	1da9c <__gnu_unwind_get_pr_addr+0x18>
   1da8c:	4b04      	ldr	r3, [pc, #16]	; (1daa0 <__gnu_unwind_get_pr_addr+0x1c>)
   1da8e:	2800      	cmp	r0, #0
   1da90:	bf0c      	ite	eq
   1da92:	4618      	moveq	r0, r3
   1da94:	2000      	movne	r0, #0
   1da96:	4770      	bx	lr
   1da98:	4802      	ldr	r0, [pc, #8]	; (1daa4 <__gnu_unwind_get_pr_addr+0x20>)
   1da9a:	4770      	bx	lr
   1da9c:	4802      	ldr	r0, [pc, #8]	; (1daa8 <__gnu_unwind_get_pr_addr+0x24>)
   1da9e:	4770      	bx	lr
   1daa0:	0001e149 	.word	0x0001e149
   1daa4:	0001e14d 	.word	0x0001e14d
   1daa8:	0001e151 	.word	0x0001e151

0001daac <get_eit_entry>:
   1daac:	b530      	push	{r4, r5, lr}
   1daae:	4b23      	ldr	r3, [pc, #140]	; (1db3c <get_eit_entry+0x90>)
   1dab0:	b083      	sub	sp, #12
   1dab2:	4604      	mov	r4, r0
   1dab4:	1e8d      	subs	r5, r1, #2
   1dab6:	b33b      	cbz	r3, 1db08 <get_eit_entry+0x5c>
   1dab8:	a901      	add	r1, sp, #4
   1daba:	4628      	mov	r0, r5
   1dabc:	f3af 8000 	nop.w
   1dac0:	b1e8      	cbz	r0, 1dafe <get_eit_entry+0x52>
   1dac2:	9901      	ldr	r1, [sp, #4]
   1dac4:	462a      	mov	r2, r5
   1dac6:	f7ff ffaf 	bl	1da28 <search_EIT_table>
   1daca:	4601      	mov	r1, r0
   1dacc:	b1b8      	cbz	r0, 1dafe <get_eit_entry+0x52>
   1dace:	f7ff ffa1 	bl	1da14 <selfrel_offset31>
   1dad2:	684b      	ldr	r3, [r1, #4]
   1dad4:	64a0      	str	r0, [r4, #72]	; 0x48
   1dad6:	2b01      	cmp	r3, #1
   1dad8:	d02b      	beq.n	1db32 <get_eit_entry+0x86>
   1dada:	2b00      	cmp	r3, #0
   1dadc:	f101 0004 	add.w	r0, r1, #4
   1dae0:	db23      	blt.n	1db2a <get_eit_entry+0x7e>
   1dae2:	f7ff ff97 	bl	1da14 <selfrel_offset31>
   1dae6:	2300      	movs	r3, #0
   1dae8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1daec:	6803      	ldr	r3, [r0, #0]
   1daee:	2b00      	cmp	r3, #0
   1daf0:	db10      	blt.n	1db14 <get_eit_entry+0x68>
   1daf2:	f7ff ff8f 	bl	1da14 <selfrel_offset31>
   1daf6:	6120      	str	r0, [r4, #16]
   1daf8:	2000      	movs	r0, #0
   1dafa:	b003      	add	sp, #12
   1dafc:	bd30      	pop	{r4, r5, pc}
   1dafe:	2300      	movs	r3, #0
   1db00:	2009      	movs	r0, #9
   1db02:	6123      	str	r3, [r4, #16]
   1db04:	b003      	add	sp, #12
   1db06:	bd30      	pop	{r4, r5, pc}
   1db08:	490d      	ldr	r1, [pc, #52]	; (1db40 <get_eit_entry+0x94>)
   1db0a:	480e      	ldr	r0, [pc, #56]	; (1db44 <get_eit_entry+0x98>)
   1db0c:	1a09      	subs	r1, r1, r0
   1db0e:	10c9      	asrs	r1, r1, #3
   1db10:	9101      	str	r1, [sp, #4]
   1db12:	e7d7      	b.n	1dac4 <get_eit_entry+0x18>
   1db14:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1db18:	f7ff ffb4 	bl	1da84 <__gnu_unwind_get_pr_addr>
   1db1c:	2800      	cmp	r0, #0
   1db1e:	6120      	str	r0, [r4, #16]
   1db20:	bf14      	ite	ne
   1db22:	2000      	movne	r0, #0
   1db24:	2009      	moveq	r0, #9
   1db26:	b003      	add	sp, #12
   1db28:	bd30      	pop	{r4, r5, pc}
   1db2a:	2301      	movs	r3, #1
   1db2c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1db30:	e7dc      	b.n	1daec <get_eit_entry+0x40>
   1db32:	2300      	movs	r3, #0
   1db34:	6123      	str	r3, [r4, #16]
   1db36:	2005      	movs	r0, #5
   1db38:	e7df      	b.n	1dafa <get_eit_entry+0x4e>
   1db3a:	bf00      	nop
   1db3c:	00000000 	.word	0x00000000
   1db40:	0001f1d8 	.word	0x0001f1d8
   1db44:	0001f028 	.word	0x0001f028

0001db48 <restore_non_core_regs>:
   1db48:	6803      	ldr	r3, [r0, #0]
   1db4a:	07da      	lsls	r2, r3, #31
   1db4c:	b510      	push	{r4, lr}
   1db4e:	4604      	mov	r4, r0
   1db50:	d406      	bmi.n	1db60 <restore_non_core_regs+0x18>
   1db52:	079b      	lsls	r3, r3, #30
   1db54:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1db58:	d509      	bpl.n	1db6e <restore_non_core_regs+0x26>
   1db5a:	f000 fc4b 	bl	1e3f4 <__gnu_Unwind_Restore_VFP_D>
   1db5e:	6823      	ldr	r3, [r4, #0]
   1db60:	0759      	lsls	r1, r3, #29
   1db62:	d509      	bpl.n	1db78 <restore_non_core_regs+0x30>
   1db64:	071a      	lsls	r2, r3, #28
   1db66:	d50e      	bpl.n	1db86 <restore_non_core_regs+0x3e>
   1db68:	06db      	lsls	r3, r3, #27
   1db6a:	d513      	bpl.n	1db94 <restore_non_core_regs+0x4c>
   1db6c:	bd10      	pop	{r4, pc}
   1db6e:	f000 fc39 	bl	1e3e4 <__gnu_Unwind_Restore_VFP>
   1db72:	6823      	ldr	r3, [r4, #0]
   1db74:	0759      	lsls	r1, r3, #29
   1db76:	d4f5      	bmi.n	1db64 <restore_non_core_regs+0x1c>
   1db78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1db7c:	f000 fc42 	bl	1e404 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1db80:	6823      	ldr	r3, [r4, #0]
   1db82:	071a      	lsls	r2, r3, #28
   1db84:	d4f0      	bmi.n	1db68 <restore_non_core_regs+0x20>
   1db86:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1db8a:	f000 fc43 	bl	1e414 <__gnu_Unwind_Restore_WMMXD>
   1db8e:	6823      	ldr	r3, [r4, #0]
   1db90:	06db      	lsls	r3, r3, #27
   1db92:	d4eb      	bmi.n	1db6c <restore_non_core_regs+0x24>
   1db94:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1db98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1db9c:	f000 bc7e 	b.w	1e49c <__gnu_Unwind_Restore_WMMXC>

0001dba0 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1dba0:	4603      	mov	r3, r0
   1dba2:	6800      	ldr	r0, [r0, #0]
   1dba4:	b100      	cbz	r0, 1dba8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   1dba6:	4418      	add	r0, r3
   1dba8:	4770      	bx	lr
   1dbaa:	bf00      	nop

0001dbac <__gnu_unwind_24bit.isra.0>:
   1dbac:	2009      	movs	r0, #9
   1dbae:	4770      	bx	lr

0001dbb0 <_Unwind_DebugHook>:
   1dbb0:	4770      	bx	lr
   1dbb2:	bf00      	nop

0001dbb4 <unwind_phase2>:
   1dbb4:	b570      	push	{r4, r5, r6, lr}
   1dbb6:	4604      	mov	r4, r0
   1dbb8:	460e      	mov	r6, r1
   1dbba:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1dbbc:	4620      	mov	r0, r4
   1dbbe:	f7ff ff75 	bl	1daac <get_eit_entry>
   1dbc2:	4605      	mov	r5, r0
   1dbc4:	b988      	cbnz	r0, 1dbea <unwind_phase2+0x36>
   1dbc6:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1dbc8:	6163      	str	r3, [r4, #20]
   1dbca:	4632      	mov	r2, r6
   1dbcc:	6923      	ldr	r3, [r4, #16]
   1dbce:	4621      	mov	r1, r4
   1dbd0:	2001      	movs	r0, #1
   1dbd2:	4798      	blx	r3
   1dbd4:	2808      	cmp	r0, #8
   1dbd6:	d0f0      	beq.n	1dbba <unwind_phase2+0x6>
   1dbd8:	2807      	cmp	r0, #7
   1dbda:	d106      	bne.n	1dbea <unwind_phase2+0x36>
   1dbdc:	4628      	mov	r0, r5
   1dbde:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1dbe0:	f7ff ffe6 	bl	1dbb0 <_Unwind_DebugHook>
   1dbe4:	1d30      	adds	r0, r6, #4
   1dbe6:	f000 fbf1 	bl	1e3cc <__restore_core_regs>
   1dbea:	f000 fe65 	bl	1e8b8 <abort>
   1dbee:	bf00      	nop

0001dbf0 <unwind_phase2_forced>:
   1dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbf4:	1d0d      	adds	r5, r1, #4
   1dbf6:	4606      	mov	r6, r0
   1dbf8:	4614      	mov	r4, r2
   1dbfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dbfc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1dc00:	f10d 0c0c 	add.w	ip, sp, #12
   1dc04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1dc08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dc0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1dc0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dc10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1dc14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dc18:	ad02      	add	r5, sp, #8
   1dc1a:	68f7      	ldr	r7, [r6, #12]
   1dc1c:	f8d6 8018 	ldr.w	r8, [r6, #24]
   1dc20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1dc24:	2300      	movs	r3, #0
   1dc26:	602b      	str	r3, [r5, #0]
   1dc28:	e021      	b.n	1dc6e <unwind_phase2_forced+0x7e>
   1dc2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1dc2c:	6173      	str	r3, [r6, #20]
   1dc2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1dc32:	4629      	mov	r1, r5
   1dc34:	a87a      	add	r0, sp, #488	; 0x1e8
   1dc36:	f7fe fe25 	bl	1c884 <memcpy>
   1dc3a:	6933      	ldr	r3, [r6, #16]
   1dc3c:	aa7a      	add	r2, sp, #488	; 0x1e8
   1dc3e:	4631      	mov	r1, r6
   1dc40:	4650      	mov	r0, sl
   1dc42:	4798      	blx	r3
   1dc44:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1dc46:	e9cd 5800 	strd	r5, r8, [sp]
   1dc4a:	4621      	mov	r1, r4
   1dc4c:	646b      	str	r3, [r5, #68]	; 0x44
   1dc4e:	4681      	mov	r9, r0
   1dc50:	4633      	mov	r3, r6
   1dc52:	4632      	mov	r2, r6
   1dc54:	2001      	movs	r0, #1
   1dc56:	47b8      	blx	r7
   1dc58:	4604      	mov	r4, r0
   1dc5a:	b9e8      	cbnz	r0, 1dc98 <unwind_phase2_forced+0xa8>
   1dc5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1dc60:	a97a      	add	r1, sp, #488	; 0x1e8
   1dc62:	4628      	mov	r0, r5
   1dc64:	f7fe fe0e 	bl	1c884 <memcpy>
   1dc68:	f1b9 0f08 	cmp.w	r9, #8
   1dc6c:	d11b      	bne.n	1dca6 <unwind_phase2_forced+0xb6>
   1dc6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1dc70:	4630      	mov	r0, r6
   1dc72:	f7ff ff1b 	bl	1daac <get_eit_entry>
   1dc76:	3409      	adds	r4, #9
   1dc78:	fa5f fa84 	uxtb.w	sl, r4
   1dc7c:	4681      	mov	r9, r0
   1dc7e:	2800      	cmp	r0, #0
   1dc80:	d0d3      	beq.n	1dc2a <unwind_phase2_forced+0x3a>
   1dc82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1dc84:	f04a 0110 	orr.w	r1, sl, #16
   1dc88:	e9cd 5800 	strd	r5, r8, [sp]
   1dc8c:	4632      	mov	r2, r6
   1dc8e:	646b      	str	r3, [r5, #68]	; 0x44
   1dc90:	2001      	movs	r0, #1
   1dc92:	4633      	mov	r3, r6
   1dc94:	47b8      	blx	r7
   1dc96:	b108      	cbz	r0, 1dc9c <unwind_phase2_forced+0xac>
   1dc98:	f04f 0909 	mov.w	r9, #9
   1dc9c:	4648      	mov	r0, r9
   1dc9e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1dca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dca6:	f1b9 0f07 	cmp.w	r9, #7
   1dcaa:	d1f5      	bne.n	1dc98 <unwind_phase2_forced+0xa8>
   1dcac:	4620      	mov	r0, r4
   1dcae:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1dcb0:	f7ff ff7e 	bl	1dbb0 <_Unwind_DebugHook>
   1dcb4:	a803      	add	r0, sp, #12
   1dcb6:	f000 fb89 	bl	1e3cc <__restore_core_regs>
   1dcba:	bf00      	nop

0001dcbc <_Unwind_GetCFA>:
   1dcbc:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1dcbe:	4770      	bx	lr

0001dcc0 <__gnu_Unwind_RaiseException>:
   1dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcc2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1dcc4:	640b      	str	r3, [r1, #64]	; 0x40
   1dcc6:	1d0e      	adds	r6, r1, #4
   1dcc8:	460f      	mov	r7, r1
   1dcca:	4605      	mov	r5, r0
   1dccc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1dcce:	b0f9      	sub	sp, #484	; 0x1e4
   1dcd0:	ac01      	add	r4, sp, #4
   1dcd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dcd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1dcd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dcd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1dcda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dcdc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1dce0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1dce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1dce8:	9600      	str	r6, [sp, #0]
   1dcea:	e006      	b.n	1dcfa <__gnu_Unwind_RaiseException+0x3a>
   1dcec:	692b      	ldr	r3, [r5, #16]
   1dcee:	466a      	mov	r2, sp
   1dcf0:	4629      	mov	r1, r5
   1dcf2:	4798      	blx	r3
   1dcf4:	2808      	cmp	r0, #8
   1dcf6:	4604      	mov	r4, r0
   1dcf8:	d108      	bne.n	1dd0c <__gnu_Unwind_RaiseException+0x4c>
   1dcfa:	9910      	ldr	r1, [sp, #64]	; 0x40
   1dcfc:	4628      	mov	r0, r5
   1dcfe:	f7ff fed5 	bl	1daac <get_eit_entry>
   1dd02:	2800      	cmp	r0, #0
   1dd04:	d0f2      	beq.n	1dcec <__gnu_Unwind_RaiseException+0x2c>
   1dd06:	2009      	movs	r0, #9
   1dd08:	b079      	add	sp, #484	; 0x1e4
   1dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd0c:	4668      	mov	r0, sp
   1dd0e:	f7ff ff1b 	bl	1db48 <restore_non_core_regs>
   1dd12:	2c06      	cmp	r4, #6
   1dd14:	d1f7      	bne.n	1dd06 <__gnu_Unwind_RaiseException+0x46>
   1dd16:	4639      	mov	r1, r7
   1dd18:	4628      	mov	r0, r5
   1dd1a:	f7ff ff4b 	bl	1dbb4 <unwind_phase2>
   1dd1e:	bf00      	nop

0001dd20 <__gnu_Unwind_ForcedUnwind>:
   1dd20:	b430      	push	{r4, r5}
   1dd22:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1dd24:	60c1      	str	r1, [r0, #12]
   1dd26:	6182      	str	r2, [r0, #24]
   1dd28:	4619      	mov	r1, r3
   1dd2a:	641d      	str	r5, [r3, #64]	; 0x40
   1dd2c:	2200      	movs	r2, #0
   1dd2e:	bc30      	pop	{r4, r5}
   1dd30:	e75e      	b.n	1dbf0 <unwind_phase2_forced>
   1dd32:	bf00      	nop

0001dd34 <__gnu_Unwind_Resume>:
   1dd34:	b570      	push	{r4, r5, r6, lr}
   1dd36:	68c6      	ldr	r6, [r0, #12]
   1dd38:	6943      	ldr	r3, [r0, #20]
   1dd3a:	640b      	str	r3, [r1, #64]	; 0x40
   1dd3c:	b9ae      	cbnz	r6, 1dd6a <__gnu_Unwind_Resume+0x36>
   1dd3e:	6903      	ldr	r3, [r0, #16]
   1dd40:	460a      	mov	r2, r1
   1dd42:	4604      	mov	r4, r0
   1dd44:	460d      	mov	r5, r1
   1dd46:	4601      	mov	r1, r0
   1dd48:	2002      	movs	r0, #2
   1dd4a:	4798      	blx	r3
   1dd4c:	2807      	cmp	r0, #7
   1dd4e:	d005      	beq.n	1dd5c <__gnu_Unwind_Resume+0x28>
   1dd50:	2808      	cmp	r0, #8
   1dd52:	d10f      	bne.n	1dd74 <__gnu_Unwind_Resume+0x40>
   1dd54:	4629      	mov	r1, r5
   1dd56:	4620      	mov	r0, r4
   1dd58:	f7ff ff2c 	bl	1dbb4 <unwind_phase2>
   1dd5c:	4630      	mov	r0, r6
   1dd5e:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1dd60:	f7ff ff26 	bl	1dbb0 <_Unwind_DebugHook>
   1dd64:	1d28      	adds	r0, r5, #4
   1dd66:	f000 fb31 	bl	1e3cc <__restore_core_regs>
   1dd6a:	2201      	movs	r2, #1
   1dd6c:	f7ff ff40 	bl	1dbf0 <unwind_phase2_forced>
   1dd70:	f000 fda2 	bl	1e8b8 <abort>
   1dd74:	f000 fda0 	bl	1e8b8 <abort>

0001dd78 <__gnu_Unwind_Resume_or_Rethrow>:
   1dd78:	68c2      	ldr	r2, [r0, #12]
   1dd7a:	b11a      	cbz	r2, 1dd84 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1dd7c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1dd7e:	640a      	str	r2, [r1, #64]	; 0x40
   1dd80:	2200      	movs	r2, #0
   1dd82:	e735      	b.n	1dbf0 <unwind_phase2_forced>
   1dd84:	e79c      	b.n	1dcc0 <__gnu_Unwind_RaiseException>
   1dd86:	bf00      	nop

0001dd88 <_Unwind_Complete>:
   1dd88:	4770      	bx	lr
   1dd8a:	bf00      	nop

0001dd8c <_Unwind_DeleteException>:
   1dd8c:	6883      	ldr	r3, [r0, #8]
   1dd8e:	4601      	mov	r1, r0
   1dd90:	b10b      	cbz	r3, 1dd96 <_Unwind_DeleteException+0xa>
   1dd92:	2001      	movs	r0, #1
   1dd94:	4718      	bx	r3
   1dd96:	4770      	bx	lr

0001dd98 <_Unwind_VRS_Get>:
   1dd98:	2901      	cmp	r1, #1
   1dd9a:	d012      	beq.n	1ddc2 <_Unwind_VRS_Get+0x2a>
   1dd9c:	d809      	bhi.n	1ddb2 <_Unwind_VRS_Get+0x1a>
   1dd9e:	b973      	cbnz	r3, 1ddbe <_Unwind_VRS_Get+0x26>
   1dda0:	2a0f      	cmp	r2, #15
   1dda2:	d80c      	bhi.n	1ddbe <_Unwind_VRS_Get+0x26>
   1dda4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1dda8:	4618      	mov	r0, r3
   1ddaa:	6853      	ldr	r3, [r2, #4]
   1ddac:	9a00      	ldr	r2, [sp, #0]
   1ddae:	6013      	str	r3, [r2, #0]
   1ddb0:	4770      	bx	lr
   1ddb2:	3903      	subs	r1, #3
   1ddb4:	2901      	cmp	r1, #1
   1ddb6:	bf94      	ite	ls
   1ddb8:	2001      	movls	r0, #1
   1ddba:	2002      	movhi	r0, #2
   1ddbc:	4770      	bx	lr
   1ddbe:	2002      	movs	r0, #2
   1ddc0:	4770      	bx	lr
   1ddc2:	4608      	mov	r0, r1
   1ddc4:	4770      	bx	lr
   1ddc6:	bf00      	nop

0001ddc8 <_Unwind_GetGR>:
   1ddc8:	b510      	push	{r4, lr}
   1ddca:	b084      	sub	sp, #16
   1ddcc:	2300      	movs	r3, #0
   1ddce:	ac03      	add	r4, sp, #12
   1ddd0:	460a      	mov	r2, r1
   1ddd2:	9400      	str	r4, [sp, #0]
   1ddd4:	4619      	mov	r1, r3
   1ddd6:	f7ff ffdf 	bl	1dd98 <_Unwind_VRS_Get>
   1ddda:	9803      	ldr	r0, [sp, #12]
   1dddc:	b004      	add	sp, #16
   1ddde:	bd10      	pop	{r4, pc}

0001dde0 <_Unwind_VRS_Set>:
   1dde0:	2901      	cmp	r1, #1
   1dde2:	d012      	beq.n	1de0a <_Unwind_VRS_Set+0x2a>
   1dde4:	d809      	bhi.n	1ddfa <_Unwind_VRS_Set+0x1a>
   1dde6:	b973      	cbnz	r3, 1de06 <_Unwind_VRS_Set+0x26>
   1dde8:	2a0f      	cmp	r2, #15
   1ddea:	d80c      	bhi.n	1de06 <_Unwind_VRS_Set+0x26>
   1ddec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1ddf0:	9a00      	ldr	r2, [sp, #0]
   1ddf2:	6812      	ldr	r2, [r2, #0]
   1ddf4:	6042      	str	r2, [r0, #4]
   1ddf6:	4618      	mov	r0, r3
   1ddf8:	4770      	bx	lr
   1ddfa:	3903      	subs	r1, #3
   1ddfc:	2901      	cmp	r1, #1
   1ddfe:	bf94      	ite	ls
   1de00:	2001      	movls	r0, #1
   1de02:	2002      	movhi	r0, #2
   1de04:	4770      	bx	lr
   1de06:	2002      	movs	r0, #2
   1de08:	4770      	bx	lr
   1de0a:	4608      	mov	r0, r1
   1de0c:	4770      	bx	lr
   1de0e:	bf00      	nop

0001de10 <_Unwind_SetGR>:
   1de10:	b510      	push	{r4, lr}
   1de12:	b084      	sub	sp, #16
   1de14:	2300      	movs	r3, #0
   1de16:	ac03      	add	r4, sp, #12
   1de18:	9203      	str	r2, [sp, #12]
   1de1a:	9400      	str	r4, [sp, #0]
   1de1c:	460a      	mov	r2, r1
   1de1e:	4619      	mov	r1, r3
   1de20:	f7ff ffde 	bl	1dde0 <_Unwind_VRS_Set>
   1de24:	b004      	add	sp, #16
   1de26:	bd10      	pop	{r4, pc}

0001de28 <__gnu_Unwind_Backtrace>:
   1de28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de2a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1de2c:	6413      	str	r3, [r2, #64]	; 0x40
   1de2e:	1d15      	adds	r5, r2, #4
   1de30:	468c      	mov	ip, r1
   1de32:	4606      	mov	r6, r0
   1de34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1de36:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1de3a:	ac17      	add	r4, sp, #92	; 0x5c
   1de3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1de3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1de40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1de42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1de44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1de46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1de4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1de4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1de52:	4665      	mov	r5, ip
   1de54:	9716      	str	r7, [sp, #88]	; 0x58
   1de56:	e010      	b.n	1de7a <__gnu_Unwind_Backtrace+0x52>
   1de58:	f7ff ffda 	bl	1de10 <_Unwind_SetGR>
   1de5c:	4629      	mov	r1, r5
   1de5e:	a816      	add	r0, sp, #88	; 0x58
   1de60:	47b0      	blx	r6
   1de62:	4603      	mov	r3, r0
   1de64:	aa16      	add	r2, sp, #88	; 0x58
   1de66:	4669      	mov	r1, sp
   1de68:	2008      	movs	r0, #8
   1de6a:	b983      	cbnz	r3, 1de8e <__gnu_Unwind_Backtrace+0x66>
   1de6c:	9b04      	ldr	r3, [sp, #16]
   1de6e:	4798      	blx	r3
   1de70:	2805      	cmp	r0, #5
   1de72:	4604      	mov	r4, r0
   1de74:	d00c      	beq.n	1de90 <__gnu_Unwind_Backtrace+0x68>
   1de76:	2809      	cmp	r0, #9
   1de78:	d009      	beq.n	1de8e <__gnu_Unwind_Backtrace+0x66>
   1de7a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1de7c:	4668      	mov	r0, sp
   1de7e:	f7ff fe15 	bl	1daac <get_eit_entry>
   1de82:	4603      	mov	r3, r0
   1de84:	466a      	mov	r2, sp
   1de86:	210c      	movs	r1, #12
   1de88:	a816      	add	r0, sp, #88	; 0x58
   1de8a:	2b00      	cmp	r3, #0
   1de8c:	d0e4      	beq.n	1de58 <__gnu_Unwind_Backtrace+0x30>
   1de8e:	2409      	movs	r4, #9
   1de90:	a816      	add	r0, sp, #88	; 0x58
   1de92:	f7ff fe59 	bl	1db48 <restore_non_core_regs>
   1de96:	4620      	mov	r0, r4
   1de98:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1de9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de9e:	bf00      	nop

0001dea0 <__gnu_unwind_pr_common>:
   1dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dea4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   1dea6:	b089      	sub	sp, #36	; 0x24
   1dea8:	460d      	mov	r5, r1
   1deaa:	f854 1b04 	ldr.w	r1, [r4], #4
   1deae:	9406      	str	r4, [sp, #24]
   1deb0:	4617      	mov	r7, r2
   1deb2:	f000 0803 	and.w	r8, r0, #3
   1deb6:	461e      	mov	r6, r3
   1deb8:	2b00      	cmp	r3, #0
   1deba:	d079      	beq.n	1dfb0 <__gnu_unwind_pr_common+0x110>
   1debc:	0c0b      	lsrs	r3, r1, #16
   1debe:	b2da      	uxtb	r2, r3
   1dec0:	0409      	lsls	r1, r1, #16
   1dec2:	f88d 301d 	strb.w	r3, [sp, #29]
   1dec6:	2302      	movs	r3, #2
   1dec8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1decc:	9105      	str	r1, [sp, #20]
   1dece:	f88d 301c 	strb.w	r3, [sp, #28]
   1ded2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ded4:	f1b8 0f02 	cmp.w	r8, #2
   1ded8:	bf08      	it	eq
   1deda:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1dedc:	f013 0301 	ands.w	r3, r3, #1
   1dee0:	d00c      	beq.n	1defc <__gnu_unwind_pr_common+0x5c>
   1dee2:	4638      	mov	r0, r7
   1dee4:	a905      	add	r1, sp, #20
   1dee6:	f000 fb73 	bl	1e5d0 <__gnu_unwind_execute>
   1deea:	b918      	cbnz	r0, 1def4 <__gnu_unwind_pr_common+0x54>
   1deec:	2008      	movs	r0, #8
   1deee:	b009      	add	sp, #36	; 0x24
   1def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1def4:	2009      	movs	r0, #9
   1def6:	b009      	add	sp, #36	; 0x24
   1def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1defc:	f8d4 a000 	ldr.w	sl, [r4]
   1df00:	f1ba 0f00 	cmp.w	sl, #0
   1df04:	d0ed      	beq.n	1dee2 <__gnu_unwind_pr_common+0x42>
   1df06:	9301      	str	r3, [sp, #4]
   1df08:	f000 0308 	and.w	r3, r0, #8
   1df0c:	9302      	str	r3, [sp, #8]
   1df0e:	2e02      	cmp	r6, #2
   1df10:	d04a      	beq.n	1dfa8 <__gnu_unwind_pr_common+0x108>
   1df12:	f8b4 a000 	ldrh.w	sl, [r4]
   1df16:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   1df1a:	3404      	adds	r4, #4
   1df1c:	6caa      	ldr	r2, [r5, #72]	; 0x48
   1df1e:	f029 0b01 	bic.w	fp, r9, #1
   1df22:	210f      	movs	r1, #15
   1df24:	4638      	mov	r0, r7
   1df26:	4493      	add	fp, r2
   1df28:	f7ff ff4e 	bl	1ddc8 <_Unwind_GetGR>
   1df2c:	4583      	cmp	fp, r0
   1df2e:	d839      	bhi.n	1dfa4 <__gnu_unwind_pr_common+0x104>
   1df30:	f02a 0201 	bic.w	r2, sl, #1
   1df34:	445a      	add	r2, fp
   1df36:	4282      	cmp	r2, r0
   1df38:	bf94      	ite	ls
   1df3a:	2000      	movls	r0, #0
   1df3c:	2001      	movhi	r0, #1
   1df3e:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1df42:	f003 0302 	and.w	r3, r3, #2
   1df46:	f00a 0a01 	and.w	sl, sl, #1
   1df4a:	ea43 030a 	orr.w	r3, r3, sl
   1df4e:	2b01      	cmp	r3, #1
   1df50:	d049      	beq.n	1dfe6 <__gnu_unwind_pr_common+0x146>
   1df52:	2b02      	cmp	r3, #2
   1df54:	d032      	beq.n	1dfbc <__gnu_unwind_pr_common+0x11c>
   1df56:	2b00      	cmp	r3, #0
   1df58:	d1cc      	bne.n	1def4 <__gnu_unwind_pr_common+0x54>
   1df5a:	f1b8 0f00 	cmp.w	r8, #0
   1df5e:	d002      	beq.n	1df66 <__gnu_unwind_pr_common+0xc6>
   1df60:	2800      	cmp	r0, #0
   1df62:	f040 80cd 	bne.w	1e100 <__gnu_unwind_pr_common+0x260>
   1df66:	3404      	adds	r4, #4
   1df68:	f8d4 a000 	ldr.w	sl, [r4]
   1df6c:	f1ba 0f00 	cmp.w	sl, #0
   1df70:	d1cd      	bne.n	1df0e <__gnu_unwind_pr_common+0x6e>
   1df72:	a905      	add	r1, sp, #20
   1df74:	4638      	mov	r0, r7
   1df76:	f000 fb2b 	bl	1e5d0 <__gnu_unwind_execute>
   1df7a:	2800      	cmp	r0, #0
   1df7c:	d1ba      	bne.n	1def4 <__gnu_unwind_pr_common+0x54>
   1df7e:	9b01      	ldr	r3, [sp, #4]
   1df80:	2b00      	cmp	r3, #0
   1df82:	d0b3      	beq.n	1deec <__gnu_unwind_pr_common+0x4c>
   1df84:	210f      	movs	r1, #15
   1df86:	4638      	mov	r0, r7
   1df88:	f7ff ff1e 	bl	1ddc8 <_Unwind_GetGR>
   1df8c:	210e      	movs	r1, #14
   1df8e:	4602      	mov	r2, r0
   1df90:	4638      	mov	r0, r7
   1df92:	f7ff ff3d 	bl	1de10 <_Unwind_SetGR>
   1df96:	4638      	mov	r0, r7
   1df98:	4a6a      	ldr	r2, [pc, #424]	; (1e144 <__gnu_unwind_pr_common+0x2a4>)
   1df9a:	210f      	movs	r1, #15
   1df9c:	f7ff ff38 	bl	1de10 <_Unwind_SetGR>
   1dfa0:	2007      	movs	r0, #7
   1dfa2:	e7a8      	b.n	1def6 <__gnu_unwind_pr_common+0x56>
   1dfa4:	2000      	movs	r0, #0
   1dfa6:	e7ca      	b.n	1df3e <__gnu_unwind_pr_common+0x9e>
   1dfa8:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1dfac:	3408      	adds	r4, #8
   1dfae:	e7b5      	b.n	1df1c <__gnu_unwind_pr_common+0x7c>
   1dfb0:	0209      	lsls	r1, r1, #8
   1dfb2:	2303      	movs	r3, #3
   1dfb4:	9105      	str	r1, [sp, #20]
   1dfb6:	f8ad 301c 	strh.w	r3, [sp, #28]
   1dfba:	e78a      	b.n	1ded2 <__gnu_unwind_pr_common+0x32>
   1dfbc:	6823      	ldr	r3, [r4, #0]
   1dfbe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   1dfc2:	f1b8 0f00 	cmp.w	r8, #0
   1dfc6:	d145      	bne.n	1e054 <__gnu_unwind_pr_common+0x1b4>
   1dfc8:	b128      	cbz	r0, 1dfd6 <__gnu_unwind_pr_common+0x136>
   1dfca:	9a02      	ldr	r2, [sp, #8]
   1dfcc:	2a00      	cmp	r2, #0
   1dfce:	d05c      	beq.n	1e08a <__gnu_unwind_pr_common+0x1ea>
   1dfd0:	f1bb 0f00 	cmp.w	fp, #0
   1dfd4:	d074      	beq.n	1e0c0 <__gnu_unwind_pr_common+0x220>
   1dfd6:	2b00      	cmp	r3, #0
   1dfd8:	da00      	bge.n	1dfdc <__gnu_unwind_pr_common+0x13c>
   1dfda:	3404      	adds	r4, #4
   1dfdc:	f10b 0b01 	add.w	fp, fp, #1
   1dfe0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   1dfe4:	e7c0      	b.n	1df68 <__gnu_unwind_pr_common+0xc8>
   1dfe6:	f1b8 0f00 	cmp.w	r8, #0
   1dfea:	d119      	bne.n	1e020 <__gnu_unwind_pr_common+0x180>
   1dfec:	b1b0      	cbz	r0, 1e01c <__gnu_unwind_pr_common+0x17c>
   1dfee:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dff2:	1c99      	adds	r1, r3, #2
   1dff4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1dff8:	f43f af7c 	beq.w	1def4 <__gnu_unwind_pr_common+0x54>
   1dffc:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1e000:	3301      	adds	r3, #1
   1e002:	9104      	str	r1, [sp, #16]
   1e004:	f000 8090 	beq.w	1e128 <__gnu_unwind_pr_common+0x288>
   1e008:	1d20      	adds	r0, r4, #4
   1e00a:	f7ff fdc9 	bl	1dba0 <_Unwind_decode_typeinfo_ptr.isra.0>
   1e00e:	ab04      	add	r3, sp, #16
   1e010:	4601      	mov	r1, r0
   1e012:	4628      	mov	r0, r5
   1e014:	f3af 8000 	nop.w
   1e018:	2800      	cmp	r0, #0
   1e01a:	d15b      	bne.n	1e0d4 <__gnu_unwind_pr_common+0x234>
   1e01c:	3408      	adds	r4, #8
   1e01e:	e7a3      	b.n	1df68 <__gnu_unwind_pr_common+0xc8>
   1e020:	210d      	movs	r1, #13
   1e022:	4638      	mov	r0, r7
   1e024:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1e028:	f7ff fece 	bl	1ddc8 <_Unwind_GetGR>
   1e02c:	4581      	cmp	r9, r0
   1e02e:	d1f5      	bne.n	1e01c <__gnu_unwind_pr_common+0x17c>
   1e030:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e032:	429c      	cmp	r4, r3
   1e034:	d1f2      	bne.n	1e01c <__gnu_unwind_pr_common+0x17c>
   1e036:	4620      	mov	r0, r4
   1e038:	f7ff fcec 	bl	1da14 <selfrel_offset31>
   1e03c:	210f      	movs	r1, #15
   1e03e:	4602      	mov	r2, r0
   1e040:	4638      	mov	r0, r7
   1e042:	f7ff fee5 	bl	1de10 <_Unwind_SetGR>
   1e046:	4638      	mov	r0, r7
   1e048:	462a      	mov	r2, r5
   1e04a:	2100      	movs	r1, #0
   1e04c:	f7ff fee0 	bl	1de10 <_Unwind_SetGR>
   1e050:	2007      	movs	r0, #7
   1e052:	e750      	b.n	1def6 <__gnu_unwind_pr_common+0x56>
   1e054:	210d      	movs	r1, #13
   1e056:	4638      	mov	r0, r7
   1e058:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1e05c:	f7ff feb4 	bl	1ddc8 <_Unwind_GetGR>
   1e060:	4581      	cmp	r9, r0
   1e062:	d001      	beq.n	1e068 <__gnu_unwind_pr_common+0x1c8>
   1e064:	6823      	ldr	r3, [r4, #0]
   1e066:	e7b6      	b.n	1dfd6 <__gnu_unwind_pr_common+0x136>
   1e068:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e06a:	429c      	cmp	r4, r3
   1e06c:	d1fa      	bne.n	1e064 <__gnu_unwind_pr_common+0x1c4>
   1e06e:	2204      	movs	r2, #4
   1e070:	2100      	movs	r1, #0
   1e072:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
   1e076:	18a3      	adds	r3, r4, r2
   1e078:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   1e07c:	636b      	str	r3, [r5, #52]	; 0x34
   1e07e:	6823      	ldr	r3, [r4, #0]
   1e080:	428b      	cmp	r3, r1
   1e082:	db59      	blt.n	1e138 <__gnu_unwind_pr_common+0x298>
   1e084:	2301      	movs	r3, #1
   1e086:	9301      	str	r3, [sp, #4]
   1e088:	e7a8      	b.n	1dfdc <__gnu_unwind_pr_common+0x13c>
   1e08a:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1e08e:	f8cd 800c 	str.w	r8, [sp, #12]
   1e092:	f104 0a04 	add.w	sl, r4, #4
   1e096:	46b0      	mov	r8, r6
   1e098:	4691      	mov	r9, r2
   1e09a:	461e      	mov	r6, r3
   1e09c:	e00d      	b.n	1e0ba <__gnu_unwind_pr_common+0x21a>
   1e09e:	9604      	str	r6, [sp, #16]
   1e0a0:	f7ff fd7e 	bl	1dba0 <_Unwind_decode_typeinfo_ptr.isra.0>
   1e0a4:	ab04      	add	r3, sp, #16
   1e0a6:	4601      	mov	r1, r0
   1e0a8:	2200      	movs	r2, #0
   1e0aa:	4628      	mov	r0, r5
   1e0ac:	f3af 8000 	nop.w
   1e0b0:	f109 0901 	add.w	r9, r9, #1
   1e0b4:	f10a 0a04 	add.w	sl, sl, #4
   1e0b8:	b9e8      	cbnz	r0, 1e0f6 <__gnu_unwind_pr_common+0x256>
   1e0ba:	45d9      	cmp	r9, fp
   1e0bc:	4650      	mov	r0, sl
   1e0be:	d1ee      	bne.n	1e09e <__gnu_unwind_pr_common+0x1fe>
   1e0c0:	4638      	mov	r0, r7
   1e0c2:	210d      	movs	r1, #13
   1e0c4:	f7ff fe80 	bl	1ddc8 <_Unwind_GetGR>
   1e0c8:	9b04      	ldr	r3, [sp, #16]
   1e0ca:	6228      	str	r0, [r5, #32]
   1e0cc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   1e0d0:	2006      	movs	r0, #6
   1e0d2:	e710      	b.n	1def6 <__gnu_unwind_pr_common+0x56>
   1e0d4:	4681      	mov	r9, r0
   1e0d6:	210d      	movs	r1, #13
   1e0d8:	4638      	mov	r0, r7
   1e0da:	f7ff fe75 	bl	1ddc8 <_Unwind_GetGR>
   1e0de:	f1b9 0f02 	cmp.w	r9, #2
   1e0e2:	6228      	str	r0, [r5, #32]
   1e0e4:	d125      	bne.n	1e132 <__gnu_unwind_pr_common+0x292>
   1e0e6:	462b      	mov	r3, r5
   1e0e8:	9a04      	ldr	r2, [sp, #16]
   1e0ea:	f843 2f2c 	str.w	r2, [r3, #44]!
   1e0ee:	626b      	str	r3, [r5, #36]	; 0x24
   1e0f0:	62ac      	str	r4, [r5, #40]	; 0x28
   1e0f2:	2006      	movs	r0, #6
   1e0f4:	e6ff      	b.n	1def6 <__gnu_unwind_pr_common+0x56>
   1e0f6:	4646      	mov	r6, r8
   1e0f8:	6823      	ldr	r3, [r4, #0]
   1e0fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1e0fe:	e76a      	b.n	1dfd6 <__gnu_unwind_pr_common+0x136>
   1e100:	4620      	mov	r0, r4
   1e102:	f7ff fc87 	bl	1da14 <selfrel_offset31>
   1e106:	3404      	adds	r4, #4
   1e108:	4602      	mov	r2, r0
   1e10a:	63ac      	str	r4, [r5, #56]	; 0x38
   1e10c:	4628      	mov	r0, r5
   1e10e:	4614      	mov	r4, r2
   1e110:	f3af 8000 	nop.w
   1e114:	2800      	cmp	r0, #0
   1e116:	f43f aeed 	beq.w	1def4 <__gnu_unwind_pr_common+0x54>
   1e11a:	4638      	mov	r0, r7
   1e11c:	4622      	mov	r2, r4
   1e11e:	210f      	movs	r1, #15
   1e120:	f7ff fe76 	bl	1de10 <_Unwind_SetGR>
   1e124:	2007      	movs	r0, #7
   1e126:	e6e6      	b.n	1def6 <__gnu_unwind_pr_common+0x56>
   1e128:	4638      	mov	r0, r7
   1e12a:	210d      	movs	r1, #13
   1e12c:	f7ff fe4c 	bl	1ddc8 <_Unwind_GetGR>
   1e130:	6228      	str	r0, [r5, #32]
   1e132:	9b04      	ldr	r3, [sp, #16]
   1e134:	626b      	str	r3, [r5, #36]	; 0x24
   1e136:	e7db      	b.n	1e0f0 <__gnu_unwind_pr_common+0x250>
   1e138:	f10b 0001 	add.w	r0, fp, #1
   1e13c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1e140:	e77a      	b.n	1e038 <__gnu_unwind_pr_common+0x198>
   1e142:	bf00      	nop
   1e144:	00000000 	.word	0x00000000

0001e148 <__aeabi_unwind_cpp_pr0>:
   1e148:	2300      	movs	r3, #0
   1e14a:	e6a9      	b.n	1dea0 <__gnu_unwind_pr_common>

0001e14c <__aeabi_unwind_cpp_pr1>:
   1e14c:	2301      	movs	r3, #1
   1e14e:	e6a7      	b.n	1dea0 <__gnu_unwind_pr_common>

0001e150 <__aeabi_unwind_cpp_pr2>:
   1e150:	2302      	movs	r3, #2
   1e152:	e6a5      	b.n	1dea0 <__gnu_unwind_pr_common>

0001e154 <_Unwind_VRS_Pop>:
   1e154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e158:	4606      	mov	r6, r0
   1e15a:	b0c3      	sub	sp, #268	; 0x10c
   1e15c:	4615      	mov	r5, r2
   1e15e:	461c      	mov	r4, r3
   1e160:	2904      	cmp	r1, #4
   1e162:	f200 80b9 	bhi.w	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e166:	e8df f001 	tbb	[pc, r1]
   1e16a:	539a      	.short	0x539a
   1e16c:	29b7      	.short	0x29b7
   1e16e:	03          	.byte	0x03
   1e16f:	00          	.byte	0x00
   1e170:	2c00      	cmp	r4, #0
   1e172:	f040 80b1 	bne.w	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e176:	2a10      	cmp	r2, #16
   1e178:	f200 80ae 	bhi.w	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e17c:	6803      	ldr	r3, [r0, #0]
   1e17e:	06d8      	lsls	r0, r3, #27
   1e180:	f100 80f3 	bmi.w	1e36a <_Unwind_VRS_Pop+0x216>
   1e184:	af20      	add	r7, sp, #128	; 0x80
   1e186:	4638      	mov	r0, r7
   1e188:	f000 f992 	bl	1e4b0 <__gnu_Unwind_Save_WMMXC>
   1e18c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1e18e:	2300      	movs	r3, #0
   1e190:	2401      	movs	r4, #1
   1e192:	fa04 f203 	lsl.w	r2, r4, r3
   1e196:	422a      	tst	r2, r5
   1e198:	4601      	mov	r1, r0
   1e19a:	d004      	beq.n	1e1a6 <_Unwind_VRS_Pop+0x52>
   1e19c:	f851 2b04 	ldr.w	r2, [r1], #4
   1e1a0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1e1a4:	4608      	mov	r0, r1
   1e1a6:	3301      	adds	r3, #1
   1e1a8:	2b04      	cmp	r3, #4
   1e1aa:	d1f2      	bne.n	1e192 <_Unwind_VRS_Pop+0x3e>
   1e1ac:	63b0      	str	r0, [r6, #56]	; 0x38
   1e1ae:	4638      	mov	r0, r7
   1e1b0:	f000 f974 	bl	1e49c <__gnu_Unwind_Restore_WMMXC>
   1e1b4:	2000      	movs	r0, #0
   1e1b6:	b043      	add	sp, #268	; 0x10c
   1e1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e1bc:	2c03      	cmp	r4, #3
   1e1be:	f040 808b 	bne.w	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e1c2:	b294      	uxth	r4, r2
   1e1c4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   1e1c8:	2b10      	cmp	r3, #16
   1e1ca:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1e1ce:	f200 8083 	bhi.w	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e1d2:	6803      	ldr	r3, [r0, #0]
   1e1d4:	071f      	lsls	r7, r3, #28
   1e1d6:	f100 80d0 	bmi.w	1e37a <_Unwind_VRS_Pop+0x226>
   1e1da:	af20      	add	r7, sp, #128	; 0x80
   1e1dc:	4638      	mov	r0, r7
   1e1de:	f000 f93b 	bl	1e458 <__gnu_Unwind_Save_WMMXD>
   1e1e2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1e1e6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   1e1e8:	b154      	cbz	r4, 1e200 <_Unwind_VRS_Pop+0xac>
   1e1ea:	460b      	mov	r3, r1
   1e1ec:	1ae8      	subs	r0, r5, r3
   1e1ee:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   1e1f2:	00e4      	lsls	r4, r4, #3
   1e1f4:	581a      	ldr	r2, [r3, r0]
   1e1f6:	f843 2b04 	str.w	r2, [r3], #4
   1e1fa:	428b      	cmp	r3, r1
   1e1fc:	d1fa      	bne.n	1e1f4 <_Unwind_VRS_Pop+0xa0>
   1e1fe:	4425      	add	r5, r4
   1e200:	4638      	mov	r0, r7
   1e202:	63b5      	str	r5, [r6, #56]	; 0x38
   1e204:	f000 f906 	bl	1e414 <__gnu_Unwind_Restore_WMMXD>
   1e208:	2000      	movs	r0, #0
   1e20a:	b043      	add	sp, #268	; 0x10c
   1e20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e210:	2c01      	cmp	r4, #1
   1e212:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1e216:	b295      	uxth	r5, r2
   1e218:	d05a      	beq.n	1e2d0 <_Unwind_VRS_Pop+0x17c>
   1e21a:	2c05      	cmp	r4, #5
   1e21c:	d15c      	bne.n	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e21e:	eb08 0905 	add.w	r9, r8, r5
   1e222:	f1b9 0f20 	cmp.w	r9, #32
   1e226:	d857      	bhi.n	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e228:	f1b8 0f0f 	cmp.w	r8, #15
   1e22c:	d977      	bls.n	1e31e <_Unwind_VRS_Pop+0x1ca>
   1e22e:	46a9      	mov	r9, r5
   1e230:	2d00      	cmp	r5, #0
   1e232:	f040 8088 	bne.w	1e346 <_Unwind_VRS_Pop+0x1f2>
   1e236:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e238:	b36d      	cbz	r5, 1e296 <_Unwind_VRS_Pop+0x142>
   1e23a:	af20      	add	r7, sp, #128	; 0x80
   1e23c:	f04f 0900 	mov.w	r9, #0
   1e240:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   1e244:	3f04      	subs	r7, #4
   1e246:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1e24a:	f853 1b04 	ldr.w	r1, [r3], #4
   1e24e:	f847 1f04 	str.w	r1, [r7, #4]!
   1e252:	42ab      	cmp	r3, r5
   1e254:	d1f9      	bne.n	1e24a <_Unwind_VRS_Pop+0xf6>
   1e256:	f1b9 0f00 	cmp.w	r9, #0
   1e25a:	d00f      	beq.n	1e27c <_Unwind_VRS_Pop+0x128>
   1e25c:	466f      	mov	r7, sp
   1e25e:	4641      	mov	r1, r8
   1e260:	2910      	cmp	r1, #16
   1e262:	bf38      	it	cc
   1e264:	2110      	movcc	r1, #16
   1e266:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1e26a:	3984      	subs	r1, #132	; 0x84
   1e26c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   1e270:	f853 0b04 	ldr.w	r0, [r3], #4
   1e274:	f841 0f04 	str.w	r0, [r1, #4]!
   1e278:	42ab      	cmp	r3, r5
   1e27a:	d1f9      	bne.n	1e270 <_Unwind_VRS_Pop+0x11c>
   1e27c:	2c01      	cmp	r4, #1
   1e27e:	f000 8084 	beq.w	1e38a <_Unwind_VRS_Pop+0x236>
   1e282:	f1b8 0f0f 	cmp.w	r8, #15
   1e286:	63b5      	str	r5, [r6, #56]	; 0x38
   1e288:	d945      	bls.n	1e316 <_Unwind_VRS_Pop+0x1c2>
   1e28a:	f1b9 0f00 	cmp.w	r9, #0
   1e28e:	d002      	beq.n	1e296 <_Unwind_VRS_Pop+0x142>
   1e290:	4668      	mov	r0, sp
   1e292:	f000 f8b7 	bl	1e404 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1e296:	2000      	movs	r0, #0
   1e298:	b043      	add	sp, #268	; 0x10c
   1e29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e29e:	b9dc      	cbnz	r4, 1e2d8 <_Unwind_VRS_Pop+0x184>
   1e2a0:	6b87      	ldr	r7, [r0, #56]	; 0x38
   1e2a2:	4623      	mov	r3, r4
   1e2a4:	2001      	movs	r0, #1
   1e2a6:	b294      	uxth	r4, r2
   1e2a8:	f106 0c04 	add.w	ip, r6, #4
   1e2ac:	fa00 f203 	lsl.w	r2, r0, r3
   1e2b0:	4222      	tst	r2, r4
   1e2b2:	4639      	mov	r1, r7
   1e2b4:	d004      	beq.n	1e2c0 <_Unwind_VRS_Pop+0x16c>
   1e2b6:	f851 2b04 	ldr.w	r2, [r1], #4
   1e2ba:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
   1e2be:	460f      	mov	r7, r1
   1e2c0:	3301      	adds	r3, #1
   1e2c2:	2b10      	cmp	r3, #16
   1e2c4:	d1f2      	bne.n	1e2ac <_Unwind_VRS_Pop+0x158>
   1e2c6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   1e2ca:	d1e4      	bne.n	1e296 <_Unwind_VRS_Pop+0x142>
   1e2cc:	63b7      	str	r7, [r6, #56]	; 0x38
   1e2ce:	e004      	b.n	1e2da <_Unwind_VRS_Pop+0x186>
   1e2d0:	eb08 0305 	add.w	r3, r8, r5
   1e2d4:	2b10      	cmp	r3, #16
   1e2d6:	d903      	bls.n	1e2e0 <_Unwind_VRS_Pop+0x18c>
   1e2d8:	2002      	movs	r0, #2
   1e2da:	b043      	add	sp, #268	; 0x10c
   1e2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e2e0:	f1b8 0f0f 	cmp.w	r8, #15
   1e2e4:	d8f8      	bhi.n	1e2d8 <_Unwind_VRS_Pop+0x184>
   1e2e6:	6833      	ldr	r3, [r6, #0]
   1e2e8:	07da      	lsls	r2, r3, #31
   1e2ea:	d506      	bpl.n	1e2fa <_Unwind_VRS_Pop+0x1a6>
   1e2ec:	4630      	mov	r0, r6
   1e2ee:	f023 0303 	bic.w	r3, r3, #3
   1e2f2:	f840 3b48 	str.w	r3, [r0], #72
   1e2f6:	f000 f879 	bl	1e3ec <__gnu_Unwind_Save_VFP>
   1e2fa:	af20      	add	r7, sp, #128	; 0x80
   1e2fc:	4638      	mov	r0, r7
   1e2fe:	f000 f875 	bl	1e3ec <__gnu_Unwind_Save_VFP>
   1e302:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e304:	2d00      	cmp	r5, #0
   1e306:	d199      	bne.n	1e23c <_Unwind_VRS_Pop+0xe8>
   1e308:	461d      	mov	r5, r3
   1e30a:	3504      	adds	r5, #4
   1e30c:	63b5      	str	r5, [r6, #56]	; 0x38
   1e30e:	4638      	mov	r0, r7
   1e310:	f000 f868 	bl	1e3e4 <__gnu_Unwind_Restore_VFP>
   1e314:	e7bf      	b.n	1e296 <_Unwind_VRS_Pop+0x142>
   1e316:	a820      	add	r0, sp, #128	; 0x80
   1e318:	f000 f86c 	bl	1e3f4 <__gnu_Unwind_Restore_VFP_D>
   1e31c:	e7b5      	b.n	1e28a <_Unwind_VRS_Pop+0x136>
   1e31e:	f1b9 0f10 	cmp.w	r9, #16
   1e322:	d940      	bls.n	1e3a6 <_Unwind_VRS_Pop+0x252>
   1e324:	f1a9 0910 	sub.w	r9, r9, #16
   1e328:	6833      	ldr	r3, [r6, #0]
   1e32a:	07d9      	lsls	r1, r3, #31
   1e32c:	d508      	bpl.n	1e340 <_Unwind_VRS_Pop+0x1ec>
   1e32e:	f023 0301 	bic.w	r3, r3, #1
   1e332:	4630      	mov	r0, r6
   1e334:	f043 0302 	orr.w	r3, r3, #2
   1e338:	f840 3b48 	str.w	r3, [r0], #72
   1e33c:	f000 f85e 	bl	1e3fc <__gnu_Unwind_Save_VFP_D>
   1e340:	f1b9 0f00 	cmp.w	r9, #0
   1e344:	d032      	beq.n	1e3ac <_Unwind_VRS_Pop+0x258>
   1e346:	6833      	ldr	r3, [r6, #0]
   1e348:	075a      	lsls	r2, r3, #29
   1e34a:	d420      	bmi.n	1e38e <_Unwind_VRS_Pop+0x23a>
   1e34c:	f1b8 0f0f 	cmp.w	r8, #15
   1e350:	d925      	bls.n	1e39e <_Unwind_VRS_Pop+0x24a>
   1e352:	466f      	mov	r7, sp
   1e354:	4638      	mov	r0, r7
   1e356:	f1c8 0510 	rsb	r5, r8, #16
   1e35a:	f000 f857 	bl	1e40c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1e35e:	2d00      	cmp	r5, #0
   1e360:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e362:	f77f af7c 	ble.w	1e25e <_Unwind_VRS_Pop+0x10a>
   1e366:	af20      	add	r7, sp, #128	; 0x80
   1e368:	e76a      	b.n	1e240 <_Unwind_VRS_Pop+0xec>
   1e36a:	f023 0310 	bic.w	r3, r3, #16
   1e36e:	6033      	str	r3, [r6, #0]
   1e370:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
   1e374:	f000 f89c 	bl	1e4b0 <__gnu_Unwind_Save_WMMXC>
   1e378:	e704      	b.n	1e184 <_Unwind_VRS_Pop+0x30>
   1e37a:	f023 0308 	bic.w	r3, r3, #8
   1e37e:	6003      	str	r3, [r0, #0]
   1e380:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e384:	f000 f868 	bl	1e458 <__gnu_Unwind_Save_WMMXD>
   1e388:	e727      	b.n	1e1da <_Unwind_VRS_Pop+0x86>
   1e38a:	af20      	add	r7, sp, #128	; 0x80
   1e38c:	e7bd      	b.n	1e30a <_Unwind_VRS_Pop+0x1b6>
   1e38e:	4630      	mov	r0, r6
   1e390:	f023 0304 	bic.w	r3, r3, #4
   1e394:	f840 3bd0 	str.w	r3, [r0], #208
   1e398:	f000 f838 	bl	1e40c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1e39c:	e7d6      	b.n	1e34c <_Unwind_VRS_Pop+0x1f8>
   1e39e:	a820      	add	r0, sp, #128	; 0x80
   1e3a0:	f000 f82c 	bl	1e3fc <__gnu_Unwind_Save_VFP_D>
   1e3a4:	e7d5      	b.n	1e352 <_Unwind_VRS_Pop+0x1fe>
   1e3a6:	f04f 0900 	mov.w	r9, #0
   1e3aa:	e7bd      	b.n	1e328 <_Unwind_VRS_Pop+0x1d4>
   1e3ac:	f1b8 0f0f 	cmp.w	r8, #15
   1e3b0:	f63f af41 	bhi.w	1e236 <_Unwind_VRS_Pop+0xe2>
   1e3b4:	af20      	add	r7, sp, #128	; 0x80
   1e3b6:	4638      	mov	r0, r7
   1e3b8:	f000 f820 	bl	1e3fc <__gnu_Unwind_Save_VFP_D>
   1e3bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e3be:	2d00      	cmp	r5, #0
   1e3c0:	f47f af3c 	bne.w	1e23c <_Unwind_VRS_Pop+0xe8>
   1e3c4:	4638      	mov	r0, r7
   1e3c6:	f000 f815 	bl	1e3f4 <__gnu_Unwind_Restore_VFP_D>
   1e3ca:	e764      	b.n	1e296 <_Unwind_VRS_Pop+0x142>

0001e3cc <__restore_core_regs>:
   1e3cc:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1e3d0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1e3d4:	469c      	mov	ip, r3
   1e3d6:	46a6      	mov	lr, r4
   1e3d8:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1e3dc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1e3e0:	46e5      	mov	sp, ip
   1e3e2:	bd00      	pop	{pc}

0001e3e4 <__gnu_Unwind_Restore_VFP>:
   1e3e4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1e3e8:	4770      	bx	lr
   1e3ea:	bf00      	nop

0001e3ec <__gnu_Unwind_Save_VFP>:
   1e3ec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1e3f0:	4770      	bx	lr
   1e3f2:	bf00      	nop

0001e3f4 <__gnu_Unwind_Restore_VFP_D>:
   1e3f4:	ec90 0b20 	vldmia	r0, {d0-d15}
   1e3f8:	4770      	bx	lr
   1e3fa:	bf00      	nop

0001e3fc <__gnu_Unwind_Save_VFP_D>:
   1e3fc:	ec80 0b20 	vstmia	r0, {d0-d15}
   1e400:	4770      	bx	lr
   1e402:	bf00      	nop

0001e404 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1e404:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1e408:	4770      	bx	lr
   1e40a:	bf00      	nop

0001e40c <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1e40c:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1e410:	4770      	bx	lr
   1e412:	bf00      	nop

0001e414 <__gnu_Unwind_Restore_WMMXD>:
   1e414:	ecf0 0102 	ldfe	f0, [r0], #8
   1e418:	ecf0 1102 	ldfe	f1, [r0], #8
   1e41c:	ecf0 2102 	ldfe	f2, [r0], #8
   1e420:	ecf0 3102 	ldfe	f3, [r0], #8
   1e424:	ecf0 4102 	ldfe	f4, [r0], #8
   1e428:	ecf0 5102 	ldfe	f5, [r0], #8
   1e42c:	ecf0 6102 	ldfe	f6, [r0], #8
   1e430:	ecf0 7102 	ldfe	f7, [r0], #8
   1e434:	ecf0 8102 	ldfp	f0, [r0], #8
   1e438:	ecf0 9102 	ldfp	f1, [r0], #8
   1e43c:	ecf0 a102 	ldfp	f2, [r0], #8
   1e440:	ecf0 b102 	ldfp	f3, [r0], #8
   1e444:	ecf0 c102 	ldfp	f4, [r0], #8
   1e448:	ecf0 d102 	ldfp	f5, [r0], #8
   1e44c:	ecf0 e102 	ldfp	f6, [r0], #8
   1e450:	ecf0 f102 	ldfp	f7, [r0], #8
   1e454:	4770      	bx	lr
   1e456:	bf00      	nop

0001e458 <__gnu_Unwind_Save_WMMXD>:
   1e458:	ece0 0102 	stfe	f0, [r0], #8
   1e45c:	ece0 1102 	stfe	f1, [r0], #8
   1e460:	ece0 2102 	stfe	f2, [r0], #8
   1e464:	ece0 3102 	stfe	f3, [r0], #8
   1e468:	ece0 4102 	stfe	f4, [r0], #8
   1e46c:	ece0 5102 	stfe	f5, [r0], #8
   1e470:	ece0 6102 	stfe	f6, [r0], #8
   1e474:	ece0 7102 	stfe	f7, [r0], #8
   1e478:	ece0 8102 	stfp	f0, [r0], #8
   1e47c:	ece0 9102 	stfp	f1, [r0], #8
   1e480:	ece0 a102 	stfp	f2, [r0], #8
   1e484:	ece0 b102 	stfp	f3, [r0], #8
   1e488:	ece0 c102 	stfp	f4, [r0], #8
   1e48c:	ece0 d102 	stfp	f5, [r0], #8
   1e490:	ece0 e102 	stfp	f6, [r0], #8
   1e494:	ece0 f102 	stfp	f7, [r0], #8
   1e498:	4770      	bx	lr
   1e49a:	bf00      	nop

0001e49c <__gnu_Unwind_Restore_WMMXC>:
   1e49c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1e4a0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1e4a4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1e4a8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1e4ac:	4770      	bx	lr
   1e4ae:	bf00      	nop

0001e4b0 <__gnu_Unwind_Save_WMMXC>:
   1e4b0:	fca0 8101 	stc2	1, cr8, [r0], #4
   1e4b4:	fca0 9101 	stc2	1, cr9, [r0], #4
   1e4b8:	fca0 a101 	stc2	1, cr10, [r0], #4
   1e4bc:	fca0 b101 	stc2	1, cr11, [r0], #4
   1e4c0:	4770      	bx	lr
   1e4c2:	bf00      	nop

0001e4c4 <_Unwind_RaiseException>:
   1e4c4:	46ec      	mov	ip, sp
   1e4c6:	b500      	push	{lr}
   1e4c8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e4cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e4d0:	f04f 0300 	mov.w	r3, #0
   1e4d4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e4d8:	a901      	add	r1, sp, #4
   1e4da:	f7ff fbf1 	bl	1dcc0 <__gnu_Unwind_RaiseException>
   1e4de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e4e2:	b012      	add	sp, #72	; 0x48
   1e4e4:	4770      	bx	lr
   1e4e6:	bf00      	nop

0001e4e8 <_Unwind_Resume>:
   1e4e8:	46ec      	mov	ip, sp
   1e4ea:	b500      	push	{lr}
   1e4ec:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e4f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e4f4:	f04f 0300 	mov.w	r3, #0
   1e4f8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e4fc:	a901      	add	r1, sp, #4
   1e4fe:	f7ff fc19 	bl	1dd34 <__gnu_Unwind_Resume>
   1e502:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e506:	b012      	add	sp, #72	; 0x48
   1e508:	4770      	bx	lr
   1e50a:	bf00      	nop

0001e50c <_Unwind_Resume_or_Rethrow>:
   1e50c:	46ec      	mov	ip, sp
   1e50e:	b500      	push	{lr}
   1e510:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e514:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e518:	f04f 0300 	mov.w	r3, #0
   1e51c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e520:	a901      	add	r1, sp, #4
   1e522:	f7ff fc29 	bl	1dd78 <__gnu_Unwind_Resume_or_Rethrow>
   1e526:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e52a:	b012      	add	sp, #72	; 0x48
   1e52c:	4770      	bx	lr
   1e52e:	bf00      	nop

0001e530 <_Unwind_ForcedUnwind>:
   1e530:	46ec      	mov	ip, sp
   1e532:	b500      	push	{lr}
   1e534:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e538:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e53c:	f04f 0300 	mov.w	r3, #0
   1e540:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e544:	ab01      	add	r3, sp, #4
   1e546:	f7ff fbeb 	bl	1dd20 <__gnu_Unwind_ForcedUnwind>
   1e54a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e54e:	b012      	add	sp, #72	; 0x48
   1e550:	4770      	bx	lr
   1e552:	bf00      	nop

0001e554 <_Unwind_Backtrace>:
   1e554:	46ec      	mov	ip, sp
   1e556:	b500      	push	{lr}
   1e558:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e55c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e560:	f04f 0300 	mov.w	r3, #0
   1e564:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e568:	aa01      	add	r2, sp, #4
   1e56a:	f7ff fc5d 	bl	1de28 <__gnu_Unwind_Backtrace>
   1e56e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e572:	b012      	add	sp, #72	; 0x48
   1e574:	4770      	bx	lr
   1e576:	bf00      	nop

0001e578 <next_unwind_byte>:
   1e578:	7a02      	ldrb	r2, [r0, #8]
   1e57a:	b97a      	cbnz	r2, 1e59c <next_unwind_byte+0x24>
   1e57c:	7a43      	ldrb	r3, [r0, #9]
   1e57e:	b1a3      	cbz	r3, 1e5aa <next_unwind_byte+0x32>
   1e580:	6842      	ldr	r2, [r0, #4]
   1e582:	3b01      	subs	r3, #1
   1e584:	b410      	push	{r4}
   1e586:	7243      	strb	r3, [r0, #9]
   1e588:	6813      	ldr	r3, [r2, #0]
   1e58a:	2103      	movs	r1, #3
   1e58c:	1d14      	adds	r4, r2, #4
   1e58e:	7201      	strb	r1, [r0, #8]
   1e590:	021a      	lsls	r2, r3, #8
   1e592:	6044      	str	r4, [r0, #4]
   1e594:	6002      	str	r2, [r0, #0]
   1e596:	bc10      	pop	{r4}
   1e598:	0e18      	lsrs	r0, r3, #24
   1e59a:	4770      	bx	lr
   1e59c:	6803      	ldr	r3, [r0, #0]
   1e59e:	3a01      	subs	r2, #1
   1e5a0:	7202      	strb	r2, [r0, #8]
   1e5a2:	021a      	lsls	r2, r3, #8
   1e5a4:	6002      	str	r2, [r0, #0]
   1e5a6:	0e18      	lsrs	r0, r3, #24
   1e5a8:	4770      	bx	lr
   1e5aa:	20b0      	movs	r0, #176	; 0xb0
   1e5ac:	4770      	bx	lr
   1e5ae:	bf00      	nop

0001e5b0 <_Unwind_GetGR.constprop.0>:
   1e5b0:	b500      	push	{lr}
   1e5b2:	b085      	sub	sp, #20
   1e5b4:	aa03      	add	r2, sp, #12
   1e5b6:	2300      	movs	r3, #0
   1e5b8:	9200      	str	r2, [sp, #0]
   1e5ba:	4619      	mov	r1, r3
   1e5bc:	220c      	movs	r2, #12
   1e5be:	f7ff fbeb 	bl	1dd98 <_Unwind_VRS_Get>
   1e5c2:	9803      	ldr	r0, [sp, #12]
   1e5c4:	b005      	add	sp, #20
   1e5c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e5ca:	bf00      	nop

0001e5cc <unwind_UCB_from_context>:
   1e5cc:	e7f0      	b.n	1e5b0 <_Unwind_GetGR.constprop.0>
   1e5ce:	bf00      	nop

0001e5d0 <__gnu_unwind_execute>:
   1e5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e5d4:	4605      	mov	r5, r0
   1e5d6:	b085      	sub	sp, #20
   1e5d8:	460e      	mov	r6, r1
   1e5da:	f04f 0800 	mov.w	r8, #0
   1e5de:	4630      	mov	r0, r6
   1e5e0:	f7ff ffca 	bl	1e578 <next_unwind_byte>
   1e5e4:	28b0      	cmp	r0, #176	; 0xb0
   1e5e6:	4604      	mov	r4, r0
   1e5e8:	f000 80b2 	beq.w	1e750 <__gnu_unwind_execute+0x180>
   1e5ec:	0607      	lsls	r7, r0, #24
   1e5ee:	d520      	bpl.n	1e632 <__gnu_unwind_execute+0x62>
   1e5f0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e5f4:	2b80      	cmp	r3, #128	; 0x80
   1e5f6:	d04d      	beq.n	1e694 <__gnu_unwind_execute+0xc4>
   1e5f8:	2b90      	cmp	r3, #144	; 0x90
   1e5fa:	d036      	beq.n	1e66a <__gnu_unwind_execute+0x9a>
   1e5fc:	2ba0      	cmp	r3, #160	; 0xa0
   1e5fe:	d060      	beq.n	1e6c2 <__gnu_unwind_execute+0xf2>
   1e600:	2bb0      	cmp	r3, #176	; 0xb0
   1e602:	d074      	beq.n	1e6ee <__gnu_unwind_execute+0x11e>
   1e604:	2bc0      	cmp	r3, #192	; 0xc0
   1e606:	f000 808b 	beq.w	1e720 <__gnu_unwind_execute+0x150>
   1e60a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e60e:	2bd0      	cmp	r3, #208	; 0xd0
   1e610:	d10b      	bne.n	1e62a <__gnu_unwind_execute+0x5a>
   1e612:	f000 0207 	and.w	r2, r0, #7
   1e616:	3201      	adds	r2, #1
   1e618:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e61c:	2305      	movs	r3, #5
   1e61e:	2101      	movs	r1, #1
   1e620:	4628      	mov	r0, r5
   1e622:	f7ff fd97 	bl	1e154 <_Unwind_VRS_Pop>
   1e626:	2800      	cmp	r0, #0
   1e628:	d0d9      	beq.n	1e5de <__gnu_unwind_execute+0xe>
   1e62a:	2009      	movs	r0, #9
   1e62c:	b005      	add	sp, #20
   1e62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e632:	f10d 090c 	add.w	r9, sp, #12
   1e636:	2300      	movs	r3, #0
   1e638:	4619      	mov	r1, r3
   1e63a:	0087      	lsls	r7, r0, #2
   1e63c:	f8cd 9000 	str.w	r9, [sp]
   1e640:	220d      	movs	r2, #13
   1e642:	4628      	mov	r0, r5
   1e644:	f7ff fba8 	bl	1dd98 <_Unwind_VRS_Get>
   1e648:	b2ff      	uxtb	r7, r7
   1e64a:	9b03      	ldr	r3, [sp, #12]
   1e64c:	f8cd 9000 	str.w	r9, [sp]
   1e650:	3704      	adds	r7, #4
   1e652:	0660      	lsls	r0, r4, #25
   1e654:	bf4c      	ite	mi
   1e656:	1bdf      	submi	r7, r3, r7
   1e658:	18ff      	addpl	r7, r7, r3
   1e65a:	2300      	movs	r3, #0
   1e65c:	4619      	mov	r1, r3
   1e65e:	220d      	movs	r2, #13
   1e660:	4628      	mov	r0, r5
   1e662:	9703      	str	r7, [sp, #12]
   1e664:	f7ff fbbc 	bl	1dde0 <_Unwind_VRS_Set>
   1e668:	e7b9      	b.n	1e5de <__gnu_unwind_execute+0xe>
   1e66a:	f000 030d 	and.w	r3, r0, #13
   1e66e:	2b0d      	cmp	r3, #13
   1e670:	d0db      	beq.n	1e62a <__gnu_unwind_execute+0x5a>
   1e672:	af03      	add	r7, sp, #12
   1e674:	2300      	movs	r3, #0
   1e676:	f000 020f 	and.w	r2, r0, #15
   1e67a:	4619      	mov	r1, r3
   1e67c:	9700      	str	r7, [sp, #0]
   1e67e:	4628      	mov	r0, r5
   1e680:	f7ff fb8a 	bl	1dd98 <_Unwind_VRS_Get>
   1e684:	2300      	movs	r3, #0
   1e686:	9700      	str	r7, [sp, #0]
   1e688:	4619      	mov	r1, r3
   1e68a:	220d      	movs	r2, #13
   1e68c:	4628      	mov	r0, r5
   1e68e:	f7ff fba7 	bl	1dde0 <_Unwind_VRS_Set>
   1e692:	e7a4      	b.n	1e5de <__gnu_unwind_execute+0xe>
   1e694:	4630      	mov	r0, r6
   1e696:	f7ff ff6f 	bl	1e578 <next_unwind_byte>
   1e69a:	0224      	lsls	r4, r4, #8
   1e69c:	4320      	orrs	r0, r4
   1e69e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e6a2:	d0c2      	beq.n	1e62a <__gnu_unwind_execute+0x5a>
   1e6a4:	0104      	lsls	r4, r0, #4
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	b2a2      	uxth	r2, r4
   1e6aa:	4619      	mov	r1, r3
   1e6ac:	4628      	mov	r0, r5
   1e6ae:	f7ff fd51 	bl	1e154 <_Unwind_VRS_Pop>
   1e6b2:	2800      	cmp	r0, #0
   1e6b4:	d1b9      	bne.n	1e62a <__gnu_unwind_execute+0x5a>
   1e6b6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1e6ba:	bf18      	it	ne
   1e6bc:	f04f 0801 	movne.w	r8, #1
   1e6c0:	e78d      	b.n	1e5de <__gnu_unwind_execute+0xe>
   1e6c2:	43c2      	mvns	r2, r0
   1e6c4:	f002 0307 	and.w	r3, r2, #7
   1e6c8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1e6cc:	411a      	asrs	r2, r3
   1e6ce:	0701      	lsls	r1, r0, #28
   1e6d0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1e6d4:	f04f 0300 	mov.w	r3, #0
   1e6d8:	bf48      	it	mi
   1e6da:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1e6de:	4619      	mov	r1, r3
   1e6e0:	4628      	mov	r0, r5
   1e6e2:	f7ff fd37 	bl	1e154 <_Unwind_VRS_Pop>
   1e6e6:	2800      	cmp	r0, #0
   1e6e8:	f43f af79 	beq.w	1e5de <__gnu_unwind_execute+0xe>
   1e6ec:	e79d      	b.n	1e62a <__gnu_unwind_execute+0x5a>
   1e6ee:	28b1      	cmp	r0, #177	; 0xb1
   1e6f0:	d033      	beq.n	1e75a <__gnu_unwind_execute+0x18a>
   1e6f2:	28b2      	cmp	r0, #178	; 0xb2
   1e6f4:	f000 808b 	beq.w	1e80e <__gnu_unwind_execute+0x23e>
   1e6f8:	28b3      	cmp	r0, #179	; 0xb3
   1e6fa:	d039      	beq.n	1e770 <__gnu_unwind_execute+0x1a0>
   1e6fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1e700:	2bb4      	cmp	r3, #180	; 0xb4
   1e702:	d092      	beq.n	1e62a <__gnu_unwind_execute+0x5a>
   1e704:	f000 0207 	and.w	r2, r0, #7
   1e708:	3201      	adds	r2, #1
   1e70a:	2301      	movs	r3, #1
   1e70c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e710:	4619      	mov	r1, r3
   1e712:	4628      	mov	r0, r5
   1e714:	f7ff fd1e 	bl	1e154 <_Unwind_VRS_Pop>
   1e718:	2800      	cmp	r0, #0
   1e71a:	f43f af60 	beq.w	1e5de <__gnu_unwind_execute+0xe>
   1e71e:	e784      	b.n	1e62a <__gnu_unwind_execute+0x5a>
   1e720:	28c6      	cmp	r0, #198	; 0xc6
   1e722:	d042      	beq.n	1e7aa <__gnu_unwind_execute+0x1da>
   1e724:	28c7      	cmp	r0, #199	; 0xc7
   1e726:	d04c      	beq.n	1e7c2 <__gnu_unwind_execute+0x1f2>
   1e728:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e72c:	2bc0      	cmp	r3, #192	; 0xc0
   1e72e:	d05b      	beq.n	1e7e8 <__gnu_unwind_execute+0x218>
   1e730:	28c8      	cmp	r0, #200	; 0xc8
   1e732:	d060      	beq.n	1e7f6 <__gnu_unwind_execute+0x226>
   1e734:	28c9      	cmp	r0, #201	; 0xc9
   1e736:	f47f af78 	bne.w	1e62a <__gnu_unwind_execute+0x5a>
   1e73a:	4630      	mov	r0, r6
   1e73c:	f7ff ff1c 	bl	1e578 <next_unwind_byte>
   1e740:	0302      	lsls	r2, r0, #12
   1e742:	f000 000f 	and.w	r0, r0, #15
   1e746:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1e74a:	3001      	adds	r0, #1
   1e74c:	4302      	orrs	r2, r0
   1e74e:	e765      	b.n	1e61c <__gnu_unwind_execute+0x4c>
   1e750:	f1b8 0f00 	cmp.w	r8, #0
   1e754:	d018      	beq.n	1e788 <__gnu_unwind_execute+0x1b8>
   1e756:	2000      	movs	r0, #0
   1e758:	e768      	b.n	1e62c <__gnu_unwind_execute+0x5c>
   1e75a:	4630      	mov	r0, r6
   1e75c:	f7ff ff0c 	bl	1e578 <next_unwind_byte>
   1e760:	4602      	mov	r2, r0
   1e762:	2800      	cmp	r0, #0
   1e764:	f43f af61 	beq.w	1e62a <__gnu_unwind_execute+0x5a>
   1e768:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e76c:	d0d0      	beq.n	1e710 <__gnu_unwind_execute+0x140>
   1e76e:	e75c      	b.n	1e62a <__gnu_unwind_execute+0x5a>
   1e770:	4630      	mov	r0, r6
   1e772:	f7ff ff01 	bl	1e578 <next_unwind_byte>
   1e776:	0301      	lsls	r1, r0, #12
   1e778:	f000 000f 	and.w	r0, r0, #15
   1e77c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e780:	1c42      	adds	r2, r0, #1
   1e782:	2301      	movs	r3, #1
   1e784:	430a      	orrs	r2, r1
   1e786:	e7c3      	b.n	1e710 <__gnu_unwind_execute+0x140>
   1e788:	ac03      	add	r4, sp, #12
   1e78a:	4643      	mov	r3, r8
   1e78c:	220e      	movs	r2, #14
   1e78e:	4641      	mov	r1, r8
   1e790:	9400      	str	r4, [sp, #0]
   1e792:	4628      	mov	r0, r5
   1e794:	f7ff fb00 	bl	1dd98 <_Unwind_VRS_Get>
   1e798:	9400      	str	r4, [sp, #0]
   1e79a:	4628      	mov	r0, r5
   1e79c:	4643      	mov	r3, r8
   1e79e:	220f      	movs	r2, #15
   1e7a0:	4641      	mov	r1, r8
   1e7a2:	f7ff fb1d 	bl	1dde0 <_Unwind_VRS_Set>
   1e7a6:	4640      	mov	r0, r8
   1e7a8:	e740      	b.n	1e62c <__gnu_unwind_execute+0x5c>
   1e7aa:	4630      	mov	r0, r6
   1e7ac:	f7ff fee4 	bl	1e578 <next_unwind_byte>
   1e7b0:	0301      	lsls	r1, r0, #12
   1e7b2:	f000 000f 	and.w	r0, r0, #15
   1e7b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e7ba:	1c42      	adds	r2, r0, #1
   1e7bc:	2303      	movs	r3, #3
   1e7be:	430a      	orrs	r2, r1
   1e7c0:	e7a6      	b.n	1e710 <__gnu_unwind_execute+0x140>
   1e7c2:	4630      	mov	r0, r6
   1e7c4:	f7ff fed8 	bl	1e578 <next_unwind_byte>
   1e7c8:	4602      	mov	r2, r0
   1e7ca:	2800      	cmp	r0, #0
   1e7cc:	f43f af2d 	beq.w	1e62a <__gnu_unwind_execute+0x5a>
   1e7d0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e7d4:	f47f af29 	bne.w	1e62a <__gnu_unwind_execute+0x5a>
   1e7d8:	2104      	movs	r1, #4
   1e7da:	4628      	mov	r0, r5
   1e7dc:	f7ff fcba 	bl	1e154 <_Unwind_VRS_Pop>
   1e7e0:	2800      	cmp	r0, #0
   1e7e2:	f43f aefc 	beq.w	1e5de <__gnu_unwind_execute+0xe>
   1e7e6:	e720      	b.n	1e62a <__gnu_unwind_execute+0x5a>
   1e7e8:	f000 020f 	and.w	r2, r0, #15
   1e7ec:	3201      	adds	r2, #1
   1e7ee:	2303      	movs	r3, #3
   1e7f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1e7f4:	e78c      	b.n	1e710 <__gnu_unwind_execute+0x140>
   1e7f6:	4630      	mov	r0, r6
   1e7f8:	f7ff febe 	bl	1e578 <next_unwind_byte>
   1e7fc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1e800:	f000 030f 	and.w	r3, r0, #15
   1e804:	3210      	adds	r2, #16
   1e806:	3301      	adds	r3, #1
   1e808:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1e80c:	e706      	b.n	1e61c <__gnu_unwind_execute+0x4c>
   1e80e:	2300      	movs	r3, #0
   1e810:	f10d 090c 	add.w	r9, sp, #12
   1e814:	220d      	movs	r2, #13
   1e816:	4619      	mov	r1, r3
   1e818:	f8cd 9000 	str.w	r9, [sp]
   1e81c:	4628      	mov	r0, r5
   1e81e:	f7ff fabb 	bl	1dd98 <_Unwind_VRS_Get>
   1e822:	4630      	mov	r0, r6
   1e824:	f7ff fea8 	bl	1e578 <next_unwind_byte>
   1e828:	0602      	lsls	r2, r0, #24
   1e82a:	f04f 0702 	mov.w	r7, #2
   1e82e:	d50c      	bpl.n	1e84a <__gnu_unwind_execute+0x27a>
   1e830:	9b03      	ldr	r3, [sp, #12]
   1e832:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1e836:	40b8      	lsls	r0, r7
   1e838:	4403      	add	r3, r0
   1e83a:	4630      	mov	r0, r6
   1e83c:	9303      	str	r3, [sp, #12]
   1e83e:	f7ff fe9b 	bl	1e578 <next_unwind_byte>
   1e842:	0603      	lsls	r3, r0, #24
   1e844:	f107 0707 	add.w	r7, r7, #7
   1e848:	d4f2      	bmi.n	1e830 <__gnu_unwind_execute+0x260>
   1e84a:	9b03      	ldr	r3, [sp, #12]
   1e84c:	f8cd 9000 	str.w	r9, [sp]
   1e850:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   1e854:	f503 7201 	add.w	r2, r3, #516	; 0x204
   1e858:	40bc      	lsls	r4, r7
   1e85a:	2300      	movs	r3, #0
   1e85c:	4414      	add	r4, r2
   1e85e:	4619      	mov	r1, r3
   1e860:	220d      	movs	r2, #13
   1e862:	4628      	mov	r0, r5
   1e864:	9403      	str	r4, [sp, #12]
   1e866:	f7ff fabb 	bl	1dde0 <_Unwind_VRS_Set>
   1e86a:	e6b8      	b.n	1e5de <__gnu_unwind_execute+0xe>

0001e86c <__gnu_unwind_frame>:
   1e86c:	b510      	push	{r4, lr}
   1e86e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1e870:	b084      	sub	sp, #16
   1e872:	6853      	ldr	r3, [r2, #4]
   1e874:	2403      	movs	r4, #3
   1e876:	f88d 400c 	strb.w	r4, [sp, #12]
   1e87a:	021b      	lsls	r3, r3, #8
   1e87c:	f102 0408 	add.w	r4, r2, #8
   1e880:	4608      	mov	r0, r1
   1e882:	79d2      	ldrb	r2, [r2, #7]
   1e884:	9301      	str	r3, [sp, #4]
   1e886:	a901      	add	r1, sp, #4
   1e888:	9402      	str	r4, [sp, #8]
   1e88a:	f88d 200d 	strb.w	r2, [sp, #13]
   1e88e:	f7ff fe9f 	bl	1e5d0 <__gnu_unwind_execute>
   1e892:	b004      	add	sp, #16
   1e894:	bd10      	pop	{r4, pc}
   1e896:	bf00      	nop

0001e898 <_Unwind_GetRegionStart>:
   1e898:	b508      	push	{r3, lr}
   1e89a:	f7ff fe97 	bl	1e5cc <unwind_UCB_from_context>
   1e89e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1e8a0:	bd08      	pop	{r3, pc}
   1e8a2:	bf00      	nop

0001e8a4 <_Unwind_GetLanguageSpecificData>:
   1e8a4:	b508      	push	{r3, lr}
   1e8a6:	f7ff fe91 	bl	1e5cc <unwind_UCB_from_context>
   1e8aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e8ac:	79c3      	ldrb	r3, [r0, #7]
   1e8ae:	3302      	adds	r3, #2
   1e8b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e8b4:	bd08      	pop	{r3, pc}
   1e8b6:	bf00      	nop

0001e8b8 <abort>:
   1e8b8:	b508      	push	{r3, lr}
   1e8ba:	2006      	movs	r0, #6
   1e8bc:	f000 f82c 	bl	1e918 <raise>
   1e8c0:	2001      	movs	r0, #1
   1e8c2:	f7fe fc99 	bl	1d1f8 <_exit>

0001e8c6 <_raise_r>:
   1e8c6:	291f      	cmp	r1, #31
   1e8c8:	b538      	push	{r3, r4, r5, lr}
   1e8ca:	4604      	mov	r4, r0
   1e8cc:	460d      	mov	r5, r1
   1e8ce:	d904      	bls.n	1e8da <_raise_r+0x14>
   1e8d0:	2316      	movs	r3, #22
   1e8d2:	6003      	str	r3, [r0, #0]
   1e8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e8d8:	bd38      	pop	{r3, r4, r5, pc}
   1e8da:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1e8dc:	b112      	cbz	r2, 1e8e4 <_raise_r+0x1e>
   1e8de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e8e2:	b94b      	cbnz	r3, 1e8f8 <_raise_r+0x32>
   1e8e4:	4620      	mov	r0, r4
   1e8e6:	f000 f831 	bl	1e94c <_getpid_r>
   1e8ea:	462a      	mov	r2, r5
   1e8ec:	4601      	mov	r1, r0
   1e8ee:	4620      	mov	r0, r4
   1e8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e8f4:	f000 b818 	b.w	1e928 <_kill_r>
   1e8f8:	2b01      	cmp	r3, #1
   1e8fa:	d00a      	beq.n	1e912 <_raise_r+0x4c>
   1e8fc:	1c59      	adds	r1, r3, #1
   1e8fe:	d103      	bne.n	1e908 <_raise_r+0x42>
   1e900:	2316      	movs	r3, #22
   1e902:	6003      	str	r3, [r0, #0]
   1e904:	2001      	movs	r0, #1
   1e906:	e7e7      	b.n	1e8d8 <_raise_r+0x12>
   1e908:	2400      	movs	r4, #0
   1e90a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1e90e:	4628      	mov	r0, r5
   1e910:	4798      	blx	r3
   1e912:	2000      	movs	r0, #0
   1e914:	e7e0      	b.n	1e8d8 <_raise_r+0x12>
	...

0001e918 <raise>:
   1e918:	4b02      	ldr	r3, [pc, #8]	; (1e924 <raise+0xc>)
   1e91a:	4601      	mov	r1, r0
   1e91c:	6818      	ldr	r0, [r3, #0]
   1e91e:	f7ff bfd2 	b.w	1e8c6 <_raise_r>
   1e922:	bf00      	nop
   1e924:	2000183c 	.word	0x2000183c

0001e928 <_kill_r>:
   1e928:	b538      	push	{r3, r4, r5, lr}
   1e92a:	4d07      	ldr	r5, [pc, #28]	; (1e948 <_kill_r+0x20>)
   1e92c:	2300      	movs	r3, #0
   1e92e:	4604      	mov	r4, r0
   1e930:	4608      	mov	r0, r1
   1e932:	4611      	mov	r1, r2
   1e934:	602b      	str	r3, [r5, #0]
   1e936:	f000 f813 	bl	1e960 <_kill>
   1e93a:	1c43      	adds	r3, r0, #1
   1e93c:	d102      	bne.n	1e944 <_kill_r+0x1c>
   1e93e:	682b      	ldr	r3, [r5, #0]
   1e940:	b103      	cbz	r3, 1e944 <_kill_r+0x1c>
   1e942:	6023      	str	r3, [r4, #0]
   1e944:	bd38      	pop	{r3, r4, r5, pc}
   1e946:	bf00      	nop
   1e948:	20001d4c 	.word	0x20001d4c

0001e94c <_getpid_r>:
   1e94c:	f000 b800 	b.w	1e950 <_getpid>

0001e950 <_getpid>:
   1e950:	4b02      	ldr	r3, [pc, #8]	; (1e95c <_getpid+0xc>)
   1e952:	2258      	movs	r2, #88	; 0x58
   1e954:	601a      	str	r2, [r3, #0]
   1e956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e95a:	4770      	bx	lr
   1e95c:	20001d4c 	.word	0x20001d4c

0001e960 <_kill>:
   1e960:	4b02      	ldr	r3, [pc, #8]	; (1e96c <_kill+0xc>)
   1e962:	2258      	movs	r2, #88	; 0x58
   1e964:	601a      	str	r2, [r3, #0]
   1e966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e96a:	4770      	bx	lr
   1e96c:	20001d4c 	.word	0x20001d4c

0001e970 <_init>:
   1e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e972:	bf00      	nop
   1e974:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e976:	bc08      	pop	{r3}
   1e978:	469e      	mov	lr, r3
   1e97a:	4770      	bx	lr

0001e97c <_fini>:
   1e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e97e:	bf00      	nop
   1e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e982:	bc08      	pop	{r3}
   1e984:	469e      	mov	lr, r3
   1e986:	4770      	bx	lr
   1e988:	00060001 	.word	0x00060001

0001e98c <m_app_timer_sortlist>:
   1e98c:	00000000 200018cc 00019379 00000000     ....... y.......
   1e99c:	00000000                                ....

0001e9a0 <delay_machine_code.6859>:
   1e9a0:	d8fd3807 00004770                       .8..pG..

0001e9a8 <pwr_mgmt_data>:
   1e9a8:	0001efec 0001efec 00000004 00005b1b     .............[..
   1e9b8:	323b3833 0000003b 323b3834 0000003b     38;2;...48;2;...
   1e9c8:	35364c42 6d657431 616f4270 3a3a6472     BL651tempBoard::
   1e9d8:	74696e69 0a2e2e2e 00000000 73616c46     init........Flas
   1e9e8:	693a3a68 2e74696e 000a2e2e 20202020     h::init.....    
   1e9f8:	656d616e 7325203a 0000000a 614e6f4e     name: %s....NoNa
   1ea08:	0000656d 6d542020 37313170 77617220     me..  Tmp117 raw
   1ea18:	6425203a 3a462020 32302520 64252e64     : %d  F: %02d.%d
   1ea28:	0000000a 656c2020 25203a6e 20207532     ....  len: %2u  
   1ea38:	65707974 3025203a 20207832 61746164     type: %02x  data
   1ea48:	0000203a 732a2e25 00000020 58323025     : ..%.*s ...%02X
   1ea58:	00000000 00006325 73616c46 683a3a68     ....%c..Flash::h
   1ea68:	6c646e61 65207265 746e6576 25203a20     andler event : %
   1ea78:	00000a64 20202020 63637573 0a737365     d...    success.
   1ea88:	00000000 6c6c7566 656d616e 616c6620     ....fullname fla
   1ea98:	76206873 65756c61 200a3a73 00202020     sh values:.    .
   1eaa8:	2020200a 00000020 20202020 6f727265     .    ...    erro
   1eab8:	00000a72 58323025 00000020 74746142     r...%02X ...Batt
   1eac8:	3a797265 6470753a 20657461 2e752520     ery::update  %u.
   1ead8:	75333025 00000a56 7267467b 7d6e6565     %03uV...{Fgreen}
   1eae8:	3430255b 30252e64 5b5d6436 253a7325     [%04d.%06d][%s:%
   1eaf8:	3a3a2064 7b5d7325 69687746 0a7d6574     d ::%s]{Fwhite}.
   1eb08:	00000000 656b616d 00000000 412f2e2e     ....make....../A
   1eb18:	72657664 69736974 682e676e 00007070     dvertising.hpp..
   1eb28:	61622020 72657474 25203a79 0a566d64       battery: %dmV.
   1eb38:	00000000 6572467b 72457d64 3a726f72     ....{Fred}Error:
   1eb48:	7b642520 6d726f6e 0a7d6c61 00000000      %d{normal}.....
   1eb58:	3a656c42 696e693a 2e2e2e74 0000000a     Ble::init.......
   1eb68:	20202020 206d6172 72617473 30203a74         ram start: 0
   1eb78:	38302578 00000a58 3a706147 696e693a     x%08X...Gap::ini
   1eb88:	2e2e2e74 0000000a 73616c46 733a3a68     t.......Flash::s
   1eb98:	4e657661 20656d61 7325203a 0000000a     aveName : %s....
   1eba8:	20202020 73616c66 75622068 000a7973         flash busy..
   1ebb8:	73616c46 733a3a68 616c4664 72576873     Flash::sdFlashWr
   1ebc8:	33657469 00000a32 20202020 75746572     ite32...    retu
   1ebd8:	76206e72 203a6c61 000a7525 73616c46     rn val: %u..Flas
   1ebe8:	733a3a68 61724564 61506573 000a6567     h::sdErasePage..
   1ebf8:	64616572 00000000 542f2e2e 65706d65     read....../Tempe
   1ec08:	75746172 682e6572 00007070 467b2020     rature.hpp..  {F
   1ec18:	7d646572 6c696166 74206465 6572206f     red}failed to re
   1ec28:	74206461 20706d65 756c6176 77467b65     ad temp value{Fw
   1ec38:	65746968 00000a7d 65722020 6e727574     hite}...  return
   1ec48:	64206465 75616665 7420746c 20706d65     ed default temp 
   1ec58:	756c6176 00000a65 467b2020 7d646572     value...  {Fred}
   1ec68:	656d6974 2c74756f 61657220 62207964     timeout, ready b
   1ec78:	6e207469 7320746f 467b7465 74696877     it not set{Fwhit
   1ec88:	000a7d65 252e6425 25204675 00000073     e}..%d.%uF %s...
   1ec98:	61647075 00006574 7963467b 207d6e61     update..{Fcyan} 
   1eca8:	64612d20 74726576 6e697369 61702067      -advertising pa
   1ecb8:	74656b63 77467b2d 65746968 00000a7d     cket-{Fwhite}...
   1ecc8:	6e657665 6e614874 72656c64 00000000     eventHandler....
   1ecd8:	422f2e2e 682e656c 00007070 726f6e7b     ../Ble.hpp..{nor
   1ece8:	7d6c616d 64616568 652e7265 746e6576     mal}header.event
   1ecf8:	3a64695f 0a642520 00000000 5f454c42     _id: %d.....BLE_
   1ed08:	54544147 56455f53 52575f54 3a455449     GATTS_EVT_WRITE:
   1ed18:	00000a20 73616c46 753a3a68 74616470      ...Flash::updat
   1ed28:	6d614e65 203a2065 000a7325 6e6e6f63     eName : %s..conn
   1ed38:	65746365 00000a64 63736964 656e6e6f     ected...disconne
   1ed48:	64657463 0000000a 5f454c42 5f504147     cted....BLE_GAP_
   1ed58:	5f545645 5f594850 41445055 525f4554     EVT_PHY_UPDATE_R
   1ed68:	45555145 000a5453 6572467b 6e757d64     EQUEST..{Fred}un
   1ed78:	646e6168 2064656c 6e657665 6e7b0a74     handled event.{n
   1ed88:	616d726f 00007d6c 65766441 73697472     ormal}..Advertis
   1ed98:	3a676e69 696e693a 2e2e2e74 0000000a     ing::init.......
   1eda8:	726f6e7b 7d6c616d 7267467b 7d6e6565     {normal}{Fgreen}
   1edb8:	6f6f420a 74732074 2e747261 000a2e2e     .Boot start.....
   1edc8:	65776f50 693a3a72 2e74696e 000a2e2e     Power::init.....
   1edd8:	6e6e6f43 6e693a3a 2e2e7469 00000a2e     Conn::init......
   1ede8:	65656c73 00000070 502f2e2e 7265776f     sleep...../Power
   1edf8:	7070682e 00000000 3b303b30 00006d30     .hpp....0;0;0m..
   1ee08:	3b353532 6d303b30 00000000 35323b30     255;0;0m....0;25
   1ee18:	6d303b35 00000000 3b353532 3b353532     5;0m....255;255;
   1ee28:	00006d30 3b303b30 6d353532 00000000     0m..0;0;255m....
   1ee38:	3b353532 35323b30 00006d35 33313b30     255;0;255m..0;13
   1ee48:	31323b35 00006d35 3b353532 3b353532     5;215m..255;255;
   1ee58:	6d353532 00000000 3b353532 373b3939     255m....255;99;7
   1ee68:	00006d31 3b333431 31323b30 00006d31     1m..143;0;211m..
   1ee78:	00004a32 48313b31 00000000 5b1b4a32     2J..1;1H....2J.[
   1ee88:	48313b31 6d305b1b 00000000 00006d33     1;1H.[0m....3m..
   1ee98:	00006d34                                4m..

0001ee9c <SD_TX_LEVELS>:
   1ee9c:	f0ecd800 00fcf8f4 00000403 00000000     ................
   1eeac:	00000000                                ....

0001eeb0 <nrfx_coredep_delay_us::delay_machine_code>:
   1eeb0:	d8fd3807 00004770                       .8..pG..

0001eeb8 <markupCodes>:
   1eeb8:	0000441d 0001ee00 0000f25b 0001ee08     .D......[.......
   1eec8:	00001a31 0001ee14 0000f21c 0001ee20     1........... ...
   1eed8:	00009808 0001ee2c 0000649d 0001ee38     ....,....d..8...
   1eee8:	0000592b 0001ee44 00003961 0001ee50     +Y..D...a9..P...
   1eef8:	0000999c 0001ee60 00006758 0001ee6c     ....`...Xg..l...
   1ef08:	0000b382 0001ee78 0000ee09 0001ee7c     ....x.......|...
   1ef18:	00004263 0001ee84 0000ce96 0001ee94     cB..............
   1ef28:	000074e9 0001ee04 0000d0a6 0001ee98     .t..............
   1ef38:	6d726554 6c616e69 00000000 00545452     Terminal....RTT.
   1ef48:	47474553 00005245 01021000              SEGGER......

0001ef54 <sdh_req_observers>:
   1ef54:	0001f004 0001f004 00000008              ............

0001ef60 <sdh_stack_observers>:
   1ef60:	0001eff4 0001f004 00000008              ............

0001ef6c <sdh_state_observers>:
   1ef6c:	0001efec 0001eff4 00000008              ............

0001ef78 <sdh_ble_observers>:
   1ef78:	0001efdc 0001efec 00000008              ............

0001ef84 <sdh_soc_observers>:
   1ef84:	0001efcc 0001efdc 00000008              ............

0001ef90 <_global_impure_ptr>:
   1ef90:	20001840 2b302d23 6c680020 6665004c     @.. #-0+ .hlL.ef
   1efa0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1efb0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1efc0:	64636261 00006665                       abcdef..

0001efc8 <__EH_FRAME_BEGIN__>:
   1efc8:	00000000                                ....
