
_build/nrf52810_xxaa.out:     file format elf32-littlearm


Disassembly of section .text:

00019000 <__isr_vector>:
   19000:	20006000 	.word	0x20006000
   19004:	000192bd 	.word	0x000192bd
   19008:	00019311 	.word	0x00019311
   1900c:	00019313 	.word	0x00019313
   19010:	00019315 	.word	0x00019315
   19014:	00019317 	.word	0x00019317
   19018:	00019319 	.word	0x00019319
	...
   1902c:	0001931b 	.word	0x0001931b
   19030:	0001931d 	.word	0x0001931d
   19034:	00000000 	.word	0x00000000
   19038:	0001931f 	.word	0x0001931f
   1903c:	00019321 	.word	0x00019321
   19040:	00019fd5 	.word	0x00019fd5
   19044:	00019323 	.word	0x00019323
   19048:	00019323 	.word	0x00019323
   1904c:	00019323 	.word	0x00019323
   19050:	00019323 	.word	0x00019323
   19054:	00000000 	.word	0x00000000
   19058:	0001a041 	.word	0x0001a041
   1905c:	00019323 	.word	0x00019323
   19060:	00019323 	.word	0x00019323
   19064:	00019323 	.word	0x00019323
   19068:	00019323 	.word	0x00019323
   1906c:	00019323 	.word	0x00019323
   19070:	00019323 	.word	0x00019323
   19074:	00019323 	.word	0x00019323
   19078:	00019323 	.word	0x00019323
   1907c:	00019323 	.word	0x00019323
   19080:	00019323 	.word	0x00019323
   19084:	00019ab5 	.word	0x00019ab5
   19088:	00019323 	.word	0x00019323
   1908c:	00019323 	.word	0x00019323
   19090:	00019323 	.word	0x00019323
   19094:	00019323 	.word	0x00019323
   19098:	0001c98d 	.word	0x0001c98d
   1909c:	00019323 	.word	0x00019323
   190a0:	00019323 	.word	0x00019323
   190a4:	00019323 	.word	0x00019323
	...
   190b0:	00019323 	.word	0x00019323
   190b4:	00019323 	.word	0x00019323
	...

00019200 <__do_global_dtors_aux>:
   19200:	b510      	push	{r4, lr}
   19202:	4c05      	ldr	r4, [pc, #20]	; (19218 <__do_global_dtors_aux+0x18>)
   19204:	7823      	ldrb	r3, [r4, #0]
   19206:	b933      	cbnz	r3, 19216 <__do_global_dtors_aux+0x16>
   19208:	4b04      	ldr	r3, [pc, #16]	; (1921c <__do_global_dtors_aux+0x1c>)
   1920a:	b113      	cbz	r3, 19212 <__do_global_dtors_aux+0x12>
   1920c:	4804      	ldr	r0, [pc, #16]	; (19220 <__do_global_dtors_aux+0x20>)
   1920e:	f3af 8000 	nop.w
   19212:	2301      	movs	r3, #1
   19214:	7023      	strb	r3, [r4, #0]
   19216:	bd10      	pop	{r4, pc}
   19218:	200011b8 	.word	0x200011b8
   1921c:	00000000 	.word	0x00000000
   19220:	0001e918 	.word	0x0001e918

00019224 <frame_dummy>:
   19224:	b508      	push	{r3, lr}
   19226:	4b03      	ldr	r3, [pc, #12]	; (19234 <frame_dummy+0x10>)
   19228:	b11b      	cbz	r3, 19232 <frame_dummy+0xe>
   1922a:	4903      	ldr	r1, [pc, #12]	; (19238 <frame_dummy+0x14>)
   1922c:	4803      	ldr	r0, [pc, #12]	; (1923c <frame_dummy+0x18>)
   1922e:	f3af 8000 	nop.w
   19232:	bd08      	pop	{r3, pc}
   19234:	00000000 	.word	0x00000000
   19238:	200011bc 	.word	0x200011bc
   1923c:	0001e918 	.word	0x0001e918

00019240 <_stack_init>:
   19240:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
   19244:	4770      	bx	lr
   19246:	bf00      	nop

00019248 <_mainCRTStartup>:
   19248:	4b17      	ldr	r3, [pc, #92]	; (192a8 <_mainCRTStartup+0x60>)
   1924a:	2b00      	cmp	r3, #0
   1924c:	bf08      	it	eq
   1924e:	4b13      	ldreq	r3, [pc, #76]	; (1929c <_mainCRTStartup+0x54>)
   19250:	469d      	mov	sp, r3
   19252:	f7ff fff5 	bl	19240 <_stack_init>
   19256:	2100      	movs	r1, #0
   19258:	468b      	mov	fp, r1
   1925a:	460f      	mov	r7, r1
   1925c:	4813      	ldr	r0, [pc, #76]	; (192ac <_mainCRTStartup+0x64>)
   1925e:	4a14      	ldr	r2, [pc, #80]	; (192b0 <_mainCRTStartup+0x68>)
   19260:	1a12      	subs	r2, r2, r0
   19262:	f003 fcab 	bl	1cbbc <memset>
   19266:	4b0e      	ldr	r3, [pc, #56]	; (192a0 <_mainCRTStartup+0x58>)
   19268:	2b00      	cmp	r3, #0
   1926a:	d000      	beq.n	1926e <_mainCRTStartup+0x26>
   1926c:	4798      	blx	r3
   1926e:	4b0d      	ldr	r3, [pc, #52]	; (192a4 <_mainCRTStartup+0x5c>)
   19270:	2b00      	cmp	r3, #0
   19272:	d000      	beq.n	19276 <_mainCRTStartup+0x2e>
   19274:	4798      	blx	r3
   19276:	2000      	movs	r0, #0
   19278:	2100      	movs	r1, #0
   1927a:	0004      	movs	r4, r0
   1927c:	000d      	movs	r5, r1
   1927e:	480d      	ldr	r0, [pc, #52]	; (192b4 <_mainCRTStartup+0x6c>)
   19280:	2800      	cmp	r0, #0
   19282:	d002      	beq.n	1928a <_mainCRTStartup+0x42>
   19284:	480c      	ldr	r0, [pc, #48]	; (192b8 <_mainCRTStartup+0x70>)
   19286:	f3af 8000 	nop.w
   1928a:	f003 fc65 	bl	1cb58 <__libc_init_array>
   1928e:	0020      	movs	r0, r4
   19290:	0029      	movs	r1, r5
   19292:	f002 ff37 	bl	1c104 <main>
   19296:	f003 fc4b 	bl	1cb30 <exit>
   1929a:	bf00      	nop
   1929c:	00080000 	.word	0x00080000
	...
   192a8:	20006000 	.word	0x20006000
   192ac:	200011b8 	.word	0x200011b8
   192b0:	20001698 	.word	0x20001698
	...

000192bc <Reset_Handler>:

    /* Workaround for Errata 185 RAM: RAM corruption at extreme corners 
     * found at the Errata document for your device located
     * at https://infocenter.nordicsemi.com/index.jsp */
    
    LDR     R0, =0x10000130
   192bc:	480e      	ldr	r0, [pc, #56]	; (192f8 <skip+0x1a>)
    LDR     R0, [R0]
   192be:	6800      	ldr	r0, [r0, #0]
    LDR     R1, =0x10000134
   192c0:	490e      	ldr	r1, [pc, #56]	; (192fc <skip+0x1e>)
    LDR     R1, [R1]
   192c2:	6809      	ldr	r1, [r1, #0]
    
    CMP     R0, #0xA
   192c4:	280a      	cmp	r0, #10
    BNE     skip
   192c6:	d10a      	bne.n	192de <skip>
    CMP     R1, #0x0
   192c8:	2900      	cmp	r1, #0
    BNE     skip
   192ca:	d108      	bne.n	192de <skip>
    
    LDR     R0, =0x40000EE4
   192cc:	480c      	ldr	r0, [pc, #48]	; (19300 <skip+0x22>)
    LDR     R2, [R0]
   192ce:	6802      	ldr	r2, [r0, #0]
    LDR     R3, =0xFFFFFF8F
   192d0:	f06f 0370 	mvn.w	r3, #112	; 0x70
    ANDS    R2, R2, R3
   192d4:	401a      	ands	r2, r3
    LDR     R3, =0x00000040
   192d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    ORRS    R2, R2, R3
   192da:	431a      	orrs	r2, r3
    STR     R2, [R0]
   192dc:	6002      	str	r2, [r0, #0]

000192de <skip>:
 *      __bss_start__: VMA of end of the section to copy to. Normally __data_end__ is used, but by using __bss_start__
 *                    the user can add their own initialized data section before BSS section with the INTERT AFTER command.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__etext
   192de:	4909      	ldr	r1, [pc, #36]	; (19304 <skip+0x26>)
    ldr r2, =__data_start__
   192e0:	4a09      	ldr	r2, [pc, #36]	; (19308 <skip+0x2a>)
    ldr r3, =__bss_start__
   192e2:	4b0a      	ldr	r3, [pc, #40]	; (1930c <skip+0x2e>)

    subs r3, r3, r2
   192e4:	1a9b      	subs	r3, r3, r2
    ble .L_loop1_done
   192e6:	dd03      	ble.n	192f0 <skip+0x12>

.L_loop1:
    subs r3, r3, #4
   192e8:	3b04      	subs	r3, #4
    ldr r0, [r1,r3]
   192ea:	58c8      	ldr	r0, [r1, r3]
    str r0, [r2,r3]
   192ec:	50d0      	str	r0, [r2, r3]
    bgt .L_loop1
   192ee:	dcfb      	bgt.n	192e8 <skip+0xa>

.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */

/* Execute SystemInit function. */
    bl SystemInit
   192f0:	f000 fce4 	bl	19cbc <SystemInit>
 * If those libraries are not accessible, define __START as your entry point.
 */
#ifndef __START
#define __START _start
#endif
    bl __START
   192f4:	f7ff ffa8 	bl	19248 <_mainCRTStartup>
    LDR     R0, =0x10000130
   192f8:	10000130 	.word	0x10000130
    LDR     R1, =0x10000134
   192fc:	10000134 	.word	0x10000134
    LDR     R0, =0x40000EE4
   19300:	40000ee4 	.word	0x40000ee4
    ldr r1, =__etext
   19304:	0001eb10 	.word	0x0001eb10
    ldr r2, =__data_start__
   19308:	20001118 	.word	0x20001118
    ldr r3, =__bss_start__
   1930c:	200011b8 	.word	0x200011b8

00019310 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    b       .
   19310:	e7fe      	b.n	19310 <NMI_Handler>

00019312 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    b       .
   19312:	e7fe      	b.n	19312 <HardFault_Handler>

00019314 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    b       .
   19314:	e7fe      	b.n	19314 <MemoryManagement_Handler>

00019316 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    b       .
   19316:	e7fe      	b.n	19316 <BusFault_Handler>

00019318 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    b       .
   19318:	e7fe      	b.n	19318 <UsageFault_Handler>

0001931a <SVC_Handler>:


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    b       .
   1931a:	e7fe      	b.n	1931a <SVC_Handler>

0001931c <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
   1931c:	e7fe      	b.n	1931c <DebugMon_Handler>

0001931e <PendSV_Handler>:


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    b       .
   1931e:	e7fe      	b.n	1931e <PendSV_Handler>

00019320 <SysTick_Handler>:


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    b       .
   19320:	e7fe      	b.n	19320 <SysTick_Handler>

00019322 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
   19322:	e7fe      	b.n	19322 <Default_Handler>

00019324 <app_error_handler_bare>:
 * @param[in] error_code  Error code supplied to the handler.
 * @param[in] line_num    Line number where the handler is called.
 * @param[in] p_file_name Pointer to the file name.
 */
void app_error_handler_bare(ret_code_t error_code)
{
   19324:	b500      	push	{lr}
   19326:	b085      	sub	sp, #20
   19328:	4603      	mov	r3, r0
    error_info_t error_info =
   1932a:	2100      	movs	r1, #0
        .line_num    = 0,
        .p_file_name = NULL,
        .err_code    = error_code,
    };

    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   1932c:	aa01      	add	r2, sp, #4
   1932e:	f244 0001 	movw	r0, #16385	; 0x4001
    error_info_t error_info =
   19332:	e9cd 1101 	strd	r1, r1, [sp, #4]
   19336:	9303      	str	r3, [sp, #12]
    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   19338:	f000 f804 	bl	19344 <app_error_fault_handler>

    UNUSED_VARIABLE(error_info);
}
   1933c:	b005      	add	sp, #20
   1933e:	f85d fb04 	ldr.w	pc, [sp], #4
   19342:	bf00      	nop

00019344 <app_error_fault_handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   19344:	b672      	cpsid	i
            NRF_LOG_ERROR("UNKNOWN FAULT at 0x%08X", pc);
            break;
    }
#endif

    NRF_BREAKPOINT_COND;
   19346:	4b09      	ldr	r3, [pc, #36]	; (1936c <app_error_fault_handler+0x28>)
   19348:	681b      	ldr	r3, [r3, #0]
   1934a:	07db      	lsls	r3, r3, #31
   1934c:	d500      	bpl.n	19350 <app_error_fault_handler+0xc>
   1934e:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19350:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19354:	4906      	ldr	r1, [pc, #24]	; (19370 <app_error_fault_handler+0x2c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19356:	4b07      	ldr	r3, [pc, #28]	; (19374 <app_error_fault_handler+0x30>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19358:	68ca      	ldr	r2, [r1, #12]
   1935a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1935e:	4313      	orrs	r3, r2
   19360:	60cb      	str	r3, [r1, #12]
   19362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   19366:	bf00      	nop
   19368:	e7fd      	b.n	19366 <app_error_fault_handler+0x22>
   1936a:	bf00      	nop
   1936c:	e000edf0 	.word	0xe000edf0
   19370:	e000ed00 	.word	0xe000ed00
   19374:	05fa0004 	.word	0x05fa0004

00019378 <compare_func>:
    app_timer_t * p0 = CONTAINER_OF(p_item0, app_timer_t, list_item);
    app_timer_t * p1 = CONTAINER_OF(p_item1, app_timer_t, list_item);

    uint64_t p0_end = p0->end_val;
    uint64_t p1_end = p1->end_val;
    return (p0_end <= p1_end) ? true : false;
   19378:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1937c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   19380:	4299      	cmp	r1, r3
   19382:	bf08      	it	eq
   19384:	4290      	cmpeq	r0, r2
}
   19386:	bf2c      	ite	cs
   19388:	2001      	movcs	r0, #1
   1938a:	2000      	movcc	r0, #0
   1938c:	4770      	bx	lr
   1938e:	bf00      	nop

00019390 <rtc_irq>:
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
    }
}

static void rtc_irq(drv_rtc_t const * const  p_instance)
{
   19390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19394:	b087      	sub	sp, #28
   19396:	4606      	mov	r6, r0
    if (drv_rtc_overflow_pending(p_instance))
   19398:	f000 fb4c 	bl	19a34 <drv_rtc_overflow_pending>
   1939c:	b140      	cbz	r0, 193b0 <rtc_irq+0x20>
    m_base_counter += (DRV_RTC_MAX_CNT + 1);
   1939e:	4a97      	ldr	r2, [pc, #604]	; (195fc <rtc_irq+0x26c>)
   193a0:	e9d2 3100 	ldrd	r3, r1, [r2]
   193a4:	f113 7380 	adds.w	r3, r3, #16777216	; 0x1000000
   193a8:	f141 0100 	adc.w	r1, r1, #0
   193ac:	e9c2 3100 	strd	r3, r1, [r2]
    {
        on_overflow_evt();
    }
    if (drv_rtc_compare_pending(p_instance, 0))
   193b0:	2100      	movs	r1, #0
   193b2:	4630      	mov	r0, r6
   193b4:	f000 fb5a 	bl	19a6c <drv_rtc_compare_pending>
    if (mp_active_timer)
   193b8:	4c91      	ldr	r4, [pc, #580]	; (19600 <rtc_irq+0x270>)
    if (drv_rtc_compare_pending(p_instance, 0))
   193ba:	b160      	cbz	r0, 193d6 <rtc_irq+0x46>
    if (mp_active_timer)
   193bc:	6823      	ldr	r3, [r4, #0]
   193be:	b153      	cbz	r3, 193d6 <rtc_irq+0x46>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   193c0:	4b90      	ldr	r3, [pc, #576]	; (19604 <rtc_irq+0x274>)
        UNUSED_RETURN_VALUE(timer_expire(mp_active_timer));
   193c2:	6825      	ldr	r5, [r4, #0]
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   193c4:	781b      	ldrb	r3, [r3, #0]
   193c6:	b123      	cbz	r3, 193d2 <rtc_irq+0x42>
   193c8:	b11d      	cbz	r5, 193d2 <rtc_irq+0x42>
   193ca:	7f2b      	ldrb	r3, [r5, #28]
   193cc:	2b00      	cmp	r3, #0
   193ce:	f040 8125 	bne.w	1961c <rtc_irq+0x28c>
        mp_active_timer = NULL;
   193d2:	2300      	movs	r3, #0
   193d4:	6023      	str	r3, [r4, #0]
    {
        on_compare_evt(p_instance);
    }
    if (drv_rtc_compare_pending(p_instance, 1))
   193d6:	2101      	movs	r1, #1
   193d8:	4630      	mov	r0, r6
   193da:	f000 fb47 	bl	19a6c <drv_rtc_compare_pending>
   193de:	2800      	cmp	r0, #0
   193e0:	f040 80ef 	bne.w	195c2 <rtc_irq+0x232>
    timer_req_t *         p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   193e4:	4888      	ldr	r0, [pc, #544]	; (19608 <rtc_irq+0x278>)
   193e6:	a905      	add	r1, sp, #20
   193e8:	f000 fbc2 	bl	19b70 <nrf_atfifo_item_get>
    while (p_req)
   193ec:	b378      	cbz	r0, 1944e <rtc_irq+0xbe>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   193ee:	4d87      	ldr	r5, [pc, #540]	; (1960c <rtc_irq+0x27c>)
                m_global_active = true;
   193f0:	f8df 8210 	ldr.w	r8, [pc, #528]	; 19604 <rtc_irq+0x274>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   193f4:	4f84      	ldr	r7, [pc, #528]	; (19608 <rtc_irq+0x278>)
   193f6:	e00b      	b.n	19410 <rtc_irq+0x80>
        switch (p_req->type)
   193f8:	2b00      	cmp	r3, #0
   193fa:	f000 80c9 	beq.w	19590 <rtc_irq+0x200>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   193fe:	a905      	add	r1, sp, #20
   19400:	4638      	mov	r0, r7
   19402:	f000 fbe5 	bl	19bd0 <nrf_atfifo_item_free>
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   19406:	a905      	add	r1, sp, #20
   19408:	4638      	mov	r0, r7
   1940a:	f000 fbb1 	bl	19b70 <nrf_atfifo_item_get>
    while (p_req)
   1940e:	b1f0      	cbz	r0, 1944e <rtc_irq+0xbe>
        switch (p_req->type)
   19410:	7803      	ldrb	r3, [r0, #0]
   19412:	2b01      	cmp	r3, #1
   19414:	d012      	beq.n	1943c <rtc_irq+0xac>
   19416:	2b02      	cmp	r3, #2
   19418:	d1ee      	bne.n	193f8 <rtc_irq+0x68>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1941a:	4628      	mov	r0, r5
            p_next->active = false;
   1941c:	f04f 0900 	mov.w	r9, #0
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   19420:	f000 fc34 	bl	19c8c <nrf_sortlist_pop>
        if (p_next)
   19424:	b130      	cbz	r0, 19434 <rtc_irq+0xa4>
            p_next->active = false;
   19426:	f880 901c 	strb.w	r9, [r0, #28]
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1942a:	4628      	mov	r0, r5
   1942c:	f000 fc2e 	bl	19c8c <nrf_sortlist_pop>
        if (p_next)
   19430:	2800      	cmp	r0, #0
   19432:	d1f8      	bne.n	19426 <rtc_irq+0x96>
                m_global_active = true;
   19434:	2301      	movs	r3, #1
   19436:	f888 3000 	strb.w	r3, [r8]
                break;
   1943a:	e7e0      	b.n	193fe <rtc_irq+0x6e>
                if (p_req->p_timer == mp_active_timer)
   1943c:	6841      	ldr	r1, [r0, #4]
   1943e:	6823      	ldr	r3, [r4, #0]
   19440:	4299      	cmp	r1, r3
   19442:	f000 80b5 	beq.w	195b0 <rtc_irq+0x220>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   19446:	4628      	mov	r0, r5
   19448:	f000 fc2a 	bl	19ca0 <nrf_sortlist_remove>
                    if (!found)
   1944c:	e7d7      	b.n	193fe <rtc_irq+0x6e>
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   1944e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1960c <rtc_irq+0x27c>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19452:	4f6f      	ldr	r7, [pc, #444]	; (19610 <rtc_irq+0x280>)
   19454:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 195fc <rtc_irq+0x26c>
}
   19458:	e038      	b.n	194cc <rtc_irq+0x13c>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   1945a:	4640      	mov	r0, r8
   1945c:	f000 fc16 	bl	19c8c <nrf_sortlist_pop>
   19460:	4605      	mov	r5, r0
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19462:	e9d5 b302 	ldrd	fp, r3, [r5, #8]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19466:	4638      	mov	r0, r7
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19468:	9303      	str	r3, [sp, #12]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1946a:	f000 fb0f 	bl	19a8c <drv_rtc_counter_get>
   1946e:	4602      	mov	r2, r0
   19470:	e9d9 0100 	ldrd	r0, r1, [r9]
    if (now < m_stamp64) {
   19474:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 19618 <rtc_irq+0x288>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19478:	1880      	adds	r0, r0, r2
    if (now < m_stamp64) {
   1947a:	e9da 2300 	ldrd	r2, r3, [sl]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1947e:	f141 0100 	adc.w	r1, r1, #0
    if (now < m_stamp64) {
   19482:	4299      	cmp	r1, r3
   19484:	bf08      	it	eq
   19486:	4290      	cmpeq	r0, r2
   19488:	9b03      	ldr	r3, [sp, #12]
   1948a:	d203      	bcs.n	19494 <rtc_irq+0x104>
        now += (DRV_RTC_MAX_CNT + 1);
   1948c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19490:	f141 0100 	adc.w	r1, r1, #0
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   19494:	ebbb 0200 	subs.w	r2, fp, r0
   19498:	eb63 0301 	sbc.w	r3, r3, r1
   1949c:	9200      	str	r2, [sp, #0]
   1949e:	9301      	str	r3, [sp, #4]
    if (remaining > 0) {
   194a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   194a4:	2a01      	cmp	r2, #1
   194a6:	f173 0100 	sbcs.w	r1, r3, #0
   194aa:	db29      	blt.n	19500 <rtc_irq+0x170>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   194ac:	f5b2 0f35 	cmp.w	r2, #11862016	; 0xb50000
   194b0:	d268      	bcs.n	19584 <rtc_irq+0x1f4>
   194b2:	68aa      	ldr	r2, [r5, #8]
        ret = drv_rtc_windowed_compare_set(&m_rtc_inst, 0, cc_val, APP_TIMER_SAFE_WINDOW);
   194b4:	f44f 0396 	mov.w	r3, #4915200	; 0x4b0000
   194b8:	2100      	movs	r1, #0
   194ba:	4638      	mov	r0, r7
   194bc:	f000 fa2e 	bl	1991c <drv_rtc_windowed_compare_set>
        if (ret == NRF_SUCCESS)
   194c0:	2800      	cmp	r0, #0
   194c2:	d059      	beq.n	19578 <rtc_irq+0x1e8>
    if (ret == NRF_ERROR_TIMEOUT)
   194c4:	280d      	cmp	r0, #13
   194c6:	d01f      	beq.n	19508 <rtc_irq+0x178>
                    mp_active_timer = NULL;
   194c8:	2300      	movs	r3, #0
   194ca:	6023      	str	r3, [r4, #0]
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   194cc:	4640      	mov	r0, r8
   194ce:	f000 fbe3 	bl	19c98 <nrf_sortlist_peek>
            if (mp_active_timer == NULL)
   194d2:	6823      	ldr	r3, [r4, #0]
        if (p_next) //Candidate for active timer
   194d4:	2800      	cmp	r0, #0
   194d6:	d06e      	beq.n	195b6 <rtc_irq+0x226>
            if (mp_active_timer == NULL)
   194d8:	2b00      	cmp	r3, #0
   194da:	d0be      	beq.n	1945a <rtc_irq+0xca>
            else if (p_next->end_val < mp_active_timer->end_val)
   194dc:	6823      	ldr	r3, [r4, #0]
   194de:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   194e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   194e6:	4299      	cmp	r1, r3
   194e8:	bf08      	it	eq
   194ea:	4290      	cmpeq	r0, r2
   194ec:	d247      	bcs.n	1957e <rtc_irq+0x1ee>
                if (mp_active_timer->active)
   194ee:	6823      	ldr	r3, [r4, #0]
   194f0:	7f1b      	ldrb	r3, [r3, #28]
   194f2:	2b00      	cmp	r3, #0
   194f4:	d0b1      	beq.n	1945a <rtc_irq+0xca>
                    nrf_sortlist_add(&m_app_timer_sortlist, &mp_active_timer->list_item);
   194f6:	6821      	ldr	r1, [r4, #0]
   194f8:	4640      	mov	r0, r8
   194fa:	f000 fbb3 	bl	19c64 <nrf_sortlist_add>
            if (rtc_reconf)
   194fe:	e7ac      	b.n	1945a <rtc_irq+0xca>
        drv_rtc_compare_disable(&m_rtc_inst, 0);
   19500:	2100      	movs	r1, #0
   19502:	4638      	mov	r0, r7
   19504:	f000 faa6 	bl	19a54 <drv_rtc_compare_disable>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   19508:	4b3e      	ldr	r3, [pc, #248]	; (19604 <rtc_irq+0x274>)
   1950a:	781b      	ldrb	r3, [r3, #0]
   1950c:	2b00      	cmp	r3, #0
   1950e:	d0db      	beq.n	194c8 <rtc_irq+0x138>
   19510:	7f2b      	ldrb	r3, [r5, #28]
   19512:	2b00      	cmp	r3, #0
   19514:	d0d8      	beq.n	194c8 <rtc_irq+0x138>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19516:	4638      	mov	r0, r7
   19518:	f000 fab8 	bl	19a8c <drv_rtc_counter_get>
    if (now < m_stamp64) {
   1951c:	e9da 2300 	ldrd	r2, r3, [sl]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19520:	e9d9 ab00 	ldrd	sl, fp, [r9]
   19524:	eb1a 0a00 	adds.w	sl, sl, r0
   19528:	f14b 0b00 	adc.w	fp, fp, #0
    if (now < m_stamp64) {
   1952c:	459b      	cmp	fp, r3
   1952e:	bf08      	it	eq
   19530:	4592      	cmpeq	sl, r2
   19532:	d203      	bcs.n	1953c <rtc_irq+0x1ac>
        now += (DRV_RTC_MAX_CNT + 1);
   19534:	f11a 7a80 	adds.w	sl, sl, #16777216	; 0x1000000
   19538:	f14b 0b00 	adc.w	fp, fp, #0
        if (get_now() >= p_timer->end_val) {
   1953c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19540:	459b      	cmp	fp, r3
   19542:	bf08      	it	eq
   19544:	4592      	cmpeq	sl, r2
   19546:	d354      	bcc.n	195f2 <rtc_irq+0x262>
            if (p_timer->repeat_period == 0)
   19548:	692b      	ldr	r3, [r5, #16]
   1954a:	b903      	cbnz	r3, 1954e <rtc_irq+0x1be>
                p_timer->active = false;
   1954c:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   1954e:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   19552:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   19554:	6929      	ldr	r1, [r5, #16]
   19556:	2900      	cmp	r1, #0
   19558:	d0b6      	beq.n	194c8 <rtc_irq+0x138>
   1955a:	7f2b      	ldrb	r3, [r5, #28]
   1955c:	2b00      	cmp	r3, #0
   1955e:	d0b3      	beq.n	194c8 <rtc_irq+0x138>
                p_timer->end_val += p_timer->repeat_period;
   19560:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19564:	1852      	adds	r2, r2, r1
   19566:	f143 0300 	adc.w	r3, r3, #0
   1956a:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   1956e:	4629      	mov	r1, r5
   19570:	4640      	mov	r0, r8
   19572:	f000 fb77 	bl	19c64 <nrf_sortlist_add>
                ret = true;
   19576:	e7a7      	b.n	194c8 <rtc_irq+0x138>
                    if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   19578:	6823      	ldr	r3, [r4, #0]
   1957a:	b1ab      	cbz	r3, 195a8 <rtc_irq+0x218>
                    mp_active_timer = p_next;
   1957c:	6025      	str	r5, [r4, #0]
        on_compare1_evt(p_instance);
    }

    timer_req_process(p_instance);
    rtc_update(p_instance);
}
   1957e:	b007      	add	sp, #28
   19580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((ticks_to - ticks_from) & RTC_COUNTER_COUNTER_Msk);
}

uint32_t app_timer_cnt_get(void)
{
    return drv_rtc_counter_get(&m_rtc_inst);
   19584:	4638      	mov	r0, r7
   19586:	f000 fa81 	bl	19a8c <drv_rtc_counter_get>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   1958a:	4a22      	ldr	r2, [pc, #136]	; (19614 <rtc_irq+0x284>)
   1958c:	4402      	add	r2, r0
   1958e:	e791      	b.n	194b4 <rtc_irq+0x124>
                if (!p_req->p_timer->active)
   19590:	6843      	ldr	r3, [r0, #4]
   19592:	7f1a      	ldrb	r2, [r3, #28]
   19594:	2a00      	cmp	r2, #0
   19596:	f47f af32 	bne.w	193fe <rtc_irq+0x6e>
                    p_req->p_timer->active = true;
   1959a:	2201      	movs	r2, #1
   1959c:	771a      	strb	r2, [r3, #28]
                    nrf_sortlist_add(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   1959e:	6841      	ldr	r1, [r0, #4]
   195a0:	4628      	mov	r0, r5
   195a2:	f000 fb5f 	bl	19c64 <nrf_sortlist_add>
                    NRF_LOG_INST_DEBUG(p_req->p_timer->p_log,"Start request (expiring at %d/0x%08x).",
   195a6:	e72a      	b.n	193fe <rtc_irq+0x6e>
                        drv_rtc_start(p_instance);
   195a8:	4630      	mov	r0, r6
   195aa:	f000 f989 	bl	198c0 <drv_rtc_start>
   195ae:	e7e5      	b.n	1957c <rtc_irq+0x1ec>
                    mp_active_timer = NULL;
   195b0:	2300      	movs	r3, #0
   195b2:	6023      	str	r3, [r4, #0]
   195b4:	e723      	b.n	193fe <rtc_irq+0x6e>
            if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   195b6:	2b00      	cmp	r3, #0
   195b8:	d1e1      	bne.n	1957e <rtc_irq+0x1ee>
                drv_rtc_stop(p_instance);
   195ba:	4630      	mov	r0, r6
   195bc:	f000 f984 	bl	198c8 <drv_rtc_stop>
}
   195c0:	e7dd      	b.n	1957e <rtc_irq+0x1ee>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195c2:	4813      	ldr	r0, [pc, #76]	; (19610 <rtc_irq+0x280>)
    if (now < m_stamp64) {
   195c4:	4d14      	ldr	r5, [pc, #80]	; (19618 <rtc_irq+0x288>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195c6:	f000 fa61 	bl	19a8c <drv_rtc_counter_get>
   195ca:	4b0c      	ldr	r3, [pc, #48]	; (195fc <rtc_irq+0x26c>)
   195cc:	e9d3 8900 	ldrd	r8, r9, [r3]
    if (now < m_stamp64) {
   195d0:	e9d5 2300 	ldrd	r2, r3, [r5]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   195d4:	eb18 0800 	adds.w	r8, r8, r0
   195d8:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   195dc:	4599      	cmp	r9, r3
   195de:	bf08      	it	eq
   195e0:	4590      	cmpeq	r8, r2
   195e2:	d203      	bcs.n	195ec <rtc_irq+0x25c>
        now += (DRV_RTC_MAX_CNT + 1);
   195e4:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   195e8:	f149 0900 	adc.w	r9, r9, #0
    m_stamp64 = get_now();
   195ec:	e9c5 8900 	strd	r8, r9, [r5]
}
   195f0:	e6f8      	b.n	193e4 <rtc_irq+0x54>
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   195f2:	4629      	mov	r1, r5
   195f4:	4640      	mov	r0, r8
   195f6:	f000 fb35 	bl	19c64 <nrf_sortlist_add>
            ret = true;
   195fa:	e765      	b.n	194c8 <rtc_irq+0x138>
   195fc:	200011d8 	.word	0x200011d8
   19600:	20001258 	.word	0x20001258
   19604:	200011e0 	.word	0x200011e0
   19608:	2000123c 	.word	0x2000123c
   1960c:	0001e4d4 	.word	0x0001e4d4
   19610:	20001118 	.word	0x20001118
   19614:	00b4ffff 	.word	0x00b4ffff
   19618:	20001250 	.word	0x20001250
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1961c:	481c      	ldr	r0, [pc, #112]	; (19690 <rtc_irq+0x300>)
   1961e:	f000 fa35 	bl	19a8c <drv_rtc_counter_get>
   19622:	4a1c      	ldr	r2, [pc, #112]	; (19694 <rtc_irq+0x304>)
    if (now < m_stamp64) {
   19624:	4b1c      	ldr	r3, [pc, #112]	; (19698 <rtc_irq+0x308>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19626:	e9d2 8900 	ldrd	r8, r9, [r2]
    if (now < m_stamp64) {
   1962a:	e9d3 2300 	ldrd	r2, r3, [r3]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1962e:	eb18 0800 	adds.w	r8, r8, r0
   19632:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   19636:	4599      	cmp	r9, r3
   19638:	bf08      	it	eq
   1963a:	4590      	cmpeq	r8, r2
   1963c:	d203      	bcs.n	19646 <rtc_irq+0x2b6>
        now += (DRV_RTC_MAX_CNT + 1);
   1963e:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   19642:	f149 0900 	adc.w	r9, r9, #0
        if (get_now() >= p_timer->end_val) {
   19646:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1964a:	4599      	cmp	r9, r3
   1964c:	bf08      	it	eq
   1964e:	4590      	cmpeq	r8, r2
   19650:	d319      	bcc.n	19686 <rtc_irq+0x2f6>
            if (p_timer->repeat_period == 0)
   19652:	692b      	ldr	r3, [r5, #16]
   19654:	b903      	cbnz	r3, 19658 <rtc_irq+0x2c8>
                p_timer->active = false;
   19656:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   19658:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   1965c:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   1965e:	6929      	ldr	r1, [r5, #16]
   19660:	2900      	cmp	r1, #0
   19662:	f43f aeb6 	beq.w	193d2 <rtc_irq+0x42>
   19666:	7f2b      	ldrb	r3, [r5, #28]
   19668:	2b00      	cmp	r3, #0
   1966a:	f43f aeb2 	beq.w	193d2 <rtc_irq+0x42>
                p_timer->end_val += p_timer->repeat_period;
   1966e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19672:	1852      	adds	r2, r2, r1
   19674:	f143 0300 	adc.w	r3, r3, #0
   19678:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   1967c:	4807      	ldr	r0, [pc, #28]	; (1969c <rtc_irq+0x30c>)
   1967e:	4629      	mov	r1, r5
   19680:	f000 faf0 	bl	19c64 <nrf_sortlist_add>
                ret = true;
   19684:	e6a5      	b.n	193d2 <rtc_irq+0x42>
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   19686:	4805      	ldr	r0, [pc, #20]	; (1969c <rtc_irq+0x30c>)
   19688:	4629      	mov	r1, r5
   1968a:	f000 faeb 	bl	19c64 <nrf_sortlist_add>
            ret = true;
   1968e:	e6a0      	b.n	193d2 <rtc_irq+0x42>
   19690:	20001118 	.word	0x20001118
   19694:	200011d8 	.word	0x200011d8
   19698:	20001250 	.word	0x20001250
   1969c:	0001e4d4 	.word	0x0001e4d4

000196a0 <app_timer_init>:
{
   196a0:	b510      	push	{r4, lr}
    drv_rtc_config_t config = {
   196a2:	4b13      	ldr	r3, [pc, #76]	; (196f0 <app_timer_init+0x50>)
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196a4:	4913      	ldr	r1, [pc, #76]	; (196f4 <app_timer_init+0x54>)
    drv_rtc_config_t config = {
   196a6:	681b      	ldr	r3, [r3, #0]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196a8:	4813      	ldr	r0, [pc, #76]	; (196f8 <app_timer_init+0x58>)
{
   196aa:	b082      	sub	sp, #8
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196ac:	2258      	movs	r2, #88	; 0x58
    drv_rtc_config_t config = {
   196ae:	9301      	str	r3, [sp, #4]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   196b0:	2308      	movs	r3, #8
   196b2:	f000 fa09 	bl	19ac8 <nrf_atfifo_init>
    if (err_code != NRFX_SUCCESS)
   196b6:	4604      	mov	r4, r0
   196b8:	b110      	cbz	r0, 196c0 <app_timer_init+0x20>
}
   196ba:	4620      	mov	r0, r4
   196bc:	b002      	add	sp, #8
   196be:	bd10      	pop	{r4, pc}
    err_code = drv_rtc_init(&m_rtc_inst, &config, rtc_irq);
   196c0:	4a0e      	ldr	r2, [pc, #56]	; (196fc <app_timer_init+0x5c>)
   196c2:	480f      	ldr	r0, [pc, #60]	; (19700 <app_timer_init+0x60>)
   196c4:	a901      	add	r1, sp, #4
   196c6:	f000 f8b9 	bl	1983c <drv_rtc_init>
    if (err_code != NRFX_SUCCESS)
   196ca:	4604      	mov	r4, r0
   196cc:	2800      	cmp	r0, #0
   196ce:	d1f4      	bne.n	196ba <app_timer_init+0x1a>
    drv_rtc_overflow_enable(&m_rtc_inst, true);
   196d0:	480b      	ldr	r0, [pc, #44]	; (19700 <app_timer_init+0x60>)
   196d2:	2101      	movs	r1, #1
   196d4:	f000 f9a4 	bl	19a20 <drv_rtc_overflow_enable>
    drv_rtc_compare_set(&m_rtc_inst, 1, DRV_RTC_MAX_CNT >> 1, true);
   196d8:	2301      	movs	r3, #1
   196da:	4619      	mov	r1, r3
   196dc:	4a09      	ldr	r2, [pc, #36]	; (19704 <app_timer_init+0x64>)
   196de:	4808      	ldr	r0, [pc, #32]	; (19700 <app_timer_init+0x60>)
   196e0:	f000 f8f6 	bl	198d0 <drv_rtc_compare_set>
    m_global_active = true;
   196e4:	4b08      	ldr	r3, [pc, #32]	; (19708 <app_timer_init+0x68>)
   196e6:	2201      	movs	r2, #1
}
   196e8:	4620      	mov	r0, r4
    m_global_active = true;
   196ea:	701a      	strb	r2, [r3, #0]
}
   196ec:	b002      	add	sp, #8
   196ee:	bd10      	pop	{r4, pc}
   196f0:	0001e4d0 	.word	0x0001e4d0
   196f4:	200011e4 	.word	0x200011e4
   196f8:	2000123c 	.word	0x2000123c
   196fc:	00019391 	.word	0x00019391
   19700:	20001118 	.word	0x20001118
   19704:	007fffff 	.word	0x007fffff
   19708:	200011e0 	.word	0x200011e0

0001970c <app_timer_create>:
    if (timeout_handler == NULL)
   1970c:	b14a      	cbz	r2, 19722 <app_timer_create+0x16>
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   1970e:	f1a1 0101 	sub.w	r1, r1, #1
    app_timer_t * p_t = (app_timer_t *) *p_timer_id;
   19712:	6803      	ldr	r3, [r0, #0]
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   19714:	fab1 f181 	clz	r1, r1
   19718:	0949      	lsrs	r1, r1, #5
   1971a:	e9c3 1204 	strd	r1, r2, [r3, #16]
    return NRF_SUCCESS;
   1971e:	2000      	movs	r0, #0
   19720:	4770      	bx	lr
        return NRF_ERROR_INVALID_PARAM;
   19722:	2007      	movs	r0, #7
}
   19724:	4770      	bx	lr
   19726:	bf00      	nop

00019728 <app_timer_start>:
    if (p_t->active)
   19728:	7f03      	ldrb	r3, [r0, #28]
   1972a:	b10b      	cbz	r3, 19730 <app_timer_start+0x8>
        return NRF_SUCCESS;
   1972c:	2000      	movs	r0, #0
}
   1972e:	4770      	bx	lr
{
   19730:	b5f0      	push	{r4, r5, r6, r7, lr}
    p_t->p_context = p_context;
   19732:	6182      	str	r2, [r0, #24]
{
   19734:	b083      	sub	sp, #12
   19736:	4604      	mov	r4, r0
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19738:	481a      	ldr	r0, [pc, #104]	; (197a4 <app_timer_start+0x7c>)
   1973a:	460d      	mov	r5, r1
   1973c:	f000 f9a6 	bl	19a8c <drv_rtc_counter_get>
   19740:	4b19      	ldr	r3, [pc, #100]	; (197a8 <app_timer_start+0x80>)
    if (now < m_stamp64) {
   19742:	491a      	ldr	r1, [pc, #104]	; (197ac <app_timer_start+0x84>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   19744:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (now < m_stamp64) {
   19748:	e9d1 6700 	ldrd	r6, r7, [r1]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   1974c:	1812      	adds	r2, r2, r0
   1974e:	f143 0300 	adc.w	r3, r3, #0
    if (now < m_stamp64) {
   19752:	42bb      	cmp	r3, r7
   19754:	bf08      	it	eq
   19756:	42b2      	cmpeq	r2, r6
   19758:	d203      	bcs.n	19762 <app_timer_start+0x3a>
        now += (DRV_RTC_MAX_CNT + 1);
   1975a:	f112 7280 	adds.w	r2, r2, #16777216	; 0x1000000
   1975e:	f143 0300 	adc.w	r3, r3, #0
    p_t->end_val = get_now() + timeout_ticks;
   19762:	1952      	adds	r2, r2, r5
    if (p_t->repeat_period)
   19764:	6921      	ldr	r1, [r4, #16]
    p_t->end_val = get_now() + timeout_ticks;
   19766:	f143 0300 	adc.w	r3, r3, #0
   1976a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    if (p_t->repeat_period)
   1976e:	b101      	cbz	r1, 19772 <app_timer_start+0x4a>
        p_t->repeat_period = timeout_ticks;
   19770:	6125      	str	r5, [r4, #16]
    p_req = nrf_atfifo_item_alloc(m_req_fifo, &fifo_ctx);
   19772:	480f      	ldr	r0, [pc, #60]	; (197b0 <app_timer_start+0x88>)
   19774:	a901      	add	r1, sp, #4
   19776:	f000 f9bd 	bl	19af4 <nrf_atfifo_item_alloc>
    if (p_req)
   1977a:	b148      	cbz	r0, 19790 <app_timer_start+0x68>
        p_req->type    = type;
   1977c:	2500      	movs	r5, #0
        p_req->p_timer = p_timer;
   1977e:	6044      	str	r4, [r0, #4]
        p_req->type    = type;
   19780:	7005      	strb	r5, [r0, #0]
        if (nrf_atfifo_item_put(m_req_fifo, &fifo_ctx))
   19782:	a901      	add	r1, sp, #4
   19784:	480a      	ldr	r0, [pc, #40]	; (197b0 <app_timer_start+0x88>)
   19786:	f000 f9e3 	bl	19b50 <nrf_atfifo_item_put>
   1978a:	b920      	cbnz	r0, 19796 <app_timer_start+0x6e>
}
   1978c:	b003      	add	sp, #12
   1978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRF_ERROR_NO_MEM;
   19790:	2004      	movs	r0, #4
}
   19792:	b003      	add	sp, #12
   19794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drv_rtc_irq_trigger(&m_rtc_inst);
   19796:	4803      	ldr	r0, [pc, #12]	; (197a4 <app_timer_start+0x7c>)
   19798:	f000 f97c 	bl	19a94 <drv_rtc_irq_trigger>
        return NRF_SUCCESS;
   1979c:	4628      	mov	r0, r5
}
   1979e:	b003      	add	sp, #12
   197a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   197a2:	bf00      	nop
   197a4:	20001118 	.word	0x20001118
   197a8:	200011d8 	.word	0x200011d8
   197ac:	20001250 	.word	0x20001250
   197b0:	2000123c 	.word	0x2000123c

000197b4 <app_timer_cnt_get>:
    return drv_rtc_counter_get(&m_rtc_inst);
   197b4:	4801      	ldr	r0, [pc, #4]	; (197bc <app_timer_cnt_get+0x8>)
   197b6:	f000 b969 	b.w	19a8c <drv_rtc_counter_get>
   197ba:	bf00      	nop
   197bc:	20001118 	.word	0x20001118

000197c0 <app_util_critical_region_enter>:
        __enable_irq();
    }
}

void app_util_critical_region_enter(uint8_t *p_nested)
{
   197c0:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   197c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   197c6:	b672      	cpsid	i
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)
{
  int was_masked = __sd_nvic_irq_disable();
  if (!nrf_nvic_state.__cr_flag)
   197c8:	4b0d      	ldr	r3, [pc, #52]	; (19800 <app_util_critical_region_enter+0x40>)
   197ca:	689a      	ldr	r2, [r3, #8]
   197cc:	b9aa      	cbnz	r2, 197fa <app_util_critical_region_enter+0x3a>
  {
    nrf_nvic_state.__cr_flag = 1;
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   197ce:	490d      	ldr	r1, [pc, #52]	; (19804 <app_util_critical_region_enter+0x44>)
   197d0:	4e0d      	ldr	r6, [pc, #52]	; (19808 <app_util_critical_region_enter+0x48>)
    nrf_nvic_state.__cr_flag = 1;
   197d2:	2501      	movs	r5, #1
   197d4:	609d      	str	r5, [r3, #8]
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   197d6:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
   197da:	4035      	ands	r5, r6
   197dc:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0] = __NRF_NVIC_APP_IRQS_0;
   197de:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
    nrf_nvic_state.__irq_masks[1] = ( NVIC->ICER[1] & __NRF_NVIC_APP_IRQS_1 );
   197e2:	f8d1 5084 	ldr.w	r5, [r1, #132]	; 0x84
   197e6:	605d      	str	r5, [r3, #4]
    NVIC->ICER[1] = __NRF_NVIC_APP_IRQS_1;
   197e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   197ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    *p_is_nested_critical_region = 0;
   197f0:	7002      	strb	r2, [r0, #0]
  }
  else
  {
    *p_is_nested_critical_region = 1;
  }
  if (!was_masked)
   197f2:	b904      	cbnz	r4, 197f6 <app_util_critical_region_enter+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   197f4:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_enter(p_nested);
#else
    app_util_disable_irq();
#endif
}
   197f6:	bc70      	pop	{r4, r5, r6}
   197f8:	4770      	bx	lr
    *p_is_nested_critical_region = 1;
   197fa:	2301      	movs	r3, #1
   197fc:	7003      	strb	r3, [r0, #0]
   197fe:	e7f8      	b.n	197f2 <app_util_critical_region_enter+0x32>
   19800:	20001604 	.word	0x20001604
   19804:	e000e100 	.word	0xe000e100
   19808:	bdff06fc 	.word	0xbdff06fc

0001980c <app_util_critical_region_exit>:
  return NRF_SUCCESS;
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)
{
  if (nrf_nvic_state.__cr_flag && (is_nested_critical_region == 0))
   1980c:	4b09      	ldr	r3, [pc, #36]	; (19834 <app_util_critical_region_exit+0x28>)
   1980e:	689a      	ldr	r2, [r3, #8]
   19810:	b172      	cbz	r2, 19830 <app_util_critical_region_exit+0x24>
   19812:	b968      	cbnz	r0, 19830 <app_util_critical_region_exit+0x24>

void app_util_critical_region_exit(uint8_t nested)
{
   19814:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19816:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1981a:	b672      	cpsid	i
  {
    int was_masked = __sd_nvic_irq_disable();
    NVIC->ISER[0] = nrf_nvic_state.__irq_masks[0];
   1981c:	4a06      	ldr	r2, [pc, #24]	; (19838 <app_util_critical_region_exit+0x2c>)
   1981e:	681c      	ldr	r4, [r3, #0]
   19820:	6014      	str	r4, [r2, #0]
    NVIC->ISER[1] = nrf_nvic_state.__irq_masks[1];
   19822:	685c      	ldr	r4, [r3, #4]
   19824:	6054      	str	r4, [r2, #4]
    nrf_nvic_state.__cr_flag = 0;
   19826:	6098      	str	r0, [r3, #8]
    if (!was_masked)
   19828:	b901      	cbnz	r1, 1982c <app_util_critical_region_exit+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
   1982a:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_exit(nested);
#else
    app_util_enable_irq();
#endif
}
   1982c:	bc10      	pop	{r4}
   1982e:	4770      	bx	lr
   19830:	4770      	bx	lr
   19832:	bf00      	nop
   19834:	20001604 	.word	0x20001604
   19838:	e000e100 	.word	0xe000e100

0001983c <drv_rtc_init>:
#define COUNTER_TO_CC_MIN_DISTANCE 2

ret_code_t drv_rtc_init(drv_rtc_t const * const  p_instance,
                        drv_rtc_config_t const * p_config,
                        drv_rtc_handler_t        handler)
{
   1983c:	b470      	push	{r4, r5, r6}

    ret_code_t err_code;

    m_handlers[p_instance->instance_id] = handler;

    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   1983e:	4c1c      	ldr	r4, [pc, #112]	; (198b0 <drv_rtc_init+0x74>)
    m_handlers[p_instance->instance_id] = handler;
   19840:	7943      	ldrb	r3, [r0, #5]
   19842:	4e1c      	ldr	r6, [pc, #112]	; (198b4 <drv_rtc_init+0x78>)
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   19844:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
    m_handlers[p_instance->instance_id] = handler;
   19848:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   1984c:	792d      	ldrb	r5, [r5, #4]
   1984e:	bb65      	cbnz	r5, 198aa <drv_rtc_init+0x6e>
        err_code = NRF_ERROR_INVALID_STATE;
        NRF_LOG_WARNING("RTC instance already initialized.");
        return err_code;
    }

    nrf_rtc_prescaler_set(p_instance->p_reg, p_config->prescaler);
   19850:	6803      	ldr	r3, [r0, #0]
   19852:	880a      	ldrh	r2, [r1, #0]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   19854:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRFX_IRQ_PRIORITY_SET(p_instance->irq, p_config->interrupt_priority);
   19858:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1985c:	788a      	ldrb	r2, [r1, #2]
  if ((int32_t)(IRQn) < 0)
   1985e:	2b00      	cmp	r3, #0
   19860:	db1b      	blt.n	1989a <drv_rtc_init+0x5e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19862:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19866:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1986a:	0152      	lsls	r2, r2, #5
   1986c:	b2d2      	uxtb	r2, r2
   1986e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NRFX_IRQ_ENABLE(p_instance->irq);
   19872:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19876:	4d10      	ldr	r5, [pc, #64]	; (198b8 <drv_rtc_init+0x7c>)
   19878:	f003 021f 	and.w	r2, r3, #31
   1987c:	2101      	movs	r1, #1
   1987e:	095b      	lsrs	r3, r3, #5
   19880:	fa01 f202 	lsl.w	r2, r1, r2
   19884:	f845 2023 	str.w	r2, [r5, r3, lsl #2]

    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   19888:	7943      	ldrb	r3, [r0, #5]
   1988a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    m_cb[p_instance->instance_id].p_instance = p_instance;
   1988e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   19892:	7111      	strb	r1, [r2, #4]

    err_code = NRF_SUCCESS;
    NRF_LOG_INFO("RTC: initialized.");
    return err_code;
   19894:	2000      	movs	r0, #0
}
   19896:	bc70      	pop	{r4, r5, r6}
   19898:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1989a:	4908      	ldr	r1, [pc, #32]	; (198bc <drv_rtc_init+0x80>)
   1989c:	f003 030f 	and.w	r3, r3, #15
   198a0:	0152      	lsls	r2, r2, #5
   198a2:	4419      	add	r1, r3
   198a4:	b2d2      	uxtb	r2, r2
   198a6:	760a      	strb	r2, [r1, #24]
   198a8:	e7e3      	b.n	19872 <drv_rtc_init+0x36>
        return err_code;
   198aa:	2008      	movs	r0, #8
}
   198ac:	bc70      	pop	{r4, r5, r6}
   198ae:	4770      	bx	lr
   198b0:	2000125c 	.word	0x2000125c
   198b4:	20001264 	.word	0x20001264
   198b8:	e000e100 	.word	0xe000e100
   198bc:	e000ecfc 	.word	0xe000ecfc

000198c0 <drv_rtc_start>:
}

void drv_rtc_start(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_START);
   198c0:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   198c2:	2201      	movs	r2, #1
   198c4:	601a      	str	r2, [r3, #0]
}
   198c6:	4770      	bx	lr

000198c8 <drv_rtc_stop>:
   198c8:	6803      	ldr	r3, [r0, #0]
   198ca:	2201      	movs	r2, #1
   198cc:	605a      	str	r2, [r3, #4]

void drv_rtc_stop(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_STOP);
}
   198ce:	4770      	bx	lr

000198d0 <drv_rtc_compare_set>:

void drv_rtc_compare_set(drv_rtc_t const * const p_instance,
                         uint32_t                cc,
                         uint32_t                abs_value,
                         bool                    irq_enable)
{
   198d0:	b4f0      	push	{r4, r5, r6, r7}
    ASSERT(p_instance);
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
    abs_value &= RTC_COUNTER_COUNTER_Msk;

    nrf_rtc_int_disable(p_instance->p_reg, cc_int_mask);
   198d2:	6804      	ldr	r4, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   198d4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
   198d8:	408d      	lsls	r5, r1
    p_reg->INTENCLR = mask;
   198da:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    nrf_rtc_event_disable(p_instance->p_reg, cc_int_mask);
   198de:	6806      	ldr	r6, [r0, #0]
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
   198e0:	f101 0450 	add.w	r4, r1, #80	; 0x50
    p_reg->EVTENSET = mask;
}

__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   198e4:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
   198e8:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   198ea:	6806      	ldr	r6, [r0, #0]
   198ec:	b2a4      	uxth	r4, r4
   198ee:	2700      	movs	r7, #0
   198f0:	5137      	str	r7, [r6, r4]
{
   198f2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   198f4:	5936      	ldr	r6, [r6, r4]
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    nrf_rtc_cc_set(p_instance->p_reg, cc,abs_value);
   198f6:	6804      	ldr	r4, [r0, #0]
   198f8:	9601      	str	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   198fa:	f501 71a8 	add.w	r1, r1, #336	; 0x150
    abs_value &= RTC_COUNTER_COUNTER_Msk;
   198fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    (void)dummy;
   19902:	9e01      	ldr	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   19904:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);
   19908:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   1990a:	f8c2 5344 	str.w	r5, [r2, #836]	; 0x344

    if (irq_enable)
   1990e:	b113      	cbz	r3, 19916 <drv_rtc_compare_set+0x46>
    {
        nrf_rtc_int_enable(p_instance->p_reg, cc_int_mask);
   19910:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
   19912:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    }
}
   19916:	b002      	add	sp, #8
   19918:	bcf0      	pop	{r4, r5, r6, r7}
   1991a:	4770      	bx	lr

0001991c <drv_rtc_windowed_compare_set>:

ret_code_t drv_rtc_windowed_compare_set(drv_rtc_t const * const p_instance,
                                        uint32_t                cc,
                                        uint32_t                abs_value,
                                        uint32_t                safe_window)
{
   1991c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19920:	460d      	mov	r5, r1
    ASSERT(p_instance);
    uint32_t        prev_cc_set;
    uint32_t        now;
    uint32_t        diff;
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   19922:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   19926:	6801      	ldr	r1, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   19928:	40af      	lsls	r7, r5
    p_reg->EVTENCLR = mask;
   1992a:	f8c1 7348 	str.w	r7, [r1, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   1992e:	6801      	ldr	r1, [r0, #0]
    p_reg->INTENCLR = mask;
   19930:	f8c1 7308 	str.w	r7, [r1, #776]	; 0x308
     * - read previous CC
     * - write current counter value to CC (furtherest in future)
     * - if previous CC was in one tick from now wait half of the 32k tick and clear event which
     *   may be set. Half tick delay is used because CC is latched in the middle of the 32k tick.
     */
    now = nrf_rtc_counter_get(p_instance->p_reg);
   19934:	6801      	ldr	r1, [r0, #0]
{
   19936:	4604      	mov	r4, r0
   19938:	eb01 0085 	add.w	r0, r1, r5, lsl #2
     return p_reg->COUNTER;
   1993c:	f8d1 c504 	ldr.w	ip, [r1, #1284]	; 0x504
    return p_reg->CC[ch];
   19940:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    p_reg->CC[ch] = cc_val;
   19944:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);;
   19948:	f105 0650 	add.w	r6, r5, #80	; 0x50
   1994c:	00b6      	lsls	r6, r6, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1994e:	6820      	ldr	r0, [r4, #0]
   19950:	b2b6      	uxth	r6, r6
   19952:	f04f 0900 	mov.w	r9, #0
   19956:	f840 9006 	str.w	r9, [r0, r6]
{
   1995a:	b082      	sub	sp, #8
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   1995c:	eba1 010c 	sub.w	r1, r1, ip
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19960:	5980      	ldr	r0, [r0, r6]
   19962:	9000      	str	r0, [sp, #0]
   19964:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    prev_cc_set = nrf_rtc_cc_get(p_instance->p_reg, cc);
    nrf_rtc_cc_set(p_instance->p_reg, cc, now);
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);

    if (ticks_sub(prev_cc_set, now) == 1)
   19968:	2901      	cmp	r1, #1
{
   1996a:	469a      	mov	sl, r3
    abs_value &=RTC_COUNTER_COUNTER_Msk;
   1996c:	f022 487f 	bic.w	r8, r2, #4278190080	; 0xff000000
    (void)dummy;
   19970:	9b00      	ldr	r3, [sp, #0]
    if (ticks_sub(prev_cc_set, now) == 1)
   19972:	d045      	beq.n	19a00 <drv_rtc_windowed_compare_set+0xe4>
    {
        nrf_delay_us(16);
        nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    }

    now = nrf_rtc_counter_get(p_instance->p_reg);
   19974:	6823      	ldr	r3, [r4, #0]
     return p_reg->COUNTER;
   19976:	f8d3 6504 	ldr.w	r6, [r3, #1284]	; 0x504
    p_reg->EVTENSET = mask;
   1997a:	f8c3 7344 	str.w	r7, [r3, #836]	; 0x344
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   1997e:	eba8 0306 	sub.w	r3, r8, r6
   19982:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);

    /* Setting CC for +1 from now may not generate event. In that case set CC+2 and check if counter
     * changed during that process. If changed it means that 1 tick expired. */
    if (diff == 1)
   19986:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   19988:	f505 75a8 	add.w	r5, r5, #336	; 0x150
   1998c:	d027      	beq.n	199de <drv_rtc_windowed_compare_set+0xc2>
        {
            /* one tick elapsed already. */
            return NRF_ERROR_TIMEOUT;
        }
    } else {
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value);
   1998e:	6823      	ldr	r3, [r4, #0]
   19990:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
        now = nrf_rtc_counter_get(p_instance->p_reg);
   19994:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   19996:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   1999a:	eba8 0200 	sub.w	r2, r8, r0
        diff = ticks_sub(abs_value - 1, now);
        /* Check if counter equals cc value or is behind in the safe window. If yes it means that
         * CC expired. */
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   1999e:	f1ca 13ff 	rsb	r3, sl, #16711935	; 0xff00ff
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199a2:	3a01      	subs	r2, #1
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   199a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   199a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   199ac:	4293      	cmp	r3, r2
   199ae:	d312      	bcc.n	199d6 <drv_rtc_windowed_compare_set+0xba>
        {
            return NRF_ERROR_TIMEOUT;
        }
        else if (diff == 0)
   199b0:	b142      	cbz	r2, 199c4 <drv_rtc_windowed_compare_set+0xa8>
    p_reg->EVTENSET = mask;
   199b2:	f8c1 7344 	str.w	r7, [r1, #836]	; 0x344
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   199b6:	6823      	ldr	r3, [r4, #0]
        }
    }

    evt_enable(p_instance, cc_int_mask, true);

    return NRF_SUCCESS;
   199b8:	2000      	movs	r0, #0
    p_reg->INTENSET = mask;
   199ba:	f8c3 7304 	str.w	r7, [r3, #772]	; 0x304
}
   199be:	b002      	add	sp, #8
   199c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   199c4:	f108 0201 	add.w	r2, r8, #1
    p_reg->CC[ch] = cc_val;
   199c8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
            if (now != nrf_rtc_counter_get(p_instance->p_reg))
   199cc:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   199ce:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
   199d2:	4298      	cmp	r0, r3
   199d4:	d0ed      	beq.n	199b2 <drv_rtc_windowed_compare_set+0x96>
            return NRF_ERROR_TIMEOUT;
   199d6:	200d      	movs	r0, #13
}
   199d8:	b002      	add	sp, #8
   199da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   199de:	6820      	ldr	r0, [r4, #0]
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   199e0:	4b0e      	ldr	r3, [pc, #56]	; (19a1c <drv_rtc_windowed_compare_set+0x100>)
   199e2:	f108 0201 	add.w	r2, r8, #1
    p_reg->CC[ch] = cc_val;
   199e6:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   199ea:	f043 0301 	orr.w	r3, r3, #1
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   199ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
   199f2:	4798      	blx	r3
        if (now != nrf_rtc_counter_get(p_instance->p_reg))
   199f4:	6821      	ldr	r1, [r4, #0]
     return p_reg->COUNTER;
   199f6:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
   199fa:	429e      	cmp	r6, r3
   199fc:	d0d9      	beq.n	199b2 <drv_rtc_windowed_compare_set+0x96>
   199fe:	e7ea      	b.n	199d6 <drv_rtc_windowed_compare_set+0xba>
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   19a00:	4b06      	ldr	r3, [pc, #24]	; (19a1c <drv_rtc_windowed_compare_set+0x100>)
    delay_cycles(cycles);
   19a02:	f44f 6080 	mov.w	r0, #1024	; 0x400
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   19a06:	f043 0301 	orr.w	r3, r3, #1
    delay_cycles(cycles);
   19a0a:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19a0c:	6823      	ldr	r3, [r4, #0]
   19a0e:	f843 9006 	str.w	r9, [r3, r6]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19a12:	599b      	ldr	r3, [r3, r6]
   19a14:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19a16:	9b01      	ldr	r3, [sp, #4]
}
   19a18:	e7ac      	b.n	19974 <drv_rtc_windowed_compare_set+0x58>
   19a1a:	bf00      	nop
   19a1c:	0001e4e0 	.word	0x0001e4e0

00019a20 <drv_rtc_overflow_enable>:
    nrf_rtc_event_enable(p_instance->p_reg, mask);
   19a20:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   19a22:	2302      	movs	r3, #2
   19a24:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    if (irq_enable)
   19a28:	b111      	cbz	r1, 19a30 <drv_rtc_overflow_enable+0x10>
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   19a2a:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENSET = mask;
   19a2c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

void drv_rtc_overflow_enable(drv_rtc_t const * const p_instance, bool irq_enable)
{
    evt_enable(p_instance, NRF_RTC_INT_OVERFLOW_MASK, irq_enable);
}
   19a30:	4770      	bx	lr
   19a32:	bf00      	nop

00019a34 <drv_rtc_overflow_pending>:
    evt_disable(p_instance, NRF_RTC_INT_OVERFLOW_MASK);
}

bool drv_rtc_overflow_pending(drv_rtc_t const * const p_instance)
{
    return evt_pending(p_instance, NRF_RTC_EVENT_OVERFLOW);
   19a34:	6803      	ldr	r3, [r0, #0]
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a36:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   19a3a:	b900      	cbnz	r0, 19a3e <drv_rtc_overflow_pending+0xa>
}
   19a3c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19a3e:	2200      	movs	r2, #0
{
   19a40:	b082      	sub	sp, #8
   19a42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19a46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   19a4a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19a4c:	9b01      	ldr	r3, [sp, #4]
        return true;
   19a4e:	2001      	movs	r0, #1
}
   19a50:	b002      	add	sp, #8
   19a52:	4770      	bx	lr

00019a54 <drv_rtc_compare_disable>:
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   19a54:	6802      	ldr	r2, [r0, #0]
    evt_enable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc, irq_enable);
}

void drv_rtc_compare_disable(drv_rtc_t const * const p_instance, uint32_t cc)
{
    evt_disable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc);
   19a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19a5a:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->EVTENCLR = mask;
   19a5e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   19a62:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   19a64:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
}
   19a68:	4770      	bx	lr
   19a6a:	bf00      	nop

00019a6c <drv_rtc_compare_pending>:

bool drv_rtc_compare_pending(drv_rtc_t const * const p_instance, uint32_t cc)
{
    nrf_rtc_event_t cc_evt = CC_IDX_TO_CC_EVENT(cc);
   19a6c:	3150      	adds	r1, #80	; 0x50
   19a6e:	0089      	lsls	r1, r1, #2
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a70:	6803      	ldr	r3, [r0, #0]
   19a72:	b289      	uxth	r1, r1
   19a74:	5858      	ldr	r0, [r3, r1]
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   19a76:	b900      	cbnz	r0, 19a7a <drv_rtc_compare_pending+0xe>
    return evt_pending(p_instance, cc_evt);
}
   19a78:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19a7a:	2200      	movs	r2, #0
   19a7c:	505a      	str	r2, [r3, r1]
{
   19a7e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   19a80:	585b      	ldr	r3, [r3, r1]
   19a82:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19a84:	9b01      	ldr	r3, [sp, #4]
        return true;
   19a86:	2001      	movs	r0, #1
}
   19a88:	b002      	add	sp, #8
   19a8a:	4770      	bx	lr

00019a8c <drv_rtc_counter_get>:

uint32_t drv_rtc_counter_get(drv_rtc_t const * const p_instance)
{
    return nrf_rtc_counter_get(p_instance->p_reg);
   19a8c:	6803      	ldr	r3, [r0, #0]
     return p_reg->COUNTER;
   19a8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   19a92:	4770      	bx	lr

00019a94 <drv_rtc_irq_trigger>:

void drv_rtc_irq_trigger(drv_rtc_t const * const p_instance)
{
    NVIC_SetPendingIRQ(p_instance->irq);
   19a94:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19a98:	4805      	ldr	r0, [pc, #20]	; (19ab0 <drv_rtc_irq_trigger+0x1c>)
   19a9a:	095a      	lsrs	r2, r3, #5
   19a9c:	2101      	movs	r1, #1
   19a9e:	3240      	adds	r2, #64	; 0x40
   19aa0:	f003 031f 	and.w	r3, r3, #31
   19aa4:	fa01 f303 	lsl.w	r3, r1, r3
   19aa8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   19aac:	4770      	bx	lr
   19aae:	bf00      	nop
   19ab0:	e000e100 	.word	0xe000e100

00019ab4 <RTC1_IRQHandler>:
#endif

#if defined(APP_TIMER_V2_RTC1_ENABLED)
void drv_rtc_rtc_1_irq_handler(void)
{
    m_handlers[DRV_RTC_RTC1_INST_IDX](m_cb[DRV_RTC_RTC1_INST_IDX].p_instance);
   19ab4:	4a02      	ldr	r2, [pc, #8]	; (19ac0 <RTC1_IRQHandler+0xc>)
   19ab6:	4b03      	ldr	r3, [pc, #12]	; (19ac4 <RTC1_IRQHandler+0x10>)
   19ab8:	6810      	ldr	r0, [r2, #0]
   19aba:	681b      	ldr	r3, [r3, #0]
   19abc:	4718      	bx	r3
   19abe:	bf00      	nop
   19ac0:	2000125c 	.word	0x2000125c
   19ac4:	20001264 	.word	0x20001264

00019ac8 <nrf_atfifo_init>:
STATIC_ASSERT(sizeof(nrf_atfifo_postag_t) == sizeof(uint32_t));


ret_code_t nrf_atfifo_init(nrf_atfifo_t * const p_fifo, void * p_buf, uint16_t buf_size, uint16_t item_size)
{
    if (NULL == p_buf)
   19ac8:	b189      	cbz	r1, 19aee <nrf_atfifo_init+0x26>
{
   19aca:	b430      	push	{r4, r5}
    {
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. p_buf == NULL");
        return NRF_ERROR_NULL;
    }
    if (0 != (buf_size % item_size))
   19acc:	fbb2 f4f3 	udiv	r4, r2, r3
   19ad0:	fb03 2414 	mls	r4, r3, r4, r2
   19ad4:	4605      	mov	r5, r0
   19ad6:	b2a0      	uxth	r0, r4
   19ad8:	b930      	cbnz	r0, 19ae8 <nrf_atfifo_init+0x20>
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. Buf_size not multiple of item_size");
        return NRF_ERROR_INVALID_LENGTH;
    }

    p_fifo->p_buf     = p_buf;
    p_fifo->tail.tag  = 0;
   19ada:	e9c5 1000 	strd	r1, r0, [r5]
    p_fifo->head.tag  = 0;
   19ade:	60a8      	str	r0, [r5, #8]
    p_fifo->buf_size  = buf_size;
   19ae0:	81aa      	strh	r2, [r5, #12]
    p_fifo->item_size = item_size;
   19ae2:	81eb      	strh	r3, [r5, #14]

    NRF_LOG_INST_INFO(p_fifo->p_log, "Initialized.");
    return NRF_SUCCESS;
}
   19ae4:	bc30      	pop	{r4, r5}
   19ae6:	4770      	bx	lr
        return NRF_ERROR_INVALID_LENGTH;
   19ae8:	2009      	movs	r0, #9
}
   19aea:	bc30      	pop	{r4, r5}
   19aec:	4770      	bx	lr
        return NRF_ERROR_NULL;
   19aee:	200e      	movs	r0, #14
}
   19af0:	4770      	bx	lr
   19af2:	bf00      	nop

00019af4 <nrf_atfifo_item_alloc>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_alloc(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
   19af4:	b430      	push	{r4, r5}
   19af6:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_tail;
    uint32_t new_tail;
    uint32_t temp;

    __ASM volatile(
   19af8:	e850 3f01 	ldrex	r3, [r0, #4]
   19afc:	b29d      	uxth	r5, r3
   19afe:	89c4      	ldrh	r4, [r0, #14]
   19b00:	4425      	add	r5, r4
   19b02:	8984      	ldrh	r4, [r0, #12]
   19b04:	42a5      	cmp	r5, r4
   19b06:	bf28      	it	cs
   19b08:	1b2d      	subcs	r5, r5, r4
   19b0a:	8904      	ldrh	r4, [r0, #8]
   19b0c:	42a5      	cmp	r5, r4
   19b0e:	bf02      	ittt	eq
   19b10:	f3bf 8f2f 	clrexeq
   19b14:	2200      	moveq	r2, #0
   19b16:	e007      	beq.n	19b28 <nrf_atfifo_item_alloc+0x34>
   19b18:	eac5 0503 	pkhbt	r5, r5, r3
   19b1c:	e840 5401 	strex	r4, r5, [r0, #4]
   19b20:	2c00      	cmp	r4, #0
   19b22:	d1e9      	bne.n	19af8 <nrf_atfifo_item_alloc+0x4>
   19b24:	f04f 0201 	mov.w	r2, #1
   19b28:	f88d 2003 	strb.w	r2, [sp, #3]
   19b2c:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_tail->tag = old_tail;
   19b2e:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_tail);
    UNUSED_VARIABLE(temp);
    return ret;
   19b30:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_tail->tag = old_tail;
   19b34:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_wspace_req(p_fifo, &(p_context->last_tail)))
   19b36:	b12a      	cbz	r2, 19b44 <nrf_atfifo_item_alloc+0x50>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_tail.pos.wr;
   19b38:	880b      	ldrh	r3, [r1, #0]
   19b3a:	6800      	ldr	r0, [r0, #0]
   19b3c:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Allocated  element (0x%08X).", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Allocation failed - no space.");
    return NULL;
}
   19b3e:	b002      	add	sp, #8
   19b40:	bc30      	pop	{r4, r5}
   19b42:	4770      	bx	lr
   19b44:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   19b48:	4618      	mov	r0, r3
}
   19b4a:	b002      	add	sp, #8
   19b4c:	bc30      	pop	{r4, r5}
   19b4e:	4770      	bx	lr

00019b50 <nrf_atfifo_item_put>:


bool nrf_atfifo_item_put(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
    if ((p_context->last_tail.pos.wr) == (p_context->last_tail.pos.rd))
   19b50:	880a      	ldrh	r2, [r1, #0]
   19b52:	884b      	ldrh	r3, [r1, #2]
   19b54:	429a      	cmp	r2, r3
   19b56:	d001      	beq.n	19b5c <nrf_atfifo_item_put+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (uninterrupted)");
        nrf_atfifo_wspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (interrupted!)");
    return false;
   19b58:	2000      	movs	r0, #0
}
   19b5a:	4770      	bx	lr
void nrf_atfifo_wspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_tail;

    __ASM volatile(
   19b5c:	e850 2f01 	ldrex	r2, [r0, #4]
   19b60:	eac2 4202 	pkhbt	r2, r2, r2, lsl #16
   19b64:	e840 2301 	strex	r3, r2, [r0, #4]
   19b68:	2b00      	cmp	r3, #0
   19b6a:	d1f7      	bne.n	19b5c <nrf_atfifo_item_put+0xc>
   19b6c:	2001      	movs	r0, #1
   19b6e:	4770      	bx	lr

00019b70 <nrf_atfifo_item_get>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_get(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
   19b70:	b430      	push	{r4, r5}
   19b72:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_head;
    uint32_t new_head;
    uint32_t temp;

    __ASM volatile(
   19b74:	e850 3f02 	ldrex	r3, [r0, #8]
   19b78:	fa1f f5a3 	uxth.w	r5, r3, ror #16
   19b7c:	88c4      	ldrh	r4, [r0, #6]
   19b7e:	42a5      	cmp	r5, r4
   19b80:	bf02      	ittt	eq
   19b82:	f3bf 8f2f 	clrexeq
   19b86:	2200      	moveq	r2, #0
   19b88:	e00d      	beq.n	19ba6 <nrf_atfifo_item_get+0x36>
   19b8a:	89c4      	ldrh	r4, [r0, #14]
   19b8c:	4425      	add	r5, r4
   19b8e:	8984      	ldrh	r4, [r0, #12]
   19b90:	42a5      	cmp	r5, r4
   19b92:	bf28      	it	cs
   19b94:	1b2d      	subcs	r5, r5, r4
   19b96:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
   19b9a:	e840 5402 	strex	r4, r5, [r0, #8]
   19b9e:	2c00      	cmp	r4, #0
   19ba0:	d1e8      	bne.n	19b74 <nrf_atfifo_item_get+0x4>
   19ba2:	f04f 0201 	mov.w	r2, #1
   19ba6:	f88d 2003 	strb.w	r2, [sp, #3]
   19baa:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_head->tag = old_head;
   19bac:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_head);
    UNUSED_VARIABLE(temp);
    return ret;
   19bae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_head->tag = old_head;
   19bb2:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_rspace_req(p_fifo, &(p_context->last_head)))
   19bb4:	b12a      	cbz	r2, 19bc2 <nrf_atfifo_item_get+0x52>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_head.pos.rd;
   19bb6:	884b      	ldrh	r3, [r1, #2]
   19bb8:	6800      	ldr	r0, [r0, #0]
   19bba:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Get element: 0x%08X", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Get failed - no item in the FIFO.");
    return NULL;
}
   19bbc:	b002      	add	sp, #8
   19bbe:	bc30      	pop	{r4, r5}
   19bc0:	4770      	bx	lr
   19bc2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   19bc6:	4618      	mov	r0, r3
}
   19bc8:	b002      	add	sp, #8
   19bca:	bc30      	pop	{r4, r5}
   19bcc:	4770      	bx	lr
   19bce:	bf00      	nop

00019bd0 <nrf_atfifo_item_free>:


bool nrf_atfifo_item_free(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
    if ((p_context->last_head.pos.wr) == (p_context->last_head.pos.rd))
   19bd0:	880a      	ldrh	r2, [r1, #0]
   19bd2:	884b      	ldrh	r3, [r1, #2]
   19bd4:	429a      	cmp	r2, r3
   19bd6:	d001      	beq.n	19bdc <nrf_atfifo_item_free+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (uninterrupted)");
        nrf_atfifo_rspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (interrupted)");
    return false;
   19bd8:	2000      	movs	r0, #0
}
   19bda:	4770      	bx	lr
void nrf_atfifo_rspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_head;

    __ASM volatile(
   19bdc:	e850 2f02 	ldrex	r2, [r0, #8]
   19be0:	eac2 4222 	pkhtb	r2, r2, r2, asr #16
   19be4:	e840 2302 	strex	r3, r2, [r0, #8]
   19be8:	2b00      	cmp	r3, #0
   19bea:	d1f7      	bne.n	19bdc <nrf_atfifo_item_free+0xc>
   19bec:	2001      	movs	r0, #1
   19bee:	4770      	bx	lr

00019bf0 <sd_app_evt_wait>:
 *
 * @post An application interrupt has happened or a interrupt pending flag is set.
 *
 * @retval ::NRF_SUCCESS
 */
SVCALL(SD_APP_EVT_WAIT, uint32_t, sd_app_evt_wait(void));
   19bf0:	df41      	svc	65	; 0x41
   19bf2:	4770      	bx	lr

00019bf4 <nrf_pwr_mgmt_init>:

ret_code_t nrf_pwr_mgmt_init(void)
{
    NRF_LOG_INFO("Init");

    m_shutdown_started = false;
   19bf4:	4a06      	ldr	r2, [pc, #24]	; (19c10 <nrf_pwr_mgmt_init+0x1c>)

__STATIC_INLINE void nrf_mtx_init(nrf_mtx_t * p_mtx)
{
    ASSERT(p_mtx  != NULL);

    *p_mtx = NRF_MTX_UNLOCKED;
   19bf6:	4b07      	ldr	r3, [pc, #28]	; (19c14 <nrf_pwr_mgmt_init+0x20>)
{
   19bf8:	b510      	push	{r4, lr}
    m_shutdown_started = false;
   19bfa:	2400      	movs	r4, #0
   19bfc:	7014      	strb	r4, [r2, #0]
   19bfe:	601c      	str	r4, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   19c00:	f3bf 8f5f 	dmb	sy
    nrf_mtx_init(&m_sysoff_mtx);
    nrf_section_iter_init(&m_handlers_iter, &pwr_mgmt_data);
   19c04:	4904      	ldr	r1, [pc, #16]	; (19c18 <nrf_pwr_mgmt_init+0x24>)
   19c06:	4805      	ldr	r0, [pc, #20]	; (19c1c <nrf_pwr_mgmt_init+0x28>)
   19c08:	f000 f816 	bl	19c38 <nrf_section_iter_init>
    PWR_MGMT_DEBUG_PINS_INIT();
    PWR_MGMT_STANDBY_TIMEOUT_INIT();
    PWR_MGMT_CPU_USAGE_MONITOR_INIT();

    return PWR_MGMT_TIMER_CREATE();
}
   19c0c:	4620      	mov	r0, r4
   19c0e:	bd10      	pop	{r4, pc}
   19c10:	20001270 	.word	0x20001270
   19c14:	20001274 	.word	0x20001274
   19c18:	0001e4e8 	.word	0x0001e4e8
   19c1c:	20001268 	.word	0x20001268

00019c20 <nrf_pwr_mgmt_run>:

void nrf_pwr_mgmt_run(void)
{
   19c20:	b508      	push	{r3, lr}
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_ENTER();
    PWR_MGMT_DEBUG_PIN_SET();

    // Wait for an event.
#ifdef SOFTDEVICE_PRESENT
    if (nrf_sdh_is_enabled())
   19c22:	f002 fead 	bl	1c980 <nrf_sdh_is_enabled>
   19c26:	b918      	cbnz	r0, 19c30 <nrf_pwr_mgmt_run+0x10>
  __ASM volatile ("wfe");
   19c28:	bf20      	wfe
  __ASM volatile ("sev");
   19c2a:	bf40      	sev
  __ASM volatile ("wfe");
   19c2c:	bf20      	wfe
    }

    PWR_MGMT_DEBUG_PIN_CLEAR();
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_EXIT();
    PWR_MGMT_SLEEP_LOCK_RELEASE();
}
   19c2e:	bd08      	pop	{r3, pc}
   19c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ret_code_t ret_code = sd_app_evt_wait();
   19c34:	f7ff bfdc 	b.w	19bf0 <sd_app_evt_wait>

00019c38 <nrf_section_iter_init>:
void nrf_section_iter_init(nrf_section_iter_t * p_iter, nrf_section_set_t const * p_set)
{
    ASSERT(p_iter != NULL);
    ASSERT(p_set  != NULL);

    p_iter->p_set = p_set;
   19c38:	6001      	str	r1, [r0, #0]

#if defined(__GNUC__)
    p_iter->p_item = p_iter->p_set->section.p_start;
   19c3a:	680b      	ldr	r3, [r1, #0]
   19c3c:	6043      	str	r3, [r0, #4]
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   19c3e:	684a      	ldr	r2, [r1, #4]
   19c40:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19c42:	bf04      	itt	eq
   19c44:	2300      	moveq	r3, #0
   19c46:	6043      	streq	r3, [r0, #4]
    }
#else
    p_iter->p_section = p_set->p_first;
    nrf_section_iter_item_set(p_iter);
#endif
}
   19c48:	4770      	bx	lr
   19c4a:	bf00      	nop

00019c4c <nrf_section_iter_next>:
void nrf_section_iter_next(nrf_section_iter_t * p_iter)
{
    ASSERT(p_iter        != NULL);
    ASSERT(p_iter->p_set != NULL);

    if (p_iter->p_item == NULL)
   19c4c:	6843      	ldr	r3, [r0, #4]
   19c4e:	b143      	cbz	r3, 19c62 <nrf_section_iter_next+0x16>
    {
        return;
    }

    p_iter->p_item = (void *)((size_t)(p_iter->p_item) + p_iter->p_set->item_size);
   19c50:	6802      	ldr	r2, [r0, #0]
   19c52:	6891      	ldr	r1, [r2, #8]
   19c54:	440b      	add	r3, r1
   19c56:	6043      	str	r3, [r0, #4]

#if defined(__GNUC__)
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   19c58:	6852      	ldr	r2, [r2, #4]
   19c5a:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   19c5c:	bf04      	itt	eq
   19c5e:	2300      	moveq	r3, #0
   19c60:	6043      	streq	r3, [r0, #4]
    {
        p_iter->p_section++;
        nrf_section_iter_item_set(p_iter);
    }
#endif
}
   19c62:	4770      	bx	lr

00019c64 <nrf_sortlist_add>:
#endif // NRF_SORTLIST_CONFIG_LOG_ENABLED
#include "nrf_log.h"
NRF_LOG_MODULE_REGISTER();

void nrf_sortlist_add(nrf_sortlist_t const * p_list, nrf_sortlist_item_t * p_item)
{
   19c64:	b570      	push	{r4, r5, r6, lr}
    ASSERT(p_list);
    ASSERT(p_item);

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   19c66:	6844      	ldr	r4, [r0, #4]
{
   19c68:	4606      	mov	r6, r0

    while(*pp_curr != NULL)
   19c6a:	6820      	ldr	r0, [r4, #0]
{
   19c6c:	460d      	mov	r5, r1
    while(*pp_curr != NULL)
   19c6e:	b918      	cbnz	r0, 19c78 <nrf_sortlist_add+0x14>
   19c70:	e008      	b.n	19c84 <nrf_sortlist_add+0x20>
    {
        if(!(p_list->compare_func(*pp_curr, p_item)))
        {
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   19c72:	6824      	ldr	r4, [r4, #0]
    while(*pp_curr != NULL)
   19c74:	6820      	ldr	r0, [r4, #0]
   19c76:	b128      	cbz	r0, 19c84 <nrf_sortlist_add+0x20>
        if(!(p_list->compare_func(*pp_curr, p_item)))
   19c78:	68b3      	ldr	r3, [r6, #8]
   19c7a:	4629      	mov	r1, r5
   19c7c:	4798      	blx	r3
   19c7e:	2800      	cmp	r0, #0
   19c80:	d1f7      	bne.n	19c72 <nrf_sortlist_add+0xe>
   19c82:	6820      	ldr	r0, [r4, #0]
    }

    p_item->p_next = *pp_curr;
   19c84:	6028      	str	r0, [r5, #0]
    *pp_curr = p_item;
   19c86:	6025      	str	r5, [r4, #0]

    NRF_LOG_INFO("List:%s, adding element:%08X after:%08X, before:%08X",
                                  p_list->p_name, p_item, *pp_curr, p_item->p_next);
}
   19c88:	bd70      	pop	{r4, r5, r6, pc}
   19c8a:	bf00      	nop

00019c8c <nrf_sortlist_pop>:

nrf_sortlist_item_t * nrf_sortlist_pop(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    nrf_sortlist_item_t * ret = p_list->p_cb->p_head;
   19c8c:	6843      	ldr	r3, [r0, #4]
   19c8e:	6818      	ldr	r0, [r3, #0]
    if (p_list->p_cb->p_head != NULL)
   19c90:	b108      	cbz	r0, 19c96 <nrf_sortlist_pop+0xa>
    {
        p_list->p_cb->p_head = p_list->p_cb->p_head->p_next;
   19c92:	6802      	ldr	r2, [r0, #0]
   19c94:	601a      	str	r2, [r3, #0]
    }
    NRF_LOG_INFO("List:%s, poping element:%08X", p_list->p_name, ret);
    return ret;
}
   19c96:	4770      	bx	lr

00019c98 <nrf_sortlist_peek>:

nrf_sortlist_item_t const * nrf_sortlist_peek(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    return p_list->p_cb->p_head;
   19c98:	6843      	ldr	r3, [r0, #4]
}
   19c9a:	6818      	ldr	r0, [r3, #0]
   19c9c:	4770      	bx	lr
   19c9e:	bf00      	nop

00019ca0 <nrf_sortlist_remove>:
{
    ASSERT(p_list);
    ASSERT(p_item);
    bool ret = false;

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   19ca0:	6843      	ldr	r3, [r0, #4]
   19ca2:	6818      	ldr	r0, [r3, #0]

    while(*pp_curr != NULL)
   19ca4:	b918      	cbnz	r0, 19cae <nrf_sortlist_remove+0xe>
   19ca6:	e008      	b.n	19cba <nrf_sortlist_remove+0x1a>
        {
            *pp_curr = p_item->p_next;
            ret = true;
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   19ca8:	4603      	mov	r3, r0
   19caa:	6800      	ldr	r0, [r0, #0]
    while(*pp_curr != NULL)
   19cac:	b128      	cbz	r0, 19cba <nrf_sortlist_remove+0x1a>
        if(*pp_curr == p_item)
   19cae:	4281      	cmp	r1, r0
   19cb0:	d1fa      	bne.n	19ca8 <nrf_sortlist_remove+0x8>
            *pp_curr = p_item->p_next;
   19cb2:	680a      	ldr	r2, [r1, #0]
   19cb4:	601a      	str	r2, [r3, #0]
            ret = true;
   19cb6:	2001      	movs	r0, #1
            break;
   19cb8:	4770      	bx	lr
    }

    NRF_LOG_INFO("List:%s, removing element:%08X %s",
                                  p_list->p_name, p_item, ret ? "succeeded" : "not found");
    return ret;
}
   19cba:	4770      	bx	lr

00019cbc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19cbc:	b430      	push	{r4, r5}
    #endif
    
    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19cbe:	4b5f      	ldr	r3, [pc, #380]	; (19e3c <SystemInit+0x180>)
   19cc0:	4d5f      	ldr	r5, [pc, #380]	; (19e40 <SystemInit+0x184>)
   19cc2:	681a      	ldr	r2, [r3, #0]
    #endif
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19cc4:	4b5f      	ldr	r3, [pc, #380]	; (19e44 <SystemInit+0x188>)
    return true;
}

static bool errata_103(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19cc6:	4c60      	ldr	r4, [pc, #384]	; (19e48 <SystemInit+0x18c>)
        NRF_CLOCK->EVENTS_DONE = 0;
   19cc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19ccc:	f3c2 3242 	ubfx	r2, r2, #13, #3
   19cd0:	602a      	str	r2, [r5, #0]
        NRF_CLOCK->EVENTS_DONE = 0;
   19cd2:	2000      	movs	r0, #0
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        NRF_CLOCK->EVENTS_DONE = 0;
   19cd8:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   19cdc:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   19ce0:	f8c1 0538 	str.w	r0, [r1, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19ce4:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
   19ce8:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19cec:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   19cf0:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19cf4:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   19cf8:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19cfc:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
   19d00:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19d04:	f8d2 0414 	ldr.w	r0, [r2, #1044]	; 0x414
   19d08:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19d0c:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
   19d10:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19d14:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
   19d18:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19d1c:	f8d2 0420 	ldr.w	r0, [r2, #1056]	; 0x420
   19d20:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19d24:	f8d2 0424 	ldr.w	r0, [r2, #1060]	; 0x424
   19d28:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19d2c:	f8d2 0428 	ldr.w	r0, [r2, #1064]	; 0x428
   19d30:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19d34:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
   19d38:	f8c3 0550 	str.w	r0, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19d3c:	f8d2 0430 	ldr.w	r0, [r2, #1072]	; 0x430
   19d40:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19d44:	f8d2 0434 	ldr.w	r0, [r2, #1076]	; 0x434
   19d48:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19d4c:	f8d2 0438 	ldr.w	r0, [r2, #1080]	; 0x438
   19d50:	f8c3 0564 	str.w	r0, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19d54:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
   19d58:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19d5c:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
   19d60:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19d64:	6820      	ldr	r0, [r4, #0]
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19d66:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19d6a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19d6e:	280a      	cmp	r0, #10
   19d70:	d017      	beq.n	19da2 <SystemInit+0xe6>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19d72:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19d76:	07db      	lsls	r3, r3, #31
   19d78:	d41f      	bmi.n	19dba <SystemInit+0xfe>
        *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
   19d7a:	4a34      	ldr	r2, [pc, #208]	; (19e4c <SystemInit+0x190>)
   19d7c:	6813      	ldr	r3, [r2, #0]
   19d7e:	f043 030f 	orr.w	r3, r3, #15
   19d82:	6013      	str	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19d84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19d88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19d8c:	2a00      	cmp	r2, #0
   19d8e:	db23      	blt.n	19dd8 <SystemInit+0x11c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19d90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19d94:	2b00      	cmp	r3, #0
   19d96:	db1f      	blt.n	19dd8 <SystemInit+0x11c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19d98:	4b2d      	ldr	r3, [pc, #180]	; (19e50 <SystemInit+0x194>)
   19d9a:	4a2e      	ldr	r2, [pc, #184]	; (19e54 <SystemInit+0x198>)
   19d9c:	601a      	str	r2, [r3, #0]
}
   19d9e:	bc30      	pop	{r4, r5}
   19da0:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   19da2:	4b2d      	ldr	r3, [pc, #180]	; (19e58 <SystemInit+0x19c>)
   19da4:	681b      	ldr	r3, [r3, #0]
   19da6:	2b00      	cmp	r3, #0
   19da8:	d1e3      	bne.n	19d72 <SystemInit+0xb6>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19daa:	4b2c      	ldr	r3, [pc, #176]	; (19e5c <SystemInit+0x1a0>)
   19dac:	22fb      	movs	r2, #251	; 0xfb
   19dae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19db2:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19db6:	07da      	lsls	r2, r3, #31
   19db8:	d505      	bpl.n	19dc6 <SystemInit+0x10a>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19dbe:	f06f 0201 	mvn.w	r2, #1
   19dc2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
#endif

static bool errata_217(void)
{
    if (*(uint32_t *)0x10000130ul == 0xAul){
   19dc6:	4b20      	ldr	r3, [pc, #128]	; (19e48 <SystemInit+0x18c>)
   19dc8:	681b      	ldr	r3, [r3, #0]
   19dca:	2b0a      	cmp	r3, #10
   19dcc:	d1d5      	bne.n	19d7a <SystemInit+0xbe>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   19dce:	4b22      	ldr	r3, [pc, #136]	; (19e58 <SystemInit+0x19c>)
   19dd0:	681b      	ldr	r3, [r3, #0]
   19dd2:	2b00      	cmp	r3, #0
   19dd4:	d0d6      	beq.n	19d84 <SystemInit+0xc8>
   19dd6:	e7d0      	b.n	19d7a <SystemInit+0xbe>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   19dd8:	4a21      	ldr	r2, [pc, #132]	; (19e60 <SystemInit+0x1a4>)
   19dda:	2301      	movs	r3, #1
   19ddc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19de0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19de4:	2b00      	cmp	r3, #0
   19de6:	d0fb      	beq.n	19de0 <SystemInit+0x124>
            NRF_UICR->PSELRESET[0] = 21;
   19de8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19dec:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19dee:	4a1c      	ldr	r2, [pc, #112]	; (19e60 <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[0] = 21;
   19df0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19df4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19df8:	2b00      	cmp	r3, #0
   19dfa:	d0fb      	beq.n	19df4 <SystemInit+0x138>
            NRF_UICR->PSELRESET[1] = 21;
   19dfc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e00:	2115      	movs	r1, #21
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e02:	4a17      	ldr	r2, [pc, #92]	; (19e60 <SystemInit+0x1a4>)
            NRF_UICR->PSELRESET[1] = 21;
   19e04:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e08:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19e0c:	2b00      	cmp	r3, #0
   19e0e:	d0fb      	beq.n	19e08 <SystemInit+0x14c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   19e10:	2300      	movs	r3, #0
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e12:	4913      	ldr	r1, [pc, #76]	; (19e60 <SystemInit+0x1a4>)
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   19e14:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19e18:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   19e1c:	2b00      	cmp	r3, #0
   19e1e:	d0fb      	beq.n	19e18 <SystemInit+0x15c>
  __ASM volatile ("dsb 0xF":::"memory");
   19e20:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19e24:	490f      	ldr	r1, [pc, #60]	; (19e64 <SystemInit+0x1a8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19e26:	4b10      	ldr	r3, [pc, #64]	; (19e68 <SystemInit+0x1ac>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19e28:	68ca      	ldr	r2, [r1, #12]
   19e2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19e2e:	4313      	orrs	r3, r2
   19e30:	60cb      	str	r3, [r1, #12]
   19e32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   19e36:	bf00      	nop
   19e38:	e7fd      	b.n	19e36 <SystemInit+0x17a>
   19e3a:	bf00      	nop
   19e3c:	10000244 	.word	0x10000244
   19e40:	4000053c 	.word	0x4000053c
   19e44:	4000c000 	.word	0x4000c000
   19e48:	10000130 	.word	0x10000130
   19e4c:	40000ee4 	.word	0x40000ee4
   19e50:	20001120 	.word	0x20001120
   19e54:	03d09000 	.word	0x03d09000
   19e58:	10000134 	.word	0x10000134
   19e5c:	4000f000 	.word	0x4000f000
   19e60:	4001e000 	.word	0x4001e000
   19e64:	e000ed00 	.word	0xe000ed00
   19e68:	05fa0004 	.word	0x05fa0004

00019e6c <clock_irq_handler>:
        p_item->event_handler(evt_type);
    }
}

static void clock_irq_handler(nrfx_clock_evt_type_t evt)
{
   19e6c:	b510      	push	{r4, lr}
    if (evt == NRFX_CLOCK_EVT_HFCLK_STARTED)
   19e6e:	b968      	cbnz	r0, 19e8c <clock_irq_handler+0x20>
    {
        m_clock_cb.hfclk_on = true;
   19e70:	4c0e      	ldr	r4, [pc, #56]	; (19eac <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19e72:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19e74:	2201      	movs	r2, #1
   19e76:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19e78:	b13b      	cbz	r3, 19e8a <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e7e:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   19e80:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   19e82:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19e84:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19e86:	2b00      	cmp	r3, #0
   19e88:	d1f7      	bne.n	19e7a <clock_irq_handler+0xe>
            m_clock_cb.cal_done_handler(aborted ?
                NRF_DRV_CLOCK_EVT_CAL_ABORTED : NRF_DRV_CLOCK_EVT_CAL_DONE);
        }
    }
#endif // CALIBRATION_SUPPORT
}
   19e8a:	bd10      	pop	{r4, pc}
    if (evt == NRFX_CLOCK_EVT_LFCLK_STARTED)
   19e8c:	2801      	cmp	r0, #1
   19e8e:	d1fc      	bne.n	19e8a <clock_irq_handler+0x1e>
        m_clock_cb.lfclk_on = true;
   19e90:	4c06      	ldr	r4, [pc, #24]	; (19eac <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19e92:	6923      	ldr	r3, [r4, #16]
        m_clock_cb.lfclk_on = true;
   19e94:	70a0      	strb	r0, [r4, #2]
    if (p_item)
   19e96:	2b00      	cmp	r3, #0
   19e98:	d0f7      	beq.n	19e8a <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   19e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e9e:	2001      	movs	r0, #1
        *p_head = p_item->p_next;
   19ea0:	6122      	str	r2, [r4, #16]
        p_item->event_handler(evt_type);
   19ea2:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19ea4:	6923      	ldr	r3, [r4, #16]
    if (p_item)
   19ea6:	2b00      	cmp	r3, #0
   19ea8:	d1f7      	bne.n	19e9a <clock_irq_handler+0x2e>
}
   19eaa:	bd10      	pop	{r4, pc}
   19eac:	20001278 	.word	0x20001278

00019eb0 <soc_evt_handler>:
 * @param[in] evt_id    SoC event.
 * @param[in] p_context Context.
 */
static void soc_evt_handler(uint32_t evt_id, void * p_context)
{
    if (evt_id == NRF_EVT_HFCLKSTARTED)
   19eb0:	b970      	cbnz	r0, 19ed0 <soc_evt_handler+0x20>
{
   19eb2:	b510      	push	{r4, lr}
    {
        m_clock_cb.hfclk_on = true;
   19eb4:	4c07      	ldr	r4, [pc, #28]	; (19ed4 <soc_evt_handler+0x24>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19eb6:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   19eb8:	2201      	movs	r2, #1
   19eba:	7062      	strb	r2, [r4, #1]
    if (p_item)
   19ebc:	b13b      	cbz	r3, 19ece <soc_evt_handler+0x1e>
        p_item->event_handler(evt_type);
   19ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ec2:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   19ec4:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   19ec6:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   19ec8:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d1f7      	bne.n	19ebe <soc_evt_handler+0xe>
        clock_clk_started_notify(NRF_DRV_CLOCK_EVT_HFCLK_STARTED);
    }
}
   19ece:	bd10      	pop	{r4, pc}
   19ed0:	4770      	bx	lr
   19ed2:	bf00      	nop
   19ed4:	20001278 	.word	0x20001278

00019ed8 <sd_state_evt_handler>:
 *
 * @param[in] state     State.
 * @param[in] p_context Context.
 */
static void sd_state_evt_handler(nrf_sdh_state_evt_t state, void * p_context)
{
   19ed8:	b530      	push	{r4, r5, lr}
    switch (state)
   19eda:	2801      	cmp	r0, #1
{
   19edc:	b083      	sub	sp, #12
    switch (state)
   19ede:	d004      	beq.n	19eea <sd_state_evt_handler+0x12>
   19ee0:	2803      	cmp	r0, #3
   19ee2:	d01d      	beq.n	19f20 <sd_state_evt_handler+0x48>
   19ee4:	b1b0      	cbz	r0, 19f14 <sd_state_evt_handler+0x3c>
            break;

        default:
            break;
    }
}
   19ee6:	b003      	add	sp, #12
   19ee8:	bd30      	pop	{r4, r5, pc}
            if (!m_clock_cb.module_initialized)
   19eea:	4c22      	ldr	r4, [pc, #136]	; (19f74 <sd_state_evt_handler+0x9c>)
            CRITICAL_REGION_ENTER();
   19eec:	2300      	movs	r3, #0
   19eee:	f10d 0007 	add.w	r0, sp, #7
   19ef2:	f88d 3007 	strb.w	r3, [sp, #7]
   19ef6:	f7ff fc63 	bl	197c0 <app_util_critical_region_enter>
            if (!m_clock_cb.module_initialized)
   19efa:	7823      	ldrb	r3, [r4, #0]
   19efc:	b34b      	cbz	r3, 19f52 <sd_state_evt_handler+0x7a>
            ++(m_clock_cb.lfclk_requests);
   19efe:	68e3      	ldr	r3, [r4, #12]
            CRITICAL_REGION_EXIT();
   19f00:	f89d 0007 	ldrb.w	r0, [sp, #7]
            ++(m_clock_cb.lfclk_requests);
   19f04:	3301      	adds	r3, #1
            m_clock_cb.lfclk_on = true;
   19f06:	2201      	movs	r2, #1
            ++(m_clock_cb.lfclk_requests);
   19f08:	60e3      	str	r3, [r4, #12]
            m_clock_cb.lfclk_on = true;
   19f0a:	70a2      	strb	r2, [r4, #2]
            CRITICAL_REGION_EXIT();
   19f0c:	f7ff fc7e 	bl	1980c <app_util_critical_region_exit>
}
   19f10:	b003      	add	sp, #12
   19f12:	bd30      	pop	{r4, r5, pc}
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19f14:	4b18      	ldr	r3, [pc, #96]	; (19f78 <sd_state_evt_handler+0xa0>)
   19f16:	2201      	movs	r2, #1
   19f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   19f1c:	b003      	add	sp, #12
   19f1e:	bd30      	pop	{r4, r5, pc}
    --(m_clock_cb.lfclk_requests);
   19f20:	4c14      	ldr	r4, [pc, #80]	; (19f74 <sd_state_evt_handler+0x9c>)
            nrfx_clock_enable();
   19f22:	f000 f839 	bl	19f98 <nrfx_clock_enable>
    CRITICAL_REGION_ENTER();
   19f26:	2300      	movs	r3, #0
   19f28:	f10d 0007 	add.w	r0, sp, #7
   19f2c:	f88d 3007 	strb.w	r3, [sp, #7]
   19f30:	f7ff fc46 	bl	197c0 <app_util_critical_region_enter>
    --(m_clock_cb.lfclk_requests);
   19f34:	68e3      	ldr	r3, [r4, #12]
   19f36:	3b01      	subs	r3, #1
   19f38:	60e3      	str	r3, [r4, #12]
    if (m_clock_cb.lfclk_requests == 0)
   19f3a:	68e5      	ldr	r5, [r4, #12]
   19f3c:	b12d      	cbz	r5, 19f4a <sd_state_evt_handler+0x72>
    CRITICAL_REGION_EXIT();
   19f3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19f42:	f7ff fc63 	bl	1980c <app_util_critical_region_exit>
}
   19f46:	b003      	add	sp, #12
   19f48:	bd30      	pop	{r4, r5, pc}
    nrfx_clock_lfclk_stop();
   19f4a:	f000 f837 	bl	19fbc <nrfx_clock_lfclk_stop>
    m_clock_cb.lfclk_on = false;
   19f4e:	70a5      	strb	r5, [r4, #2]
}
   19f50:	e7f5      	b.n	19f3e <sd_state_evt_handler+0x66>
        err_code = nrfx_clock_init(clock_irq_handler);
   19f52:	480a      	ldr	r0, [pc, #40]	; (19f7c <sd_state_evt_handler+0xa4>)
        m_clock_cb.hfclk_requests = 0;
   19f54:	6063      	str	r3, [r4, #4]
        m_clock_cb.p_hf_head      = NULL;
   19f56:	60a3      	str	r3, [r4, #8]
        m_clock_cb.p_lf_head      = NULL;
   19f58:	6123      	str	r3, [r4, #16]
        m_clock_cb.lfclk_requests = 0;
   19f5a:	60e3      	str	r3, [r4, #12]
        err_code = nrfx_clock_init(clock_irq_handler);
   19f5c:	f000 f810 	bl	19f80 <nrfx_clock_init>
        if (!nrf_sdh_is_enabled())
   19f60:	f002 fd0e 	bl	1c980 <nrf_sdh_is_enabled>
   19f64:	b110      	cbz	r0, 19f6c <sd_state_evt_handler+0x94>
        m_clock_cb.module_initialized = true;
   19f66:	2301      	movs	r3, #1
   19f68:	7023      	strb	r3, [r4, #0]
    return err_code;
   19f6a:	e7c8      	b.n	19efe <sd_state_evt_handler+0x26>
            nrfx_clock_enable();
   19f6c:	f000 f814 	bl	19f98 <nrfx_clock_enable>
   19f70:	e7f9      	b.n	19f66 <sd_state_evt_handler+0x8e>
   19f72:	bf00      	nop
   19f74:	20001278 	.word	0x20001278
   19f78:	e000e100 	.word	0xe000e100
   19f7c:	00019e6d 	.word	0x00019e6d

00019f80 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19f80:	4a04      	ldr	r2, [pc, #16]	; (19f94 <nrfx_clock_init+0x14>)
   19f82:	7913      	ldrb	r3, [r2, #4]
   19f84:	b923      	cbnz	r3, 19f90 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   19f86:	2101      	movs	r1, #1
        m_clock_cb.event_handler = event_handler;
   19f88:	6010      	str	r0, [r2, #0]
        m_clock_cb.module_initialized = true;
   19f8a:	8091      	strh	r1, [r2, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19f8c:	4618      	mov	r0, r3
   19f8e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19f90:	2085      	movs	r0, #133	; 0x85
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19f92:	4770      	bx	lr
   19f94:	2000128c 	.word	0x2000128c

00019f98 <nrfx_clock_enable>:
 * @retval false Otherwise.
 */
#define NRFX_IRQ_IS_ENABLED(irq_number)  _NRFX_IRQ_IS_ENABLED(irq_number)
static inline bool _NRFX_IRQ_IS_ENABLED(IRQn_Type irq_number)
{
    return 0 != (NVIC->ISER[irq_number / 32] & (1UL << (irq_number % 32)));
   19f98:	4b07      	ldr	r3, [pc, #28]	; (19fb8 <nrfx_clock_enable+0x20>)
   19f9a:	681a      	ldr	r2, [r3, #0]
    priority = NRFX_CLOCK_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19f9c:	07d2      	lsls	r2, r2, #31
   19f9e:	d404      	bmi.n	19faa <nrfx_clock_enable+0x12>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19fa0:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19fa2:	2201      	movs	r2, #1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19fa4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19fa8:	601a      	str	r2, [r3, #0]
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   19faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19fae:	2201      	movs	r2, #1
   19fb0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   19fb4:	4770      	bx	lr
   19fb6:	bf00      	nop
   19fb8:	e000e100 	.word	0xe000e100

00019fbc <nrfx_clock_lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   19fbc:	4b04      	ldr	r3, [pc, #16]	; (19fd0 <nrfx_clock_lfclk_stop+0x14>)
   19fbe:	2201      	movs	r2, #1
   19fc0:	601a      	str	r2, [r3, #0]
                                CLOCK_LFCLKSRCCOPY_SRC_Msk) >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}

__STATIC_INLINE bool nrf_clock_lf_is_running(void)
{
    return ((NRF_CLOCK->LFCLKSTAT &
   19fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19fc6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418

void nrfx_clock_lfclk_stop(void)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrf_clock_task_trigger(NRF_CLOCK_TASK_LFCLKSTOP);
    while (nrf_clock_lf_is_running())
   19fca:	03db      	lsls	r3, r3, #15
   19fcc:	d4fb      	bmi.n	19fc6 <nrfx_clock_lfclk_stop+0xa>
    {}
}
   19fce:	4770      	bx	lr
   19fd0:	4000000c 	.word	0x4000000c

00019fd4 <POWER_CLOCK_IRQHandler>:
    nrf_clock_task_trigger(NRF_CLOCK_TASK_CTSTOP);
#endif
}

void nrfx_clock_irq_handler(void)
{
   19fd4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   19fd6:	4b17      	ldr	r3, [pc, #92]	; (1a034 <POWER_CLOCK_IRQHandler+0x60>)
   19fd8:	681a      	ldr	r2, [r3, #0]
   19fda:	b082      	sub	sp, #8
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_HFCLKSTARTED))
   19fdc:	b162      	cbz	r2, 19ff8 <POWER_CLOCK_IRQHandler+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   19fde:	2100      	movs	r1, #0
        nrf_clock_event_clear(NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_HFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   19fe0:	4a15      	ldr	r2, [pc, #84]	; (1a038 <POWER_CLOCK_IRQHandler+0x64>)
   19fe2:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   19fe4:	681b      	ldr	r3, [r3, #0]
   19fe6:	7950      	ldrb	r0, [r2, #5]
   19fe8:	9300      	str	r3, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   19fea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19fee:	2301      	movs	r3, #1
    (void)dummy;
   19ff0:	9c00      	ldr	r4, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   19ff2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
   19ff6:	b198      	cbz	r0, 1a020 <POWER_CLOCK_IRQHandler+0x4c>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   19ff8:	4b10      	ldr	r3, [pc, #64]	; (1a03c <POWER_CLOCK_IRQHandler+0x68>)
   19ffa:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   19ffc:	b1ba      	cbz	r2, 1a02e <POWER_CLOCK_IRQHandler+0x5a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   19ffe:	2200      	movs	r2, #0
   1a000:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   1a002:	681b      	ldr	r3, [r3, #0]
   1a004:	9301      	str	r3, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   1a006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a00a:	2102      	movs	r1, #2
    {
        nrf_clock_event_clear(NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_LFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_LF_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a00c:	4b0a      	ldr	r3, [pc, #40]	; (1a038 <POWER_CLOCK_IRQHandler+0x64>)
    (void)dummy;
   1a00e:	9801      	ldr	r0, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   1a010:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
   1a014:	681b      	ldr	r3, [r3, #0]
   1a016:	2001      	movs	r0, #1
        nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif //  NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
}
   1a018:	b002      	add	sp, #8
   1a01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a01e:	4718      	bx	r3
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a020:	6811      	ldr	r1, [r2, #0]
            m_clock_cb.hfclk_started = true;
   1a022:	7153      	strb	r3, [r2, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a024:	4788      	blx	r1
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1a026:	4b05      	ldr	r3, [pc, #20]	; (1a03c <POWER_CLOCK_IRQHandler+0x68>)
   1a028:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   1a02a:	2a00      	cmp	r2, #0
   1a02c:	d1e7      	bne.n	19ffe <POWER_CLOCK_IRQHandler+0x2a>
}
   1a02e:	b002      	add	sp, #8
   1a030:	bd10      	pop	{r4, pc}
   1a032:	bf00      	nop
   1a034:	40000100 	.word	0x40000100
   1a038:	2000128c 	.word	0x2000128c
   1a03c:	40000104 	.word	0x40000104

0001a040 <GPIOTE_IRQHandler>:
    return nrf_gpiote_event_addr_get(event);
}


void nrfx_gpiote_irq_handler(void)
{
   1a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a044:	b086      	sub	sp, #24
    return ((uint32_t)NRF_GPIOTE + task);
}

__STATIC_INLINE bool nrf_gpiote_event_is_set(nrf_gpiote_events_t event)
{
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   1a046:	4ac0      	ldr	r2, [pc, #768]	; (1a348 <GPIOTE_IRQHandler+0x308>)
    uint32_t status            = 0;
    uint32_t input[GPIO_COUNT] = {0};
   1a048:	2300      	movs	r3, #0
   1a04a:	9301      	str	r3, [sp, #4]
    nrf_gpiote_events_t event = NRF_GPIOTE_EVENTS_IN_0;
    uint32_t            mask  = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    for (i = 0; i < GPIOTE_CH_NUM; i++)
    {
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a04c:	6811      	ldr	r1, [r2, #0]
   1a04e:	2901      	cmp	r1, #1
   1a050:	f000 81c8 	beq.w	1a3e4 <GPIOTE_IRQHandler+0x3a4>
    uint32_t status            = 0;
   1a054:	461e      	mov	r6, r3
   1a056:	4bbd      	ldr	r3, [pc, #756]	; (1a34c <GPIOTE_IRQHandler+0x30c>)
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a058:	681a      	ldr	r2, [r3, #0]
   1a05a:	2a01      	cmp	r2, #1
   1a05c:	f000 81b4 	beq.w	1a3c8 <GPIOTE_IRQHandler+0x388>
   1a060:	4bbb      	ldr	r3, [pc, #748]	; (1a350 <GPIOTE_IRQHandler+0x310>)
   1a062:	681a      	ldr	r2, [r3, #0]
   1a064:	2a01      	cmp	r2, #1
   1a066:	f000 81a1 	beq.w	1a3ac <GPIOTE_IRQHandler+0x36c>
   1a06a:	4bba      	ldr	r3, [pc, #744]	; (1a354 <GPIOTE_IRQHandler+0x314>)
   1a06c:	681a      	ldr	r2, [r3, #0]
   1a06e:	2a01      	cmp	r2, #1
   1a070:	f000 818e 	beq.w	1a390 <GPIOTE_IRQHandler+0x350>
   1a074:	4bb8      	ldr	r3, [pc, #736]	; (1a358 <GPIOTE_IRQHandler+0x318>)
   1a076:	681a      	ldr	r2, [r3, #0]
   1a078:	2a01      	cmp	r2, #1
   1a07a:	f000 817b 	beq.w	1a374 <GPIOTE_IRQHandler+0x334>
   1a07e:	4bb7      	ldr	r3, [pc, #732]	; (1a35c <GPIOTE_IRQHandler+0x31c>)
   1a080:	681a      	ldr	r2, [r3, #0]
   1a082:	2a01      	cmp	r2, #1
   1a084:	f000 8152 	beq.w	1a32c <GPIOTE_IRQHandler+0x2ec>
   1a088:	4bb5      	ldr	r3, [pc, #724]	; (1a360 <GPIOTE_IRQHandler+0x320>)
   1a08a:	681a      	ldr	r2, [r3, #0]
   1a08c:	2a01      	cmp	r2, #1
   1a08e:	f000 813f 	beq.w	1a310 <GPIOTE_IRQHandler+0x2d0>
   1a092:	4bb4      	ldr	r3, [pc, #720]	; (1a364 <GPIOTE_IRQHandler+0x324>)
   1a094:	681a      	ldr	r2, [r3, #0]
   1a096:	2a01      	cmp	r2, #1
   1a098:	d008      	beq.n	1a0ac <GPIOTE_IRQHandler+0x6c>
   1a09a:	4bb3      	ldr	r3, [pc, #716]	; (1a368 <GPIOTE_IRQHandler+0x328>)
        event = (nrf_gpiote_events_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
     * end of interrupt. */
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   1a09c:	681a      	ldr	r2, [r3, #0]
   1a09e:	2a01      	cmp	r2, #1
   1a0a0:	f000 81ac 	beq.w	1a3fc <GPIOTE_IRQHandler+0x3bc>
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
        nrf_gpio_ports_read(0, GPIO_COUNT, input);
    }

    /* Process pin events. */
    if (status & NRF_GPIOTE_INT_IN_MASK)
   1a0a4:	b9f6      	cbnz	r6, 1a0e4 <GPIOTE_IRQHandler+0xa4>
                }
            }
        }
        while (repeat);
    }
}
   1a0a6:	b006      	add	sp, #24
   1a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   1a0ac:	4aaf      	ldr	r2, [pc, #700]	; (1a36c <GPIOTE_IRQHandler+0x32c>)
   1a0ae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a0b2:	0612      	lsls	r2, r2, #24
   1a0b4:	d5f1      	bpl.n	1a09a <GPIOTE_IRQHandler+0x5a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a0b6:	2200      	movs	r2, #0
   1a0b8:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a0ba:	6819      	ldr	r1, [r3, #0]
   1a0bc:	9104      	str	r1, [sp, #16]
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   1a0be:	6e19      	ldr	r1, [r3, #96]	; 0x60
    (void)dummy;
   1a0c0:	9804      	ldr	r0, [sp, #16]
   1a0c2:	2901      	cmp	r1, #1
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   1a0c4:	f103 0360 	add.w	r3, r3, #96	; 0x60
            status |= mask;
   1a0c8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   1a0cc:	d10a      	bne.n	1a0e4 <GPIOTE_IRQHandler+0xa4>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a0ce:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a0d0:	681b      	ldr	r3, [r3, #0]
   1a0d2:	9305      	str	r3, [sp, #20]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   1a0d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    (void)dummy;
   1a0d8:	9a05      	ldr	r2, [sp, #20]
   1a0da:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    NRFX_ASSERT(start_port + length <= GPIO_COUNT);
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   1a0de:	9301      	str	r3, [sp, #4]
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   1a0e0:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    return m_cb.handlers[channel];
   1a0e4:	4fa2      	ldr	r7, [pc, #648]	; (1a370 <GPIOTE_IRQHandler+0x330>)
        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a0e6:	2501      	movs	r5, #1
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a0e8:	2400      	movs	r4, #0
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a0ea:	00a3      	lsls	r3, r4, #2
   1a0ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
            if (mask & status)
   1a0f0:	422e      	tst	r6, r5
   1a0f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
            mask <<= 1;
   1a0f6:	ea4f 0545 	mov.w	r5, r5, lsl #1
            if (mask & status)
   1a0fa:	d00b      	beq.n	1a114 <GPIOTE_IRQHandler+0xd4>
   1a0fc:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return m_cb.handlers[channel];
   1a100:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
}

__STATIC_INLINE nrf_gpiote_polarity_t nrf_gpiote_event_polarity_get(uint32_t idx)
{
    return (nrf_gpiote_polarity_t)((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >> GPIOTE_CONFIG_POLARITY_Pos);
   1a104:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                    handler(pin, polarity);
   1a108:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1a10c:	f3c1 4101 	ubfx	r1, r1, #16, #2
                if (handler)
   1a110:	b102      	cbz	r2, 1a114 <GPIOTE_IRQHandler+0xd4>
                    handler(pin, polarity);
   1a112:	4790      	blx	r2
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a114:	3401      	adds	r4, #1
   1a116:	2c08      	cmp	r4, #8
   1a118:	d1e7      	bne.n	1a0ea <GPIOTE_IRQHandler+0xaa>
    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   1a11a:	2e00      	cmp	r6, #0
   1a11c:	dac3      	bge.n	1a0a6 <GPIOTE_IRQHandler+0x66>
            pins_to_check[port_idx] = 0xFFFFFFFF;
   1a11e:	2200      	movs	r2, #0
   1a120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a124:	e9cd 2302 	strd	r2, r3, [sp, #8]
        for (port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1a128:	4c91      	ldr	r4, [pc, #580]	; (1a370 <GPIOTE_IRQHandler+0x330>)
__STATIC_INLINE uint32_t nrf_bitmask_bit_is_set(uint32_t bit, void const * p_mask)
{
    uint8_t const * p_mask8 = (uint8_t const *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    return (1 << bit) & p_mask8[byte_idx];
   1a12a:	2501      	movs	r5, #1
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] |= (1 << bit);
   1a12c:	ae02      	add	r6, sp, #8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a12e:	f994 0050 	ldrsb.w	r0, [r4, #80]	; 0x50
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   1a132:	1c47      	adds	r7, r0, #1
   1a134:	d037      	beq.n	1a1a6 <GPIOTE_IRQHandler+0x166>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a136:	f3c0 0cc2 	ubfx	ip, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   1a13a:	ab06      	add	r3, sp, #24
   1a13c:	eb03 070c 	add.w	r7, r3, ip
    bit = BITMASK_RELBIT_GET(bit);
   1a140:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   1a144:	f817 2c0c 	ldrb.w	r2, [r7, #-12]
   1a148:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a14c:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a14e:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   1a150:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a154:	d027      	beq.n	1a1a6 <GPIOTE_IRQHandler+0x166>
    return m_cb.pin_assignments[pin];
   1a156:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   1a158:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   1a15a:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   1a15e:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   1a162:	f1b8 0f00 	cmp.w	r8, #0
   1a166:	f000 819d 	beq.w	1a4a4 <GPIOTE_IRQHandler+0x464>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a16a:	2903      	cmp	r1, #3
   1a16c:	f000 819d 	beq.w	1a4aa <GPIOTE_IRQHandler+0x46a>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a170:	0082      	lsls	r2, r0, #2
   1a172:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   1a176:	f817 7c14 	ldrb.w	r7, [r7, #-20]
   1a17a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   1a17e:	401f      	ands	r7, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a180:	f3cc 4c01 	ubfx	ip, ip, #16, #2
   1a184:	d00b      	beq.n	1a19e <GPIOTE_IRQHandler+0x15e>
   1a186:	f1bc 0f02 	cmp.w	ip, #2
   1a18a:	d10c      	bne.n	1a1a6 <GPIOTE_IRQHandler+0x166>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a18c:	2903      	cmp	r1, #3
   1a18e:	f000 81bf 	beq.w	1a510 <GPIOTE_IRQHandler+0x4d0>
            repeat = 0;
   1a192:	2700      	movs	r7, #0
                            if (handler)
   1a194:	f1b8 0f00 	cmp.w	r8, #0
   1a198:	d006      	beq.n	1a1a8 <GPIOTE_IRQHandler+0x168>
                                handler(pin, polarity);
   1a19a:	47c0      	blx	r8
   1a19c:	e004      	b.n	1a1a8 <GPIOTE_IRQHandler+0x168>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   1a19e:	f1bc 0f03 	cmp.w	ip, #3
   1a1a2:	f000 81a3 	beq.w	1a4ec <GPIOTE_IRQHandler+0x4ac>
            repeat = 0;
   1a1a6:	2700      	movs	r7, #0
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a1a8:	f994 0051 	ldrsb.w	r0, [r4, #81]	; 0x51
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   1a1ac:	1c41      	adds	r1, r0, #1
   1a1ae:	d032      	beq.n	1a216 <GPIOTE_IRQHandler+0x1d6>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a1b0:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   1a1b4:	ab06      	add	r3, sp, #24
   1a1b6:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   1a1ba:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   1a1be:	f81c 2c0c 	ldrb.w	r2, [ip, #-12]
   1a1c2:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a1c6:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a1c8:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   1a1ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a1ce:	d022      	beq.n	1a216 <GPIOTE_IRQHandler+0x1d6>
    return m_cb.pin_assignments[pin];
   1a1d0:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   1a1d2:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   1a1d4:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   1a1d8:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   1a1dc:	f1b8 0f00 	cmp.w	r8, #0
   1a1e0:	f000 817b 	beq.w	1a4da <GPIOTE_IRQHandler+0x49a>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a1e4:	2903      	cmp	r1, #3
   1a1e6:	f000 817b 	beq.w	1a4e0 <GPIOTE_IRQHandler+0x4a0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a1ea:	0082      	lsls	r2, r0, #2
   1a1ec:	f102 4ea0 	add.w	lr, r2, #1342177280	; 0x50000000
   1a1f0:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   1a1f4:	f8de 2700 	ldr.w	r2, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   1a1f8:	ea1c 0f03 	tst.w	ip, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a1fc:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1a200:	f000 813a 	beq.w	1a478 <GPIOTE_IRQHandler+0x438>
   1a204:	2a02      	cmp	r2, #2
   1a206:	d106      	bne.n	1a216 <GPIOTE_IRQHandler+0x1d6>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a208:	2903      	cmp	r1, #3
   1a20a:	f000 8184 	beq.w	1a516 <GPIOTE_IRQHandler+0x4d6>
                            if (handler)
   1a20e:	f1b8 0f00 	cmp.w	r8, #0
   1a212:	d000      	beq.n	1a216 <GPIOTE_IRQHandler+0x1d6>
                                handler(pin, polarity);
   1a214:	47c0      	blx	r8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a216:	f994 0052 	ldrsb.w	r0, [r4, #82]	; 0x52
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   1a21a:	1c42      	adds	r2, r0, #1
   1a21c:	d032      	beq.n	1a284 <GPIOTE_IRQHandler+0x244>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a21e:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   1a222:	ab06      	add	r3, sp, #24
   1a224:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   1a228:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   1a22c:	f81c 2c0c 	ldrb.w	r2, [ip, #-12]
   1a230:	fa05 f303 	lsl.w	r3, r5, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a234:	421a      	tst	r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a236:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   1a238:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a23c:	d022      	beq.n	1a284 <GPIOTE_IRQHandler+0x244>
    return m_cb.pin_assignments[pin];
   1a23e:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   1a240:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   1a242:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   1a246:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   1a24a:	f1b8 0f00 	cmp.w	r8, #0
   1a24e:	f000 813b 	beq.w	1a4c8 <GPIOTE_IRQHandler+0x488>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a252:	2903      	cmp	r1, #3
   1a254:	f000 813b 	beq.w	1a4ce <GPIOTE_IRQHandler+0x48e>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a258:	0082      	lsls	r2, r0, #2
   1a25a:	f102 4ea0 	add.w	lr, r2, #1342177280	; 0x50000000
   1a25e:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   1a262:	f8de 2700 	ldr.w	r2, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   1a266:	ea1c 0f03 	tst.w	ip, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a26a:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1a26e:	f000 80ed 	beq.w	1a44c <GPIOTE_IRQHandler+0x40c>
   1a272:	2a02      	cmp	r2, #2
   1a274:	d106      	bne.n	1a284 <GPIOTE_IRQHandler+0x244>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a276:	2903      	cmp	r1, #3
   1a278:	f000 8150 	beq.w	1a51c <GPIOTE_IRQHandler+0x4dc>
                            if (handler)
   1a27c:	f1b8 0f00 	cmp.w	r8, #0
   1a280:	d000      	beq.n	1a284 <GPIOTE_IRQHandler+0x244>
                                handler(pin, polarity);
   1a282:	47c0      	blx	r8
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a284:	f994 0053 	ldrsb.w	r0, [r4, #83]	; 0x53
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   1a288:	1c43      	adds	r3, r0, #1
   1a28a:	d032      	beq.n	1a2f2 <GPIOTE_IRQHandler+0x2b2>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a28c:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   1a290:	ab06      	add	r3, sp, #24
   1a292:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   1a296:	f000 0207 	and.w	r2, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   1a29a:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
   1a29e:	fa05 f202 	lsl.w	r2, r5, r2
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a2a2:	4213      	tst	r3, r2
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   1a2a4:	b2c1      	uxtb	r1, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   1a2a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   1a2aa:	d022      	beq.n	1a2f2 <GPIOTE_IRQHandler+0x2b2>
    return m_cb.pin_assignments[pin];
   1a2ac:	1823      	adds	r3, r4, r0
                    nrf_gpiote_polarity_t polarity =
   1a2ae:	0989      	lsrs	r1, r1, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   1a2b0:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    return m_cb.handlers[channel];
   1a2b4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   1a2b8:	f1b8 0f00 	cmp.w	r8, #0
   1a2bc:	f000 80fb 	beq.w	1a4b6 <GPIOTE_IRQHandler+0x476>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a2c0:	2903      	cmp	r1, #3
   1a2c2:	f000 80fb 	beq.w	1a4bc <GPIOTE_IRQHandler+0x47c>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a2c6:	0083      	lsls	r3, r0, #2
   1a2c8:	f103 4ea0 	add.w	lr, r3, #1342177280	; 0x50000000
   1a2cc:	f81c cc14 	ldrb.w	ip, [ip, #-20]
   1a2d0:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   1a2d4:	ea1c 0f02 	tst.w	ip, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a2d8:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1a2dc:	f000 809c 	beq.w	1a418 <GPIOTE_IRQHandler+0x3d8>
   1a2e0:	2b02      	cmp	r3, #2
   1a2e2:	d106      	bne.n	1a2f2 <GPIOTE_IRQHandler+0x2b2>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a2e4:	2903      	cmp	r1, #3
   1a2e6:	f000 811c 	beq.w	1a522 <GPIOTE_IRQHandler+0x4e2>
                            if (handler)
   1a2ea:	f1b8 0f00 	cmp.w	r8, #0
   1a2ee:	d000      	beq.n	1a2f2 <GPIOTE_IRQHandler+0x2b2>
                                handler(pin, polarity);
   1a2f0:	47c0      	blx	r8
            if (repeat)
   1a2f2:	2f00      	cmp	r7, #0
   1a2f4:	f43f aed7 	beq.w	1a0a6 <GPIOTE_IRQHandler+0x66>
    return p_reg->IN;
   1a2f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    if (new_input[port_idx] != input[port_idx])
   1a2fc:	9a01      	ldr	r2, [sp, #4]
   1a2fe:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1a302:	429a      	cmp	r2, r3
   1a304:	f43f aecf 	beq.w	1a0a6 <GPIOTE_IRQHandler+0x66>
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   1a308:	9a02      	ldr	r2, [sp, #8]
                        input[port_idx]         = new_input[port_idx];
   1a30a:	9301      	str	r3, [sp, #4]
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   1a30c:	9203      	str	r2, [sp, #12]
        while (repeat);
   1a30e:	e70e      	b.n	1a12e <GPIOTE_IRQHandler+0xee>
    return (NRF_GPIOTE->INTENSET & mask);
   1a310:	4a16      	ldr	r2, [pc, #88]	; (1a36c <GPIOTE_IRQHandler+0x32c>)
   1a312:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a316:	0651      	lsls	r1, r2, #25
   1a318:	f57f aebb 	bpl.w	1a092 <GPIOTE_IRQHandler+0x52>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a31c:	2200      	movs	r2, #0
   1a31e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a320:	681b      	ldr	r3, [r3, #0]
   1a322:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a324:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a326:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1a32a:	e6b2      	b.n	1a092 <GPIOTE_IRQHandler+0x52>
    return (NRF_GPIOTE->INTENSET & mask);
   1a32c:	4a0f      	ldr	r2, [pc, #60]	; (1a36c <GPIOTE_IRQHandler+0x32c>)
   1a32e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a332:	0690      	lsls	r0, r2, #26
   1a334:	f57f aea8 	bpl.w	1a088 <GPIOTE_IRQHandler+0x48>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a338:	2200      	movs	r2, #0
   1a33a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a33c:	681b      	ldr	r3, [r3, #0]
   1a33e:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a340:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a342:	f046 0620 	orr.w	r6, r6, #32
   1a346:	e69f      	b.n	1a088 <GPIOTE_IRQHandler+0x48>
   1a348:	40006100 	.word	0x40006100
   1a34c:	40006104 	.word	0x40006104
   1a350:	40006108 	.word	0x40006108
   1a354:	4000610c 	.word	0x4000610c
   1a358:	40006110 	.word	0x40006110
   1a35c:	40006114 	.word	0x40006114
   1a360:	40006118 	.word	0x40006118
   1a364:	4000611c 	.word	0x4000611c
   1a368:	4000617c 	.word	0x4000617c
   1a36c:	40006000 	.word	0x40006000
   1a370:	20001298 	.word	0x20001298
    return (NRF_GPIOTE->INTENSET & mask);
   1a374:	4a6c      	ldr	r2, [pc, #432]	; (1a528 <GPIOTE_IRQHandler+0x4e8>)
   1a376:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a37a:	06d4      	lsls	r4, r2, #27
   1a37c:	f57f ae7f 	bpl.w	1a07e <GPIOTE_IRQHandler+0x3e>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a380:	2200      	movs	r2, #0
   1a382:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a384:	681b      	ldr	r3, [r3, #0]
   1a386:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a388:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a38a:	f046 0610 	orr.w	r6, r6, #16
   1a38e:	e676      	b.n	1a07e <GPIOTE_IRQHandler+0x3e>
    return (NRF_GPIOTE->INTENSET & mask);
   1a390:	4a65      	ldr	r2, [pc, #404]	; (1a528 <GPIOTE_IRQHandler+0x4e8>)
   1a392:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a396:	0715      	lsls	r5, r2, #28
   1a398:	f57f ae6c 	bpl.w	1a074 <GPIOTE_IRQHandler+0x34>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a39c:	2200      	movs	r2, #0
   1a39e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a3a0:	681b      	ldr	r3, [r3, #0]
   1a3a2:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a3a4:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a3a6:	f046 0608 	orr.w	r6, r6, #8
   1a3aa:	e663      	b.n	1a074 <GPIOTE_IRQHandler+0x34>
    return (NRF_GPIOTE->INTENSET & mask);
   1a3ac:	4a5e      	ldr	r2, [pc, #376]	; (1a528 <GPIOTE_IRQHandler+0x4e8>)
   1a3ae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a3b2:	0757      	lsls	r7, r2, #29
   1a3b4:	f57f ae59 	bpl.w	1a06a <GPIOTE_IRQHandler+0x2a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a3b8:	2200      	movs	r2, #0
   1a3ba:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a3bc:	681b      	ldr	r3, [r3, #0]
   1a3be:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a3c0:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a3c2:	f046 0604 	orr.w	r6, r6, #4
   1a3c6:	e650      	b.n	1a06a <GPIOTE_IRQHandler+0x2a>
    return (NRF_GPIOTE->INTENSET & mask);
   1a3c8:	4a57      	ldr	r2, [pc, #348]	; (1a528 <GPIOTE_IRQHandler+0x4e8>)
   1a3ca:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a3ce:	0792      	lsls	r2, r2, #30
   1a3d0:	f57f ae46 	bpl.w	1a060 <GPIOTE_IRQHandler+0x20>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a3d4:	2200      	movs	r2, #0
   1a3d6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a3d8:	681b      	ldr	r3, [r3, #0]
   1a3da:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a3dc:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a3de:	f046 0602 	orr.w	r6, r6, #2
   1a3e2:	e63d      	b.n	1a060 <GPIOTE_IRQHandler+0x20>
    return (NRF_GPIOTE->INTENSET & mask);
   1a3e4:	4950      	ldr	r1, [pc, #320]	; (1a528 <GPIOTE_IRQHandler+0x4e8>)
   1a3e6:	f8d1 6304 	ldr.w	r6, [r1, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   1a3ea:	f016 0601 	ands.w	r6, r6, #1
   1a3ee:	f43f ae32 	beq.w	1a056 <GPIOTE_IRQHandler+0x16>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a3f2:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a3f4:	6813      	ldr	r3, [r2, #0]
   1a3f6:	9304      	str	r3, [sp, #16]
    (void)dummy;
   1a3f8:	9b04      	ldr	r3, [sp, #16]
            status |= mask;
   1a3fa:	e62c      	b.n	1a056 <GPIOTE_IRQHandler+0x16>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1a3fc:	2200      	movs	r2, #0
   1a3fe:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1a400:	681b      	ldr	r3, [r3, #0]
   1a402:	9305      	str	r3, [sp, #20]
   1a404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    (void)dummy;
   1a408:	9a05      	ldr	r2, [sp, #20]
   1a40a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   1a40e:	9301      	str	r3, [sp, #4]
    if (status & NRF_GPIOTE_INT_IN_MASK)
   1a410:	2e00      	cmp	r6, #0
   1a412:	f43f ae84 	beq.w	1a11e <GPIOTE_IRQHandler+0xde>
   1a416:	e663      	b.n	1a0e0 <GPIOTE_IRQHandler+0xa0>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   1a418:	2b03      	cmp	r3, #3
   1a41a:	f47f af6a 	bne.w	1a2f2 <GPIOTE_IRQHandler+0x2b2>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a41e:	2903      	cmp	r1, #3
   1a420:	f47f af63 	bne.w	1a2ea <GPIOTE_IRQHandler+0x2aa>
   1a424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1a428:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   1a42c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1a430:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a434:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   1a438:	4313      	orrs	r3, r2
   1a43a:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
                            if (handler)
   1a43e:	f1b8 0f00 	cmp.w	r8, #0
   1a442:	f43f af59 	beq.w	1a2f8 <GPIOTE_IRQHandler+0x2b8>
                                ++repeat;
   1a446:	3701      	adds	r7, #1
   1a448:	b2ff      	uxtb	r7, r7
   1a44a:	e751      	b.n	1a2f0 <GPIOTE_IRQHandler+0x2b0>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   1a44c:	2a03      	cmp	r2, #3
   1a44e:	f47f af19 	bne.w	1a284 <GPIOTE_IRQHandler+0x244>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a452:	2903      	cmp	r1, #3
   1a454:	f47f af12 	bne.w	1a27c <GPIOTE_IRQHandler+0x23c>
   1a458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1a45c:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   1a460:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1a464:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a468:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                                ++repeat;
   1a46c:	3701      	adds	r7, #1
   1a46e:	4313      	orrs	r3, r2
   1a470:	b2ff      	uxtb	r7, r7
   1a472:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
   1a476:	e701      	b.n	1a27c <GPIOTE_IRQHandler+0x23c>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   1a478:	2a03      	cmp	r2, #3
   1a47a:	f47f aecc 	bne.w	1a216 <GPIOTE_IRQHandler+0x1d6>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a47e:	2903      	cmp	r1, #3
   1a480:	f47f aec5 	bne.w	1a20e <GPIOTE_IRQHandler+0x1ce>
   1a484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1a488:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
   1a48c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1a490:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a494:	f8de 3700 	ldr.w	r3, [lr, #1792]	; 0x700
                                ++repeat;
   1a498:	3701      	adds	r7, #1
   1a49a:	4313      	orrs	r3, r2
   1a49c:	b2ff      	uxtb	r7, r7
   1a49e:	f8ce 3700 	str.w	r3, [lr, #1792]	; 0x700
   1a4a2:	e6b4      	b.n	1a20e <GPIOTE_IRQHandler+0x1ce>
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   1a4a4:	2903      	cmp	r1, #3
   1a4a6:	f47f ae7e 	bne.w	1a1a6 <GPIOTE_IRQHandler+0x166>
    p_mask8[byte_idx] |= (1 << bit);
   1a4aa:	f816 200c 	ldrb.w	r2, [r6, ip]
   1a4ae:	431a      	orrs	r2, r3
   1a4b0:	f806 200c 	strb.w	r2, [r6, ip]
   1a4b4:	e65c      	b.n	1a170 <GPIOTE_IRQHandler+0x130>
   1a4b6:	2903      	cmp	r1, #3
   1a4b8:	f47f af1b 	bne.w	1a2f2 <GPIOTE_IRQHandler+0x2b2>
   1a4bc:	f816 300e 	ldrb.w	r3, [r6, lr]
   1a4c0:	4313      	orrs	r3, r2
   1a4c2:	f806 300e 	strb.w	r3, [r6, lr]
   1a4c6:	e6fe      	b.n	1a2c6 <GPIOTE_IRQHandler+0x286>
   1a4c8:	2903      	cmp	r1, #3
   1a4ca:	f47f aedb 	bne.w	1a284 <GPIOTE_IRQHandler+0x244>
   1a4ce:	f816 200e 	ldrb.w	r2, [r6, lr]
   1a4d2:	431a      	orrs	r2, r3
   1a4d4:	f806 200e 	strb.w	r2, [r6, lr]
   1a4d8:	e6be      	b.n	1a258 <GPIOTE_IRQHandler+0x218>
   1a4da:	2903      	cmp	r1, #3
   1a4dc:	f47f ae9b 	bne.w	1a216 <GPIOTE_IRQHandler+0x1d6>
   1a4e0:	f816 200e 	ldrb.w	r2, [r6, lr]
   1a4e4:	431a      	orrs	r2, r3
   1a4e6:	f806 200e 	strb.w	r2, [r6, lr]
   1a4ea:	e67e      	b.n	1a1ea <GPIOTE_IRQHandler+0x1aa>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a4ec:	2903      	cmp	r1, #3
   1a4ee:	f47f ae51 	bne.w	1a194 <GPIOTE_IRQHandler+0x154>
   1a4f2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1a4f6:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   1a4fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1a4fe:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a502:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   1a506:	433b      	orrs	r3, r7
   1a508:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
                                ++repeat;
   1a50c:	2701      	movs	r7, #1
   1a50e:	e641      	b.n	1a194 <GPIOTE_IRQHandler+0x154>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a510:	f44f 3740 	mov.w	r7, #196608	; 0x30000
   1a514:	e7ef      	b.n	1a4f6 <GPIOTE_IRQHandler+0x4b6>
   1a516:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1a51a:	e7b5      	b.n	1a488 <GPIOTE_IRQHandler+0x448>
   1a51c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1a520:	e79c      	b.n	1a45c <GPIOTE_IRQHandler+0x41c>
   1a522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1a526:	e77f      	b.n	1a428 <GPIOTE_IRQHandler+0x3e8>
   1a528:	40006000 	.word	0x40006000

0001a52c <nrf_nvmc_page_erase>:
}

void nrf_nvmc_page_erase(uint32_t address)
{
    // Enable erase.
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een;
   1a52c:	4a0a      	ldr	r2, [pc, #40]	; (1a558 <nrf_nvmc_page_erase+0x2c>)
   1a52e:	2302      	movs	r3, #2
   1a530:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   1a534:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1a538:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();

    // Erase the page
    NRF_NVMC->ERASEPAGE = address;
   1a53c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {;}
   1a540:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a544:	2b00      	cmp	r3, #0
   1a546:	d0fb      	beq.n	1a540 <nrf_nvmc_page_erase+0x14>
    wait_for_flash_ready();

    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a548:	2300      	movs	r3, #0
   1a54a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   1a54e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1a552:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
   1a556:	4770      	bx	lr
   1a558:	4001e000 	.word	0x4001e000

0001a55c <nrf_nvmc_write_byte>:


void nrf_nvmc_write_byte(uint32_t address, uint8_t value)
{
   1a55c:	b470      	push	{r4, r5, r6}
    uint32_t byte_shift = address & (uint32_t)0x03;
    uint32_t address32 = address & ~byte_shift; // Address to the word this byte is in.
   1a55e:	f020 0503 	bic.w	r5, r0, #3
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   1a562:	00c0      	lsls	r0, r0, #3
   1a564:	f000 0318 	and.w	r3, r0, #24
    value32 = value32 + ((uint32_t)value << (byte_shift << 3));

    // Enable write.
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   1a568:	4a0e      	ldr	r2, [pc, #56]	; (1a5a4 <nrf_nvmc_write_byte+0x48>)
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   1a56a:	6828      	ldr	r0, [r5, #0]
   1a56c:	24ff      	movs	r4, #255	; 0xff
   1a56e:	409c      	lsls	r4, r3
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   1a570:	2601      	movs	r6, #1
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   1a572:	ea20 0004 	bic.w	r0, r0, r4
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   1a576:	f8c2 6504 	str.w	r6, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   1a57a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1a57e:	f3bf 8f4f 	dsb	sy
    value32 = value32 + ((uint32_t)value << (byte_shift << 3));
   1a582:	fa01 f303 	lsl.w	r3, r1, r3
   1a586:	4403      	add	r3, r0
    __ISB();
    __DSB();

    *(uint32_t*)address32 = value32;
   1a588:	602b      	str	r3, [r5, #0]
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {;}
   1a58a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a58e:	2b00      	cmp	r3, #0
   1a590:	d0fb      	beq.n	1a58a <nrf_nvmc_write_byte+0x2e>
    wait_for_flash_ready();

    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos);
   1a592:	2300      	movs	r3, #0
   1a594:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   1a598:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1a59c:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
   1a5a0:	bc70      	pop	{r4, r5, r6}
   1a5a2:	4770      	bx	lr
   1a5a4:	4001e000 	.word	0x4001e000

0001a5a8 <sd_temp_get>:
 *
 * @param[out] p_temp Result of temperature measurement. Die temperature in 0.25 degrees Celsius.
 *
 * @retval ::NRF_SUCCESS A temperature measurement was done, and the temperature was written to temp
 */
SVCALL(SD_TEMP_GET, uint32_t, sd_temp_get(int32_t * p_temp));
   1a5a8:	df4c      	svc	76	; 0x4c
   1a5aa:	4770      	bx	lr

0001a5ac <sd_flash_write>:
* @retval ::NRF_ERROR_BUSY           The previous command has not yet completed.
* @retval ::NRF_ERROR_INVALID_LENGTH Size was 0, or higher than the maximum allowed size.
* @retval ::NRF_ERROR_FORBIDDEN      Tried to write to an address outside the application flash area.
* @retval ::NRF_SUCCESS              The command was accepted.
*/
SVCALL(SD_FLASH_WRITE, uint32_t, sd_flash_write(uint32_t * p_dst, uint32_t const * p_src, uint32_t size));
   1a5ac:	df29      	svc	41	; 0x29
   1a5ae:	4770      	bx	lr

0001a5b0 <sd_flash_page_erase>:
* @retval ::NRF_ERROR_INVALID_ADDR  Tried to erase to a non existing flash page.
* @retval ::NRF_ERROR_BUSY          The previous command has not yet completed.
* @retval ::NRF_ERROR_FORBIDDEN     Tried to erase a page outside the application flash area.
* @retval ::NRF_SUCCESS             The command was accepted.
*/
SVCALL(SD_FLASH_PAGE_ERASE, uint32_t, sd_flash_page_erase(uint32_t page_number));
   1a5b0:	df28      	svc	40	; 0x28
   1a5b2:	4770      	bx	lr

0001a5b4 <sd_ble_gap_adv_set_configure>:
 * @retval ::NRF_ERROR_NOT_SUPPORTED                   Unsupported data length or advertising parameter configuration.
 * @retval ::NRF_ERROR_NO_MEM                          Not enough memory to configure a new advertising handle. Update an
 *                                                     existing advertising handle instead.
 * @retval ::BLE_ERROR_GAP_UUID_LIST_MISMATCH Invalid UUID list supplied.
 */
SVCALL(SD_BLE_GAP_ADV_SET_CONFIGURE, uint32_t, sd_ble_gap_adv_set_configure(uint8_t *p_adv_handle, ble_gap_adv_data_t const *p_adv_data, ble_gap_adv_params_t const *p_adv_params));
   1a5b4:	df72      	svc	114	; 0x72
   1a5b6:	4770      	bx	lr

0001a5b8 <sd_ble_gap_adv_start>:
 *                                        - p_adv_params is configured with connectable advertising, but the event_length parameter
 *                                          associated with conn_cfg_tag is too small to be able to establish a connection on
 *                                          the selected advertising phys. Use @ref sd_ble_cfg_set to increase the event length.
 * @retval ::NRF_ERROR_NOT_SUPPORTED Unsupported PHYs supplied to the call.
 */
SVCALL(SD_BLE_GAP_ADV_START, uint32_t, sd_ble_gap_adv_start(uint8_t adv_handle, uint8_t conn_cfg_tag));
   1a5b8:	df73      	svc	115	; 0x73
   1a5ba:	4770      	bx	lr

0001a5bc <sd_ble_gap_adv_stop>:
 *
 * @retval ::NRF_SUCCESS The BLE stack has stopped advertising.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Invalid advertising handle.
 * @retval ::NRF_ERROR_INVALID_STATE The advertising handle is not advertising.
 */
SVCALL(SD_BLE_GAP_ADV_STOP, uint32_t, sd_ble_gap_adv_stop(uint8_t adv_handle));
   1a5bc:	df74      	svc	116	; 0x74
   1a5be:	4770      	bx	lr

0001a5c0 <sd_ble_gap_tx_power_set>:
 * @retval ::NRF_SUCCESS Successfully changed the transmit power.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid parameter(s) supplied.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Advertising handle not found.
 * @retval ::BLE_ERROR_INVALID_CONN_HANDLE Invalid connection handle supplied.
 */
SVCALL(SD_BLE_GAP_TX_POWER_SET, uint32_t, sd_ble_gap_tx_power_set(uint8_t role, uint16_t handle, int8_t tx_power));
   1a5c0:	df77      	svc	119	; 0x77
   1a5c2:	4770      	bx	lr

0001a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>:
struct Errors {

                //if error, show error code 3 times, 
                //reset unless also pass in false
SA  check       (uint16_t err, bool reboot = true) {
                    if( err == 0 ) return;
   1a5c4:	2800      	cmp	r0, #0
   1a5c6:	f000 8089 	beq.w	1a6dc <Errors::check(unsigned short, bool) [clone .constprop.0]+0x118>
SA  check       (uint16_t err, bool reboot = true) {
   1a5ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5ce:	4e44      	ldr	r6, [pc, #272]	; (1a6e0 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x11c>)
   1a5d0:	4680      	mov	r8, r0
                    if( err == 0 ) return;
   1a5d2:	f04f 0903 	mov.w	r9, #3
   1a5d6:	f046 0601 	orr.w	r6, r6, #1
SA  latchOn     ()          { reg.DETECTMODE = 1; }

//------------
//  status
//------------
SA  isOutput    ()          { return reg.DIRP; }
   1a5da:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000

            //show error code via led's, skip leading 0's
            //show 1-15 blinks for each nibble (0x01-0x0f)
            //a zero will be a short green blink
SA  error   (uint16_t hex) {
                bool lz = true;
   1a5de:	2501      	movs	r5, #1
                for( auto i = 12; i >= 0; i -= 4 ){
   1a5e0:	270c      	movs	r7, #12
                    uint8_t v = (hex>>i) bitand 0xf;
   1a5e2:	fa48 f307 	asr.w	r3, r8, r7
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   1a5e6:	f013 030f 	ands.w	r3, r3, #15
   1a5ea:	d04e      	beq.n	1a68a <Errors::check(unsigned short, bool) [clone .constprop.0]+0xc6>
   1a5ec:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
                //in places that sets a peripheral pin
                //  PSEL.SCA = board.sca.pinNumber();
SCA pinNumber   ()          { return Pin_; }

SA  blinkN      (uint16_t n, uint32_t mson, uint32_t msoff = 0, uint32_t lastdelayms = 0) {
                    if( not isOutput() ) return;
   1a5f0:	07d5      	lsls	r5, r2, #31
   1a5f2:	d529      	bpl.n	1a648 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x84>
                    if( not msoff ) msoff = mson;
                    while( n-- ){ 
   1a5f4:	3b01      	subs	r3, #1
   1a5f6:	b29d      	uxth	r5, r3
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a5f8:	f04f 0a80 	mov.w	sl, #128	; 0x80
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a5fc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a600:	0618      	lsls	r0, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a602:	bf4c      	ite	mi
   1a604:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a608:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   1a60c:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   1a610:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a614:	47b0      	blx	r6
        return;
    }

    do {
        nrf_delay_us(1000);
    } while (--ms_time);
   1a616:	f1bb 0b01 	subs.w	fp, fp, #1
   1a61a:	d1f9      	bne.n	1a610 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x4c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a61c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a620:	0619      	lsls	r1, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a622:	bf4c      	ite	mi
   1a624:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a628:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
   1a62c:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   1a630:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a634:	47b0      	blx	r6
   1a636:	f1bb 0b01 	subs.w	fp, fp, #1
   1a63a:	d1f9      	bne.n	1a630 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x6c>
                    while( n-- ){ 
   1a63c:	3d01      	subs	r5, #1
   1a63e:	b2ad      	uxth	r5, r5
   1a640:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a644:	429d      	cmp	r5, r3
   1a646:	d1d9      	bne.n	1a5fc <Errors::check(unsigned short, bool) [clone .constprop.0]+0x38>
   1a648:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
   1a64c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a650:	47b0      	blx	r6
   1a652:	3d01      	subs	r5, #1
   1a654:	d1fa      	bne.n	1a64c <Errors::check(unsigned short, bool) [clone .constprop.0]+0x88>
   1a656:	3f04      	subs	r7, #4
   1a658:	1d3b      	adds	r3, r7, #4
   1a65a:	d1c2      	bne.n	1a5e2 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x1e>
   1a65c:	f640 35b8 	movw	r5, #3000	; 0xbb8
   1a660:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a664:	47b0      	blx	r6
   1a666:	3d01      	subs	r5, #1
   1a668:	d1fa      	bne.n	1a660 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x9c>
                    for( auto i = 0; i < 3; i++ ){
   1a66a:	f1b9 0901 	subs.w	r9, r9, #1
   1a66e:	d1b6      	bne.n	1a5de <Errors::check(unsigned short, bool) [clone .constprop.0]+0x1a>
   1a670:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a674:	491b      	ldr	r1, [pc, #108]	; (1a6e4 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x120>)
   1a676:	4b1c      	ldr	r3, [pc, #112]	; (1a6e8 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x124>)
   1a678:	68ca      	ldr	r2, [r1, #12]
   1a67a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a67e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a680:	60cb      	str	r3, [r1, #12]
   1a682:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   1a686:	bf00      	nop
   1a688:	e7fd      	b.n	1a686 <Errors::check(unsigned short, bool) [clone .constprop.0]+0xc2>
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   1a68a:	2d00      	cmp	r5, #0
   1a68c:	d1e3      	bne.n	1a656 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x92>
SA  isOutput    ()          { return reg.DIRP; }
   1a68e:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
                    if( not isOutput() ) return;
   1a692:	07da      	lsls	r2, r3, #31
   1a694:	d5d8      	bpl.n	1a648 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x84>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a696:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a69a:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a69e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a6a2:	bf14      	ite	ne
   1a6a4:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a6a8:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   1a6ac:	2532      	movs	r5, #50	; 0x32
   1a6ae:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a6b2:	47b0      	blx	r6
   1a6b4:	3d01      	subs	r5, #1
   1a6b6:	d1fa      	bne.n	1a6ae <Errors::check(unsigned short, bool) [clone .constprop.0]+0xea>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a6b8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a6bc:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a6c0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a6c4:	bf14      	ite	ne
   1a6c6:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a6ca:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
   1a6ce:	2532      	movs	r5, #50	; 0x32
   1a6d0:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a6d4:	47b0      	blx	r6
   1a6d6:	3d01      	subs	r5, #1
   1a6d8:	d1fa      	bne.n	1a6d0 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x10c>
   1a6da:	e7b5      	b.n	1a648 <Errors::check(unsigned short, bool) [clone .constprop.0]+0x84>
   1a6dc:	4770      	bx	lr
   1a6de:	bf00      	nop
   1a6e0:	0001e800 	.word	0x0001e800
   1a6e4:	e000ed00 	.word	0xe000ed00
   1a6e8:	05fa0004 	.word	0x05fa0004

0001a6ec <Ble::eventHandler(ble_evt_t const*, void*)>:
------------------------------------------------------------------------------*/
struct Ble {

    private:
                    //unused, but if something shows up blink the red led
SA  eventHandler    (ble_evt_t const * p_ble_evt, void * p_context) {
   1a6ec:	b538      	push	{r3, r4, r5, lr}
SA  isOutput    ()          { return reg.DIRP; }
   1a6ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a6f2:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1a6f6:	07d2      	lsls	r2, r2, #31
   1a6f8:	d526      	bpl.n	1a748 <Ble::eventHandler(ble_evt_t const*, void*)+0x5c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a6fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1a6fe:	4c13      	ldr	r4, [pc, #76]	; (1a74c <Ble::eventHandler(ble_evt_t const*, void*)+0x60>)
   1a700:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a704:	f04f 0280 	mov.w	r2, #128	; 0x80
   1a708:	bf14      	ite	ne
   1a70a:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a70e:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1a712:	2505      	movs	r5, #5
   1a714:	f044 0401 	orr.w	r4, r4, #1
   1a718:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a71c:	47a0      	blx	r4
   1a71e:	3d01      	subs	r5, #1
   1a720:	d1fa      	bne.n	1a718 <Ble::eventHandler(ble_evt_t const*, void*)+0x2c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a726:	2505      	movs	r5, #5
   1a728:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1a72c:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a730:	f04f 0280 	mov.w	r2, #128	; 0x80
   1a734:	bf14      	ite	ne
   1a736:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a73a:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1a73e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a742:	47a0      	blx	r4
   1a744:	3d01      	subs	r5, #1
   1a746:	d1fa      	bne.n	1a73e <Ble::eventHandler(ble_evt_t const*, void*)+0x52>
                        switch (p_ble_evt->header.evt_id){
                            default:
                                board.caution(); //red blink
                                break;
                        }
                    }
   1a748:	bd38      	pop	{r3, r4, r5, pc}
   1a74a:	bf00      	nop
   1a74c:	0001e800 	.word	0x0001e800

0001a750 <BL651tempBoard::init()>:
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  init    () {
   1a754:	b410      	push	{r4}
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a756:	2201      	movs	r2, #1
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a758:	2480      	movs	r4, #128	; 0x80
   1a75a:	f44f 7080 	mov.w	r0, #256	; 0x100
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1a75e:	210c      	movs	r1, #12
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a760:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a764:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a768:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1a76c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1a770:	f8c3 176c 	str.w	r1, [r3, #1900]	; 0x76c
            }
   1a774:	bc10      	pop	{r4}
   1a776:	4770      	bx	lr

0001a778 <BL651tempBoard::alive()>:
SA  alive   () {
   1a778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
SA  isOutput    ()          { return reg.DIRP; }
   1a77c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a780:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
                    if( not isOutput() ) return;
   1a784:	07de      	lsls	r6, r3, #31
   1a786:	d52e      	bpl.n	1a7e6 <BL651tempBoard::alive()+0x6e>
   1a788:	4e32      	ldr	r6, [pc, #200]	; (1a854 <BL651tempBoard::alive()+0xdc>)
   1a78a:	f04f 0802 	mov.w	r8, #2
   1a78e:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a792:	f44f 7780 	mov.w	r7, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a796:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a79a:	05d8      	lsls	r0, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a79c:	bf4c      	ite	mi
   1a79e:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a7a2:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a7a6:	2532      	movs	r5, #50	; 0x32
   1a7a8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a7ac:	47b0      	blx	r6
   1a7ae:	3d01      	subs	r5, #1
   1a7b0:	d1fa      	bne.n	1a7a8 <BL651tempBoard::alive()+0x30>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a7b2:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a7b6:	05d9      	lsls	r1, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a7b8:	bf4c      	ite	mi
   1a7ba:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a7be:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a7c2:	2532      	movs	r5, #50	; 0x32
   1a7c4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a7c8:	47b0      	blx	r6
   1a7ca:	3d01      	subs	r5, #1
   1a7cc:	d1fa      	bne.n	1a7c4 <BL651tempBoard::alive()+0x4c>
                    while( n-- ){ 
   1a7ce:	f1b8 0f01 	cmp.w	r8, #1
   1a7d2:	d002      	beq.n	1a7da <BL651tempBoard::alive()+0x62>
   1a7d4:	f04f 0801 	mov.w	r8, #1
   1a7d8:	e7dd      	b.n	1a796 <BL651tempBoard::alive()+0x1e>
   1a7da:	24c8      	movs	r4, #200	; 0xc8
   1a7dc:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a7e0:	47b0      	blx	r6
   1a7e2:	3c01      	subs	r4, #1
   1a7e4:	d1fa      	bne.n	1a7dc <BL651tempBoard::alive()+0x64>
SA  isOutput    ()          { return reg.DIRP; }
   1a7e6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a7ea:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1a7ee:	07dd      	lsls	r5, r3, #31
   1a7f0:	d52d      	bpl.n	1a84e <BL651tempBoard::alive()+0xd6>
   1a7f2:	4e18      	ldr	r6, [pc, #96]	; (1a854 <BL651tempBoard::alive()+0xdc>)
   1a7f4:	f04f 0802 	mov.w	r8, #2
   1a7f8:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a7fc:	2780      	movs	r7, #128	; 0x80
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a7fe:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a802:	061a      	lsls	r2, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a804:	bf4c      	ite	mi
   1a806:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a80a:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a80e:	2532      	movs	r5, #50	; 0x32
   1a810:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a814:	47b0      	blx	r6
   1a816:	3d01      	subs	r5, #1
   1a818:	d1fa      	bne.n	1a810 <BL651tempBoard::alive()+0x98>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1a81a:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1a81e:	061b      	lsls	r3, r3, #24
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1a820:	bf4c      	ite	mi
   1a822:	f8c4 750c 	strmi.w	r7, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1a826:	f8c4 7508 	strpl.w	r7, [r4, #1288]	; 0x508
   1a82a:	2532      	movs	r5, #50	; 0x32
   1a82c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a830:	47b0      	blx	r6
   1a832:	3d01      	subs	r5, #1
   1a834:	d1fa      	bne.n	1a82c <BL651tempBoard::alive()+0xb4>
                    while( n-- ){ 
   1a836:	f1b8 0f01 	cmp.w	r8, #1
   1a83a:	d002      	beq.n	1a842 <BL651tempBoard::alive()+0xca>
   1a83c:	f04f 0801 	mov.w	r8, #1
   1a840:	e7dd      	b.n	1a7fe <BL651tempBoard::alive()+0x86>
   1a842:	24c8      	movs	r4, #200	; 0xc8
   1a844:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1a848:	47b0      	blx	r6
   1a84a:	3c01      	subs	r4, #1
   1a84c:	d1fa      	bne.n	1a844 <BL651tempBoard::alive()+0xcc>
            }
   1a84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a852:	bf00      	nop
   1a854:	0001e800 	.word	0x0001e800

0001a858 <Saadc::isBusy()>:
    reg { *(reinterpret_cast<Saadc_*>(base_)) };

//--------------------
//  control, status
//--------------------
SA  isBusy          ()          { return reg.STATUS; } //conversion in progress?
   1a858:	4b01      	ldr	r3, [pc, #4]	; (1a860 <Saadc::isBusy()+0x8>)
   1a85a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   1a85e:	4770      	bx	lr
   1a860:	40007000 	.word	0x40007000

0001a864 <Saadc::enable()>:
SA  enable          ()          { reg.ENABLE = 1; }
   1a864:	4b02      	ldr	r3, [pc, #8]	; (1a870 <Saadc::enable()+0xc>)
   1a866:	2201      	movs	r2, #1
   1a868:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a86c:	4770      	bx	lr
   1a86e:	bf00      	nop
   1a870:	40007000 	.word	0x40007000

0001a874 <Saadc::disable()>:
SA  disable         ()          { reg.ENABLE = 0; }
   1a874:	4b02      	ldr	r3, [pc, #8]	; (1a880 <Saadc::disable()+0xc>)
   1a876:	2200      	movs	r2, #0
   1a878:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a87c:	4770      	bx	lr
   1a87e:	bf00      	nop
   1a880:	40007000 	.word	0x40007000

0001a884 <Saadc::clearStarted()>:
SA  isEnabled       ()          { return reg.ENABLE; }

//--------------------
//  events
//--------------------
SA  clearStarted    ()          { reg.EVENTS.STARTED = 0; }
   1a884:	4b02      	ldr	r3, [pc, #8]	; (1a890 <Saadc::clearStarted()+0xc>)
   1a886:	2200      	movs	r2, #0
   1a888:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a88c:	4770      	bx	lr
   1a88e:	bf00      	nop
   1a890:	40007000 	.word	0x40007000

0001a894 <Saadc::clearBufferFull()>:
SA  clearBufferFull ()          { reg.EVENTS.END = 0; }
   1a894:	4b02      	ldr	r3, [pc, #8]	; (1a8a0 <Saadc::clearBufferFull()+0xc>)
   1a896:	2200      	movs	r2, #0
   1a898:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a89c:	4770      	bx	lr
   1a89e:	bf00      	nop
   1a8a0:	40007000 	.word	0x40007000

0001a8a4 <Saadc::clearConversion()>:
SA  clearConversion ()          { reg.EVENTS.DONE = 0; }
   1a8a4:	4b02      	ldr	r3, [pc, #8]	; (1a8b0 <Saadc::clearConversion()+0xc>)
   1a8a6:	2200      	movs	r2, #0
   1a8a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a8ac:	4770      	bx	lr
   1a8ae:	bf00      	nop
   1a8b0:	40007000 	.word	0x40007000

0001a8b4 <Saadc::clearResult()>:
SA  clearResult     ()          { reg.EVENTS.RESULTDONE = 0; }
   1a8b4:	4b02      	ldr	r3, [pc, #8]	; (1a8c0 <Saadc::clearResult()+0xc>)
   1a8b6:	2200      	movs	r2, #0
   1a8b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   1a8bc:	4770      	bx	lr
   1a8be:	bf00      	nop
   1a8c0:	40007000 	.word	0x40007000

0001a8c4 <Saadc::clearCalibrated()>:
SA  clearCalibrated ()          { reg.EVENTS.CALIBRATEDONE = 0; }
   1a8c4:	4b02      	ldr	r3, [pc, #8]	; (1a8d0 <Saadc::clearCalibrated()+0xc>)
   1a8c6:	2200      	movs	r2, #0
   1a8c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a8cc:	4770      	bx	lr
   1a8ce:	bf00      	nop
   1a8d0:	40007000 	.word	0x40007000

0001a8d4 <Saadc::clearStopped()>:
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1a8d4:	4b02      	ldr	r3, [pc, #8]	; (1a8e0 <Saadc::clearStopped()+0xc>)
   1a8d6:	2200      	movs	r2, #0
   1a8d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1a8dc:	4770      	bx	lr
   1a8de:	bf00      	nop
   1a8e0:	40007000 	.word	0x40007000

0001a8e4 <Saadc::clearEvents()>:
SA  clearLimitHigh  (CH e)      { reg.EVENTS.LIMIT[e].H = 0; }
SA  clearLimitLow   (CH e)      { reg.EVENTS.LIMIT[e].L = 0; }
SA  clearEvents     ()          { 
   1a8e4:	b508      	push	{r3, lr}
                                    clearStarted();
   1a8e6:	f7ff ffcd 	bl	1a884 <Saadc::clearStarted()>
                                    clearBufferFull();
   1a8ea:	f7ff ffd3 	bl	1a894 <Saadc::clearBufferFull()>
                                    clearConversion();
   1a8ee:	f7ff ffd9 	bl	1a8a4 <Saadc::clearConversion()>
                                    clearResult();
   1a8f2:	f7ff ffdf 	bl	1a8b4 <Saadc::clearResult()>
                                    clearStopped();
   1a8f6:	f7ff ffed 	bl	1a8d4 <Saadc::clearStopped()>
                                }
   1a8fa:	bd08      	pop	{r3, pc}

0001a8fc <Saadc::isResult()>:

SA  isStarted       ()          { return reg.EVENTS.STARTED; }
SA  isBufferFull    ()          { return reg.EVENTS.END; } //ram buffer is filled
SA  isConversion    ()          { return reg.EVENTS.DONE; } //a conversion was done
SA  isResult        ()          { return reg.EVENTS.RESULTDONE; } //when conversion(s) stored to ram
   1a8fc:	4b01      	ldr	r3, [pc, #4]	; (1a904 <Saadc::isResult()+0x8>)
   1a8fe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   1a902:	4770      	bx	lr
   1a904:	40007000 	.word	0x40007000

0001a908 <Saadc::isCalibrated()>:
SA  isCalibrated    ()          { return reg.EVENTS.CALIBRATEDONE; }
   1a908:	4b01      	ldr	r3, [pc, #4]	; (1a910 <Saadc::isCalibrated()+0x8>)
   1a90a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1a90e:	4770      	bx	lr
   1a910:	40007000 	.word	0x40007000

0001a914 <Saadc::start()>:
SA  isLimitLow      (CH e)      { return reg.EVENTS.LIMIT[e].L; }

//--------------------
//  tasks
//--------------------
SA  start           ()          { enable(); reg.TASKS.START = 1; } 
   1a914:	b508      	push	{r3, lr}
   1a916:	f7ff ffa5 	bl	1a864 <Saadc::enable()>
   1a91a:	4b02      	ldr	r3, [pc, #8]	; (1a924 <Saadc::start()+0x10>)
   1a91c:	2201      	movs	r2, #1
   1a91e:	601a      	str	r2, [r3, #0]
   1a920:	bd08      	pop	{r3, pc}
   1a922:	bf00      	nop
   1a924:	40007000 	.word	0x40007000

0001a928 <Saadc::sample()>:
SA  sample          ()          { reg.TASKS.SAMPLE = 1; } 
   1a928:	4b01      	ldr	r3, [pc, #4]	; (1a930 <Saadc::sample()+0x8>)
   1a92a:	2201      	movs	r2, #1
   1a92c:	605a      	str	r2, [r3, #4]
   1a92e:	4770      	bx	lr
   1a930:	40007000 	.word	0x40007000

0001a934 <Saadc::calibrate()>:
SA  stop            ()          { reg.TASKS.STOP = 1; } 
SA  calibrate       ()          {   
   1a934:	b508      	push	{r3, lr}
                                    enable();
   1a936:	f7ff ff95 	bl	1a864 <Saadc::enable()>
                                    reg.TASKS.CALIBRATE = 1;
   1a93a:	4b05      	ldr	r3, [pc, #20]	; (1a950 <Saadc::calibrate()+0x1c>)
   1a93c:	2201      	movs	r2, #1
   1a93e:	60da      	str	r2, [r3, #12]
                                    while( not isCalibrated() );
   1a940:	f7ff ffe2 	bl	1a908 <Saadc::isCalibrated()>
   1a944:	2800      	cmp	r0, #0
   1a946:	d0fb      	beq.n	1a940 <Saadc::calibrate()+0xc>
                                    clearCalibrated();
   1a948:	f7ff ffbc 	bl	1a8c4 <Saadc::clearCalibrated()>
                                    //leave enabled
                                }
   1a94c:	bd08      	pop	{r3, pc}
   1a94e:	bf00      	nop
   1a950:	40007000 	.word	0x40007000

0001a954 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>:

//--------------------
//  channel config
//--------------------
SA  isChannelUsed   (CH e)      { return inuse_ bitand (1<<e); }
SA  channelSetup    (CH e, U32 cfg, PSEL p, PSEL n = NC) { 
   1a954:	b470      	push	{r4, r5, r6}
                                    if( p or n ) inuse_ or_eq (1<<e);
   1a956:	ea52 0403 	orrs.w	r4, r2, r3
   1a95a:	d005      	beq.n	1a968 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x14>
   1a95c:	4d09      	ldr	r5, [pc, #36]	; (1a984 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x30>)
   1a95e:	2401      	movs	r4, #1
   1a960:	782e      	ldrb	r6, [r5, #0]
   1a962:	4084      	lsls	r4, r0
   1a964:	4334      	orrs	r4, r6
   1a966:	702c      	strb	r4, [r5, #0]
                                    reg.CHCONFIG[e].PSELP = p;
   1a968:	0100      	lsls	r0, r0, #4
   1a96a:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
   1a96e:	f504 44e0 	add.w	r4, r4, #28672	; 0x7000
   1a972:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = n; 
   1a976:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
                                    reg.CHCONFIG[e].CONFIG = cfg;                      
   1a97a:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
                                }
   1a97e:	bc70      	pop	{r4, r5, r6}
   1a980:	4770      	bx	lr
   1a982:	bf00      	nop
   1a984:	200013e3 	.word	0x200013e3

0001a988 <Saadc::channelRelease(Saadc::CH)>:
SA  channelRelease  (CH e)      {
   1a988:	b410      	push	{r4}
                                    inuse_ and_eq compl (1<<e); 
   1a98a:	4c0a      	ldr	r4, [pc, #40]	; (1a9b4 <Saadc::channelRelease(Saadc::CH)+0x2c>)
   1a98c:	0103      	lsls	r3, r0, #4
   1a98e:	7822      	ldrb	r2, [r4, #0]
   1a990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a994:	2101      	movs	r1, #1
   1a996:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1a99a:	fa01 f000 	lsl.w	r0, r1, r0
   1a99e:	ea22 0000 	bic.w	r0, r2, r0
                                    reg.CHCONFIG[e].PSELP = NC;
   1a9a2:	2200      	movs	r2, #0
   1a9a4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = NC;
   1a9a8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                    inuse_ and_eq compl (1<<e); 
   1a9ac:	7020      	strb	r0, [r4, #0]
                                }
   1a9ae:	bc10      	pop	{r4}
   1a9b0:	4770      	bx	lr
   1a9b2:	bf00      	nop
   1a9b4:	200013e3 	.word	0x200013e3

0001a9b8 <Saadc::channelOnly(Saadc::CH)>:
SA  channelOnly     (CH e)      {
   1a9b8:	b510      	push	{r4, lr}
                                    for( int i = CH0; i <= CH7; i++ ){
                                        if( e != i ) channelRelease( (CH)i );
   1a9ba:	4604      	mov	r4, r0
   1a9bc:	bb08      	cbnz	r0, 1aa02 <Saadc::channelOnly(Saadc::CH)+0x4a>
   1a9be:	2001      	movs	r0, #1
   1a9c0:	f7ff ffe2 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9c4:	2002      	movs	r0, #2
   1a9c6:	f7ff ffdf 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9ca:	2c03      	cmp	r4, #3
   1a9cc:	d10b      	bne.n	1a9e6 <Saadc::channelOnly(Saadc::CH)+0x2e>
   1a9ce:	2004      	movs	r0, #4
   1a9d0:	f7ff ffda 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9d4:	2005      	movs	r0, #5
   1a9d6:	f7ff ffd7 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9da:	2c06      	cmp	r4, #6
   1a9dc:	d10b      	bne.n	1a9f6 <Saadc::channelOnly(Saadc::CH)+0x3e>
   1a9de:	2007      	movs	r0, #7
   1a9e0:	f7ff ffd2 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
                                    }
                                }
   1a9e4:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   1a9e6:	2003      	movs	r0, #3
   1a9e8:	f7ff ffce 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9ec:	2c04      	cmp	r4, #4
   1a9ee:	d115      	bne.n	1aa1c <Saadc::channelOnly(Saadc::CH)+0x64>
   1a9f0:	2005      	movs	r0, #5
   1a9f2:	f7ff ffc9 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9f6:	2006      	movs	r0, #6
   1a9f8:	f7ff ffc6 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1a9fc:	2c07      	cmp	r4, #7
   1a9fe:	d1ee      	bne.n	1a9de <Saadc::channelOnly(Saadc::CH)+0x26>
                                }
   1aa00:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   1aa02:	2000      	movs	r0, #0
   1aa04:	f7ff ffc0 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1aa08:	2c01      	cmp	r4, #1
   1aa0a:	d0db      	beq.n	1a9c4 <Saadc::channelOnly(Saadc::CH)+0xc>
   1aa0c:	2001      	movs	r0, #1
   1aa0e:	f7ff ffbb 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1aa12:	2c02      	cmp	r4, #2
   1aa14:	d1d6      	bne.n	1a9c4 <Saadc::channelOnly(Saadc::CH)+0xc>
   1aa16:	2003      	movs	r0, #3
   1aa18:	f7ff ffb6 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1aa1c:	2004      	movs	r0, #4
   1aa1e:	f7ff ffb3 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1aa22:	2c05      	cmp	r4, #5
   1aa24:	d1d6      	bne.n	1a9d4 <Saadc::channelOnly(Saadc::CH)+0x1c>
   1aa26:	2006      	movs	r0, #6
   1aa28:	f7ff ffae 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
   1aa2c:	e7d7      	b.n	1a9de <Saadc::channelOnly(Saadc::CH)+0x26>
   1aa2e:	bf00      	nop

0001aa30 <Saadc::resolution(Saadc::RES)>:
SA  limitHL         (CH e, I16 H, I16 L) { limitH(e,H); limitL(e,L); }

//--------------------
//  config
//--------------------
SA  resolution      (RES e)         { reg.RESOLUTION = e; }
   1aa30:	4b01      	ldr	r3, [pc, #4]	; (1aa38 <Saadc::resolution(Saadc::RES)+0x8>)
   1aa32:	f8c3 05f0 	str.w	r0, [r3, #1520]	; 0x5f0
   1aa36:	4770      	bx	lr
   1aa38:	40007000 	.word	0x40007000

0001aa3c <Saadc::resolution()>:
SA  resolution      ()              { return RES(reg.RESOLUTION); }
   1aa3c:	4b02      	ldr	r3, [pc, #8]	; (1aa48 <Saadc::resolution()+0xc>)
   1aa3e:	f8d3 05f0 	ldr.w	r0, [r3, #1520]	; 0x5f0
   1aa42:	b2c0      	uxtb	r0, r0
   1aa44:	4770      	bx	lr
   1aa46:	bf00      	nop
   1aa48:	40007000 	.word	0x40007000

0001aa4c <Saadc::overSample(Saadc::OVERSAMP)>:

SA  overSample      (OVERSAMP e)    { reg.OVERSAMPLE = e; }
   1aa4c:	4b01      	ldr	r3, [pc, #4]	; (1aa54 <Saadc::overSample(Saadc::OVERSAMP)+0x8>)
   1aa4e:	f8c3 05f4 	str.w	r0, [r3, #1524]	; 0x5f4
   1aa52:	4770      	bx	lr
   1aa54:	40007000 	.word	0x40007000

0001aa58 <Saadc::overSample()>:
SA  overSample      ()              { return OVERSAMP(reg.OVERSAMPLE); }
   1aa58:	4b02      	ldr	r3, [pc, #8]	; (1aa64 <Saadc::overSample()+0xc>)
   1aa5a:	f8d3 05f4 	ldr.w	r0, [r3, #1524]	; 0x5f4
   1aa5e:	b2c0      	uxtb	r0, r0
   1aa60:	4770      	bx	lr
   1aa62:	bf00      	nop
   1aa64:	40007000 	.word	0x40007000

0001aa68 <Saadc::bufferAddr(unsigned long)>:
                                        if( v > 2047 ) v =2047;
                                        reg.SAMPLERATE = v bitor (1<<12);
                                    }
SA  sampleRateTask  ()              { reg.SAMPLERATE = 0; }

SA  bufferAddr      (U32 v)         { reg.RESULTPTR = v; }
   1aa68:	4b01      	ldr	r3, [pc, #4]	; (1aa70 <Saadc::bufferAddr(unsigned long)+0x8>)
   1aa6a:	f8c3 062c 	str.w	r0, [r3, #1580]	; 0x62c
   1aa6e:	4770      	bx	lr
   1aa70:	40007000 	.word	0x40007000

0001aa74 <Saadc::bufferSize(unsigned short)>:
SA  bufferAddr      ()              { return reg.RESULTPTR; }
SA  bufferSize      (U16 v)         { reg.RESULTMAXCNT = v; } //15bits (max 32767)
   1aa74:	4b01      	ldr	r3, [pc, #4]	; (1aa7c <Saadc::bufferSize(unsigned short)+0x8>)
   1aa76:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   1aa7a:	4770      	bx	lr
   1aa7c:	40007000 	.word	0x40007000

0001aa80 <Saadc::bufferSet(unsigned long, unsigned short)>:
SA  bufferSize      ()              { return reg.RESULTMAXCNT; }
SA  bufferSet       (U32 v, U16 n)  { bufferAddr(v); bufferSize(n); }
   1aa80:	b510      	push	{r4, lr}
   1aa82:	460c      	mov	r4, r1
   1aa84:	f7ff fff0 	bl	1aa68 <Saadc::bufferAddr(unsigned long)>
   1aa88:	4620      	mov	r0, r4
   1aa8a:	f7ff fff3 	bl	1aa74 <Saadc::bufferSize(unsigned short)>
   1aa8e:	bd10      	pop	{r4, pc}

0001aa90 <SaadcChan::setConfig(short&)>:
    private:
//============

                    //setup our channel config and buffer in Saadc
                    //take exclusive use of Saadc
SA setConfig        (I16& v) {
   1aa90:	b538      	push	{r3, r4, r5, lr}
   1aa92:	4604      	mov	r4, r0
                        if( isBusy() ) return false;        //is in use
   1aa94:	f7ff fee0 	bl	1a858 <Saadc::isBusy()>
   1aa98:	b9a8      	cbnz	r0, 1aac6 <SaadcChan::setConfig(short&)+0x36>
                        if( pselP_ == NC and pselN_ == NC ) return false; //or we are not init
   1aa9a:	4a0c      	ldr	r2, [pc, #48]	; (1aacc <SaadcChan::setConfig(short&)+0x3c>)
   1aa9c:	4b0c      	ldr	r3, [pc, #48]	; (1aad0 <SaadcChan::setConfig(short&)+0x40>)
   1aa9e:	7812      	ldrb	r2, [r2, #0]
   1aaa0:	781b      	ldrb	r3, [r3, #0]
   1aaa2:	ea52 0003 	orrs.w	r0, r2, r3
   1aaa6:	d00d      	beq.n	1aac4 <SaadcChan::setConfig(short&)+0x34>
                        channelSetup( ch_, config_, pselP_, pselN_ );  //set config and inputs
   1aaa8:	4d0a      	ldr	r5, [pc, #40]	; (1aad4 <SaadcChan::setConfig(short&)+0x44>)
   1aaaa:	490b      	ldr	r1, [pc, #44]	; (1aad8 <SaadcChan::setConfig(short&)+0x48>)
   1aaac:	7828      	ldrb	r0, [r5, #0]
   1aaae:	6809      	ldr	r1, [r1, #0]
   1aab0:	f7ff ff50 	bl	1a954 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>
                        bufferSet( (U32)&v, 1 );
   1aab4:	4620      	mov	r0, r4
   1aab6:	2101      	movs	r1, #1
   1aab8:	f7ff ffe2 	bl	1aa80 <Saadc::bufferSet(unsigned long, unsigned short)>
                        channelOnly( ch_ );                 //disable all other channels
   1aabc:	7828      	ldrb	r0, [r5, #0]
   1aabe:	f7ff ff7b 	bl	1a9b8 <Saadc::channelOnly(Saadc::CH)>
                        return true;
   1aac2:	2001      	movs	r0, #1
                    }
   1aac4:	bd38      	pop	{r3, r4, r5, pc}
                        if( isBusy() ) return false;        //is in use
   1aac6:	2000      	movs	r0, #0
                    }
   1aac8:	bd38      	pop	{r3, r4, r5, pc}
   1aaca:	bf00      	nop
   1aacc:	200013e1 	.word	0x200013e1
   1aad0:	200013e0 	.word	0x200013e0
   1aad4:	200013e2 	.word	0x200013e2
   1aad8:	200013dc 	.word	0x200013dc

0001aadc <SaadcChan::result1()>:
                    }

                    //get a single result (blocking) - 
                    //could be >1 sample if oversample is on
                    //TODO, should have timeout here  
SA  result1         () {
   1aadc:	b508      	push	{r3, lr}
                        clearResult();
   1aade:	f7ff fee9 	bl	1a8b4 <Saadc::clearResult()>
   1aae2:	e001      	b.n	1aae8 <SaadcChan::result1()+0xc>
                        for( ; not isResult(); sample() );  
   1aae4:	f7ff ff20 	bl	1a928 <Saadc::sample()>
   1aae8:	f7ff ff08 	bl	1a8fc <Saadc::isResult()>
   1aaec:	2800      	cmp	r0, #0
   1aaee:	d0f9      	beq.n	1aae4 <SaadcChan::result1()+0x8>
                    }
   1aaf0:	bd08      	pop	{r3, pc}
   1aaf2:	bf00      	nop

0001aaf4 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>:
//============
    public:
//============

                    //get with a specific resolution, and number of samples
SA  read            (I16& v, RES r, OVERSAMP s = OVEROFF) {
   1aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aaf6:	460e      	mov	r6, r1
   1aaf8:	4615      	mov	r5, r2
                        if( not setConfig( v ) ) return false;
   1aafa:	f7ff ffc9 	bl	1aa90 <SaadcChan::setConfig(short&)>
   1aafe:	4604      	mov	r4, r0
   1ab00:	b1f0      	cbz	r0, 1ab40 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x4c>
                        RES rr = resolution();          //save old
   1ab02:	f7ff ff9b 	bl	1aa3c <Saadc::resolution()>
   1ab06:	4607      	mov	r7, r0
                        OVERSAMP ss = overSample();
   1ab08:	f7ff ffa6 	bl	1aa58 <Saadc::overSample()>
   1ab0c:	4603      	mov	r3, r0
                        resolution( r );                //set new
   1ab0e:	4630      	mov	r0, r6
                        OVERSAMP ss = overSample();
   1ab10:	461e      	mov	r6, r3
                        resolution( r );                //set new
   1ab12:	f7ff ff8d 	bl	1aa30 <Saadc::resolution(Saadc::RES)>
                        overSample( s );
   1ab16:	4628      	mov	r0, r5
   1ab18:	f7ff ff98 	bl	1aa4c <Saadc::overSample(Saadc::OVERSAMP)>
                        start();                        //start will also enable
   1ab1c:	f7ff fefa 	bl	1a914 <Saadc::start()>
                        result1();
   1ab20:	f7ff ffdc 	bl	1aadc <SaadcChan::result1()>
                        resolution( rr );               //restore old
   1ab24:	4638      	mov	r0, r7
   1ab26:	f7ff ff83 	bl	1aa30 <Saadc::resolution(Saadc::RES)>
                        overSample( ss );
   1ab2a:	4630      	mov	r0, r6
   1ab2c:	f7ff ff8e 	bl	1aa4c <Saadc::overSample(Saadc::OVERSAMP)>
                        disable();
   1ab30:	f7ff fea0 	bl	1a874 <Saadc::disable()>
                        clearEvents();
   1ab34:	f7ff fed6 	bl	1a8e4 <Saadc::clearEvents()>
                        channelRelease( ch_ );
   1ab38:	4b02      	ldr	r3, [pc, #8]	; (1ab44 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x50>)
   1ab3a:	7818      	ldrb	r0, [r3, #0]
   1ab3c:	f7ff ff24 	bl	1a988 <Saadc::channelRelease(Saadc::CH)>
                        return true;
                    }
   1ab40:	4620      	mov	r0, r4
   1ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab44:	200013e2 	.word	0x200013e2

0001ab48 <Battery::update()>:
    SI SaadcChan vdd_{ SaadcChan::VDD };
    // millivolts  (adc*vref*1000*scale/resolution)
    // adc*3600/1024
    SI int16_t voltage_{ 0 }; 

SA  update          () {
   1ab48:	b530      	push	{r4, r5, lr}
                        static uint8_t count;
                        if( count == 0 ) {
   1ab4a:	4d1a      	ldr	r5, [pc, #104]	; (1abb4 <Battery::update()+0x6c>)
   1ab4c:	782c      	ldrb	r4, [r5, #0]
SA  update          () {
   1ab4e:	b083      	sub	sp, #12
                        if( count == 0 ) {
   1ab50:	b15c      	cbz	r4, 1ab6a <Battery::update()+0x22>
   1ab52:	4b19      	ldr	r3, [pc, #100]	; (1abb8 <Battery::update()+0x70>)
   1ab54:	f9b3 0000 	ldrsh.w	r0, [r3]
                            voltage_ = (int32_t)v * 3600 / 1024;
                            //make sure we are in some sane range
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
                        }
                        if( ++count >= updateInterval_ ) count = 0;  
   1ab58:	3401      	adds	r4, #1
   1ab5a:	b2e4      	uxtb	r4, r4
   1ab5c:	2c3b      	cmp	r4, #59	; 0x3b
   1ab5e:	bf8a      	itet	hi
   1ab60:	2300      	movhi	r3, #0
   1ab62:	702c      	strbls	r4, [r5, #0]
   1ab64:	702b      	strbhi	r3, [r5, #0]
                        return voltage_;
                    }
   1ab66:	b003      	add	sp, #12
   1ab68:	bd30      	pop	{r4, r5, pc}
                            vdd_.calibrate();
   1ab6a:	f7ff fee3 	bl	1a934 <Saadc::calibrate()>
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   1ab6e:	2203      	movs	r2, #3
   1ab70:	2101      	movs	r1, #1
   1ab72:	f10d 0006 	add.w	r0, sp, #6
                            int16_t v = 0;
   1ab76:	f8ad 4006 	strh.w	r4, [sp, #6]
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   1ab7a:	f7ff ffbb 	bl	1aaf4 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>
                            voltage_ = (int32_t)v * 3600 / 1024;
   1ab7e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   1ab82:	4b0d      	ldr	r3, [pc, #52]	; (1abb8 <Battery::update()+0x70>)
                            voltage_ = (int32_t)v * 3600 / 1024;
   1ab84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1ab88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1ab8c:	0100      	lsls	r0, r0, #4
   1ab8e:	bf48      	it	mi
   1ab90:	f200 30ff 	addwmi	r0, r0, #1023	; 0x3ff
   1ab94:	f340 208f 	sbfx	r0, r0, #10, #16
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   1ab98:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1ab9c:	db07      	blt.n	1abae <Battery::update()+0x66>
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
   1ab9e:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
   1aba2:	bfc8      	it	gt
   1aba4:	f242 700f 	movwgt	r0, #9999	; 0x270f
   1aba8:	8018      	strh	r0, [r3, #0]
   1abaa:	782c      	ldrb	r4, [r5, #0]
   1abac:	e7d4      	b.n	1ab58 <Battery::update()+0x10>
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   1abae:	2000      	movs	r0, #0
   1abb0:	8018      	strh	r0, [r3, #0]
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
   1abb2:	e7fa      	b.n	1abaa <Battery::update()+0x62>
   1abb4:	200013d6 	.word	0x200013d6
   1abb8:	200013d8 	.word	0x200013d8

0001abbc <Battery::read()>:
//============
    public:
//============

SA  read            () { return update(); }
   1abbc:	b508      	push	{r3, lr}
   1abbe:	f7ff ffc3 	bl	1ab48 <Battery::update()>
   1abc2:	bd08      	pop	{r3, pc}

0001abc4 <Battery::isOk()>:

SA  isOk            () { return voltage_ > 2100 ; }
   1abc4:	4b04      	ldr	r3, [pc, #16]	; (1abd8 <Battery::isOk()+0x14>)
   1abc6:	f9b3 0000 	ldrsh.w	r0, [r3]
   1abca:	f640 0334 	movw	r3, #2100	; 0x834
   1abce:	4298      	cmp	r0, r3
   1abd0:	bfd4      	ite	le
   1abd2:	2000      	movle	r0, #0
   1abd4:	2001      	movgt	r0, #1
   1abd6:	4770      	bx	lr
   1abd8:	200013d8 	.word	0x200013d8

0001abdc <Flags01::make(unsigned char*, unsigned char)>:
    Flags - 0x01 - 0x02, 0x01, flags
------------------------------------------------------------------------------*/
struct Flags01 {

SA  make            (uint8_t* buf, uint8_t flags) {
                        buf[0] = 2;
   1abdc:	2202      	movs	r2, #2
                        buf[1] = 1;
   1abde:	2301      	movs	r3, #1
                        buf[2] = flags;
   1abe0:	7081      	strb	r1, [r0, #2]
                        buf[0] = 2;
   1abe2:	7002      	strb	r2, [r0, #0]
                        buf[1] = 1;
   1abe4:	7043      	strb	r3, [r0, #1]
                        return 3;
                    }
   1abe6:	2003      	movs	r0, #3
   1abe8:	4770      	bx	lr
   1abea:	bf00      	nop

0001abec <CompleteName09::make(unsigned char*, char const*, unsigned char)>:
    -> if temp 0.0 to 99.9 then T 55.6 or T  3.4
    -> if temp -40.0 to -0.1 then T-10.5 or T -5.2
------------------------------------------------------------------------------*/
struct CompleteName09 {

SA  make            (uint8_t* buf, const char* str, uint8_t maxlen) {
   1abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abee:	4605      	mov	r5, r0
                        uint8_t slen = strlen( str );
   1abf0:	4608      	mov	r0, r1
SA  make            (uint8_t* buf, const char* str, uint8_t maxlen) {
   1abf2:	4617      	mov	r7, r2
   1abf4:	460e      	mov	r6, r1
                        uint8_t slen = strlen( str );
   1abf6:	f002 f825 	bl	1cc44 <strlen>
   1abfa:	b2c4      	uxtb	r4, r0
                        if( slen > maxlen ) slen = maxlen;
   1abfc:	42bc      	cmp	r4, r7
   1abfe:	bf28      	it	cs
   1ac00:	463c      	movcs	r4, r7
                        buf[0] = slen + 1;
   1ac02:	1c62      	adds	r2, r4, #1
                        buf[1] = 9;
   1ac04:	2309      	movs	r3, #9
                        buf[0] = slen + 1;
   1ac06:	702a      	strb	r2, [r5, #0]
                        memcpy( &buf[2], str, slen );
   1ac08:	4631      	mov	r1, r6
                        buf[1] = 9;
   1ac0a:	706b      	strb	r3, [r5, #1]
                        memcpy( &buf[2], str, slen );
   1ac0c:	1ca8      	adds	r0, r5, #2
   1ac0e:	4622      	mov	r2, r4
   1ac10:	f001 ffc6 	bl	1cba0 <memcpy>
                        return slen+2;
                    }
   1ac14:	1ca0      	adds	r0, r4, #2
   1ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac18 <UUID07::u16toBcd(unsigned short)>:
------------------------------------------------------------------------------*/
struct UUID07 {

SA  u16toBcd    (uint16_t v) {
                    return (((v/1000)%10)<<12) bitor
                            (((v/100 )%10)<<8 ) bitor
   1ac18:	4b19      	ldr	r3, [pc, #100]	; (1ac80 <UUID07::u16toBcd(unsigned short)+0x68>)
                    return (((v/1000)%10)<<12) bitor
   1ac1a:	4a1a      	ldr	r2, [pc, #104]	; (1ac84 <UUID07::u16toBcd(unsigned short)+0x6c>)
   1ac1c:	491a      	ldr	r1, [pc, #104]	; (1ac88 <UUID07::u16toBcd(unsigned short)+0x70>)
SA  u16toBcd    (uint16_t v) {
   1ac1e:	b430      	push	{r4, r5}
                            (((v/100 )%10)<<8 ) bitor
   1ac20:	fba3 4300 	umull	r4, r3, r3, r0
   1ac24:	095b      	lsrs	r3, r3, #5
   1ac26:	fba2 4503 	umull	r4, r5, r2, r3
                    return (((v/1000)%10)<<12) bitor
   1ac2a:	fba1 4100 	umull	r4, r1, r1, r0
                            (((v/100 )%10)<<8 ) bitor
   1ac2e:	08ed      	lsrs	r5, r5, #3
                    return (((v/1000)%10)<<12) bitor
   1ac30:	0989      	lsrs	r1, r1, #6
                            (((v/100 )%10)<<8 ) bitor
   1ac32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1ac36:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
                    return (((v/1000)%10)<<12) bitor
   1ac3a:	fba2 c501 	umull	ip, r5, r2, r1
                            (((v/10  )%10)<<4 ) bitor
                            v%10;
   1ac3e:	fba2 c400 	umull	ip, r4, r2, r0
                    return (((v/1000)%10)<<12) bitor
   1ac42:	08ed      	lsrs	r5, r5, #3
                            v%10;
   1ac44:	08e4      	lsrs	r4, r4, #3
                    return (((v/1000)%10)<<12) bitor
   1ac46:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1ac4a:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
                            (((v/10  )%10)<<4 ) bitor
   1ac4e:	b2a5      	uxth	r5, r4
   1ac50:	fba2 c205 	umull	ip, r2, r2, r5
                            v%10;
   1ac54:	eb04 0484 	add.w	r4, r4, r4, lsl #2
                            (((v/100 )%10)<<8 ) bitor
   1ac58:	b29b      	uxth	r3, r3
                            (((v/10  )%10)<<4 ) bitor
   1ac5a:	08d2      	lsrs	r2, r2, #3
                            v%10;
   1ac5c:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
                            (((v/100 )%10)<<8 ) bitor
   1ac60:	021b      	lsls	r3, r3, #8
                    return (((v/1000)%10)<<12) bitor
   1ac62:	b289      	uxth	r1, r1
                            (((v/10  )%10)<<4 ) bitor
   1ac64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                            v%10;
   1ac68:	b280      	uxth	r0, r0
                            (((v/10  )%10)<<4 ) bitor
   1ac6a:	eba5 0242 	sub.w	r2, r5, r2, lsl #1
                    return (((v/1000)%10)<<12) bitor
   1ac6e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                            v%10;
   1ac72:	4303      	orrs	r3, r0
                            (((v/10  )%10)<<4 ) bitor
   1ac74:	b290      	uxth	r0, r2
                }
   1ac76:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
   1ac7a:	bc30      	pop	{r4, r5}
   1ac7c:	4770      	bx	lr
   1ac7e:	bf00      	nop
   1ac80:	51eb851f 	.word	0x51eb851f
   1ac84:	cccccccd 	.word	0xcccccccd
   1ac88:	10624dd3 	.word	0x10624dd3

0001ac8c <UUID07::makeBCD(unsigned char*, unsigned short const (&) [8])>:
                    } 
                    return 18;
                }

                // [0] will not be converted to bcd
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   1ac8c:	b538      	push	{r3, r4, r5, lr}
                    buf[0] = 17;
   1ac8e:	2211      	movs	r2, #17
                    buf[1] = 7;
   1ac90:	2307      	movs	r3, #7
                    buf[0] = 17;
   1ac92:	7002      	strb	r2, [r0, #0]
                    buf[1] = 7;
   1ac94:	7043      	strb	r3, [r0, #1]
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   1ac96:	4604      	mov	r4, r0
                    uint8_t* pd = &buf[2];
                    for( auto i = 0; i < 8; i++ ){
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1ac98:	8808      	ldrh	r0, [r1, #0]
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   1ac9a:	460d      	mov	r5, r1
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1ac9c:	f7ff ffbc 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        if( i == 7 ) u = vals[i]; // 0xde9f no bcd conversion (degF)
                        *pd++ = u; //75
                        *pd++ = u>>8; //08
   1aca0:	1203      	asrs	r3, r0, #8
   1aca2:	70e3      	strb	r3, [r4, #3]
                        *pd++ = u; //75
   1aca4:	70a0      	strb	r0, [r4, #2]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1aca6:	8868      	ldrh	r0, [r5, #2]
   1aca8:	f7ff ffb6 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1acac:	1203      	asrs	r3, r0, #8
   1acae:	7163      	strb	r3, [r4, #5]
                        *pd++ = u; //75
   1acb0:	7120      	strb	r0, [r4, #4]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1acb2:	88a8      	ldrh	r0, [r5, #4]
   1acb4:	f7ff ffb0 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1acb8:	1203      	asrs	r3, r0, #8
   1acba:	71e3      	strb	r3, [r4, #7]
                        *pd++ = u; //75
   1acbc:	71a0      	strb	r0, [r4, #6]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1acbe:	88e8      	ldrh	r0, [r5, #6]
   1acc0:	f7ff ffaa 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1acc4:	1203      	asrs	r3, r0, #8
   1acc6:	7263      	strb	r3, [r4, #9]
                        *pd++ = u; //75
   1acc8:	7220      	strb	r0, [r4, #8]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1acca:	8928      	ldrh	r0, [r5, #8]
   1accc:	f7ff ffa4 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1acd0:	1203      	asrs	r3, r0, #8
   1acd2:	72e3      	strb	r3, [r4, #11]
                        *pd++ = u; //75
   1acd4:	72a0      	strb	r0, [r4, #10]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1acd6:	8968      	ldrh	r0, [r5, #10]
   1acd8:	f7ff ff9e 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1acdc:	1203      	asrs	r3, r0, #8
   1acde:	7363      	strb	r3, [r4, #13]
                        *pd++ = u; //75
   1ace0:	7320      	strb	r0, [r4, #12]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1ace2:	89a8      	ldrh	r0, [r5, #12]
   1ace4:	f7ff ff98 	bl	1ac18 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   1ace8:	1203      	asrs	r3, r0, #8
                        *pd++ = u; //75
   1acea:	73a0      	strb	r0, [r4, #14]
                        *pd++ = u>>8; //08
   1acec:	73e3      	strb	r3, [r4, #15]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   1acee:	89eb      	ldrh	r3, [r5, #14]
                        *pd++ = u; //75
   1acf0:	7423      	strb	r3, [r4, #16]
                        *pd++ = u>>8; //08
   1acf2:	121b      	asrs	r3, r3, #8
   1acf4:	7463      	strb	r3, [r4, #17]
                    } 
                    return 18;
                }
   1acf6:	2012      	movs	r0, #18
   1acf8:	bd38      	pop	{r3, r4, r5, pc}
   1acfa:	bf00      	nop

0001acfc <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::makeValidLetter(char)>:
    //bootloader is at 0xE0000, so use page before (0xE0000-0x1000 = 0xDF000)
    //for flash stored letter - 'A' - 'Z'
    SI volatile char& fullnameLetterFlash_{ *(reinterpret_cast<char*>(LAST_PAGE)) };
    SCA lastPageFlash_{LAST_PAGE};

SA  makeValidLetter (const char c)  { return (c >= 'A' and c <= 'Z') ? c : 'T'; }
   1acfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1ad00:	2b19      	cmp	r3, #25
   1ad02:	bf88      	it	hi
   1ad04:	2054      	movhi	r0, #84	; 0x54
   1ad06:	4770      	bx	lr

0001ad08 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getNameFlash()>:

SA  getName         () { return fullnameLetter_; }

SA  setName         (const char c) { fullnameLetter_ = makeValidLetter(c); }

SA  getNameFlash    () { return fullnameLetterFlash_; }
   1ad08:	f44f 333c 	mov.w	r3, #192512	; 0x2f000
   1ad0c:	7818      	ldrb	r0, [r3, #0]
   1ad0e:	4770      	bx	lr

0001ad10 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)>:
SA  sdFlashWrite    (const char ltr) {
   1ad10:	b570      	push	{r4, r5, r6, lr}
   1ad12:	4604      	mov	r4, r0
   1ad14:	b082      	sub	sp, #8
                        error.check( sd_flash_page_erase(lastPageFlash_/4096) );
   1ad16:	202f      	movs	r0, #47	; 0x2f
   1ad18:	f7ff fc4a 	bl	1a5b0 <sd_flash_page_erase>
   1ad1c:	b280      	uxth	r0, r0
   1ad1e:	4d17      	ldr	r5, [pc, #92]	; (1ad7c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)+0x6c>)
   1ad20:	f7ff fc50 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
   1ad24:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1ad28:	f045 0501 	orr.w	r5, r5, #1
   1ad2c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ad30:	47a8      	blx	r5
   1ad32:	3e01      	subs	r6, #1
   1ad34:	d1fa      	bne.n	1ad2c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)+0x1c>
                        if( fullnameLetterFlash_ != 0xFF ) error.check( NRF_EVT_FLASH_OPERATION_ERROR );
   1ad36:	f44f 333c 	mov.w	r3, #192512	; 0x2f000
   1ad3a:	781b      	ldrb	r3, [r3, #0]
   1ad3c:	2bff      	cmp	r3, #255	; 0xff
   1ad3e:	d002      	beq.n	1ad46 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)+0x36>
   1ad40:	2003      	movs	r0, #3
   1ad42:	f7ff fc3f 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( sd_flash_write((uint32_t*)lastPageFlash_, &v, 1 ) );
   1ad46:	2201      	movs	r2, #1
   1ad48:	a901      	add	r1, sp, #4
   1ad4a:	f44f 303c 	mov.w	r0, #192512	; 0x2f000
                        uint32_t v = ltr;
   1ad4e:	9401      	str	r4, [sp, #4]
                        error.check( sd_flash_write((uint32_t*)lastPageFlash_, &v, 1 ) );
   1ad50:	f7ff fc2c 	bl	1a5ac <sd_flash_write>
   1ad54:	b280      	uxth	r0, r0
   1ad56:	f7ff fc35 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
   1ad5a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1ad5e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ad62:	47a8      	blx	r5
   1ad64:	3e01      	subs	r6, #1
   1ad66:	d1fa      	bne.n	1ad5e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)+0x4e>
                        if( fullnameLetterFlash_ != ltr ) error.check( NRF_EVT_FLASH_OPERATION_ERROR );
   1ad68:	f44f 333c 	mov.w	r3, #192512	; 0x2f000
   1ad6c:	781b      	ldrb	r3, [r3, #0]
   1ad6e:	42a3      	cmp	r3, r4
   1ad70:	d002      	beq.n	1ad78 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)+0x68>
   1ad72:	2003      	movs	r0, #3
   1ad74:	f7ff fc26 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                    }
   1ad78:	b002      	add	sp, #8
   1ad7a:	bd70      	pop	{r4, r5, r6, pc}
   1ad7c:	0001e800 	.word	0x0001e800

0001ad80 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::flashWrite(char)>:
SA  flashWrite      (const char ltr) {
   1ad80:	b510      	push	{r4, lr}
   1ad82:	4604      	mov	r4, r0
                        if( nrf_sdh_is_enabled() ) return sdFlashWrite( ltr );
   1ad84:	f001 fdfc 	bl	1c980 <nrf_sdh_is_enabled>
   1ad88:	b950      	cbnz	r0, 1ada0 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::flashWrite(char)+0x20>
                        nrf_nvmc_page_erase(lastPageFlash_);
   1ad8a:	f44f 303c 	mov.w	r0, #192512	; 0x2f000
   1ad8e:	f7ff fbcd 	bl	1a52c <nrf_nvmc_page_erase>
                        nrf_nvmc_write_byte(lastPageFlash_, ltr);
   1ad92:	4621      	mov	r1, r4
   1ad94:	f44f 303c 	mov.w	r0, #192512	; 0x2f000
                    }
   1ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        nrf_nvmc_write_byte(lastPageFlash_, ltr);
   1ad9c:	f7ff bbde 	b.w	1a55c <nrf_nvmc_write_byte>
                        if( nrf_sdh_is_enabled() ) return sdFlashWrite( ltr );
   1ada0:	4620      	mov	r0, r4
   1ada2:	f7ff ffb5 	bl	1ad10 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::sdFlashWrite(char)>
                    }
   1ada6:	bd10      	pop	{r4, pc}

0001ada8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setNameFlash(char)>:

SA  setNameFlash    (const char ltr) {
   1ada8:	b538      	push	{r3, r4, r5, lr}
   1adaa:	4605      	mov	r5, r0
                        if( ltr != makeValidLetter( ltr ) ) return; //invalid
   1adac:	f7ff ffa6 	bl	1acfc <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::makeValidLetter(char)>
   1adb0:	42a8      	cmp	r0, r5
   1adb2:	d000      	beq.n	1adb6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setNameFlash(char)+0xe>
                        if( ltr != getNameFlash() ){ //not already stored
                            flashWrite( ltr );
                        }
                    }
   1adb4:	bd38      	pop	{r3, r4, r5, pc}
   1adb6:	4604      	mov	r4, r0
                        if( ltr != getNameFlash() ){ //not already stored
   1adb8:	f7ff ffa6 	bl	1ad08 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getNameFlash()>
   1adbc:	42a0      	cmp	r0, r4
   1adbe:	d0f9      	beq.n	1adb4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setNameFlash(char)+0xc>
                            flashWrite( ltr );
   1adc0:	4620      	mov	r0, r4
   1adc2:	f7ff ffdd 	bl	1ad80 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::flashWrite(char)>
                    }
   1adc6:	bd38      	pop	{r3, r4, r5, pc}

0001adc8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setName(char)>:
SA  setName         (const char c) { fullnameLetter_ = makeValidLetter(c); }
   1adc8:	b508      	push	{r3, lr}
   1adca:	f7ff ff97 	bl	1acfc <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::makeValidLetter(char)>
   1adce:	4b01      	ldr	r3, [pc, #4]	; (1add4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setName(char)+0xc>)
   1add0:	7018      	strb	r0, [r3, #0]
   1add2:	bd08      	pop	{r3, pc}
   1add4:	200013b5 	.word	0x200013b5

0001add8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()>:
                    //set name A-Z

                    // 5 green blinks = ready to press sw1
                    // press sw1 = red blink, letter++ (A-Z, A,B,C,D,...,Z,A,...)
                    // timeout 10 seconds (then 5 green blinks)
SA  init            () {
   1add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SA  isOutput    ()          { return reg.DIRP; }
   1addc:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   1ade0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 1b014 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x23c>
   1ade4:	f8d8 3720 	ldr.w	r3, [r8, #1824]	; 0x720
                    if( not isOutput() ) return;
   1ade8:	07d9      	lsls	r1, r3, #31
   1adea:	d524      	bpl.n	1ae36 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x5e>
   1adec:	f049 0601 	orr.w	r6, r9, #1
   1adf0:	2705      	movs	r7, #5
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1adf2:	f44f 7480 	mov.w	r4, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1adf6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   1adfa:	05da      	lsls	r2, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1adfc:	bf4c      	ite	mi
   1adfe:	f8c8 450c 	strmi.w	r4, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae02:	f8c8 4508 	strpl.w	r4, [r8, #1288]	; 0x508
                    if( not isOutput() ) return;
   1ae06:	2532      	movs	r5, #50	; 0x32
   1ae08:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae0c:	47b0      	blx	r6
   1ae0e:	3d01      	subs	r5, #1
   1ae10:	d1fa      	bne.n	1ae08 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x30>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1ae12:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   1ae16:	05db      	lsls	r3, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ae18:	bf4c      	ite	mi
   1ae1a:	f8c8 450c 	strmi.w	r4, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae1e:	f8c8 4508 	strpl.w	r4, [r8, #1288]	; 0x508
                    if( not isOutput() ) return;
   1ae22:	2532      	movs	r5, #50	; 0x32
   1ae24:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae28:	47b0      	blx	r6
   1ae2a:	3d01      	subs	r5, #1
   1ae2c:	d1fa      	bne.n	1ae24 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x4c>
                    while( n-- ){ 
   1ae2e:	3f01      	subs	r7, #1
   1ae30:	b2bf      	uxth	r7, r7
   1ae32:	2f00      	cmp	r7, #0
   1ae34:	d1df      	bne.n	1adf6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x1e>
   1ae36:	f049 0901 	orr.w	r9, r9, #1
                    if( not isOutput() ) return;
   1ae3a:	f04f 0800 	mov.w	r8, #0
   1ae3e:	2540      	movs	r5, #64	; 0x40
SA  isHigh      ()          { return reg.IN; }
   1ae40:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1ae44:	f8d6 3510 	ldr.w	r3, [r6, #1296]	; 0x510
                        char ltr = 'A'-1;
                        auto inactiveCount = 0;
                        board.ledGreen2.blinkN( 5, 50 );
                        for(; inactiveCount < (10000/50); ){ //10 seconds timeout
                            if( board.sw1.isOff() ){
   1ae48:	011f      	lsls	r7, r3, #4
   1ae4a:	f100 80e0 	bmi.w	1b00e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x236>
SA  isOutput    ()          { return reg.DIRP; }
   1ae4e:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1ae52:	07d8      	lsls	r0, r3, #31
   1ae54:	d521      	bpl.n	1ae9a <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0xc2>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1ae56:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1ae5a:	f013 0f80 	tst.w	r3, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ae5e:	f04f 0380 	mov.w	r3, #128	; 0x80
   1ae62:	bf14      	ite	ne
   1ae64:	f8c6 350c 	strne.w	r3, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae68:	f8c6 3508 	streq.w	r3, [r6, #1288]	; 0x508
   1ae6c:	2705      	movs	r7, #5
   1ae6e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae72:	47c8      	blx	r9
   1ae74:	3f01      	subs	r7, #1
   1ae76:	d1fa      	bne.n	1ae6e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x96>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1ae78:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1ae7c:	f013 0f80 	tst.w	r3, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ae80:	f04f 0380 	mov.w	r3, #128	; 0x80
   1ae84:	bf14      	ite	ne
   1ae86:	f8c6 350c 	strne.w	r3, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ae8a:	f8c6 3508 	streq.w	r3, [r6, #1288]	; 0x508
   1ae8e:	2705      	movs	r7, #5
   1ae90:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1ae94:	47c8      	blx	r9
   1ae96:	3f01      	subs	r7, #1
   1ae98:	d1fa      	bne.n	1ae90 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0xb8>
                                continue;
                            }
                            //sw1 pressed
                            board.ledRed1.blinkN( 1, 5 );
                            inactiveCount = 0;
                            if( ++ltr > 'Z' ) ltr = 'A';
   1ae9a:	3501      	adds	r5, #1
   1ae9c:	b2ed      	uxtb	r5, r5
SA  isOutput    ()          { return reg.DIRP; }
   1ae9e:	f8d6 376c 	ldr.w	r3, [r6, #1900]	; 0x76c
   1aea2:	2d5b      	cmp	r5, #91	; 0x5b
   1aea4:	bf28      	it	cs
   1aea6:	2541      	movcs	r5, #65	; 0x41
SA  isInput     ()          { return not isOutput() and isInbuf(); }
   1aea8:	07d9      	lsls	r1, r3, #31
   1aeaa:	d41c      	bmi.n	1aee6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x10e>
SA  isInbuf     ()          { return reg.INBUF == 0; } //1=off, 0=on
   1aeac:	f8d6 376c 	ldr.w	r3, [r6, #1900]	; 0x76c
SA  isInput     ()          { return not isOutput() and isInbuf(); }
   1aeb0:	079a      	lsls	r2, r3, #30
   1aeb2:	d418      	bmi.n	1aee6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x10e>
   1aeb4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1aeb8:	47c8      	blx	r9
   1aeba:	f640 32b8 	movw	r2, #3000	; 0xbb8
                //for switches, wait for sw release of N ms, or a max of 3 sec if no release
SA  debounce    (uint16_t ms = 50) {
                    if( not isInput() ) return;
                    uint16_t offcount = ms;
                    uint16_t allcount = 3000; //limit, can't wait here all day
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   1aebe:	1e57      	subs	r7, r2, #1
   1aec0:	2463      	movs	r4, #99	; 0x63
   1aec2:	b2bf      	uxth	r7, r7
   1aec4:	b17a      	cbz	r2, 1aee6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x10e>
SA  isHigh      ()          { return reg.IN; }
   1aec6:	f8d6 3510 	ldr.w	r3, [r6, #1296]	; 0x510
                        if( isOn() ) offcount = ms;
   1aeca:	011b      	lsls	r3, r3, #4
   1aecc:	d552      	bpl.n	1af74 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x19c>
   1aece:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1aed2:	47c8      	blx	r9
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   1aed4:	1e63      	subs	r3, r4, #1
   1aed6:	b29b      	uxth	r3, r3
   1aed8:	b12c      	cbz	r4, 1aee6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x10e>
   1aeda:	463a      	mov	r2, r7
   1aedc:	1e57      	subs	r7, r2, #1
   1aede:	461c      	mov	r4, r3
   1aee0:	b2bf      	uxth	r7, r7
   1aee2:	2a00      	cmp	r2, #0
   1aee4:	d1ef      	bne.n	1aec6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0xee>
SA  isHigh      ()          { return reg.IN; }
   1aee6:	f8d6 3510 	ldr.w	r3, [r6, #1296]	; 0x510
                            if( board.sw1.isOff() ){
   1aeea:	011c      	lsls	r4, r3, #4
   1aeec:	d5af      	bpl.n	1ae4e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x76>
   1aeee:	f04f 0801 	mov.w	r8, #1
__STATIC_INLINE void nrf_delay_ms(uint32_t ms_time)
   1aef2:	2732      	movs	r7, #50	; 0x32
   1aef4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1aef8:	47c8      	blx	r9
    } while (--ms_time);
   1aefa:	3f01      	subs	r7, #1
   1aefc:	d1fa      	bne.n	1aef4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x11c>
                        for(; inactiveCount < (10000/50); ){ //10 seconds timeout
   1aefe:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
   1af02:	d19f      	bne.n	1ae44 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x6c>
                            board.sw1.debounce( 100 );
                        }
                        if( ltr != ('A'-1) ){
   1af04:	2d40      	cmp	r5, #64	; 0x40
   1af06:	d146      	bne.n	1af96 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x1be>
SA  isOutput    ()          { return reg.DIRP; }
   1af08:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   1af0c:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
                    if( not isOutput() ) return;
   1af10:	07d9      	lsls	r1, r3, #31
   1af12:	d529      	bpl.n	1af68 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x190>
   1af14:	2605      	movs	r6, #5
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1af16:	f44f 7480 	mov.w	r4, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1af1a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
   1af1e:	05da      	lsls	r2, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1af20:	bf4c      	ite	mi
   1af22:	f8c7 450c 	strmi.w	r4, [r7, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1af26:	f8c7 4508 	strpl.w	r4, [r7, #1288]	; 0x508
   1af2a:	2532      	movs	r5, #50	; 0x32
   1af2c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1af30:	47c8      	blx	r9
   1af32:	3d01      	subs	r5, #1
   1af34:	d1fa      	bne.n	1af2c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x154>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1af36:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
   1af3a:	05db      	lsls	r3, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1af3c:	bf4c      	ite	mi
   1af3e:	f8c7 450c 	strmi.w	r4, [r7, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1af42:	f8c7 4508 	strpl.w	r4, [r7, #1288]	; 0x508
   1af46:	2532      	movs	r5, #50	; 0x32
   1af48:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1af4c:	47c8      	blx	r9
   1af4e:	3d01      	subs	r5, #1
   1af50:	d1fa      	bne.n	1af48 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x170>
                    while( n-- ){ 
   1af52:	3e01      	subs	r6, #1
   1af54:	b2b6      	uxth	r6, r6
   1af56:	2e00      	cmp	r6, #0
   1af58:	d1df      	bne.n	1af1a <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x142>
   1af5a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1af5e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1af62:	47c8      	blx	r9
   1af64:	3d01      	subs	r5, #1
   1af66:	d1fa      	bne.n	1af5e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x186>
                            board.ledGreen2.blinkN( 2, 250, 250, 1000 );
                        } else {
                            board.ledGreen2.blinkN( 5, 50, 50, 1000 );
                        }
                        //set ram version from flash
                        setName( getNameFlash() );
   1af68:	f7ff fece 	bl	1ad08 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getNameFlash()>
   1af6c:	f7ff ff2c 	bl	1adc8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setName(char)>
                    }
   1af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1af74:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   1af78:	3f01      	subs	r7, #1
   1af7a:	47c8      	blx	r9
   1af7c:	b2bf      	uxth	r7, r7
   1af7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1af82:	429f      	cmp	r7, r3
   1af84:	f04f 0463 	mov.w	r4, #99	; 0x63
   1af88:	d19d      	bne.n	1aec6 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0xee>
SA  isHigh      ()          { return reg.IN; }
   1af8a:	f8d6 3510 	ldr.w	r3, [r6, #1296]	; 0x510
                            if( board.sw1.isOff() ){
   1af8e:	011c      	lsls	r4, r3, #4
   1af90:	f57f af5d 	bpl.w	1ae4e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x76>
   1af94:	e7ab      	b.n	1aeee <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x116>
SA  isOutput    ()          { return reg.DIRP; }
   1af96:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
                            setNameFlash( ltr );
   1af9a:	4628      	mov	r0, r5
   1af9c:	f7ff ff04 	bl	1ada8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setNameFlash(char)>
   1afa0:	f8d6 3720 	ldr.w	r3, [r6, #1824]	; 0x720
                    if( not isOutput() ) return;
   1afa4:	07dd      	lsls	r5, r3, #31
   1afa6:	d5df      	bpl.n	1af68 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x190>
   1afa8:	f04f 0802 	mov.w	r8, #2
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1afac:	f44f 7780 	mov.w	r7, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1afb0:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1afb4:	05dc      	lsls	r4, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1afb6:	bf4c      	ite	mi
   1afb8:	f8c6 750c 	strmi.w	r7, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1afbc:	f8c6 7508 	strpl.w	r7, [r6, #1288]	; 0x508
   1afc0:	25fa      	movs	r5, #250	; 0xfa
   1afc2:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1afc6:	47c8      	blx	r9
   1afc8:	3d01      	subs	r5, #1
   1afca:	d1fa      	bne.n	1afc2 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x1ea>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1afcc:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1afd0:	05d8      	lsls	r0, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1afd2:	bf4c      	ite	mi
   1afd4:	f8c6 750c 	strmi.w	r7, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1afd8:	f8c6 7508 	strpl.w	r7, [r6, #1288]	; 0x508
   1afdc:	25fa      	movs	r5, #250	; 0xfa
   1afde:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1afe2:	47c8      	blx	r9
   1afe4:	3d01      	subs	r5, #1
   1afe6:	d1fa      	bne.n	1afde <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x206>
                    while( n-- ){ 
   1afe8:	f1b8 0f01 	cmp.w	r8, #1
   1afec:	d002      	beq.n	1aff4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x21c>
   1afee:	f04f 0801 	mov.w	r8, #1
   1aff2:	e7dd      	b.n	1afb0 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x1d8>
   1aff4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1aff8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1affc:	47c8      	blx	r9
   1affe:	3d01      	subs	r5, #1
   1b000:	d1fa      	bne.n	1aff8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x220>
                        setName( getNameFlash() );
   1b002:	f7ff fe81 	bl	1ad08 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getNameFlash()>
   1b006:	f7ff fedf 	bl	1adc8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::setName(char)>
                    }
   1b00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b00e:	f108 0801 	add.w	r8, r8, #1
   1b012:	e76e      	b.n	1aef2 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()+0x11a>
   1b014:	0001e800 	.word	0x0001e800

0001b018 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()>:
                        power( txPower_ );
                        if( Battery::isOk() ) board.ok(); else board.caution();

                    }

SA  stop            () -> void {
   1b018:	b510      	push	{r4, lr}
                        if( not isActive_ ) return;
   1b01a:	4c07      	ldr	r4, [pc, #28]	; (1b038 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0x20>)
   1b01c:	7823      	ldrb	r3, [r4, #0]
   1b01e:	b903      	cbnz	r3, 1b022 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0xa>
                        error.check( sd_ble_gap_adv_stop(handle_) );
                        isActive_ = false;
                    }
   1b020:	bd10      	pop	{r4, pc}
                        error.check( sd_ble_gap_adv_stop(handle_) );
   1b022:	4b06      	ldr	r3, [pc, #24]	; (1b03c <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0x24>)
   1b024:	7818      	ldrb	r0, [r3, #0]
   1b026:	f7ff fac9 	bl	1a5bc <sd_ble_gap_adv_stop>
   1b02a:	b280      	uxth	r0, r0
   1b02c:	f7ff faca 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        isActive_ = false;
   1b030:	2300      	movs	r3, #0
   1b032:	7023      	strb	r3, [r4, #0]
                    }
   1b034:	bd10      	pop	{r4, pc}
   1b036:	bf00      	nop
   1b038:	20001379 	.word	0x20001379
   1b03c:	20001140 	.word	0x20001140

0001b040 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidId(unsigned short)>:
SA  uuidId          (uint16_t v)    { uuidData_.id = v; }
   1b040:	4b01      	ldr	r3, [pc, #4]	; (1b048 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidId(unsigned short)+0x8>)
   1b042:	81d8      	strh	r0, [r3, #14]
   1b044:	4770      	bx	lr
   1b046:	bf00      	nop
   1b048:	200013b8 	.word	0x200013b8

0001b04c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidCountInc()>:
SA  uuidCountInc    ()              { if(++uuidData_.count > 9999) uuidData_.count = 0; return uuidData_.count; }
   1b04c:	4b05      	ldr	r3, [pc, #20]	; (1b064 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidCountInc()+0x18>)
   1b04e:	8998      	ldrh	r0, [r3, #12]
   1b050:	3001      	adds	r0, #1
   1b052:	b280      	uxth	r0, r0
   1b054:	f242 720f 	movw	r2, #9999	; 0x270f
   1b058:	4290      	cmp	r0, r2
   1b05a:	bf88      	it	hi
   1b05c:	2000      	movhi	r0, #0
   1b05e:	8198      	strh	r0, [r3, #12]
   1b060:	4770      	bx	lr
   1b062:	bf00      	nop
   1b064:	200013b8 	.word	0x200013b8

0001b068 <TemperatureSi7051<(unsigned char)5>::histSize()>:
    static inline Si7051< twi_ > si7051;

    public:

SA  average         () { return tempH.average(); }
SA  histSize        () { return HistSiz_; }
   1b068:	2005      	movs	r0, #5
   1b06a:	4770      	bx	lr

0001b06c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempShift()>:
SA  uuidTempShift   ()              { for(int i = 0; i < 4; uuidData_.tempHist[i] = uuidData_.tempHist[i+1], i++ ); }
   1b06c:	4b03      	ldr	r3, [pc, #12]	; (1b07c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempShift()+0x10>)
   1b06e:	f8d3 1002 	ldr.w	r1, [r3, #2]
   1b072:	f8d3 2006 	ldr.w	r2, [r3, #6]
   1b076:	6019      	str	r1, [r3, #0]
   1b078:	605a      	str	r2, [r3, #4]
   1b07a:	4770      	bx	lr
   1b07c:	200013b8 	.word	0x200013b8

0001b080 <TemperatureSi7051<(unsigned char)5>::average()>:
SA  average         () { return tempH.average(); }
   1b080:	b430      	push	{r4, r5}
                        for( auto& i : tempHistory_ ) avg += i;
   1b082:	4a0a      	ldr	r2, [pc, #40]	; (1b0ac <TemperatureSi7051<(unsigned char)5>::average()+0x2c>)
                        return avg / HistSiz_;
   1b084:	480a      	ldr	r0, [pc, #40]	; (1b0b0 <TemperatureSi7051<(unsigned char)5>::average()+0x30>)
                        for( auto& i : tempHistory_ ) avg += i;
   1b086:	8815      	ldrh	r5, [r2, #0]
   1b088:	8853      	ldrh	r3, [r2, #2]
   1b08a:	8894      	ldrh	r4, [r2, #4]
   1b08c:	88d1      	ldrh	r1, [r2, #6]
   1b08e:	8912      	ldrh	r2, [r2, #8]
   1b090:	442b      	add	r3, r5
   1b092:	4423      	add	r3, r4
   1b094:	440b      	add	r3, r1
   1b096:	4413      	add	r3, r2
                        return avg / HistSiz_;
   1b098:	b21b      	sxth	r3, r3
   1b09a:	fb80 2003 	smull	r2, r0, r0, r3
   1b09e:	17db      	asrs	r3, r3, #31
   1b0a0:	ebc3 0060 	rsb	r0, r3, r0, asr #1
SA  average         () { return tempH.average(); }
   1b0a4:	b200      	sxth	r0, r0
   1b0a6:	bc30      	pop	{r4, r5}
   1b0a8:	4770      	bx	lr
   1b0aa:	bf00      	nop
   1b0ac:	200013cc 	.word	0x200013cc
   1b0b0:	66666667 	.word	0x66666667

0001b0b4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempLatest(unsigned short)>:
SA  uuidTempLatest  (uint16_t v)    { uuidData_.tempHist[4] = v; }
   1b0b4:	4b01      	ldr	r3, [pc, #4]	; (1b0bc <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempLatest(unsigned short)+0x8>)
   1b0b6:	8118      	strh	r0, [r3, #8]
   1b0b8:	4770      	bx	lr
   1b0ba:	bf00      	nop
   1b0bc:	200013b8 	.word	0x200013b8

0001b0c0 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getName()>:
SA  getName         () { return fullnameLetter_; }
   1b0c0:	4b01      	ldr	r3, [pc, #4]	; (1b0c8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getName()+0x8>)
   1b0c2:	7818      	ldrb	r0, [r3, #0]
   1b0c4:	4770      	bx	lr
   1b0c6:	bf00      	nop
   1b0c8:	200013b5 	.word	0x200013b5

0001b0cc <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)>:
SA  power           (uint8_t v) {
   1b0cc:	b508      	push	{r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   1b0ce:	2809      	cmp	r0, #9
   1b0d0:	4b06      	ldr	r3, [pc, #24]	; (1b0ec <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)+0x20>)
   1b0d2:	4a07      	ldr	r2, [pc, #28]	; (1b0f0 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)+0x24>)
   1b0d4:	7819      	ldrb	r1, [r3, #0]
   1b0d6:	bf28      	it	cs
   1b0d8:	2009      	movcs	r0, #9
   1b0da:	5612      	ldrsb	r2, [r2, r0]
   1b0dc:	2001      	movs	r0, #1
   1b0de:	f7ff fa6f 	bl	1a5c0 <sd_ble_gap_tx_power_set>
                    }
   1b0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   1b0e6:	b280      	uxth	r0, r0
   1b0e8:	f7ff ba6c 	b.w	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
   1b0ec:	20001140 	.word	0x20001140
   1b0f0:	0001e7f0 	.word	0x0001e7f0

0001b0f4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()>:
SA  start           () -> void {
   1b0f4:	b570      	push	{r4, r5, r6, lr}
                        if( isActive_ ) return;
   1b0f6:	4c3b      	ldr	r4, [pc, #236]	; (1b1e4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xf0>)
   1b0f8:	7825      	ldrb	r5, [r4, #0]
   1b0fa:	b105      	cbz	r5, 1b0fe <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xa>
                    }
   1b0fc:	bd70      	pop	{r4, r5, r6, pc}
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   1b0fe:	4e3a      	ldr	r6, [pc, #232]	; (1b1e8 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xf4>)
   1b100:	4a3a      	ldr	r2, [pc, #232]	; (1b1ec <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xf8>)
   1b102:	493b      	ldr	r1, [pc, #236]	; (1b1f0 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xfc>)
   1b104:	4630      	mov	r0, r6
   1b106:	f7ff fa55 	bl	1a5b4 <sd_ble_gap_adv_set_configure>
   1b10a:	b280      	uxth	r0, r0
   1b10c:	f7ff fa5a 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( sd_ble_gap_adv_start(handle_, BLE_CONN_CFG_TAG_DEFAULT) );
   1b110:	4629      	mov	r1, r5
   1b112:	7830      	ldrb	r0, [r6, #0]
   1b114:	f7ff fa50 	bl	1a5b8 <sd_ble_gap_adv_start>
   1b118:	b280      	uxth	r0, r0
   1b11a:	f7ff fa53 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        power( txPower_ );
   1b11e:	4a35      	ldr	r2, [pc, #212]	; (1b1f4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x100>)
                        isActive_ = true;
   1b120:	2301      	movs	r3, #1
                        power( txPower_ );
   1b122:	7810      	ldrb	r0, [r2, #0]
                        isActive_ = true;
   1b124:	7023      	strb	r3, [r4, #0]
                        power( txPower_ );
   1b126:	f7ff ffd1 	bl	1b0cc <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)>
                        if( Battery::isOk() ) board.ok(); else board.caution();
   1b12a:	f7ff fd4b 	bl	1abc4 <Battery::isOk()>
SA  isOutput    ()          { return reg.DIRP; }
   1b12e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b132:	b358      	cbz	r0, 1b18c <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x98>
   1b134:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                    if( not isOutput() ) return;
   1b138:	07d1      	lsls	r1, r2, #31
   1b13a:	d5df      	bpl.n	1b0fc <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x8>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b13c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b140:	4c2d      	ldr	r4, [pc, #180]	; (1b1f8 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x104>)
   1b142:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b146:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b14a:	bf14      	ite	ne
   1b14c:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b150:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
SA  start           () -> void {
   1b154:	2505      	movs	r5, #5
   1b156:	f044 0401 	orr.w	r4, r4, #1
   1b15a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b15e:	47a0      	blx	r4
   1b160:	3d01      	subs	r5, #1
   1b162:	d1fa      	bne.n	1b15a <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x66>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b164:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b168:	2505      	movs	r5, #5
   1b16a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b16e:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b172:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b176:	bf14      	ite	ne
   1b178:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b17c:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1b180:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b184:	47a0      	blx	r4
   1b186:	3d01      	subs	r5, #1
   1b188:	d1fa      	bne.n	1b180 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x8c>
                    }
   1b18a:	bd70      	pop	{r4, r5, r6, pc}
SA  isOutput    ()          { return reg.DIRP; }
   1b18c:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
                    if( not isOutput() ) return;
   1b190:	07d2      	lsls	r2, r2, #31
   1b192:	d5b3      	bpl.n	1b0fc <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x8>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b194:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b198:	4c17      	ldr	r4, [pc, #92]	; (1b1f8 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x104>)
   1b19a:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b19e:	f04f 0280 	mov.w	r2, #128	; 0x80
   1b1a2:	bf14      	ite	ne
   1b1a4:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b1a8:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
SA  start           () -> void {
   1b1ac:	2505      	movs	r5, #5
   1b1ae:	f044 0401 	orr.w	r4, r4, #1
   1b1b2:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b1b6:	47a0      	blx	r4
   1b1b8:	3d01      	subs	r5, #1
   1b1ba:	d1fa      	bne.n	1b1b2 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xbe>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   1b1bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b1c0:	2505      	movs	r5, #5
   1b1c2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b1c6:	f012 0f80 	tst.w	r2, #128	; 0x80
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b1ca:	f04f 0280 	mov.w	r2, #128	; 0x80
   1b1ce:	bf14      	ite	ne
   1b1d0:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b1d4:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   1b1d8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b1dc:	47a0      	blx	r4
   1b1de:	3d01      	subs	r5, #1
   1b1e0:	d1fa      	bne.n	1b1d8 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xe4>
                    }
   1b1e2:	bd70      	pop	{r4, r5, r6, pc}
   1b1e4:	20001379 	.word	0x20001379
   1b1e8:	20001140 	.word	0x20001140
   1b1ec:	2000139c 	.word	0x2000139c
   1b1f0:	20001130 	.word	0x20001130
   1b1f4:	200013b4 	.word	0x200013b4
   1b1f8:	0001e800 	.word	0x0001e800

0001b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>:
    { MKhash("underline"),  "4m" },

};

template<typename Dev_>
int Markup(Dev_ dev, const char* str){
   1b1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    auto startStr = str;
    auto count = 0;
    for( ; *str; ){
   1b200:	7808      	ldrb	r0, [r1, #0]
   1b202:	2800      	cmp	r0, #0
   1b204:	f000 80c6 	beq.w	1b394 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x198>

        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
        startStr = str;
        if( not *str ) break; //incomplete markup
        str++; startStr++; //skip }
        if( not markupON ) continue;
   1b208:	4e6b      	ldr	r6, [pc, #428]	; (1b3b8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1bc>)
        return SEGGER_RTT_Write(N, buf, len);
   1b20a:	4f6c      	ldr	r7, [pc, #432]	; (1b3bc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c0>)
   1b20c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 1b404 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x208>
   1b210:	468a      	mov	sl, r1
    for( ; *str; ){
   1b212:	460c      	mov	r4, r1
    auto count = 0;
   1b214:	f04f 0900 	mov.w	r9, #0
   1b218:	e004      	b.n	1b224 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            str++;
   1b21a:	f10a 0a01 	add.w	sl, sl, #1
    for( ; *str; ){
   1b21e:	f89a 0000 	ldrb.w	r0, [sl]
   1b222:	b348      	cbz	r0, 1b278 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x7c>
        if( *str != '{' ){ 
   1b224:	287b      	cmp	r0, #123	; 0x7b
   1b226:	d1f8      	bne.n	1b21a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e>
        if( n ) count += dev.write( startStr, n );
   1b228:	ebba 0204 	subs.w	r2, sl, r4
   1b22c:	d16c      	bne.n	1b308 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x10c>
        if( *str == '{' ){ 
   1b22e:	f89a 5001 	ldrb.w	r5, [sl, #1]
   1b232:	2d7b      	cmp	r5, #123	; 0x7b
        str++; //skip {
   1b234:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   1b238:	d071      	beq.n	1b31e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x122>
        if( fg or bg ) str++;
   1b23a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1b23e:	2b42      	cmp	r3, #66	; 0x42
   1b240:	bf0a      	itet	eq
   1b242:	f89a 3002 	ldrbeq.w	r3, [sl, #2]
   1b246:	462b      	movne	r3, r5
   1b248:	f10a 0102 	addeq.w	r1, sl, #2
        while ( *str and *str != '}' ){ hash = hash * 33 + *str; str++; }
   1b24c:	b1bb      	cbz	r3, 1b27e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   1b24e:	2400      	movs	r4, #0
   1b250:	e003      	b.n	1b25a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x5e>
   1b252:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b256:	b294      	uxth	r4, r2
   1b258:	b18b      	cbz	r3, 1b27e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
   1b25a:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   1b25e:	2b7d      	cmp	r3, #125	; 0x7d
   1b260:	fa13 f282 	uxtah	r2, r3, r2
   1b264:	d1f5      	bne.n	1b252 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x56>
        if( not markupON ) continue;
   1b266:	7833      	ldrb	r3, [r6, #0]
        str++; startStr++; //skip }
   1b268:	f101 0a01 	add.w	sl, r1, #1
        if( not markupON ) continue;
   1b26c:	b953      	cbnz	r3, 1b284 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x88>
    for( ; *str; ){
   1b26e:	f89a 0000 	ldrb.w	r0, [sl]
        str++; startStr++; //skip }
   1b272:	4654      	mov	r4, sl
    for( ; *str; ){
   1b274:	2800      	cmp	r0, #0
   1b276:	d1d5      	bne.n	1b224 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x28>
            break;
        }
    }
    //print any remaining chars
    auto n = str - startStr;
    if( n ) count += dev.write( startStr, n );    
   1b278:	ebba 0204 	subs.w	r2, sl, r4
   1b27c:	d169      	bne.n	1b352 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x156>
    return count;
}
   1b27e:	4648      	mov	r0, r9
   1b280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( c.hash != hash ) continue;
   1b284:	f244 431d 	movw	r3, #17437	; 0x441d
   1b288:	429c      	cmp	r4, r3
   1b28a:	d050      	beq.n	1b32e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x132>
   1b28c:	f24f 235b 	movw	r3, #62043	; 0xf25b
   1b290:	429c      	cmp	r4, r3
   1b292:	d067      	beq.n	1b364 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x168>
   1b294:	f641 2331 	movw	r3, #6705	; 0x1a31
   1b298:	429c      	cmp	r4, r3
   1b29a:	d073      	beq.n	1b384 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x188>
   1b29c:	f24f 231c 	movw	r3, #61980	; 0xf21c
   1b2a0:	429c      	cmp	r4, r3
   1b2a2:	d05d      	beq.n	1b360 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x164>
   1b2a4:	f649 0308 	movw	r3, #38920	; 0x9808
   1b2a8:	429c      	cmp	r4, r3
   1b2aa:	d06f      	beq.n	1b38c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x190>
   1b2ac:	f246 439d 	movw	r3, #25757	; 0x649d
   1b2b0:	429c      	cmp	r4, r3
   1b2b2:	d069      	beq.n	1b388 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x18c>
   1b2b4:	f645 132b 	movw	r3, #22827	; 0x592b
   1b2b8:	429c      	cmp	r4, r3
   1b2ba:	d069      	beq.n	1b390 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x194>
   1b2bc:	f643 1361 	movw	r3, #14689	; 0x3961
   1b2c0:	429c      	cmp	r4, r3
   1b2c2:	d06b      	beq.n	1b39c <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a0>
   1b2c4:	f649 139c 	movw	r3, #39324	; 0x999c
   1b2c8:	429c      	cmp	r4, r3
   1b2ca:	d069      	beq.n	1b3a0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a4>
   1b2cc:	f246 7358 	movw	r3, #26456	; 0x6758
   1b2d0:	429c      	cmp	r4, r3
   1b2d2:	d061      	beq.n	1b398 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x19c>
   1b2d4:	f24b 3382 	movw	r3, #45954	; 0xb382
   1b2d8:	429c      	cmp	r4, r3
   1b2da:	d063      	beq.n	1b3a4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1a8>
   1b2dc:	f64e 6309 	movw	r3, #60937	; 0xee09
   1b2e0:	429c      	cmp	r4, r3
   1b2e2:	d061      	beq.n	1b3a8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ac>
   1b2e4:	f244 2363 	movw	r3, #16995	; 0x4263
   1b2e8:	429c      	cmp	r4, r3
   1b2ea:	d063      	beq.n	1b3b4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b8>
   1b2ec:	f64c 6396 	movw	r3, #52886	; 0xce96
   1b2f0:	429c      	cmp	r4, r3
   1b2f2:	d05d      	beq.n	1b3b0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b4>
   1b2f4:	f247 43e9 	movw	r3, #29929	; 0x74e9
   1b2f8:	429c      	cmp	r4, r3
   1b2fa:	d057      	beq.n	1b3ac <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1b0>
   1b2fc:	f24d 03a6 	movw	r3, #53414	; 0xd0a6
   1b300:	429c      	cmp	r4, r3
   1b302:	d1b4      	bne.n	1b26e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x72>
        for( auto& c : markupCodes ){
   1b304:	4c2e      	ldr	r4, [pc, #184]	; (1b3c0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c4>)
   1b306:	e013      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   1b308:	4621      	mov	r1, r4
   1b30a:	2000      	movs	r0, #0
   1b30c:	f001 f882 	bl	1c414 <SEGGER_RTT_Write>
        if( *str == '{' ){ 
   1b310:	f89a 5001 	ldrb.w	r5, [sl, #1]
   1b314:	2d7b      	cmp	r5, #123	; 0x7b
        if( n ) count += dev.write( startStr, n );
   1b316:	4481      	add	r9, r0
        str++; //skip {
   1b318:	f10a 0101 	add.w	r1, sl, #1
        if( *str == '{' ){ 
   1b31c:	d18d      	bne.n	1b23a <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x3e>
        return SEGGER_RTT_Write(N, buf, len);
   1b31e:	2201      	movs	r2, #1
   1b320:	2000      	movs	r0, #0
   1b322:	f001 f877 	bl	1c414 <SEGGER_RTT_Write>
            str++; 
   1b326:	f10a 0a02 	add.w	sl, sl, #2
            count += dev.write( str, 1 ); 
   1b32a:	4481      	add	r9, r0
            continue; 
   1b32c:	e777      	b.n	1b21e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        for( auto& c : markupCodes ){
   1b32e:	4c25      	ldr	r4, [pc, #148]	; (1b3c4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1c8>)
        return SEGGER_RTT_Write(N, buf, len);
   1b330:	2202      	movs	r2, #2
   1b332:	4639      	mov	r1, r7
   1b334:	2000      	movs	r0, #0
   1b336:	f001 f86d 	bl	1c414 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   1b33a:	2d46      	cmp	r5, #70	; 0x46
            count += dev.write( "\033[", 2 );
   1b33c:	4481      	add	r9, r0
            if( fg ) count += dev.write( "38;2;", 5 );
   1b33e:	d01a      	beq.n	1b376 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x17a>
            if( bg ) count += dev.write( "48;2;", 5 );
   1b340:	2d42      	cmp	r5, #66	; 0x42
   1b342:	d011      	beq.n	1b368 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x16c>
        return SEGGER_RTT_WriteString(N, buf);
   1b344:	6861      	ldr	r1, [r4, #4]
   1b346:	2000      	movs	r0, #0
   1b348:	f001 f976 	bl	1c638 <SEGGER_RTT_WriteString>
        str++; startStr++; //skip }
   1b34c:	4654      	mov	r4, sl
            count += dev.write( c.str );
   1b34e:	4481      	add	r9, r0
            break;
   1b350:	e765      	b.n	1b21e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x22>
        return SEGGER_RTT_Write(N, buf, len);
   1b352:	4621      	mov	r1, r4
   1b354:	f001 f85e 	bl	1c414 <SEGGER_RTT_Write>
    if( n ) count += dev.write( startStr, n );    
   1b358:	4481      	add	r9, r0
}
   1b35a:	4648      	mov	r0, r9
   1b35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for( auto& c : markupCodes ){
   1b360:	4c19      	ldr	r4, [pc, #100]	; (1b3c8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1cc>)
   1b362:	e7e5      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b364:	4c19      	ldr	r4, [pc, #100]	; (1b3cc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d0>)
   1b366:	e7e3      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
        return SEGGER_RTT_Write(N, buf, len);
   1b368:	2205      	movs	r2, #5
   1b36a:	4641      	mov	r1, r8
   1b36c:	2000      	movs	r0, #0
   1b36e:	f001 f851 	bl	1c414 <SEGGER_RTT_Write>
            if( bg ) count += dev.write( "48;2;", 5 );
   1b372:	4481      	add	r9, r0
   1b374:	e7e6      	b.n	1b344 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        return SEGGER_RTT_Write(N, buf, len);
   1b376:	4916      	ldr	r1, [pc, #88]	; (1b3d0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d4>)
   1b378:	2205      	movs	r2, #5
   1b37a:	2000      	movs	r0, #0
   1b37c:	f001 f84a 	bl	1c414 <SEGGER_RTT_Write>
            if( fg ) count += dev.write( "38;2;", 5 );
   1b380:	4481      	add	r9, r0
   1b382:	e7df      	b.n	1b344 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x148>
        for( auto& c : markupCodes ){
   1b384:	4c13      	ldr	r4, [pc, #76]	; (1b3d4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1d8>)
   1b386:	e7d3      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b388:	4c13      	ldr	r4, [pc, #76]	; (1b3d8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1dc>)
   1b38a:	e7d1      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b38c:	4c13      	ldr	r4, [pc, #76]	; (1b3dc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e0>)
   1b38e:	e7cf      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b390:	4c13      	ldr	r4, [pc, #76]	; (1b3e0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e4>)
   1b392:	e7cd      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
    auto count = 0;
   1b394:	4681      	mov	r9, r0
    return count;
   1b396:	e772      	b.n	1b27e <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x82>
        for( auto& c : markupCodes ){
   1b398:	4c12      	ldr	r4, [pc, #72]	; (1b3e4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1e8>)
   1b39a:	e7c9      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b39c:	4c12      	ldr	r4, [pc, #72]	; (1b3e8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1ec>)
   1b39e:	e7c7      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3a0:	4c12      	ldr	r4, [pc, #72]	; (1b3ec <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f0>)
   1b3a2:	e7c5      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3a4:	4c12      	ldr	r4, [pc, #72]	; (1b3f0 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f4>)
   1b3a6:	e7c3      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3a8:	4c12      	ldr	r4, [pc, #72]	; (1b3f4 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1f8>)
   1b3aa:	e7c1      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3ac:	4c12      	ldr	r4, [pc, #72]	; (1b3f8 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x1fc>)
   1b3ae:	e7bf      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3b0:	4c12      	ldr	r4, [pc, #72]	; (1b3fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x200>)
   1b3b2:	e7bd      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3b4:	4c12      	ldr	r4, [pc, #72]	; (1b400 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x204>)
   1b3b6:	e7bb      	b.n	1b330 <int Markup<DevRtt<0> >(DevRtt<0>, char const*)+0x134>
   1b3b8:	20001141 	.word	0x20001141
   1b3bc:	0001e4f4 	.word	0x0001e4f4
   1b3c0:	0001e880 	.word	0x0001e880
   1b3c4:	0001e808 	.word	0x0001e808
   1b3c8:	0001e820 	.word	0x0001e820
   1b3cc:	0001e810 	.word	0x0001e810
   1b3d0:	0001e4f8 	.word	0x0001e4f8
   1b3d4:	0001e818 	.word	0x0001e818
   1b3d8:	0001e830 	.word	0x0001e830
   1b3dc:	0001e828 	.word	0x0001e828
   1b3e0:	0001e838 	.word	0x0001e838
   1b3e4:	0001e850 	.word	0x0001e850
   1b3e8:	0001e840 	.word	0x0001e840
   1b3ec:	0001e848 	.word	0x0001e848
   1b3f0:	0001e858 	.word	0x0001e858
   1b3f4:	0001e860 	.word	0x0001e860
   1b3f8:	0001e878 	.word	0x0001e878
   1b3fc:	0001e870 	.word	0x0001e870
   1b400:	0001e868 	.word	0x0001e868
   1b404:	0001e500 	.word	0x0001e500

0001b408 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]>:
            bool markupON in nRFconfig.hpp

        if disabled, the existing markup code is ignored
------------------------------------------------------------------------------*/
template<typename Dev, typename...Ts>
int Print(Dev dev, const char* fmt, Ts...ts){
   1b408:	b510      	push	{r4, lr}
   1b40a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1b40e:	460b      	mov	r3, r1
    char buf[512];
    int n = snprintf( buf, 512, fmt, ts... );
   1b410:	9200      	str	r2, [sp, #0]
   1b412:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b416:	4602      	mov	r2, r0
   1b418:	a802      	add	r0, sp, #8
   1b41a:	f001 fbd7 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b41e:	b150      	cbz	r0, 1b436 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b420:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b424:	a902      	add	r1, sp, #8
   1b426:	db02      	blt.n	1b42e <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]+0x26>
   1b428:	4c0a      	ldr	r4, [pc, #40]	; (1b454 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]+0x4c>)
   1b42a:	7823      	ldrb	r3, [r4, #0]
   1b42c:	b933      	cbnz	r3, 1b43c <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]+0x34>
   1b42e:	f04f 0000 	mov.w	r0, #0
   1b432:	f7ff fee3 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    //ansi code
    markupON = false;
    n = Markup( dev, buf );
    markupON = true;
    return n;
}
   1b436:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b43a:	bd10      	pop	{r4, pc}
    markupON = false;
   1b43c:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b43e:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b442:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b444:	f7ff feda 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b448:	2301      	movs	r3, #1
   1b44a:	7023      	strb	r3, [r4, #0]
}
   1b44c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b450:	bd10      	pop	{r4, pc}
   1b452:	bf00      	nop
   1b454:	20001141 	.word	0x20001141

0001b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b458:	b510      	push	{r4, lr}
   1b45a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1b45e:	4602      	mov	r2, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b460:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b464:	4668      	mov	r0, sp
   1b466:	f001 fbb1 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b46a:	b150      	cbz	r0, 1b482 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x2a>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b46c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b470:	4669      	mov	r1, sp
   1b472:	db02      	blt.n	1b47a <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x22>
   1b474:	4c0a      	ldr	r4, [pc, #40]	; (1b4a0 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x48>)
   1b476:	7823      	ldrb	r3, [r4, #0]
   1b478:	b933      	cbnz	r3, 1b488 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]+0x30>
   1b47a:	f04f 0000 	mov.w	r0, #0
   1b47e:	f7ff febd 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b482:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1b486:	bd10      	pop	{r4, pc}
    markupON = false;
   1b488:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b48a:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b48e:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b490:	f7ff feb4 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b494:	2301      	movs	r3, #1
   1b496:	7023      	strb	r3, [r4, #0]
}
   1b498:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1b49c:	bd10      	pop	{r4, pc}
   1b49e:	bf00      	nop
   1b4a0:	20001141 	.word	0x20001141

0001b4a4 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b4a4:	b510      	push	{r4, lr}
   1b4a6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1b4aa:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b4ac:	9100      	str	r1, [sp, #0]
   1b4ae:	4a10      	ldr	r2, [pc, #64]	; (1b4f0 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1b4b0:	a802      	add	r0, sp, #8
   1b4b2:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b4b6:	f001 fb89 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b4ba:	b150      	cbz	r0, 1b4d2 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b4bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b4c0:	a902      	add	r1, sp, #8
   1b4c2:	db02      	blt.n	1b4ca <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x26>
   1b4c4:	4c0b      	ldr	r4, [pc, #44]	; (1b4f4 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x50>)
   1b4c6:	7823      	ldrb	r3, [r4, #0]
   1b4c8:	b933      	cbnz	r3, 1b4d8 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]+0x34>
   1b4ca:	f04f 0000 	mov.w	r0, #0
   1b4ce:	f7ff fe95 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b4d2:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b4d6:	bd10      	pop	{r4, pc}
    markupON = false;
   1b4d8:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b4da:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b4de:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b4e0:	f7ff fe8c 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b4e4:	2301      	movs	r3, #1
   1b4e6:	7023      	strb	r3, [r4, #0]
}
   1b4e8:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b4ec:	bd10      	pop	{r4, pc}
   1b4ee:	bf00      	nop
   1b4f0:	0001e508 	.word	0x0001e508
   1b4f4:	20001141 	.word	0x20001141

0001b4f8 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b4f8:	b510      	push	{r4, lr}
   1b4fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   1b4fe:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b500:	9100      	str	r1, [sp, #0]
   1b502:	4a10      	ldr	r2, [pc, #64]	; (1b544 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1b504:	a802      	add	r0, sp, #8
   1b506:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b50a:	f001 fb5f 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b50e:	b150      	cbz	r0, 1b526 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x2e>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b510:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b514:	a902      	add	r1, sp, #8
   1b516:	db02      	blt.n	1b51e <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x26>
   1b518:	4c0b      	ldr	r4, [pc, #44]	; (1b548 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x50>)
   1b51a:	7823      	ldrb	r3, [r4, #0]
   1b51c:	b933      	cbnz	r3, 1b52c <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]+0x34>
   1b51e:	f04f 0000 	mov.w	r0, #0
   1b522:	f7ff fe6b 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b526:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b52a:	bd10      	pop	{r4, pc}
    markupON = false;
   1b52c:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b52e:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b532:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b534:	f7ff fe62 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b538:	2301      	movs	r3, #1
   1b53a:	7023      	strb	r3, [r4, #0]
}
   1b53c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b540:	bd10      	pop	{r4, pc}
   1b542:	bf00      	nop
   1b544:	0001e510 	.word	0x0001e510
   1b548:	20001141 	.word	0x20001141

0001b54c <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b54c:	b510      	push	{r4, lr}
   1b54e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1b552:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b554:	4a0f      	ldr	r2, [pc, #60]	; (1b594 <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]+0x48>)
   1b556:	4668      	mov	r0, sp
   1b558:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b55c:	f001 fb36 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b560:	b150      	cbz	r0, 1b578 <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]+0x2c>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b562:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b566:	4669      	mov	r1, sp
   1b568:	db02      	blt.n	1b570 <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]+0x24>
   1b56a:	4c0b      	ldr	r4, [pc, #44]	; (1b598 <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1b56c:	7823      	ldrb	r3, [r4, #0]
   1b56e:	b933      	cbnz	r3, 1b57e <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]+0x32>
   1b570:	f04f 0000 	mov.w	r0, #0
   1b574:	f7ff fe42 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b578:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1b57c:	bd10      	pop	{r4, pc}
    markupON = false;
   1b57e:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b580:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b584:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b586:	f7ff fe39 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b58a:	2301      	movs	r3, #1
   1b58c:	7023      	strb	r3, [r4, #0]
}
   1b58e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1b592:	bd10      	pop	{r4, pc}
   1b594:	0001e514 	.word	0x0001e514
   1b598:	20001141 	.word	0x20001141

0001b59c <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b59c:	b510      	push	{r4, lr}
   1b59e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    int n = snprintf( buf, 512, fmt, ts... );
   1b5a2:	e9cd 1200 	strd	r1, r2, [sp]
int Print(Dev dev, const char* fmt, Ts...ts){
   1b5a6:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b5a8:	4a0f      	ldr	r2, [pc, #60]	; (1b5e8 <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1b5aa:	a802      	add	r0, sp, #8
   1b5ac:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b5b0:	f001 fb0c 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b5b4:	b150      	cbz	r0, 1b5cc <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]+0x30>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b5b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b5ba:	a902      	add	r1, sp, #8
   1b5bc:	db02      	blt.n	1b5c4 <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]+0x28>
   1b5be:	4c0b      	ldr	r4, [pc, #44]	; (1b5ec <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]+0x50>)
   1b5c0:	7823      	ldrb	r3, [r4, #0]
   1b5c2:	b933      	cbnz	r3, 1b5d2 <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]+0x36>
   1b5c4:	f04f 0000 	mov.w	r0, #0
   1b5c8:	f7ff fe18 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b5cc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b5d0:	bd10      	pop	{r4, pc}
    markupON = false;
   1b5d2:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b5d4:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b5d8:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b5da:	f7ff fe0f 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b5de:	2301      	movs	r3, #1
   1b5e0:	7023      	strb	r3, [r4, #0]
}
   1b5e2:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b5e6:	bd10      	pop	{r4, pc}
   1b5e8:	0001e51c 	.word	0x0001e51c
   1b5ec:	20001141 	.word	0x20001141

0001b5f0 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b5f0:	b510      	push	{r4, lr}
   1b5f2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    int n = snprintf( buf, 512, fmt, ts... );
   1b5f6:	e9cd 1200 	strd	r1, r2, [sp]
int Print(Dev dev, const char* fmt, Ts...ts){
   1b5fa:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1b5fc:	4a0f      	ldr	r2, [pc, #60]	; (1b63c <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1b5fe:	a802      	add	r0, sp, #8
   1b600:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b604:	f001 fae2 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b608:	b150      	cbz	r0, 1b620 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x30>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b60a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b60e:	a902      	add	r1, sp, #8
   1b610:	db02      	blt.n	1b618 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x28>
   1b612:	4c0b      	ldr	r4, [pc, #44]	; (1b640 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x50>)
   1b614:	7823      	ldrb	r3, [r4, #0]
   1b616:	b933      	cbnz	r3, 1b626 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]+0x36>
   1b618:	f04f 0000 	mov.w	r0, #0
   1b61c:	f7ff fdee 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b620:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b624:	bd10      	pop	{r4, pc}
    markupON = false;
   1b626:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b628:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b62c:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b62e:	f7ff fde5 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b632:	2301      	movs	r3, #1
   1b634:	7023      	strb	r3, [r4, #0]
}
   1b636:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1b63a:	bd10      	pop	{r4, pc}
   1b63c:	0001e53c 	.word	0x0001e53c
   1b640:	20001141 	.word	0x20001141

0001b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1b644:	b510      	push	{r4, lr}
   1b646:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
    int n = snprintf( buf, 512, fmt, ts... );
   1b64a:	e9cd 1200 	strd	r1, r2, [sp]
int Print(Dev dev, const char* fmt, Ts...ts){
   1b64e:	9c86      	ldr	r4, [sp, #536]	; 0x218
    int n = snprintf( buf, 512, fmt, ts... );
   1b650:	9302      	str	r3, [sp, #8]
   1b652:	4a11      	ldr	r2, [pc, #68]	; (1b698 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x54>)
   1b654:	9403      	str	r4, [sp, #12]
   1b656:	4603      	mov	r3, r0
   1b658:	f44f 7100 	mov.w	r1, #512	; 0x200
   1b65c:	a804      	add	r0, sp, #16
   1b65e:	f001 fab5 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1b662:	b150      	cbz	r0, 1b67a <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x36>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1b664:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1b668:	a904      	add	r1, sp, #16
   1b66a:	db02      	blt.n	1b672 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x2e>
   1b66c:	4c0b      	ldr	r4, [pc, #44]	; (1b69c <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x58>)
   1b66e:	7823      	ldrb	r3, [r4, #0]
   1b670:	b933      	cbnz	r3, 1b680 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]+0x3c>
   1b672:	f04f 0000 	mov.w	r0, #0
   1b676:	f7ff fdc1 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1b67a:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1b67e:	bd10      	pop	{r4, pc}
    markupON = false;
   1b680:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1b682:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1b686:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1b688:	f7ff fdb8 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1b68c:	2301      	movs	r3, #1
   1b68e:	7023      	strb	r3, [r4, #0]
}
   1b690:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   1b694:	bd10      	pop	{r4, pc}
   1b696:	bf00      	nop
   1b698:	0001e55c 	.word	0x0001e55c
   1b69c:	20001141 	.word	0x20001141

0001b6a0 <TemperatureTmp117<(unsigned char)1>::read()>:
SA  read            () {
   1b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

public:
SA  disable         ()          { reg.ENABLE = 0; }
SA  isEnabled       ()          { return reg.ENABLE; }
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1b6a4:	4bd2      	ldr	r3, [pc, #840]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1b6a6:	4ed3      	ldr	r6, [pc, #844]	; (1b9f4 <TemperatureTmp117<(unsigned char)1>::read()+0x354>)
        public:
    //============

SA  init        ()              { twi_.init( Addr_, twi_.K400 );
                                  nrf_delay_ms( 2 ); //startup time is 2ms
                                  isInit_ = true;
   1b6a8:	4fd3      	ldr	r7, [pc, #844]	; (1b9f8 <TemperatureTmp117<(unsigned char)1>::read()+0x358>)
                    reg.PIN_CNF = it.INIT_CNF;
   1b6aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b6ae:	2148      	movs	r1, #72	; 0x48
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b6b0:	f04f 60c8 	mov.w	r0, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1b6b4:	f8c3 1588 	str.w	r1, [r3, #1416]	; 0x588
                        reg.PSEL_SCL = e;
                        if( not on ) pinSclDisconnect();
                    } 

SA  pinSda          (PIN e, bool on = true) {
                        reg.PSEL_SDA = e;
   1b6b8:	240d      	movs	r4, #13
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b6ba:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b6be:	f240 610c 	movw	r1, #1548	; 0x60c
                        reg.PSEL_SCL = e;
   1b6c2:	200f      	movs	r0, #15
                    reg.PIN_CNF = it.INIT_CNF;
   1b6c4:	f8c2 1734 	str.w	r1, [r2, #1844]	; 0x734
   1b6c8:	f8c2 173c 	str.w	r1, [r2, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1b6cc:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b6d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
                        reg.PSEL_SCL = e;
   1b6d4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1b6d8:	2406      	movs	r4, #6
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b6da:	f240 2001 	movw	r0, #513	; 0x201
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b6de:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
   1b6e2:	b085      	sub	sp, #20
                    reg.PIN_CNF = it.INIT_CNF;
   1b6e4:	f8c2 0744 	str.w	r0, [r2, #1860]	; 0x744
   1b6e8:	f046 0601 	orr.w	r6, r6, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b6ec:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    delay_cycles(cycles);
   1b6f0:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b6f4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
   1b6f8:	47b0      	blx	r6
   1b6fa:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b6fe:	47b0      	blx	r6
   1b700:	2301      	movs	r3, #1
   1b702:	703b      	strb	r3, [r7, #0]
                                }
   1b704:	247d      	movs	r4, #125	; 0x7d
   1b706:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b70a:	47b0      	blx	r6
   1b70c:	3c01      	subs	r4, #1
   1b70e:	d1fa      	bne.n	1b706 <TemperatureTmp117<(unsigned char)1>::read()+0x66>
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1b710:	4cb7      	ldr	r4, [pc, #732]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
   1b712:	f10d 0908 	add.w	r9, sp, #8
   1b716:	f10d 080c 	add.w	r8, sp, #12
   1b71a:	2514      	movs	r5, #20
   1b71c:	f04f 0a48 	mov.w	sl, #72	; 0x48
                                  isInit_ = true;
   1b720:	f04f 0b01 	mov.w	fp, #1
                    if( not isInit_ ) init();
   1b724:	783b      	ldrb	r3, [r7, #0]
   1b726:	2b00      	cmp	r3, #0
   1b728:	d06e      	beq.n	1b808 <TemperatureTmp117<(unsigned char)1>::read()+0x168>

//--------------------
//  events
//--------------------
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b72a:	2300      	movs	r3, #0
                        reg.RXD.MAXCNT = len;
   1b72c:	2002      	movs	r0, #2
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b72e:	2107      	movs	r1, #7
SA  startRxStop     ()          { clearEvents(); shortsSetup(LASTRX_STOP); startRx(); }

//--------------------
//  shorts
//--------------------
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b730:	f44f 5284 	mov.w	r2, #4224	; 0x1080
                    U8 tbuf[1] = { r }; //register
   1b734:	f88d b008 	strb.w	fp, [sp, #8]
                        reg.TXD.MAXCNT = len;
   1b738:	f8c4 b548 	str.w	fp, [r4, #1352]	; 0x548
                        reg.TXD.PTR = addr;
   1b73c:	f8c4 9544 	str.w	r9, [r4, #1348]	; 0x544
                        reg.RXD.MAXCNT = len;
   1b740:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1b744:	f8c4 8534 	str.w	r8, [r4, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b748:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1b74c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1b750:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1b754:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1b758:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1b75c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1b760:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1b764:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b768:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1b76c:	f8c4 b008 	str.w	fp, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1b770:	e003      	b.n	1b77a <TemperatureTmp117<(unsigned char)1>::read()+0xda>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1b772:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124

//TODO - add timeouts so if something wrong we don't block forever

SA  waitForStop     () {
                        while( not isStopped() ){
                            if( isError() ){
   1b776:	2b00      	cmp	r3, #0
   1b778:	d13f      	bne.n	1b7fa <TemperatureTmp117<(unsigned char)1>::read()+0x15a>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b77a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                        while( not isStopped() ){
   1b77e:	2b00      	cmp	r3, #0
   1b780:	d0f7      	beq.n	1b772 <TemperatureTmp117<(unsigned char)1>::read()+0xd2>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1b782:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
SA  writeRead       (const U8 (&txbuf)[NT], T (&rxbuf)[NR]) {  
                        txBufferSet( txbuf );
                        rxBufferSet( rxbuf );
                        startTxRxStop(); 
                        if( not waitForStop() ) return false;
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b786:	2b01      	cmp	r3, #1
   1b788:	d068      	beq.n	1b85c <TemperatureTmp117<(unsigned char)1>::read()+0x1bc>
SA  disable         ()          { reg.ENABLE = 0; }
   1b78a:	2300      	movs	r3, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b78c:	2107      	movs	r1, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1b78e:	2206      	movs	r2, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1b790:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b794:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
   1b798:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b79c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1b7a0:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1b7a4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b7a8:	47b0      	blx	r6
                        while( i and not tmp117.isDataReady() ){ nrf_delay_ms(1); i--; }
   1b7aa:	3d01      	subs	r5, #1
   1b7ac:	d1ba      	bne.n	1b724 <TemperatureTmp117<(unsigned char)1>::read()+0x84>
SA  disable         ()          { reg.ENABLE = 0; }
   1b7ae:	4b90      	ldr	r3, [pc, #576]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
                        if( not i )      { Debug("  {Fred}timeout, ready bit not set{Fwhite}\n"); return f; }
   1b7b0:	4c92      	ldr	r4, [pc, #584]	; (1b9fc <TemperatureTmp117<(unsigned char)1>::read()+0x35c>)
   1b7b2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b7b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    reg.PIN_CNF = it.INIT_CNF;
   1b7ba:	2202      	movs	r2, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b7bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1b7c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b7c4:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1b7c8:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b7cc:	703d      	strb	r5, [r7, #0]
                        DebugFuncHeader();
   1b7ce:	f7fd fff1 	bl	197b4 <app_timer_cnt_get>
   1b7d2:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b7d6:	4a8a      	ldr	r2, [pc, #552]	; (1ba00 <TemperatureTmp117<(unsigned char)1>::read()+0x360>)
   1b7d8:	9200      	str	r2, [sp, #0]
   1b7da:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b7de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b7e2:	4a88      	ldr	r2, [pc, #544]	; (1ba04 <TemperatureTmp117<(unsigned char)1>::read()+0x364>)
   1b7e4:	0b80      	lsrs	r0, r0, #14
   1b7e6:	2380      	movs	r3, #128	; 0x80
   1b7e8:	f7ff ff2c 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        if( not i )      { Debug("  {Fred}timeout, ready bit not set{Fwhite}\n"); return f; }
   1b7ec:	4886      	ldr	r0, [pc, #536]	; (1ba08 <TemperatureTmp117<(unsigned char)1>::read()+0x368>)
   1b7ee:	f7ff fe33 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    }
   1b7f2:	4620      	mov	r0, r4
   1b7f4:	b005      	add	sp, #20
   1b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1b7fa:	f8c4 b014 	str.w	fp, [r4, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b7fe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                                while( not isStopped() ){}
   1b802:	2b00      	cmp	r3, #0
   1b804:	d0fb      	beq.n	1b7fe <TemperatureTmp117<(unsigned char)1>::read()+0x15e>
   1b806:	e7cd      	b.n	1b7a4 <TemperatureTmp117<(unsigned char)1>::read()+0x104>
   1b808:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b80c:	f04f 61c8 	mov.w	r1, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1b810:	f8c4 a588 	str.w	sl, [r4, #1416]	; 0x588
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b814:	f240 620c 	movw	r2, #1548	; 0x60c
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1b818:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524
                        reg.PSEL_SDA = e;
   1b81c:	200d      	movs	r0, #13
                        reg.PSEL_SCL = e;
   1b81e:	210f      	movs	r1, #15
                    reg.PIN_CNF = it.INIT_CNF;
   1b820:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1b824:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
                        reg.PSEL_SDA = e;
   1b828:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b82c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                        reg.PSEL_SCL = e;
   1b830:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1b834:	f240 2001 	movw	r0, #513	; 0x201
SA  enable          ()          { reg.ENABLE = 6; }
   1b838:	2106      	movs	r1, #6
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b83a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b83e:	f8c3 0744 	str.w	r0, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1b842:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1b846:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b84a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1b84e:	47b0      	blx	r6
   1b850:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1b854:	47b0      	blx	r6
                                  isInit_ = true;
   1b856:	f887 b000 	strb.w	fp, [r7]
                                }
   1b85a:	e766      	b.n	1b72a <TemperatureTmp117<(unsigned char)1>::read()+0x8a>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1b85c:	f8d4 153c 	ldr.w	r1, [r4, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b860:	2902      	cmp	r1, #2
   1b862:	d192      	bne.n	1b78a <TemperatureTmp117<(unsigned char)1>::read()+0xea>
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b864:	f89d 200c 	ldrb.w	r2, [sp, #12]
                        while( i and not tmp117.isDataReady() ){ nrf_delay_ms(1); i--; }
   1b868:	0692      	lsls	r2, r2, #26
   1b86a:	d59b      	bpl.n	1b7a4 <TemperatureTmp117<(unsigned char)1>::read()+0x104>
                    U8 tbuf[1] = { r }; //register
   1b86c:	2000      	movs	r0, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b86e:	2607      	movs	r6, #7
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b870:	f44f 5584 	mov.w	r5, #4224	; 0x1080
   1b874:	f88d 0008 	strb.w	r0, [sp, #8]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b878:	4a5d      	ldr	r2, [pc, #372]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
                        reg.TXD.MAXCNT = len;
   1b87a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
                        reg.TXD.PTR = addr;
   1b87e:	f8c4 9544 	str.w	r9, [r4, #1348]	; 0x544
                        reg.RXD.MAXCNT = len;
   1b882:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1b886:	f8c4 8534 	str.w	r8, [r4, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b88a:	f8c4 64c4 	str.w	r6, [r4, #1220]	; 0x4c4
   1b88e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1b892:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1b896:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1b89a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1b89e:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1b8a2:	f8c4 015c 	str.w	r0, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1b8a6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b8aa:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1b8ae:	60a3      	str	r3, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1b8b0:	e004      	b.n	1b8bc <TemperatureTmp117<(unsigned char)1>::read()+0x21c>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1b8b2:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
                            if( isError() ){
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	f040 80b4 	bne.w	1ba24 <TemperatureTmp117<(unsigned char)1>::read()+0x384>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1b8bc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
                        while( not isStopped() ){
   1b8c0:	2b00      	cmp	r3, #0
   1b8c2:	d0f6      	beq.n	1b8b2 <TemperatureTmp117<(unsigned char)1>::read()+0x212>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1b8c4:	f8d2 654c 	ldr.w	r6, [r2, #1356]	; 0x54c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b8c8:	2e01      	cmp	r6, #1
   1b8ca:	d034      	beq.n	1b936 <TemperatureTmp117<(unsigned char)1>::read()+0x296>
SA  disable         ()          { reg.ENABLE = 0; }
   1b8cc:	4b48      	ldr	r3, [pc, #288]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
   1b8ce:	2200      	movs	r2, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b8d0:	2007      	movs	r0, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1b8d2:	2106      	movs	r1, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1b8d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1b8d8:	f8c3 04c4 	str.w	r0, [r3, #1220]	; 0x4c4
   1b8dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1b8e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1b8e4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
SA  disable         ()          { reg.ENABLE = 0; }
   1b8e8:	4941      	ldr	r1, [pc, #260]	; (1b9f0 <TemperatureTmp117<(unsigned char)1>::read()+0x350>)
                        if( not ok )     { Debug("  {Fred}failed to read temp value{Fwhite}\n"); return f; }
   1b8ea:	4c44      	ldr	r4, [pc, #272]	; (1b9fc <TemperatureTmp117<(unsigned char)1>::read()+0x35c>)
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b8ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b8f0:	2200      	movs	r2, #0
   1b8f2:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
   1b8f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
                    reg.PIN_CNF = it.INIT_CNF;
   1b8fa:	2102      	movs	r1, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b8fc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b900:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
   1b904:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b908:	703a      	strb	r2, [r7, #0]
                        DebugFuncHeader();
   1b90a:	f7fd ff53 	bl	197b4 <app_timer_cnt_get>
   1b90e:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b912:	4a3b      	ldr	r2, [pc, #236]	; (1ba00 <TemperatureTmp117<(unsigned char)1>::read()+0x360>)
   1b914:	9200      	str	r2, [sp, #0]
   1b916:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b91a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b91e:	4a39      	ldr	r2, [pc, #228]	; (1ba04 <TemperatureTmp117<(unsigned char)1>::read()+0x364>)
   1b920:	2380      	movs	r3, #128	; 0x80
   1b922:	0b80      	lsrs	r0, r0, #14
   1b924:	f7ff fe8e 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        if( not ok )     { Debug("  {Fred}failed to read temp value{Fwhite}\n"); return f; }
   1b928:	4838      	ldr	r0, [pc, #224]	; (1ba0c <TemperatureTmp117<(unsigned char)1>::read()+0x36c>)
   1b92a:	f7ff fd95 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                    }
   1b92e:	4620      	mov	r0, r4
   1b930:	b005      	add	sp, #20
   1b932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1b936:	f8d2 053c 	ldr.w	r0, [r2, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1b93a:	2802      	cmp	r0, #2
   1b93c:	d1c6      	bne.n	1b8cc <TemperatureTmp117<(unsigned char)1>::read()+0x22c>
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b93e:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1b942:	f89d 500d 	ldrb.w	r5, [sp, #13]
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1b946:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  disable         ()          { reg.ENABLE = 0; }
   1b94a:	2100      	movs	r1, #0
   1b94c:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
   1b950:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   1b954:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1b958:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1b95c:	f8c3 0734 	str.w	r0, [r3, #1844]	; 0x734
   1b960:	f8c3 073c 	str.w	r0, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1b964:	7039      	strb	r1, [r7, #0]
                        DebugFuncHeader();
   1b966:	f7fd ff25 	bl	197b4 <app_timer_cnt_get>
   1b96a:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1b96e:	4a24      	ldr	r2, [pc, #144]	; (1ba00 <TemperatureTmp117<(unsigned char)1>::read()+0x360>)
   1b970:	9200      	str	r2, [sp, #0]
   1b972:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b976:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b97a:	4a22      	ldr	r2, [pc, #136]	; (1ba04 <TemperatureTmp117<(unsigned char)1>::read()+0x364>)
                        v = (rbuf[0]<<8) bitor rbuf[1];
   1b97c:	b22d      	sxth	r5, r5
   1b97e:	0b80      	lsrs	r0, r0, #14
   1b980:	2380      	movs	r3, #128	; 0x80
   1b982:	f7ff fe5f 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        if( t == -32768 ){ Debug("  returned default temp value\n"); return f; }
   1b986:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
   1b98a:	d053      	beq.n	1ba34 <TemperatureTmp117<(unsigned char)1>::read()+0x394>
                        if( not isInit ){ //first time, populate all with same value
   1b98c:	4b20      	ldr	r3, [pc, #128]	; (1ba10 <TemperatureTmp117<(unsigned char)1>::read()+0x370>)
    x10 = 5/64 = .078125, x100 = 25/32 = 0.78125, x1000 = 125/16 = 7.8125

    normal mul/div- x100C -> v*78125/100000, x100F -> v*140625/100000 + 3200
    */

SA  x10F    (I16 v) -> I16      { return ((v * 9L)>>6) + 320; }
   1b98e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b992:	11a4      	asrs	r4, r4, #6
   1b994:	781a      	ldrb	r2, [r3, #0]
   1b996:	f504 74a0 	add.w	r4, r4, #320	; 0x140
   1b99a:	b224      	sxth	r4, r4
   1b99c:	b902      	cbnz	r2, 1b9a0 <TemperatureTmp117<(unsigned char)1>::read()+0x300>
                            isInit = true;
   1b99e:	701e      	strb	r6, [r3, #0]
                        tempHistory_[idx++] = v;
   1b9a0:	4a1c      	ldr	r2, [pc, #112]	; (1ba14 <TemperatureTmp117<(unsigned char)1>::read()+0x374>)
   1b9a2:	4b1d      	ldr	r3, [pc, #116]	; (1ba18 <TemperatureTmp117<(unsigned char)1>::read()+0x378>)
   1b9a4:	7811      	ldrb	r1, [r2, #0]
   1b9a6:	481d      	ldr	r0, [pc, #116]	; (1ba1c <TemperatureTmp117<(unsigned char)1>::read()+0x37c>)
   1b9a8:	f5b4 6fe1 	cmp.w	r4, #1800	; 0x708
   1b9ac:	bfa8      	it	ge
   1b9ae:	f44f 64e1 	movge.w	r4, #1800	; 0x708
   1b9b2:	429c      	cmp	r4, r3
   1b9b4:	bfb8      	it	lt
   1b9b6:	461c      	movlt	r4, r3
   1b9b8:	1c4b      	adds	r3, r1, #1
   1b9ba:	b2db      	uxtb	r3, r3
   1b9bc:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
   1b9c0:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   1b9c2:	b10b      	cbz	r3, 1b9c8 <TemperatureTmp117<(unsigned char)1>::read()+0x328>
   1b9c4:	2300      	movs	r3, #0
   1b9c6:	7013      	strb	r3, [r2, #0]
                        Debug("  Tmp117 raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1b9c8:	4b15      	ldr	r3, [pc, #84]	; (1ba20 <TemperatureTmp117<(unsigned char)1>::read()+0x380>)
   1b9ca:	17e1      	asrs	r1, r4, #31
   1b9cc:	fb83 2304 	smull	r2, r3, r3, r4
   1b9d0:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
   1b9d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1b9d8:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
   1b9dc:	4628      	mov	r0, r5
   1b9de:	b212      	sxth	r2, r2
   1b9e0:	b209      	sxth	r1, r1
   1b9e2:	f7ff fe05 	bl	1b5f0 <int Print<DevRtt<0>, short, int, int>(DevRtt<0>, char const*, short, int, int) [clone .isra.0] [clone .constprop.0]>
                    }
   1b9e6:	4620      	mov	r0, r4
   1b9e8:	b005      	add	sp, #20
   1b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9ee:	bf00      	nop
   1b9f0:	40003000 	.word	0x40003000
   1b9f4:	0001e800 	.word	0x0001e800
   1b9f8:	2000131e 	.word	0x2000131e
   1b9fc:	fffffc19 	.word	0xfffffc19
   1ba00:	0001e59c 	.word	0x0001e59c
   1ba04:	0001e588 	.word	0x0001e588
   1ba08:	0001e5f0 	.word	0x0001e5f0
   1ba0c:	0001e5a4 	.word	0x0001e5a4
   1ba10:	20001323 	.word	0x20001323
   1ba14:	20001322 	.word	0x20001322
   1ba18:	fffffe70 	.word	0xfffffe70
   1ba1c:	20001320 	.word	0x20001320
   1ba20:	66666667 	.word	0x66666667
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1ba24:	2301      	movs	r3, #1
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1ba26:	4906      	ldr	r1, [pc, #24]	; (1ba40 <TemperatureTmp117<(unsigned char)1>::read()+0x3a0>)
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1ba28:	6153      	str	r3, [r2, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1ba2a:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
                                while( not isStopped() ){}
   1ba2e:	2b00      	cmp	r3, #0
   1ba30:	d0fb      	beq.n	1ba2a <TemperatureTmp117<(unsigned char)1>::read()+0x38a>
   1ba32:	e759      	b.n	1b8e8 <TemperatureTmp117<(unsigned char)1>::read()+0x248>
                        if( t == -32768 ){ Debug("  returned default temp value\n"); return f; }
   1ba34:	4803      	ldr	r0, [pc, #12]	; (1ba44 <TemperatureTmp117<(unsigned char)1>::read()+0x3a4>)
   1ba36:	4c04      	ldr	r4, [pc, #16]	; (1ba48 <TemperatureTmp117<(unsigned char)1>::read()+0x3a8>)
   1ba38:	f7ff fd0e 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1ba3c:	e6d9      	b.n	1b7f2 <TemperatureTmp117<(unsigned char)1>::read()+0x152>
   1ba3e:	bf00      	nop
   1ba40:	40003000 	.word	0x40003000
   1ba44:	0001e5d0 	.word	0x0001e5d0
   1ba48:	fffffc19 	.word	0xfffffc19

0001ba4c <TemperatureSi7051<(unsigned char)1>::read()>:

SA  read            () {
   1ba4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ba50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1ba54:	4e7e      	ldr	r6, [pc, #504]	; (1bc50 <TemperatureSi7051<(unsigned char)1>::read()+0x204>)
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1ba56:	4c7f      	ldr	r4, [pc, #508]	; (1bc54 <TemperatureSi7051<(unsigned char)1>::read()+0x208>)
SA  init        ()              { 
                                twi_.init( Addr_, twi_.K400 );
                                //startup time 18-25ms, max 80ms
                                //let caller deal with startup time
                                nrf_delay_ms(2); //but will give time for power to come up
                                isInit_ = true;
   1ba58:	4f7f      	ldr	r7, [pc, #508]	; (1bc58 <TemperatureSi7051<(unsigned char)1>::read()+0x20c>)
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1ba5a:	f240 610c 	movw	r1, #1548	; 0x60c
   1ba5e:	2240      	movs	r2, #64	; 0x40
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1ba60:	f04f 65c8 	mov.w	r5, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1ba64:	f8c6 2588 	str.w	r2, [r6, #1416]	; 0x588
                        reg.PSEL_SDA = e;
   1ba68:	f04f 0c0d 	mov.w	ip, #13
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1ba6c:	f8c6 5524 	str.w	r5, [r6, #1316]	; 0x524
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ba70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                    reg.PIN_CNF = it.INIT_CNF;
   1ba74:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
                        reg.PSEL_SCL = e;
   1ba78:	200f      	movs	r0, #15
   1ba7a:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1ba7e:	f240 2501 	movw	r5, #513	; 0x201
SA  enable          ()          { reg.ENABLE = 6; }
   1ba82:	2106      	movs	r1, #6
                        reg.PSEL_SDA = e;
   1ba84:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
   1ba88:	b085      	sub	sp, #20
                        reg.PSEL_SCL = e;
   1ba8a:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
   1ba8e:	f044 0401 	orr.w	r4, r4, #1
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1ba92:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    delay_cycles(cycles);
   1ba96:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
                    reg.PIN_CNF = it.INIT_CNF;
   1ba9a:	f8c3 5744 	str.w	r5, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1ba9e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1baa2:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
   1baa6:	47a0      	blx	r4
   1baa8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1baac:	47a0      	blx	r4
   1baae:	2301      	movs	r3, #1
                        reg.TXD.MAXCNT = len;
   1bab0:	4698      	mov	r8, r3
   1bab2:	703b      	strb	r3, [r7, #0]
   1bab4:	461d      	mov	r5, r3
   1bab6:	f04f 095f 	mov.w	r9, #95	; 0x5f
                                return v bitand 0x40; 
                                }

                                //blocking on clock stretch, up to 10.8ms
SA  tempWait    (U16& v)        { 
                                U8 tbuf[1]{ MEASURE_HOLD }; U8 rbuf[2]; 
   1baba:	22e3      	movs	r2, #227	; 0xe3
                        reg.TXD.PTR = addr;
   1babc:	a902      	add	r1, sp, #8
   1babe:	f88d 2008 	strb.w	r2, [sp, #8]
                        reg.RXD.MAXCNT = len;
   1bac2:	2302      	movs	r3, #2
                        reg.TXD.MAXCNT = len;
   1bac4:	f8c6 5548 	str.w	r5, [r6, #1352]	; 0x548
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bac8:	2207      	movs	r2, #7
                        reg.TXD.PTR = addr;
   1baca:	f8c6 1544 	str.w	r1, [r6, #1348]	; 0x544
                        reg.RXD.PTR = addr;
   1bace:	a903      	add	r1, sp, #12
                        reg.RXD.MAXCNT = len;
   1bad0:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1bad4:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bad8:	2300      	movs	r3, #0
   1bada:	f8c6 24c4 	str.w	r2, [r6, #1220]	; 0x4c4
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bade:	f44f 5284 	mov.w	r2, #4224	; 0x1080
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bae2:	f8c6 3124 	str.w	r3, [r6, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1bae6:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1baea:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1baee:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1baf2:	f8c6 3150 	str.w	r3, [r6, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1baf6:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1bafa:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bafe:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1bb02:	60b5      	str	r5, [r6, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1bb04:	e002      	b.n	1bb0c <TemperatureSi7051<(unsigned char)1>::read()+0xc0>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1bb06:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
                            if( isError() ){
   1bb0a:	bb63      	cbnz	r3, 1bb66 <TemperatureSi7051<(unsigned char)1>::read()+0x11a>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1bb0c:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
                        while( not isStopped() ){
   1bb10:	2b00      	cmp	r3, #0
   1bb12:	d0f8      	beq.n	1bb06 <TemperatureSi7051<(unsigned char)1>::read()+0xba>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1bb14:	f8d6 154c 	ldr.w	r1, [r6, #1356]	; 0x54c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1bb18:	2901      	cmp	r1, #1
   1bb1a:	d02b      	beq.n	1bb74 <TemperatureSi7051<(unsigned char)1>::read()+0x128>
SA  disable         ()          { reg.ENABLE = 0; }
   1bb1c:	2300      	movs	r3, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bb1e:	2107      	movs	r1, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1bb20:	2206      	movs	r2, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1bb22:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bb26:	f8c6 14c4 	str.w	r1, [r6, #1220]	; 0x4c4
   1bb2a:	f8c6 3124 	str.w	r3, [r6, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bb2e:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1bb32:	f8c6 2500 	str.w	r2, [r6, #1280]	; 0x500
   1bb36:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1bb3a:	47a0      	blx	r4
                        //will just call tempWait until ack'd (true), then is clock 
                        //stretched and will return a temp value in t,
                        //conversion time for 14bits is ~10ms, so use 95ms as max time to wait
                        SCA TIMEOUT_MS{95};
                        auto ok = false;
                        for( auto ms = 0; ms < TIMEOUT_MS; ms++, nrf_delay_ms(1) ){ 
   1bb3c:	f1b9 0901 	subs.w	r9, r9, #1
   1bb40:	d1bb      	bne.n	1baba <TemperatureSi7051<(unsigned char)1>::read()+0x6e>
SA  disable         ()          { reg.ENABLE = 0; }
   1bb42:	4b43      	ldr	r3, [pc, #268]	; (1bc50 <TemperatureSi7051<(unsigned char)1>::read()+0x204>)
                            if( not si7051.tempWait(t) ) continue;
                            ok = true;
                            break;
                        };
                        si7051.deinit();
                        if( not ok ) return f; //timeout, return f (-999)
   1bb44:	4c45      	ldr	r4, [pc, #276]	; (1bc5c <TemperatureSi7051<(unsigned char)1>::read()+0x210>)
   1bb46:	f8c3 9500 	str.w	r9, [r3, #1280]	; 0x500
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bb4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    reg.PIN_CNF = it.INIT_CNF;
   1bb4e:	2202      	movs	r2, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bb50:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1bb54:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1bb58:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1bb5c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1bb60:	f887 9000 	strb.w	r9, [r7]
   1bb64:	e070      	b.n	1bc48 <TemperatureSi7051<(unsigned char)1>::read()+0x1fc>
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1bb66:	f8c6 8014 	str.w	r8, [r6, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1bb6a:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
                                while( not isStopped() ){}
   1bb6e:	2b00      	cmp	r3, #0
   1bb70:	d0fb      	beq.n	1bb6a <TemperatureSi7051<(unsigned char)1>::read()+0x11e>
   1bb72:	e7e0      	b.n	1bb36 <TemperatureSi7051<(unsigned char)1>::read()+0xea>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1bb74:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1bb78:	2802      	cmp	r0, #2
   1bb7a:	d1cf      	bne.n	1bb1c <TemperatureSi7051<(unsigned char)1>::read()+0xd0>
                                if( not twi_.writeRead(tbuf, rbuf) ) return false;
                                v = (rbuf[0]<<8) bitor rbuf[1];
   1bb7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1bb80:	f89d 500d 	ldrb.w	r5, [sp, #13]
26796 = 25C = 77C
*/

SA  x100C   (U16 v) -> I16      { return ((v * 17572L)>>16) - 4685; }
SA  x10C    (U16 v) -> I16      { return x100C(v) / 10; }
SA  x100F   (U16 v) -> I16      { return x100C(v) * 9L / 5 + 3200; }
   1bb84:	4c36      	ldr	r4, [pc, #216]	; (1bc60 <TemperatureSi7051<(unsigned char)1>::read()+0x214>)
                        if( not isInit ){ //first time, populate all with same value
   1bb86:	4a37      	ldr	r2, [pc, #220]	; (1bc64 <TemperatureSi7051<(unsigned char)1>::read()+0x218>)
                                v = (rbuf[0]<<8) bitor rbuf[1];
   1bb88:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
SA  x100C   (U16 v) -> I16      { return ((v * 17572L)>>16) - 4685; }
   1bb8c:	f244 43a4 	movw	r3, #17572	; 0x44a4
   1bb90:	fb03 f305 	mul.w	r3, r3, r5
   1bb94:	141b      	asrs	r3, r3, #16
   1bb96:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
   1bb9a:	3b0d      	subs	r3, #13
SA  x100F   (U16 v) -> I16      { return x100C(v) * 9L / 5 + 3200; }
   1bb9c:	b21b      	sxth	r3, r3
   1bb9e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1bba2:	fb84 ec03 	smull	lr, ip, r4, r3
   1bba6:	17db      	asrs	r3, r3, #31
   1bba8:	ebc3 036c 	rsb	r3, r3, ip, asr #1
SA  disable         ()          { reg.ENABLE = 0; }
   1bbac:	f04f 0e00 	mov.w	lr, #0
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bbb0:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   1bbb4:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
   1bbb8:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
   1bbbc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   1bbc0:	f8cc 650c 	str.w	r6, [ip, #1292]	; 0x50c
SA  x10F    (U16 v) -> I16      { return x100F(v) / 10; }
   1bbc4:	b21b      	sxth	r3, r3
                    reg.PIN_CNF = it.INIT_CNF;
   1bbc6:	f8cc 0734 	str.w	r0, [ip, #1844]	; 0x734
   1bbca:	f8cc 073c 	str.w	r0, [ip, #1852]	; 0x73c
   1bbce:	fb84 4003 	smull	r4, r0, r4, r3
   1bbd2:	17dc      	asrs	r4, r3, #31
   1bbd4:	7813      	ldrb	r3, [r2, #0]
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1bbd6:	f887 e000 	strb.w	lr, [r7]
SA  x10F    (U16 v) -> I16      { return x100F(v) / 10; }
   1bbda:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
   1bbde:	b224      	sxth	r4, r4
   1bbe0:	b903      	cbnz	r3, 1bbe4 <TemperatureSi7051<(unsigned char)1>::read()+0x198>
                            isInit = true;
   1bbe2:	7011      	strb	r1, [r2, #0]
                        tempHistory_[idx++] = v;
   1bbe4:	4a20      	ldr	r2, [pc, #128]	; (1bc68 <TemperatureSi7051<(unsigned char)1>::read()+0x21c>)
   1bbe6:	4b21      	ldr	r3, [pc, #132]	; (1bc6c <TemperatureSi7051<(unsigned char)1>::read()+0x220>)
   1bbe8:	7811      	ldrb	r1, [r2, #0]
   1bbea:	4821      	ldr	r0, [pc, #132]	; (1bc70 <TemperatureSi7051<(unsigned char)1>::read()+0x224>)
   1bbec:	f5b4 6fe1 	cmp.w	r4, #1800	; 0x708
   1bbf0:	bfa8      	it	ge
   1bbf2:	f44f 64e1 	movge.w	r4, #1800	; 0x708
   1bbf6:	429c      	cmp	r4, r3
   1bbf8:	bfb8      	it	lt
   1bbfa:	461c      	movlt	r4, r3
   1bbfc:	1c4b      	adds	r3, r1, #1
   1bbfe:	b2db      	uxtb	r3, r3
   1bc00:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
   1bc04:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   1bc06:	b10b      	cbz	r3, 1bc0c <TemperatureSi7051<(unsigned char)1>::read()+0x1c0>
   1bc08:	2300      	movs	r3, #0
   1bc0a:	7013      	strb	r3, [r2, #0]

                        f = si7051.x10F(t);                        
                        f = tempH.addHistory( f );
                        DebugFuncHeader();
   1bc0c:	f7fd fdd2 	bl	197b4 <app_timer_cnt_get>
   1bc10:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1bc14:	4a17      	ldr	r2, [pc, #92]	; (1bc74 <TemperatureSi7051<(unsigned char)1>::read()+0x228>)
   1bc16:	9200      	str	r2, [sp, #0]
   1bc18:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1bc1c:	4a16      	ldr	r2, [pc, #88]	; (1bc78 <TemperatureSi7051<(unsigned char)1>::read()+0x22c>)
   1bc1e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1bc22:	0b80      	lsrs	r0, r0, #14
   1bc24:	23b5      	movs	r3, #181	; 0xb5
   1bc26:	f7ff fd0d 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        Debug("  Si7051 raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1bc2a:	4b0d      	ldr	r3, [pc, #52]	; (1bc60 <TemperatureSi7051<(unsigned char)1>::read()+0x214>)
   1bc2c:	17e1      	asrs	r1, r4, #31
   1bc2e:	fb83 2304 	smull	r2, r3, r3, r4
   1bc32:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
   1bc36:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1bc3a:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
   1bc3e:	4628      	mov	r0, r5
   1bc40:	b212      	sxth	r2, r2
   1bc42:	b209      	sxth	r1, r1
   1bc44:	f7ff fcaa 	bl	1b59c <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]>
                        return f;
                    }
   1bc48:	4620      	mov	r0, r4
   1bc4a:	b005      	add	sp, #20
   1bc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bc50:	40003000 	.word	0x40003000
   1bc54:	0001e800 	.word	0x0001e800
   1bc58:	200013c8 	.word	0x200013c8
   1bc5c:	fffffc19 	.word	0xfffffc19
   1bc60:	66666667 	.word	0x66666667
   1bc64:	20001323 	.word	0x20001323
   1bc68:	20001322 	.word	0x20001322
   1bc6c:	fffffe70 	.word	0xfffffe70
   1bc70:	2000131c 	.word	0x2000131c
   1bc74:	0001e59c 	.word	0x0001e59c
   1bc78:	0001e588 	.word	0x0001e588

0001bc7c <TemperatureSi7051<(unsigned char)5>::read()>:
SA  read            () {
   1bc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bc80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1bc84:	4c85      	ldr	r4, [pc, #532]	; (1be9c <TemperatureSi7051<(unsigned char)5>::read()+0x220>)
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1bc86:	4d86      	ldr	r5, [pc, #536]	; (1bea0 <TemperatureSi7051<(unsigned char)5>::read()+0x224>)
                                isInit_ = true;
   1bc88:	4e86      	ldr	r6, [pc, #536]	; (1bea4 <TemperatureSi7051<(unsigned char)5>::read()+0x228>)
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1bc8a:	f240 610c 	movw	r1, #1548	; 0x60c
   1bc8e:	2240      	movs	r2, #64	; 0x40
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1bc90:	f04f 67c8 	mov.w	r7, #104857600	; 0x6400000
SA  address         (U8 v)      { reg.ADDRESS = v; } //0-127
   1bc94:	f8c4 2588 	str.w	r2, [r4, #1416]	; 0x588
                        reg.PSEL_SDA = e;
   1bc98:	f04f 0c0d 	mov.w	ip, #13
SA  frequency       (FREQ e)    { reg.FREQUENCY = e; }
   1bc9c:	f8c4 7524 	str.w	r7, [r4, #1316]	; 0x524
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                    reg.PIN_CNF = it.INIT_CNF;
   1bca4:	f8c3 1734 	str.w	r1, [r3, #1844]	; 0x734
                        reg.PSEL_SCL = e;
   1bca8:	200f      	movs	r0, #15
   1bcaa:	f8c3 173c 	str.w	r1, [r3, #1852]	; 0x73c
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   1bcae:	f240 2701 	movw	r7, #513	; 0x201
SA  enable          ()          { reg.ENABLE = 6; }
   1bcb2:	2106      	movs	r1, #6
                        reg.PSEL_SDA = e;
   1bcb4:	f8c4 c50c 	str.w	ip, [r4, #1292]	; 0x50c
   1bcb8:	b085      	sub	sp, #20
                        reg.PSEL_SCL = e;
   1bcba:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
   1bcbe:	f045 0501 	orr.w	r5, r5, #1
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bcc2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    delay_cycles(cycles);
   1bcc6:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
                    reg.PIN_CNF = it.INIT_CNF;
   1bcca:	f8c3 7744 	str.w	r7, [r3, #1860]	; 0x744
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   1bcce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
SA  enable          ()          { reg.ENABLE = 6; }
   1bcd2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1bcd6:	47a8      	blx	r5
   1bcd8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1bcdc:	47a8      	blx	r5
   1bcde:	2301      	movs	r3, #1
                        reg.TXD.MAXCNT = len;
   1bce0:	4698      	mov	r8, r3
   1bce2:	7033      	strb	r3, [r6, #0]
   1bce4:	461a      	mov	r2, r3
   1bce6:	f04f 095f 	mov.w	r9, #95	; 0x5f
                                U8 tbuf[1]{ MEASURE_HOLD }; U8 rbuf[2]; 
   1bcea:	21e3      	movs	r1, #227	; 0xe3
                        reg.TXD.PTR = addr;
   1bcec:	a802      	add	r0, sp, #8
   1bcee:	f88d 1008 	strb.w	r1, [sp, #8]
                        reg.RXD.MAXCNT = len;
   1bcf2:	2302      	movs	r3, #2
                        reg.TXD.MAXCNT = len;
   1bcf4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bcf8:	2107      	movs	r1, #7
                        reg.TXD.PTR = addr;
   1bcfa:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
                        reg.RXD.PTR = addr;
   1bcfe:	a803      	add	r0, sp, #12
                        reg.RXD.MAXCNT = len;
   1bd00:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
                        reg.RXD.PTR = addr;
   1bd04:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bd08:	2300      	movs	r3, #0
   1bd0a:	f8c4 14c4 	str.w	r1, [r4, #1220]	; 0x4c4
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bd0e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bd12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   1bd16:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
SA  clearSuspended  ()          { reg.EVENTS.SUSPENDED = 0; }
   1bd1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
SA  clearRxStarted  ()          { reg.EVENTS.RXSTARTED = 0; }
   1bd1e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
SA  clearTxStarted  ()          { reg.EVENTS.TXSTARTED = 0; }
   1bd22:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
SA  clearLastRx     ()          { reg.EVENTS.LASTRX = 0; }
   1bd26:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
SA  clearLastTx     ()          { reg.EVENTS.LASTTX = 0; }
   1bd2a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bd2e:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
SA  startTx         ()          { reg.TASKS.STARTTX = 1; } 
   1bd32:	60a2      	str	r2, [r4, #8]
SA  startTxRxStop   ()          { clearEvents(); shortsSetup(LASTTX_STARTRX_STOP); startTx(); }
   1bd34:	e002      	b.n	1bd3c <TemperatureSi7051<(unsigned char)5>::read()+0xc0>
SA  isError         ()          { return reg.EVENTS.ERROR; }
   1bd36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
                            if( isError() ){
   1bd3a:	bb73      	cbnz	r3, 1bd9a <TemperatureSi7051<(unsigned char)5>::read()+0x11e>
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1bd3c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                        while( not isStopped() ){
   1bd40:	2b00      	cmp	r3, #0
   1bd42:	d0f8      	beq.n	1bd36 <TemperatureSi7051<(unsigned char)5>::read()+0xba>
SA  txAmount        ()          { return reg.TXD.AMOUNT; }
   1bd44:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1bd48:	2801      	cmp	r0, #1
   1bd4a:	d02d      	beq.n	1bda8 <TemperatureSi7051<(unsigned char)5>::read()+0x12c>
SA  disable         ()          { reg.ENABLE = 0; }
   1bd4c:	2300      	movs	r3, #0
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bd4e:	2007      	movs	r0, #7
SA  enable          ()          { reg.ENABLE = 6; }
   1bd50:	2106      	movs	r1, #6
SA  disable         ()          { reg.ENABLE = 0; }
   1bd52:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
SA  clearError      ()          { reg.ERRORSRC = 7; reg.EVENTS.ERROR = 0; }
   1bd56:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
   1bd5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
SA  shortsSetup     (SHORTS e)  { reg.SHORTS = e; }
   1bd5e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
SA  enable          ()          { reg.ENABLE = 6; }
   1bd62:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1bd66:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   1bd6a:	47a8      	blx	r5
                        for( auto ms = 0; ms < TIMEOUT_MS; ms++, nrf_delay_ms(1) ){ 
   1bd6c:	f1b9 0901 	subs.w	r9, r9, #1
   1bd70:	f04f 0201 	mov.w	r2, #1
   1bd74:	d1b9      	bne.n	1bcea <TemperatureSi7051<(unsigned char)5>::read()+0x6e>
SA  disable         ()          { reg.ENABLE = 0; }
   1bd76:	4b49      	ldr	r3, [pc, #292]	; (1be9c <TemperatureSi7051<(unsigned char)5>::read()+0x220>)
                        if( not ok ) return f; //timeout, return f (-999)
   1bd78:	4c4b      	ldr	r4, [pc, #300]	; (1bea8 <TemperatureSi7051<(unsigned char)5>::read()+0x22c>)
   1bd7a:	f8c3 9500 	str.w	r9, [r3, #1280]	; 0x500
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bd7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    reg.PIN_CNF = it.INIT_CNF;
   1bd82:	2202      	movs	r2, #2
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bd84:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1bd88:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
                    reg.PIN_CNF = it.INIT_CNF;
   1bd8c:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
   1bd90:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1bd94:	f886 9000 	strb.w	r9, [r6]
   1bd98:	e071      	b.n	1be7e <TemperatureSi7051<(unsigned char)5>::read()+0x202>
SA  stop            ()          { reg.TASKS.STOP = 1; } //cannot stop while suspended
   1bd9a:	f8c4 8014 	str.w	r8, [r4, #20]
SA  isStopped       ()          { return reg.EVENTS.STOPPED; }
   1bd9e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                                while( not isStopped() ){}
   1bda2:	2b00      	cmp	r3, #0
   1bda4:	d0fb      	beq.n	1bd9e <TemperatureSi7051<(unsigned char)5>::read()+0x122>
   1bda6:	e7de      	b.n	1bd66 <TemperatureSi7051<(unsigned char)5>::read()+0xea>
SA  rxAmount        ()          { return reg.RXD.AMOUNT; }
   1bda8:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
                        if( (txAmount() == NT) and (rxAmount() == NR) ) return true;
   1bdac:	2f02      	cmp	r7, #2
   1bdae:	d1cd      	bne.n	1bd4c <TemperatureSi7051<(unsigned char)5>::read()+0xd0>
                                v = (rbuf[0]<<8) bitor rbuf[1];
   1bdb0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1bdb4:	f89d 500d 	ldrb.w	r5, [sp, #13]
SA  x100F   (U16 v) -> I16      { return x100C(v) * 9L / 5 + 3200; }
   1bdb8:	4b3c      	ldr	r3, [pc, #240]	; (1beac <TemperatureSi7051<(unsigned char)5>::read()+0x230>)
                        if( not isInit ){ //first time, populate all with same value
   1bdba:	493d      	ldr	r1, [pc, #244]	; (1beb0 <TemperatureSi7051<(unsigned char)5>::read()+0x234>)
                                v = (rbuf[0]<<8) bitor rbuf[1];
   1bdbc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
SA  x100C   (U16 v) -> I16      { return ((v * 17572L)>>16) - 4685; }
   1bdc0:	f244 42a4 	movw	r2, #17572	; 0x44a4
   1bdc4:	fb02 f205 	mul.w	r2, r2, r5
   1bdc8:	1412      	asrs	r2, r2, #16
   1bdca:	f5a2 5292 	sub.w	r2, r2, #4672	; 0x1240
   1bdce:	3a0d      	subs	r2, #13
SA  x100F   (U16 v) -> I16      { return x100C(v) * 9L / 5 + 3200; }
   1bdd0:	b212      	sxth	r2, r2
   1bdd2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   1bdd6:	fb83 ec02 	smull	lr, ip, r3, r2
   1bdda:	17d2      	asrs	r2, r2, #31
   1bddc:	ebc2 026c 	rsb	r2, r2, ip, asr #1
SA  disable         ()          { reg.ENABLE = 0; }
   1bde0:	f04f 0e00 	mov.w	lr, #0
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   1bde4:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   1bde8:	f8c4 e500 	str.w	lr, [r4, #1280]	; 0x500
   1bdec:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
   1bdf0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   1bdf4:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
SA  x10F    (U16 v) -> I16      { return x100F(v) / 10; }
   1bdf8:	b212      	sxth	r2, r2
                    reg.PIN_CNF = it.INIT_CNF;
   1bdfa:	f8cc 7734 	str.w	r7, [ip, #1844]	; 0x734
   1bdfe:	f8cc 773c 	str.w	r7, [ip, #1852]	; 0x73c
   1be02:	fb83 3402 	smull	r3, r4, r3, r2
   1be06:	17d3      	asrs	r3, r2, #31
   1be08:	780a      	ldrb	r2, [r1, #0]
SA  deinit      ()              { twi_.deinit(); isInit_ = false; }
   1be0a:	f886 e000 	strb.w	lr, [r6]
SA  x10F    (U16 v) -> I16      { return x100F(v) / 10; }
   1be0e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
   1be12:	b21b      	sxth	r3, r3
   1be14:	2a00      	cmp	r2, #0
   1be16:	d036      	beq.n	1be86 <TemperatureSi7051<(unsigned char)5>::read()+0x20a>
   1be18:	4e26      	ldr	r6, [pc, #152]	; (1beb4 <TemperatureSi7051<(unsigned char)5>::read()+0x238>)
                        tempHistory_[idx++] = v;
   1be1a:	4a27      	ldr	r2, [pc, #156]	; (1beb8 <TemperatureSi7051<(unsigned char)5>::read()+0x23c>)
   1be1c:	4c27      	ldr	r4, [pc, #156]	; (1bebc <TemperatureSi7051<(unsigned char)5>::read()+0x240>)
   1be1e:	7811      	ldrb	r1, [r2, #0]
   1be20:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   1be24:	bfa8      	it	ge
   1be26:	f44f 63e1 	movge.w	r3, #1800	; 0x708
   1be2a:	429c      	cmp	r4, r3
   1be2c:	bfb8      	it	lt
   1be2e:	461c      	movlt	r4, r3
   1be30:	1c4b      	adds	r3, r1, #1
   1be32:	b2db      	uxtb	r3, r3
                        if( idx >= HistSiz_ ) idx = 0;
   1be34:	2b04      	cmp	r3, #4
                        tempHistory_[idx++] = v;
   1be36:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   1be38:	bf84      	itt	hi
   1be3a:	2300      	movhi	r3, #0
   1be3c:	7013      	strbhi	r3, [r2, #0]
                        tempHistory_[idx++] = v;
   1be3e:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
                        DebugFuncHeader();
   1be42:	f7fd fcb7 	bl	197b4 <app_timer_cnt_get>
   1be46:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1be4a:	4a1d      	ldr	r2, [pc, #116]	; (1bec0 <TemperatureSi7051<(unsigned char)5>::read()+0x244>)
   1be4c:	9200      	str	r2, [sp, #0]
   1be4e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1be52:	4a1c      	ldr	r2, [pc, #112]	; (1bec4 <TemperatureSi7051<(unsigned char)5>::read()+0x248>)
   1be54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1be58:	0b80      	lsrs	r0, r0, #14
   1be5a:	23b5      	movs	r3, #181	; 0xb5
   1be5c:	f7ff fbf2 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        Debug("  Si7051 raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1be60:	4b12      	ldr	r3, [pc, #72]	; (1beac <TemperatureSi7051<(unsigned char)5>::read()+0x230>)
   1be62:	17e1      	asrs	r1, r4, #31
   1be64:	fb83 2304 	smull	r2, r3, r3, r4
   1be68:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
   1be6c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1be70:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
   1be74:	4628      	mov	r0, r5
   1be76:	b212      	sxth	r2, r2
   1be78:	b209      	sxth	r1, r1
   1be7a:	f7ff fb8f 	bl	1b59c <int Print<DevRtt<0>, unsigned short, int, int>(DevRtt<0>, char const*, unsigned short, int, int) [clone .isra.0] [clone .constprop.0]>
                    }
   1be7e:	4620      	mov	r0, r4
   1be80:	b005      	add	sp, #20
   1be82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            for( auto& i : tempHistory_ ) i = v;
   1be86:	4e0b      	ldr	r6, [pc, #44]	; (1beb4 <TemperatureSi7051<(unsigned char)5>::read()+0x238>)
                            isInit = true;
   1be88:	7008      	strb	r0, [r1, #0]
   1be8a:	f363 020f 	bfi	r2, r3, #0, #16
   1be8e:	f363 421f 	bfi	r2, r3, #16, #16
                            for( auto& i : tempHistory_ ) i = v;
   1be92:	6032      	str	r2, [r6, #0]
   1be94:	6072      	str	r2, [r6, #4]
   1be96:	8133      	strh	r3, [r6, #8]
   1be98:	e7bf      	b.n	1be1a <TemperatureSi7051<(unsigned char)5>::read()+0x19e>
   1be9a:	bf00      	nop
   1be9c:	40003000 	.word	0x40003000
   1bea0:	0001e800 	.word	0x0001e800
   1bea4:	200013c8 	.word	0x200013c8
   1bea8:	fffffc19 	.word	0xfffffc19
   1beac:	66666667 	.word	0x66666667
   1beb0:	20001319 	.word	0x20001319
   1beb4:	200013cc 	.word	0x200013cc
   1beb8:	20001318 	.word	0x20001318
   1bebc:	fffffe70 	.word	0xfffffe70
   1bec0:	0001e59c 	.word	0x0001e59c
   1bec4:	0001e588 	.word	0x0001e588

0001bec8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])>:
SA  update          ( uint8_t (&buf)[31] ) -> void {
   1bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beca:	4605      	mov	r5, r0
   1becc:	b085      	sub	sp, #20
                        uuidId( 0xde9f );
   1bece:	f64d 609f 	movw	r0, #56991	; 0xde9f
   1bed2:	f7ff f8b5 	bl	1b040 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidId(unsigned short)>
                        if( uuidCountInc() % temp_.histSize() == 0 ){
   1bed6:	f7ff f8b9 	bl	1b04c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidCountInc()>
   1beda:	4604      	mov	r4, r0
   1bedc:	f7ff f8c4 	bl	1b068 <TemperatureSi7051<(unsigned char)5>::histSize()>
   1bee0:	fbb4 f3f0 	udiv	r3, r4, r0
   1bee4:	fb03 4010 	mls	r0, r3, r0, r4
   1bee8:	2800      	cmp	r0, #0
   1beea:	d050      	beq.n	1bf8e <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xc6>
                        uuidData_.battery = Battery::read();
   1beec:	f7fe fe66 	bl	1abbc <Battery::read()>
   1bef0:	4b28      	ldr	r3, [pc, #160]	; (1bf94 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xcc>)
   1bef2:	8158      	strh	r0, [r3, #10]
                        int16_t f = temp_.read(); //~50us
   1bef4:	f7ff fec2 	bl	1bc7c <TemperatureSi7051<(unsigned char)5>::read()>
   1bef8:	4606      	mov	r6, r0
                        int16_t avgF = temp_.average();
   1befa:	f7ff f8c1 	bl	1b080 <TemperatureSi7051<(unsigned char)5>::average()>
                        uuidTempLatest( (avgF >= 0) ? (uint16_t)avgF : 0xE000 bitor (uint16_t)-avgF );  //E=negative 
   1befe:	0403      	lsls	r3, r0, #16
   1bf00:	bf42      	ittt	mi
   1bf02:	4240      	negmi	r0, r0
   1bf04:	ea6f 40c0 	mvnmi.w	r0, r0, lsl #19
   1bf08:	ea6f 40d0 	mvnmi.w	r0, r0, lsr #19
   1bf0c:	b280      	uxth	r0, r0
   1bf0e:	f7ff f8d1 	bl	1b0b4 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempLatest(unsigned short)>
                        uint8_t f10 = (f < 0) ? -f%10 : f%10;
   1bf12:	2e00      	cmp	r6, #0
   1bf14:	db30      	blt.n	1bf78 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xb0>
   1bf16:	4c20      	ldr	r4, [pc, #128]	; (1bf98 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xd0>)
   1bf18:	17f7      	asrs	r7, r6, #31
   1bf1a:	fb84 3406 	smull	r3, r4, r4, r6
   1bf1e:	ebc7 04a4 	rsb	r4, r7, r4, asr #2
   1bf22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1bf26:	eba6 0444 	sub.w	r4, r6, r4, lsl #1
   1bf2a:	b224      	sxth	r4, r4
                        snprintf( nambuf, 7, "%c%3d.%u", getName(), f/10, f10 );
   1bf2c:	f7ff f8c8 	bl	1b0c0 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::getName()>
   1bf30:	4603      	mov	r3, r0
   1bf32:	4819      	ldr	r0, [pc, #100]	; (1bf98 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xd0>)
   1bf34:	9401      	str	r4, [sp, #4]
   1bf36:	fb80 2606 	smull	r2, r6, r0, r6
   1bf3a:	ebc7 06a6 	rsb	r6, r7, r6, asr #2
   1bf3e:	b236      	sxth	r6, r6
   1bf40:	4a16      	ldr	r2, [pc, #88]	; (1bf9c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xd4>)
   1bf42:	9600      	str	r6, [sp, #0]
   1bf44:	a802      	add	r0, sp, #8
   1bf46:	2107      	movs	r1, #7
   1bf48:	f000 fe40 	bl	1cbcc <sniprintf>
                        uint8_t idx = Flags01::make( buf, BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED ); //3 fixed
   1bf4c:	2104      	movs	r1, #4
   1bf4e:	4628      	mov	r0, r5
   1bf50:	f7fe fe44 	bl	1abdc <Flags01::make(unsigned char*, unsigned char)>
   1bf54:	b2c4      	uxtb	r4, r0
                        idx += CompleteName09::make( &buf[idx], nambuf, 8 ); //max 10 (str max 8)
   1bf56:	a902      	add	r1, sp, #8
   1bf58:	1928      	adds	r0, r5, r4
   1bf5a:	2208      	movs	r2, #8
   1bf5c:	f7fe fe46 	bl	1abec <CompleteName09::make(unsigned char*, char const*, unsigned char)>
   1bf60:	4404      	add	r4, r0
   1bf62:	b2e4      	uxtb	r4, r4
                        idx += UUID07::makeBCD( &buf[idx], uuidData_.all ); //18 fixed
   1bf64:	1928      	adds	r0, r5, r4
   1bf66:	490b      	ldr	r1, [pc, #44]	; (1bf94 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xcc>)
   1bf68:	f7fe fe90 	bl	1ac8c <UUID07::makeBCD(unsigned char*, unsigned short const (&) [8])>
   1bf6c:	4404      	add	r4, r0
                        buf[idx] = 0;
   1bf6e:	b2e4      	uxtb	r4, r4
   1bf70:	2300      	movs	r3, #0
   1bf72:	552b      	strb	r3, [r5, r4]
                    }
   1bf74:	b005      	add	sp, #20
   1bf76:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        uint8_t f10 = (f < 0) ? -f%10 : f%10;
   1bf78:	4c09      	ldr	r4, [pc, #36]	; (1bfa0 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0xd8>)
   1bf7a:	4273      	negs	r3, r6
   1bf7c:	fba4 2403 	umull	r2, r4, r4, r3
   1bf80:	08e4      	lsrs	r4, r4, #3
   1bf82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1bf86:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
   1bf8a:	17f7      	asrs	r7, r6, #31
   1bf8c:	e7ce      	b.n	1bf2c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0x64>
                            uuidTempShift();
   1bf8e:	f7ff f86d 	bl	1b06c <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::uuidTempShift()>
   1bf92:	e7ab      	b.n	1beec <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])+0x24>
   1bf94:	200013b8 	.word	0x200013b8
   1bf98:	66666667 	.word	0x66666667
   1bf9c:	0001e61c 	.word	0x0001e61c
   1bfa0:	cccccccd 	.word	0xcccccccd

0001bfa4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)>:
SA  update          (void* pcontext = nullptr) -> void {
   1bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        ADdata_.update(buffer_);
   1bfa8:	4e33      	ldr	r6, [pc, #204]	; (1c078 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xd4>)
SA  update          (void* pcontext = nullptr) -> void {
   1bfaa:	b083      	sub	sp, #12
                        stop();
   1bfac:	f7ff f834 	bl	1b018 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()>
                        ADdata_.update(buffer_);
   1bfb0:	4630      	mov	r0, r6
   1bfb2:	f7ff ff89 	bl	1bec8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::update(unsigned char (&) [31])>
                        DebugFuncHeader();
   1bfb6:	f7fd fbfd 	bl	197b4 <app_timer_cnt_get>
   1bfba:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1bfbe:	4a2f      	ldr	r2, [pc, #188]	; (1c07c <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xd8>)
   1bfc0:	9200      	str	r2, [sp, #0]
   1bfc2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1bfc6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1bfca:	4a2d      	ldr	r2, [pc, #180]	; (1c080 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xdc>)
   1bfcc:	f240 134d 	movw	r3, #333	; 0x14d
   1bfd0:	0b80      	lsrs	r0, r0, #14
   1bfd2:	f7ff fb37 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        Debug( "{Fcyan}  -advertising packet-{Fwhite}\n" );
   1bfd6:	482b      	ldr	r0, [pc, #172]	; (1c084 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xe0>)
   1bfd8:	f7ff fa3e 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        while( buffer_[i] ){
   1bfdc:	7831      	ldrb	r1, [r6, #0]
   1bfde:	b359      	cbz	r1, 1c038 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x94>
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1bfe0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1c090 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xec>
                            Debug( "\n" );
   1bfe4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1c08c <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xe8>
                        auto i = 0;
   1bfe8:	f04f 0b00 	mov.w	fp, #0
                            auto typ = buffer_[i++];
   1bfec:	eb06 040b 	add.w	r4, r6, fp
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1bff0:	4648      	mov	r0, r9
                            auto typ = buffer_[i++];
   1bff2:	f894 a001 	ldrb.w	sl, [r4, #1]
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1bff6:	4652      	mov	r2, sl
   1bff8:	1e4d      	subs	r5, r1, #1
   1bffa:	f7ff fa05 	bl	1b408 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0]>
                             if( typ == 9 ){ //name
   1bffe:	f1ba 0f09 	cmp.w	sl, #9
                            Debug( "  len: %2u  type: %02x  data: ", len--, typ );
   1c002:	b2ed      	uxtb	r5, r5
                            auto typ = buffer_[i++];
   1c004:	f10b 0702 	add.w	r7, fp, #2
                             if( typ == 9 ){ //name
   1c008:	d02f      	beq.n	1c06a <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xc6>
                            } else if( typ == 7 ){ //uuid
   1c00a:	f1ba 0f07 	cmp.w	sl, #7
   1c00e:	d01b      	beq.n	1c048 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xa4>
                                for( auto j = 0; j < len; j++ ){
   1c010:	b14d      	cbz	r5, 1c026 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x82>
   1c012:	4b1d      	ldr	r3, [pc, #116]	; (1c088 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xe4>)
   1c014:	449b      	add	fp, r3
   1c016:	44ab      	add	fp, r5
   1c018:	19f4      	adds	r4, r6, r7
                                     Debug( "%02X ", buffer_[i+j] );
   1c01a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c01e:	f7ff fa95 	bl	1b54c <int Print<DevRtt<0>, unsigned char>(DevRtt<0>, char const*, unsigned char) [clone .isra.0] [clone .constprop.0]>
                                for( auto j = 0; j < len; j++ ){
   1c022:	45a3      	cmp	fp, r4
   1c024:	d1f9      	bne.n	1c01a <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x76>
                                i += len;
   1c026:	eb07 0b05 	add.w	fp, r7, r5
                            Debug( "\n" );
   1c02a:	4640      	mov	r0, r8
   1c02c:	f7ff fa14 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        while( buffer_[i] ){
   1c030:	f816 100b 	ldrb.w	r1, [r6, fp]
   1c034:	2900      	cmp	r1, #0
   1c036:	d1d9      	bne.n	1bfec <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x48>
                        Debug( "\n" );
   1c038:	4814      	ldr	r0, [pc, #80]	; (1c08c <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xe8>)
   1c03a:	f7ff fa0d 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
                        start();
   1c03e:	f7ff f859 	bl	1b0f4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()>
                    }
   1c042:	b003      	add	sp, #12
   1c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                for( auto j = len-1; j >= 0; j-=2 ){
   1c048:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   1c04c:	2d00      	cmp	r5, #0
   1c04e:	d0ea      	beq.n	1c026 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x82>
                                     Debug( "%02X%02X ", buffer_[i+j], buffer_[i+j-1] );
   1c050:	f104 0b01 	add.w	fp, r4, #1
   1c054:	3402      	adds	r4, #2
   1c056:	f81b 100a 	ldrb.w	r1, [fp, sl]
   1c05a:	f814 000a 	ldrb.w	r0, [r4, sl]
   1c05e:	f7ff fa4b 	bl	1b4f8 <int Print<DevRtt<0>, unsigned char, unsigned char>(DevRtt<0>, char const*, unsigned char, unsigned char) [clone .isra.0] [clone .constprop.0]>
                                for( auto j = len-1; j >= 0; j-=2 ){
   1c062:	f1ba 0a02 	subs.w	sl, sl, #2
   1c066:	d5f6      	bpl.n	1c056 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0xb2>
   1c068:	e7dd      	b.n	1c026 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x82>
                                Debug( "%.*s ", len, &buffer_[i] ); 
   1c06a:	19f1      	adds	r1, r6, r7
   1c06c:	4628      	mov	r0, r5
                                i += len;
   1c06e:	eb05 0b07 	add.w	fp, r5, r7
                                Debug( "%.*s ", len, &buffer_[i] ); 
   1c072:	f7ff fa17 	bl	1b4a4 <int Print<DevRtt<0>, unsigned char, unsigned char*>(DevRtt<0>, char const*, unsigned char, unsigned char*) [clone .isra.0] [clone .constprop.0]>
   1c076:	e7d8      	b.n	1c02a <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x86>
   1c078:	2000137c 	.word	0x2000137c
   1c07c:	0001e63c 	.word	0x0001e63c
   1c080:	0001e628 	.word	0x0001e628
   1c084:	0001e644 	.word	0x0001e644
   1c088:	2000137e 	.word	0x2000137e
   1c08c:	0001e6a4 	.word	0x0001e6a4
   1c090:	0001e66c 	.word	0x0001e66c

0001c094 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()>:
SA  init            () {
   1c094:	b538      	push	{r3, r4, r5, lr}
                        ADdata_.init();
   1c096:	f7fe fe9f 	bl	1add8 <MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >::init()>
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   1c09a:	4c14      	ldr	r4, [pc, #80]	; (1c0ec <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x58>)
                        params_.interval = paramInterval_;
   1c09c:	4b14      	ldr	r3, [pc, #80]	; (1c0f0 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x5c>)
                        return __builtin_ceil( ms*(RTC_HZ/1000.0) );
                    }

                    //init timer module on first use, applies to all instances
SA init             () {
                        if( isTimerModuleInit_ ) return;
   1c09e:	4d15      	ldr	r5, [pc, #84]	; (1c0f4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x60>)
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   1c0a0:	2205      	movs	r2, #5
                        params_.interval = paramInterval_;
   1c0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   1c0a6:	7022      	strb	r2, [r4, #0]
                        params_.interval = paramInterval_;
   1c0a8:	f001 fa38 	bl	1d51c <__aeabi_d2uiz>
   1c0ac:	4603      	mov	r3, r0
                        update();
   1c0ae:	2000      	movs	r0, #0
                        params_.interval = paramInterval_;
   1c0b0:	60a3      	str	r3, [r4, #8]
                        update();
   1c0b2:	f7ff ff77 	bl	1bfa4 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)>
   1c0b6:	782b      	ldrb	r3, [r5, #0]
   1c0b8:	b91b      	cbnz	r3, 1c0c2 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x2e>
                        app_timer_init(); //always success
   1c0ba:	f7fd faf1 	bl	196a0 <app_timer_init>
                        isTimerModuleInit_ = true;
   1c0be:	2301      	movs	r3, #1
   1c0c0:	702b      	strb	r3, [r5, #0]
                        error.check( app_timer_create(&ptimerId_, APP_TIMER_MODE_SINGLE_SHOT, cb) );
                        error.check( app_timer_start(ptimerId_, appTimerTicks(ms), NULL) );
                    }
auto initRepeated   ( uint32_t ms, void(*cb)(void*) ) {
                        init();
                        error.check( app_timer_create(&ptimerId_, APP_TIMER_MODE_REPEATED, cb) );
   1c0c2:	4a0d      	ldr	r2, [pc, #52]	; (1c0f8 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x64>)
   1c0c4:	480d      	ldr	r0, [pc, #52]	; (1c0fc <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x68>)
   1c0c6:	2101      	movs	r1, #1
   1c0c8:	f7fd fb20 	bl	1970c <app_timer_create>
   1c0cc:	b280      	uxth	r0, r0
   1c0ce:	f7fe fa79 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( app_timer_start(ptimerId_, appTimerTicks(ms), NULL) );
   1c0d2:	4b0b      	ldr	r3, [pc, #44]	; (1c100 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x6c>)
   1c0d4:	2200      	movs	r2, #0
   1c0d6:	6a18      	ldr	r0, [r3, #32]
   1c0d8:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
   1c0dc:	f7fd fb24 	bl	19728 <app_timer_start>
                    }
   1c0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c0e4:	b280      	uxth	r0, r0
   1c0e6:	f7fe ba6d 	b.w	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
   1c0ea:	bf00      	nop
   1c0ec:	2000139c 	.word	0x2000139c
   1c0f0:	20001128 	.word	0x20001128
   1c0f4:	20001378 	.word	0x20001378
   1c0f8:	0001bfa5 	.word	0x0001bfa5
   1c0fc:	20001370 	.word	0x20001370
   1c100:	20001350 	.word	0x20001350

0001c104 <main>:
#include "Print.hpp"

/*-----------------------------------------------------------------------------
    functions
-----------------------------------------------------------------------------*/
int main() {
   1c104:	b5f0      	push	{r4, r5, r6, r7, lr}
                        if( isTimerModuleInit_ ) return;
   1c106:	4c32      	ldr	r4, [pc, #200]	; (1c1d0 <main+0xcc>)
   1c108:	7823      	ldrb	r3, [r4, #0]
   1c10a:	b085      	sub	sp, #20
   1c10c:	b91b      	cbnz	r3, 1c116 <main+0x12>
                        app_timer_init(); //always success
   1c10e:	f7fd fac7 	bl	196a0 <app_timer_init>
                        isTimerModuleInit_ = true;
   1c112:	2301      	movs	r3, #1
   1c114:	7023      	strb	r3, [r4, #0]
                        error.check( app_timer_create(&ptimerId_, APP_TIMER_MODE_REPEATED, cb) );
   1c116:	4a2f      	ldr	r2, [pc, #188]	; (1c1d4 <main+0xd0>)
   1c118:	482f      	ldr	r0, [pc, #188]	; (1c1d8 <main+0xd4>)
   1c11a:	4e30      	ldr	r6, [pc, #192]	; (1c1dc <main+0xd8>)

    Debug( "adv.init()...\n" );
    adv.init();             //advertising init

    while( true ) { 
        DebugFuncHeader();
   1c11c:	4d30      	ldr	r5, [pc, #192]	; (1c1e0 <main+0xdc>)
        Debug("{Fmagenta}  low power...{Fwhite} \n");
   1c11e:	4c31      	ldr	r4, [pc, #196]	; (1c1e4 <main+0xe0>)
   1c120:	2101      	movs	r1, #1
   1c122:	f7fd faf3 	bl	1970c <app_timer_create>
   1c126:	b280      	uxth	r0, r0
   1c128:	f7fe fa4c 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( app_timer_start(ptimerId_, appTimerTicks(ms), NULL) );
   1c12c:	4b2e      	ldr	r3, [pc, #184]	; (1c1e8 <main+0xe4>)
   1c12e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
   1c132:	6a18      	ldr	r0, [r3, #32]
   1c134:	2200      	movs	r2, #0
   1c136:	f7fd faf7 	bl	19728 <app_timer_start>
   1c13a:	b280      	uxth	r0, r0
   1c13c:	f7fe fa42 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
    Debug( "{normal}{Fgreen}\nBoot...\n" );
   1c140:	482a      	ldr	r0, [pc, #168]	; (1c1ec <main+0xe8>)
   1c142:	f7ff f989 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    Debug( "{Fmagenta}board.init()...\n" );
   1c146:	482a      	ldr	r0, [pc, #168]	; (1c1f0 <main+0xec>)
   1c148:	f7ff f986 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    board.init();           //init board pins
   1c14c:	f7fe fb00 	bl	1a750 <BL651tempBoard::init()>
    board.alive();          //blink led's to show boot
   1c150:	f7fe fb12 	bl	1a778 <BL651tempBoard::alive()>
    Debug( "nrf_pwr_mgmt_init()...\n" );
   1c154:	4827      	ldr	r0, [pc, #156]	; (1c1f4 <main+0xf0>)
   1c156:	f7ff f97f 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    error.check( nrf_pwr_mgmt_init() );
   1c15a:	f7fd fd4b 	bl	19bf4 <nrf_pwr_mgmt_init>
   1c15e:	b280      	uxth	r0, r0
   1c160:	f7fe fa30 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
   1c164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c168:	2201      	movs	r2, #1
   1c16a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
//===========
    public:
//===========

SA  init            () {
                        uint32_t ram_start = 0;
   1c16e:	2700      	movs	r7, #0
    Debug( "ble.init()...\n" );
   1c170:	4821      	ldr	r0, [pc, #132]	; (1c1f8 <main+0xf4>)
   1c172:	f7ff f971 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
   1c176:	9703      	str	r7, [sp, #12]
                        error.check( nrf_sdh_enable_request() );
   1c178:	f000 fb76 	bl	1c868 <nrf_sdh_enable_request>
   1c17c:	b280      	uxth	r0, r0
   1c17e:	f7fe fa21 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_default_cfg_set(BLE_CONN_CFG_TAG_DEFAULT, &ram_start) );
   1c182:	a903      	add	r1, sp, #12
   1c184:	4638      	mov	r0, r7
   1c186:	f000 fc4b 	bl	1ca20 <nrf_sdh_ble_default_cfg_set>
   1c18a:	b280      	uxth	r0, r0
   1c18c:	f7fe fa1a 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_enable(&ram_start) );
   1c190:	a803      	add	r0, sp, #12
   1c192:	f000 fc9b 	bl	1cacc <nrf_sdh_ble_enable>
   1c196:	b280      	uxth	r0, r0
   1c198:	f7fe fa14 	bl	1a5c4 <Errors::check(unsigned short, bool) [clone .constprop.0]>
    Debug( "adv.init()...\n" );
   1c19c:	4817      	ldr	r0, [pc, #92]	; (1c1fc <main+0xf8>)
   1c19e:	f7ff f95b 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
    adv.init();             //advertising init
   1c1a2:	f7ff ff77 	bl	1c094 <Advertising<MyTemperatureAD<TemperatureSi7051<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()>
        DebugFuncHeader();
   1c1a6:	f7fd fb05 	bl	197b4 <app_timer_cnt_get>
   1c1aa:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1c1ae:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1c1b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c1b6:	462a      	mov	r2, r5
   1c1b8:	236e      	movs	r3, #110	; 0x6e
   1c1ba:	9600      	str	r6, [sp, #0]
   1c1bc:	0b80      	lsrs	r0, r0, #14
   1c1be:	f7ff fa41 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
        Debug("{Fmagenta}  low power...{Fwhite} \n");
   1c1c2:	4620      	mov	r0, r4
   1c1c4:	f7ff f948 	bl	1b458 <int Print<DevRtt<0>>(DevRtt<0>, char const*) [clone .isra.0]>
        nrf_pwr_mgmt_run();  
   1c1c8:	f7fd fd2a 	bl	19c20 <nrf_pwr_mgmt_run>
    while( true ) { 
   1c1cc:	e7eb      	b.n	1c1a6 <main+0xa2>
   1c1ce:	bf00      	nop
   1c1d0:	20001378 	.word	0x20001378
   1c1d4:	0001c315 	.word	0x0001c315
   1c1d8:	20001348 	.word	0x20001348
   1c1dc:	0001e708 	.word	0x0001e708
   1c1e0:	0001e6fc 	.word	0x0001e6fc
   1c1e4:	0001e710 	.word	0x0001e710
   1c1e8:	20001328 	.word	0x20001328
   1c1ec:	0001e68c 	.word	0x0001e68c
   1c1f0:	0001e6a8 	.word	0x0001e6a8
   1c1f4:	0001e6c4 	.word	0x0001e6c4
   1c1f8:	0001e6dc 	.word	0x0001e6dc
   1c1fc:	0001e6ec 	.word	0x0001e6ec

0001c200 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]>:
int Print(Dev dev, const char* fmt, Ts...ts){
   1c200:	b510      	push	{r4, lr}
   1c202:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    int n = snprintf( buf, 512, fmt, ts... );
   1c206:	e9cd 1200 	strd	r1, r2, [sp]
int Print(Dev dev, const char* fmt, Ts...ts){
   1c20a:	4603      	mov	r3, r0
    int n = snprintf( buf, 512, fmt, ts... );
   1c20c:	4a0f      	ldr	r2, [pc, #60]	; (1c24c <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]+0x4c>)
   1c20e:	a802      	add	r0, sp, #8
   1c210:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c214:	f000 fcda 	bl	1cbcc <sniprintf>
    if( n == 0 ) return 0;
   1c218:	b150      	cbz	r0, 1c230 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]+0x30>
    if( n < 512 or not markupON ) return Markup( dev, buf ); 
   1c21a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1c21e:	a902      	add	r1, sp, #8
   1c220:	db02      	blt.n	1c228 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]+0x28>
   1c222:	4c0b      	ldr	r4, [pc, #44]	; (1c250 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]+0x50>)
   1c224:	7823      	ldrb	r3, [r4, #0]
   1c226:	b933      	cbnz	r3, 1c236 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]+0x36>
   1c228:	f04f 0000 	mov.w	r0, #0
   1c22c:	f7fe ffe6 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
}
   1c230:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1c234:	bd10      	pop	{r4, pc}
    markupON = false;
   1c236:	2300      	movs	r3, #0
    n = Markup( dev, buf );
   1c238:	f04f 0000 	mov.w	r0, #0
    markupON = false;
   1c23c:	7023      	strb	r3, [r4, #0]
    n = Markup( dev, buf );
   1c23e:	f7fe ffdd 	bl	1b1fc <int Markup<DevRtt<0> >(DevRtt<0>, char const*)>
    markupON = true;
   1c242:	2301      	movs	r3, #1
   1c244:	7023      	strb	r3, [r4, #0]
}
   1c246:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1c24a:	bd10      	pop	{r4, pc}
   1c24c:	0001e734 	.word	0x0001e734
   1c250:	20001141 	.word	0x20001141

0001c254 <TemperatureInternal<(unsigned char)1>::read()>:
SA  read            () {
   1c254:	b530      	push	{r4, r5, lr}
   1c256:	b085      	sub	sp, #20
                        if( sd_temp_get(&t) ) return f;
   1c258:	a803      	add	r0, sp, #12
   1c25a:	f7fe f9a5 	bl	1a5a8 <sd_temp_get>
   1c25e:	2800      	cmp	r0, #0
   1c260:	d146      	bne.n	1c2f0 <TemperatureInternal<(unsigned char)1>::read()+0x9c>
                        f = (t*10*9/5+320*4)/4; // Fx10
   1c262:	9b03      	ldr	r3, [sp, #12]
   1c264:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c268:	005b      	lsls	r3, r3, #1
   1c26a:	f513 64a0 	adds.w	r4, r3, #1280	; 0x500
   1c26e:	bf48      	it	mi
   1c270:	f203 5403 	addwmi	r4, r3, #1283	; 0x503
                        if( not isInit ){ //first time, populate all with same value
   1c274:	4b1f      	ldr	r3, [pc, #124]	; (1c2f4 <TemperatureInternal<(unsigned char)1>::read()+0xa0>)
   1c276:	781a      	ldrb	r2, [r3, #0]
                        f = (t*10*9/5+320*4)/4; // Fx10
   1c278:	f344 048f 	sbfx	r4, r4, #2, #16
                        if( not isInit ){ //first time, populate all with same value
   1c27c:	b90a      	cbnz	r2, 1c282 <TemperatureInternal<(unsigned char)1>::read()+0x2e>
                            isInit = true;
   1c27e:	2201      	movs	r2, #1
   1c280:	701a      	strb	r2, [r3, #0]
                        tempHistory_[idx++] = v;
   1c282:	4a1d      	ldr	r2, [pc, #116]	; (1c2f8 <TemperatureInternal<(unsigned char)1>::read()+0xa4>)
   1c284:	4d1d      	ldr	r5, [pc, #116]	; (1c2fc <TemperatureInternal<(unsigned char)1>::read()+0xa8>)
   1c286:	7811      	ldrb	r1, [r2, #0]
   1c288:	481d      	ldr	r0, [pc, #116]	; (1c300 <TemperatureInternal<(unsigned char)1>::read()+0xac>)
   1c28a:	f5b4 6fe1 	cmp.w	r4, #1800	; 0x708
   1c28e:	bfa8      	it	ge
   1c290:	f44f 64e1 	movge.w	r4, #1800	; 0x708
   1c294:	b224      	sxth	r4, r4
   1c296:	1c4b      	adds	r3, r1, #1
   1c298:	42ac      	cmp	r4, r5
   1c29a:	bfb8      	it	lt
   1c29c:	462c      	movlt	r4, r5
   1c29e:	b2db      	uxtb	r3, r3
   1c2a0:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
   1c2a4:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   1c2a6:	bb03      	cbnz	r3, 1c2ea <TemperatureInternal<(unsigned char)1>::read()+0x96>
                        DebugFuncHeader();
   1c2a8:	f7fd fa84 	bl	197b4 <app_timer_cnt_get>
   1c2ac:	f3c0 030d 	ubfx	r3, r0, #0, #14
   1c2b0:	4a14      	ldr	r2, [pc, #80]	; (1c304 <TemperatureInternal<(unsigned char)1>::read()+0xb0>)
   1c2b2:	9200      	str	r2, [sp, #0]
   1c2b4:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1c2b8:	4a13      	ldr	r2, [pc, #76]	; (1c308 <TemperatureInternal<(unsigned char)1>::read()+0xb4>)
   1c2ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c2be:	0b80      	lsrs	r0, r0, #14
   1c2c0:	2355      	movs	r3, #85	; 0x55
   1c2c2:	f7ff f9bf 	bl	1b644 <int Print<DevRtt<0>, unsigned long, unsigned long, char const*, int, char const*>(DevRtt<0>, char const*, unsigned long, unsigned long, char const*, int, char const*) [clone .constprop.0]>
                        Debug("  internal raw: %d  F: %02d.%d\n", t, f/10, f%10);
   1c2c6:	4b11      	ldr	r3, [pc, #68]	; (1c30c <TemperatureInternal<(unsigned char)1>::read()+0xb8>)
   1c2c8:	9803      	ldr	r0, [sp, #12]
   1c2ca:	fb83 2304 	smull	r2, r3, r3, r4
   1c2ce:	17e1      	asrs	r1, r4, #31
   1c2d0:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
   1c2d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1c2d8:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
   1c2dc:	b212      	sxth	r2, r2
   1c2de:	b209      	sxth	r1, r1
   1c2e0:	f7ff ff8e 	bl	1c200 <int Print<DevRtt<0>, long, int, int>(DevRtt<0>, char const*, long, int, int) [clone .isra.0] [clone .constprop.0]>
                    }
   1c2e4:	4620      	mov	r0, r4
   1c2e6:	b005      	add	sp, #20
   1c2e8:	bd30      	pop	{r4, r5, pc}
                        if( idx >= HistSiz_ ) idx = 0;
   1c2ea:	2300      	movs	r3, #0
   1c2ec:	7013      	strb	r3, [r2, #0]
   1c2ee:	e7db      	b.n	1c2a8 <TemperatureInternal<(unsigned char)1>::read()+0x54>
                        if( sd_temp_get(&t) ) return f;
   1c2f0:	4c07      	ldr	r4, [pc, #28]	; (1c310 <TemperatureInternal<(unsigned char)1>::read()+0xbc>)
   1c2f2:	e7f7      	b.n	1c2e4 <TemperatureInternal<(unsigned char)1>::read()+0x90>
   1c2f4:	20001323 	.word	0x20001323
   1c2f8:	20001322 	.word	0x20001322
   1c2fc:	fffffe70 	.word	0xfffffe70
   1c300:	20001324 	.word	0x20001324
   1c304:	0001e59c 	.word	0x0001e59c
   1c308:	0001e588 	.word	0x0001e588
   1c30c:	66666667 	.word	0x66666667
   1c310:	fffffc19 	.word	0xfffffc19

0001c314 <timerTestTempStart()::{lambda(void*)#1}::_FUN(void*)>:
// run timerTestTempStart() in main to set timer

inline Timer timerTestTemp;
inline void timerTestTempStart(){
    timerTestTemp.initRepeated( 20_sec, 
        [](void*){ 
   1c314:	b508      	push	{r3, lr}
            TemperatureInternal<1>::read();
   1c316:	f7ff ff9d 	bl	1c254 <TemperatureInternal<(unsigned char)1>::read()>
            TemperatureTmp117<1>::read();
   1c31a:	f7ff f9c1 	bl	1b6a0 <TemperatureTmp117<(unsigned char)1>::read()>
            TemperatureSi7051<1>::read(); 
   1c31e:	f7ff fb95 	bl	1ba4c <TemperatureSi7051<(unsigned char)1>::read()>
        } 
   1c322:	bd08      	pop	{r3, pc}

0001c324 <_GLOBAL__sub_I_main>:
    SI Gpio<P0_13>  sda; 
   1c324:	4b2c      	ldr	r3, [pc, #176]	; (1c3d8 <_GLOBAL__sub_I_main+0xb4>)
   1c326:	681a      	ldr	r2, [r3, #0]
   1c328:	07d0      	lsls	r0, r2, #31
   1c32a:	bf5c      	itt	pl
   1c32c:	2201      	movpl	r2, #1
   1c32e:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_15>  scl;
   1c330:	4b2a      	ldr	r3, [pc, #168]	; (1c3dc <_GLOBAL__sub_I_main+0xb8>)
   1c332:	681a      	ldr	r2, [r3, #0]
   1c334:	07d1      	lsls	r1, r2, #31
   1c336:	bf5c      	itt	pl
   1c338:	2201      	movpl	r2, #1
   1c33a:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_17>  i2cDevicePwr; 
   1c33c:	4b28      	ldr	r3, [pc, #160]	; (1c3e0 <_GLOBAL__sub_I_main+0xbc>)
   1c33e:	681a      	ldr	r2, [r3, #0]
   1c340:	07d2      	lsls	r2, r2, #31
   1c342:	bf5c      	itt	pl
   1c344:	2201      	movpl	r2, #1
   1c346:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_7>  ledRed; //board label 1
   1c348:	4b26      	ldr	r3, [pc, #152]	; (1c3e4 <_GLOBAL__sub_I_main+0xc0>)
   1c34a:	681a      	ldr	r2, [r3, #0]
   1c34c:	07d0      	lsls	r0, r2, #31
   1c34e:	bf5c      	itt	pl
   1c350:	2201      	movpl	r2, #1
   1c352:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_8>  ledGreen; //board label 2
   1c354:	4b24      	ldr	r3, [pc, #144]	; (1c3e8 <_GLOBAL__sub_I_main+0xc4>)
   1c356:	681a      	ldr	r2, [r3, #0]
   1c358:	07d1      	lsls	r1, r2, #31
   1c35a:	bf5c      	itt	pl
   1c35c:	2201      	movpl	r2, #1
   1c35e:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_27, LOWISON>  sw1; //SW1
   1c360:	4b22      	ldr	r3, [pc, #136]	; (1c3ec <_GLOBAL__sub_I_main+0xc8>)
   1c362:	681a      	ldr	r2, [r3, #0]
   1c364:	07d2      	lsls	r2, r2, #31
   1c366:	bf5c      	itt	pl
   1c368:	2201      	movpl	r2, #1
   1c36a:	601a      	strpl	r2, [r3, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   1c36c:	4a20      	ldr	r2, [pc, #128]	; (1c3f0 <_GLOBAL__sub_I_main+0xcc>)
   1c36e:	6813      	ldr	r3, [r2, #0]
   1c370:	f013 0301 	ands.w	r3, r3, #1
   1c374:	d11f      	bne.n	1c3b6 <_GLOBAL__sub_I_main+0x92>
    }

}
   1c376:	b430      	push	{r4, r5}
                        ch_ = ch;
   1c378:	4c1e      	ldr	r4, [pc, #120]	; (1c3f4 <_GLOBAL__sub_I_main+0xd0>)
                        pselN_ = (PSEL)it.PSELN;
   1c37a:	4d1f      	ldr	r5, [pc, #124]	; (1c3f8 <_GLOBAL__sub_I_main+0xd4>)
                        pselP_ = (PSEL)it.PSELP;
   1c37c:	491f      	ldr	r1, [pc, #124]	; (1c3fc <_GLOBAL__sub_I_main+0xd8>)
                        ch_ = ch;
   1c37e:	7023      	strb	r3, [r4, #0]
                        pselN_ = (PSEL)it.PSELN;
   1c380:	702b      	strb	r3, [r5, #0]
                        pselP_ = (PSEL)it.PSELP;
   1c382:	2409      	movs	r4, #9
inline Timer timerAdvUpdate;
   1c384:	4b1e      	ldr	r3, [pc, #120]	; (1c400 <_GLOBAL__sub_I_main+0xdc>)
   1c386:	700c      	strb	r4, [r1, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   1c388:	2101      	movs	r1, #1
                        config_ = it.CONFIG;
   1c38a:	481e      	ldr	r0, [pc, #120]	; (1c404 <_GLOBAL__sub_I_main+0xe0>)
   1c38c:	6011      	str	r1, [r2, #0]
inline Timer timerAdvUpdate;
   1c38e:	681a      	ldr	r2, [r3, #0]
   1c390:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   1c394:	6004      	str	r4, [r0, #0]
   1c396:	07d4      	lsls	r4, r2, #31
   1c398:	d403      	bmi.n	1c3a2 <_GLOBAL__sub_I_main+0x7e>
struct Timer {
   1c39a:	4a1b      	ldr	r2, [pc, #108]	; (1c408 <_GLOBAL__sub_I_main+0xe4>)
   1c39c:	2101      	movs	r1, #1
   1c39e:	6212      	str	r2, [r2, #32]
   1c3a0:	6019      	str	r1, [r3, #0]
inline Timer timerTestTemp;
   1c3a2:	4b1a      	ldr	r3, [pc, #104]	; (1c40c <_GLOBAL__sub_I_main+0xe8>)
   1c3a4:	681a      	ldr	r2, [r3, #0]
   1c3a6:	07d0      	lsls	r0, r2, #31
   1c3a8:	d403      	bmi.n	1c3b2 <_GLOBAL__sub_I_main+0x8e>
   1c3aa:	4a19      	ldr	r2, [pc, #100]	; (1c410 <_GLOBAL__sub_I_main+0xec>)
   1c3ac:	2101      	movs	r1, #1
   1c3ae:	6212      	str	r2, [r2, #32]
   1c3b0:	6019      	str	r1, [r3, #0]
   1c3b2:	bc30      	pop	{r4, r5}
   1c3b4:	4770      	bx	lr
inline Timer timerAdvUpdate;
   1c3b6:	4b12      	ldr	r3, [pc, #72]	; (1c400 <_GLOBAL__sub_I_main+0xdc>)
   1c3b8:	681a      	ldr	r2, [r3, #0]
   1c3ba:	07d1      	lsls	r1, r2, #31
   1c3bc:	d403      	bmi.n	1c3c6 <_GLOBAL__sub_I_main+0xa2>
   1c3be:	4a12      	ldr	r2, [pc, #72]	; (1c408 <_GLOBAL__sub_I_main+0xe4>)
   1c3c0:	2101      	movs	r1, #1
   1c3c2:	6212      	str	r2, [r2, #32]
   1c3c4:	6019      	str	r1, [r3, #0]
inline Timer timerTestTemp;
   1c3c6:	4b11      	ldr	r3, [pc, #68]	; (1c40c <_GLOBAL__sub_I_main+0xe8>)
   1c3c8:	681a      	ldr	r2, [r3, #0]
   1c3ca:	07d2      	lsls	r2, r2, #31
   1c3cc:	bf5f      	itttt	pl
   1c3ce:	4a10      	ldrpl	r2, [pc, #64]	; (1c410 <_GLOBAL__sub_I_main+0xec>)
   1c3d0:	2101      	movpl	r1, #1
   1c3d2:	6212      	strpl	r2, [r2, #32]
   1c3d4:	6019      	strpl	r1, [r3, #0]
   1c3d6:	4770      	bx	lr
   1c3d8:	20001314 	.word	0x20001314
   1c3dc:	20001310 	.word	0x20001310
   1c3e0:	2000130c 	.word	0x2000130c
   1c3e4:	20001308 	.word	0x20001308
   1c3e8:	20001304 	.word	0x20001304
   1c3ec:	20001300 	.word	0x20001300
   1c3f0:	200012fc 	.word	0x200012fc
   1c3f4:	200013e2 	.word	0x200013e2
   1c3f8:	200013e0 	.word	0x200013e0
   1c3fc:	200013e1 	.word	0x200013e1
   1c400:	200012f8 	.word	0x200012f8
   1c404:	200013dc 	.word	0x200013dc
   1c408:	20001350 	.word	0x20001350
   1c40c:	200012f4 	.word	0x200012f4
   1c410:	20001328 	.word	0x20001328

0001c414 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned Status;
  //
  INIT();
   1c418:	4f81      	ldr	r7, [pc, #516]	; (1c620 <SEGGER_RTT_Write+0x20c>)
   1c41a:	783b      	ldrb	r3, [r7, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c41c:	b085      	sub	sp, #20
   1c41e:	4680      	mov	r8, r0
   1c420:	468a      	mov	sl, r1
   1c422:	4691      	mov	r9, r2
  INIT();
   1c424:	b1eb      	cbz	r3, 1c462 <SEGGER_RTT_Write+0x4e>
  switch (pRing->Flags) {
   1c426:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1c42a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1c42e:	f04f 0b00 	mov.w	fp, #0
   1c432:	f10d 000f 	add.w	r0, sp, #15
   1c436:	f88d b00f 	strb.w	fp, [sp, #15]
   1c43a:	f7fd f9c1 	bl	197c0 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1c43e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1c440:	2e01      	cmp	r6, #1
   1c442:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1c446:	f000 808d 	beq.w	1c564 <SEGGER_RTT_Write+0x150>
   1c44a:	2e02      	cmp	r6, #2
   1c44c:	d04f      	beq.n	1c4ee <SEGGER_RTT_Write+0xda>
   1c44e:	b346      	cbz	r6, 1c4a2 <SEGGER_RTT_Write+0x8e>
   1c450:	465e      	mov	r6, fp
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
   1c452:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1c456:	f7fd f9d9 	bl	1980c <app_util_critical_region_exit>
  //
  return Status;
}
   1c45a:	4630      	mov	r0, r6
   1c45c:	b005      	add	sp, #20
   1c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c462:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1c464:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c466:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1c468:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1c46a:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c46c:	4b6d      	ldr	r3, [pc, #436]	; (1c624 <SEGGER_RTT_Write+0x210>)
  p->aUp[0].sName         = "Terminal";
   1c46e:	496e      	ldr	r1, [pc, #440]	; (1c628 <SEGGER_RTT_Write+0x214>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c470:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c472:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c476:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c478:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c47c:	4a6b      	ldr	r2, [pc, #428]	; (1c62c <SEGGER_RTT_Write+0x218>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c47e:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1c480:	2310      	movs	r3, #16
   1c482:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1c484:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1c486:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c488:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1c48a:	4969      	ldr	r1, [pc, #420]	; (1c630 <SEGGER_RTT_Write+0x21c>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c48c:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1c48e:	1df8      	adds	r0, r7, #7
   1c490:	f000 fbd0 	bl	1cc34 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1c494:	4967      	ldr	r1, [pc, #412]	; (1c634 <SEGGER_RTT_Write+0x220>)
   1c496:	4638      	mov	r0, r7
   1c498:	f000 fbcc 	bl	1cc34 <strcpy>
  p->acID[6] = ' ';
   1c49c:	2320      	movs	r3, #32
   1c49e:	71bb      	strb	r3, [r7, #6]
}
   1c4a0:	e7c1      	b.n	1c426 <SEGGER_RTT_Write+0x12>
  RdOff = pRing->RdOff;
   1c4a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c4a4:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c4a8:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c4aa:	bf9c      	itt	ls
   1c4ac:	6a2a      	ldrls	r2, [r5, #32]
   1c4ae:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1c4b0:	3b01      	subs	r3, #1
   1c4b2:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1c4b6:	4599      	cmp	r9, r3
   1c4b8:	d8cb      	bhi.n	1c452 <SEGGER_RTT_Write+0x3e>
  Rem = pRing->SizeOfBuffer - WrOff;
   1c4ba:	4444      	add	r4, r8
   1c4bc:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c4c0:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1c4c4:	6a25      	ldr	r5, [r4, #32]
   1c4c6:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c4ca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1c4ce:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c4d0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1c4d4:	f080 8091 	bcs.w	1c5fa <SEGGER_RTT_Write+0x1e6>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c4d8:	6878      	ldr	r0, [r7, #4]
   1c4da:	4651      	mov	r1, sl
   1c4dc:	464a      	mov	r2, r9
   1c4de:	4458      	add	r0, fp
   1c4e0:	f000 fb5e 	bl	1cba0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c4e4:	eb09 030b 	add.w	r3, r9, fp
   1c4e8:	6263      	str	r3, [r4, #36]	; 0x24
   1c4ea:	464e      	mov	r6, r9
   1c4ec:	e7b1      	b.n	1c452 <SEGGER_RTT_Write+0x3e>
  WrOff = pRing->WrOff;
   1c4ee:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c4f2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1c4f6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c4f8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1c4fc:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c4fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c500:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c502:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c506:	d922      	bls.n	1c54e <SEGGER_RTT_Write+0x13a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c508:	1b13      	subs	r3, r2, r4
   1c50a:	6a2a      	ldr	r2, [r5, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c50c:	454b      	cmp	r3, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c50e:	eb07 0108 	add.w	r1, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c512:	eba2 0b04 	sub.w	fp, r2, r4
   1c516:	bf28      	it	cs
   1c518:	464b      	movcs	r3, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c51a:	459b      	cmp	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c51c:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c51e:	bf28      	it	cs
   1c520:	469b      	movcs	fp, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c522:	4420      	add	r0, r4
   1c524:	4651      	mov	r1, sl
   1c526:	465a      	mov	r2, fp
   1c528:	f000 fb3a 	bl	1cba0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1c52c:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1c52e:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c530:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1c532:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1c534:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1c538:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c53a:	d00d      	beq.n	1c558 <SEGGER_RTT_Write+0x144>
    pRing->WrOff = WrOff;
   1c53c:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c53e:	f1b9 0f00 	cmp.w	r9, #0
   1c542:	d086      	beq.n	1c452 <SEGGER_RTT_Write+0x3e>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c544:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c546:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c548:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c54c:	d8dc      	bhi.n	1c508 <SEGGER_RTT_Write+0xf4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1c54e:	6a2a      	ldr	r2, [r5, #32]
   1c550:	4413      	add	r3, r2
   1c552:	3b01      	subs	r3, #1
   1c554:	1b1b      	subs	r3, r3, r4
   1c556:	e7d9      	b.n	1c50c <SEGGER_RTT_Write+0xf8>
    pRing->WrOff = WrOff;
   1c558:	2400      	movs	r4, #0
   1c55a:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c55c:	f1b9 0f00 	cmp.w	r9, #0
   1c560:	d1cd      	bne.n	1c4fe <SEGGER_RTT_Write+0xea>
   1c562:	e776      	b.n	1c452 <SEGGER_RTT_Write+0x3e>
  RdOff = pRing->RdOff;
   1c564:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c566:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c56a:	455e      	cmp	r6, fp
   1c56c:	d91d      	bls.n	1c5aa <SEGGER_RTT_Write+0x196>
    r = RdOff - WrOff - 1u;
   1c56e:	3e01      	subs	r6, #1
   1c570:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c574:	6a2d      	ldr	r5, [r5, #32]
   1c576:	454e      	cmp	r6, r9
   1c578:	bf28      	it	cs
   1c57a:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c57c:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c580:	4296      	cmp	r6, r2
   1c582:	d21e      	bcs.n	1c5c2 <SEGGER_RTT_Write+0x1ae>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c584:	f108 0301 	add.w	r3, r8, #1
   1c588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c58c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1c590:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c592:	6858      	ldr	r0, [r3, #4]
   1c594:	4632      	mov	r2, r6
   1c596:	4651      	mov	r1, sl
   1c598:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1c59a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c59e:	f000 faff 	bl	1cba0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c5a2:	eb0b 0206 	add.w	r2, fp, r6
   1c5a6:	627a      	str	r2, [r7, #36]	; 0x24
   1c5a8:	e753      	b.n	1c452 <SEGGER_RTT_Write+0x3e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c5aa:	6a2d      	ldr	r5, [r5, #32]
   1c5ac:	442e      	add	r6, r5
   1c5ae:	3e01      	subs	r6, #1
   1c5b0:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c5b4:	454e      	cmp	r6, r9
   1c5b6:	bf28      	it	cs
   1c5b8:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c5ba:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c5be:	4296      	cmp	r6, r2
   1c5c0:	d3e0      	bcc.n	1c584 <SEGGER_RTT_Write+0x170>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c5c2:	f108 0901 	add.w	r9, r8, #1
   1c5c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1c5ca:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1c5ce:	4651      	mov	r1, sl
   1c5d0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c5d4:	9201      	str	r2, [sp, #4]
   1c5d6:	4458      	add	r0, fp
   1c5d8:	f000 fae2 	bl	1cba0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1c5dc:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c5de:	9a01      	ldr	r2, [sp, #4]
   1c5e0:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1c5e4:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1c5e6:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1c5e8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c5ec:	eb0a 0102 	add.w	r1, sl, r2
   1c5f0:	462a      	mov	r2, r5
   1c5f2:	f000 fad5 	bl	1cba0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c5f6:	627d      	str	r5, [r7, #36]	; 0x24
   1c5f8:	e72b      	b.n	1c452 <SEGGER_RTT_Write+0x3e>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c5fa:	6878      	ldr	r0, [r7, #4]
   1c5fc:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1c5fe:	44cb      	add	fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c600:	4632      	mov	r2, r6
   1c602:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1c604:	ebab 0505 	sub.w	r5, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c608:	f000 faca 	bl	1cba0 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c60c:	eb0a 0106 	add.w	r1, sl, r6
   1c610:	6878      	ldr	r0, [r7, #4]
   1c612:	462a      	mov	r2, r5
   1c614:	f000 fac4 	bl	1cba0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c618:	464e      	mov	r6, r9
   1c61a:	6265      	str	r5, [r4, #36]	; 0x24
   1c61c:	e719      	b.n	1c452 <SEGGER_RTT_Write+0x3e>
   1c61e:	bf00      	nop
   1c620:	20001610 	.word	0x20001610
   1c624:	200013f4 	.word	0x200013f4
   1c628:	0001e888 	.word	0x0001e888
   1c62c:	200013e4 	.word	0x200013e4
   1c630:	0001e894 	.word	0x0001e894
   1c634:	0001e898 	.word	0x0001e898

0001c638 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INIT();
   1c63c:	4f83      	ldr	r7, [pc, #524]	; (1c84c <SEGGER_RTT_WriteString+0x214>)
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c63e:	b085      	sub	sp, #20
   1c640:	4680      	mov	r8, r0
  unsigned Len;

  Len = STRLEN(s);
   1c642:	4608      	mov	r0, r1
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
   1c644:	468a      	mov	sl, r1
  Len = STRLEN(s);
   1c646:	f000 fafd 	bl	1cc44 <strlen>
  INIT();
   1c64a:	783b      	ldrb	r3, [r7, #0]
  Len = STRLEN(s);
   1c64c:	4681      	mov	r9, r0
  INIT();
   1c64e:	b1eb      	cbz	r3, 1c68c <SEGGER_RTT_WriteString+0x54>
  switch (pRing->Flags) {
   1c650:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1c654:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  SEGGER_RTT_LOCK();
   1c658:	f04f 0b00 	mov.w	fp, #0
   1c65c:	f10d 000f 	add.w	r0, sp, #15
   1c660:	f88d b00f 	strb.w	fp, [sp, #15]
   1c664:	f7fd f8ac 	bl	197c0 <app_util_critical_region_enter>
  switch (pRing->Flags) {
   1c668:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1c66a:	2e01      	cmp	r6, #1
   1c66c:	ea4f 0448 	mov.w	r4, r8, lsl #1
   1c670:	f000 808d 	beq.w	1c78e <SEGGER_RTT_WriteString+0x156>
   1c674:	2e02      	cmp	r6, #2
   1c676:	d04f      	beq.n	1c718 <SEGGER_RTT_WriteString+0xe0>
   1c678:	b346      	cbz	r6, 1c6cc <SEGGER_RTT_WriteString+0x94>
   1c67a:	465e      	mov	r6, fp
  SEGGER_RTT_UNLOCK();
   1c67c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1c680:	f7fd f8c4 	bl	1980c <app_util_critical_region_exit>
  return SEGGER_RTT_Write(BufferIndex, s, Len);
}
   1c684:	4630      	mov	r0, r6
   1c686:	b005      	add	sp, #20
   1c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c68c:	2202      	movs	r2, #2
  p->aUp[0].RdOff         = 0u;
   1c68e:	62bb      	str	r3, [r7, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c690:	627b      	str	r3, [r7, #36]	; 0x24
  p->aDown[0].RdOff         = 0u;
   1c692:	65bb      	str	r3, [r7, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
   1c694:	657b      	str	r3, [r7, #84]	; 0x54
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c696:	4b6e      	ldr	r3, [pc, #440]	; (1c850 <SEGGER_RTT_WriteString+0x218>)
  p->aUp[0].sName         = "Terminal";
   1c698:	496e      	ldr	r1, [pc, #440]	; (1c854 <SEGGER_RTT_WriteString+0x21c>)
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c69a:	62fa      	str	r2, [r7, #44]	; 0x2c
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c69c:	e9c7 2204 	strd	r2, r2, [r7, #16]
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c6a0:	65fa      	str	r2, [r7, #92]	; 0x5c
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c6a2:	f44f 7000 	mov.w	r0, #512	; 0x200
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c6a6:	4a6c      	ldr	r2, [pc, #432]	; (1c858 <SEGGER_RTT_WriteString+0x220>)
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c6a8:	61fb      	str	r3, [r7, #28]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1c6aa:	2310      	movs	r3, #16
   1c6ac:	653b      	str	r3, [r7, #80]	; 0x50
  p->aUp[0].sName         = "Terminal";
   1c6ae:	61b9      	str	r1, [r7, #24]
  p->aDown[0].sName         = "Terminal";
   1c6b0:	64b9      	str	r1, [r7, #72]	; 0x48
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1c6b2:	6238      	str	r0, [r7, #32]
  strcpy(&p->acID[7], "RTT");
   1c6b4:	4969      	ldr	r1, [pc, #420]	; (1c85c <SEGGER_RTT_WriteString+0x224>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c6b6:	64fa      	str	r2, [r7, #76]	; 0x4c
  strcpy(&p->acID[7], "RTT");
   1c6b8:	1df8      	adds	r0, r7, #7
   1c6ba:	f000 fabb 	bl	1cc34 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   1c6be:	4968      	ldr	r1, [pc, #416]	; (1c860 <SEGGER_RTT_WriteString+0x228>)
   1c6c0:	4638      	mov	r0, r7
   1c6c2:	f000 fab7 	bl	1cc34 <strcpy>
  p->acID[6] = ' ';
   1c6c6:	2320      	movs	r3, #32
   1c6c8:	71bb      	strb	r3, [r7, #6]
}
   1c6ca:	e7c1      	b.n	1c650 <SEGGER_RTT_WriteString+0x18>
  RdOff = pRing->RdOff;
   1c6cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c6ce:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c6d2:	455b      	cmp	r3, fp
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c6d4:	bf9c      	itt	ls
   1c6d6:	6a2a      	ldrls	r2, [r5, #32]
   1c6d8:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1c6da:	3b01      	subs	r3, #1
   1c6dc:	eba3 030b 	sub.w	r3, r3, fp
    if (Avail < NumBytes) {
   1c6e0:	4599      	cmp	r9, r3
   1c6e2:	d8cb      	bhi.n	1c67c <SEGGER_RTT_WriteString+0x44>
  Rem = pRing->SizeOfBuffer - WrOff;
   1c6e4:	4444      	add	r4, r8
   1c6e6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c6ea:	f108 0801 	add.w	r8, r8, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1c6ee:	6a25      	ldr	r5, [r4, #32]
   1c6f0:	eba5 060b 	sub.w	r6, r5, fp
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c6f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   1c6f8:	45b1      	cmp	r9, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c6fa:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  if (Rem > NumBytes) {
   1c6fe:	f080 8091 	bcs.w	1c824 <SEGGER_RTT_WriteString+0x1ec>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c702:	6878      	ldr	r0, [r7, #4]
   1c704:	4651      	mov	r1, sl
   1c706:	464a      	mov	r2, r9
   1c708:	4458      	add	r0, fp
   1c70a:	f000 fa49 	bl	1cba0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c70e:	eb09 030b 	add.w	r3, r9, fp
   1c712:	6263      	str	r3, [r4, #36]	; 0x24
   1c714:	464e      	mov	r6, r9
   1c716:	e7b1      	b.n	1c67c <SEGGER_RTT_WriteString+0x44>
  WrOff = pRing->WrOff;
   1c718:	f108 0801 	add.w	r8, r8, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c71c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1c720:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c722:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   1c726:	465e      	mov	r6, fp
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c728:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c72a:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c72c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c730:	d922      	bls.n	1c778 <SEGGER_RTT_WriteString+0x140>
   1c732:	6a29      	ldr	r1, [r5, #32]
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c734:	1b12      	subs	r2, r2, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c736:	454a      	cmp	r2, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c738:	eb07 0308 	add.w	r3, r7, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1c73c:	eba1 0b04 	sub.w	fp, r1, r4
   1c740:	bf28      	it	cs
   1c742:	464a      	movcs	r2, r9
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c744:	4593      	cmp	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c746:	6858      	ldr	r0, [r3, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1c748:	bf28      	it	cs
   1c74a:	4693      	movcs	fp, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1c74c:	4420      	add	r0, r4
   1c74e:	4651      	mov	r1, sl
   1c750:	465a      	mov	r2, fp
   1c752:	f000 fa25 	bl	1cba0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1c756:	6a2b      	ldr	r3, [r5, #32]
    WrOff           += NumBytesToWrite;
   1c758:	445c      	add	r4, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c75a:	429c      	cmp	r4, r3
    NumBytesWritten += NumBytesToWrite;
   1c75c:	445e      	add	r6, fp
    NumBytes        -= NumBytesToWrite;
   1c75e:	eba9 090b 	sub.w	r9, r9, fp
    pBuffer         += NumBytesToWrite;
   1c762:	44da      	add	sl, fp
    if (WrOff == pRing->SizeOfBuffer) {
   1c764:	d00d      	beq.n	1c782 <SEGGER_RTT_WriteString+0x14a>
    pRing->WrOff = WrOff;
   1c766:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c768:	f1b9 0f00 	cmp.w	r9, #0
   1c76c:	d086      	beq.n	1c67c <SEGGER_RTT_WriteString+0x44>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1c76e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    if (RdOff > WrOff) {
   1c770:	42a3      	cmp	r3, r4
      NumBytesToWrite = RdOff - WrOff - 1u;
   1c772:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1c776:	d8dc      	bhi.n	1c732 <SEGGER_RTT_WriteString+0xfa>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1c778:	6a29      	ldr	r1, [r5, #32]
   1c77a:	185a      	adds	r2, r3, r1
   1c77c:	3a01      	subs	r2, #1
   1c77e:	1b12      	subs	r2, r2, r4
   1c780:	e7d9      	b.n	1c736 <SEGGER_RTT_WriteString+0xfe>
    pRing->WrOff = WrOff;
   1c782:	2400      	movs	r4, #0
   1c784:	626c      	str	r4, [r5, #36]	; 0x24
  } while (NumBytes);
   1c786:	f1b9 0f00 	cmp.w	r9, #0
   1c78a:	d1cd      	bne.n	1c728 <SEGGER_RTT_WriteString+0xf0>
   1c78c:	e776      	b.n	1c67c <SEGGER_RTT_WriteString+0x44>
  RdOff = pRing->RdOff;
   1c78e:	6aae      	ldr	r6, [r5, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c790:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
  if (RdOff <= WrOff) {
   1c794:	455e      	cmp	r6, fp
   1c796:	d91d      	bls.n	1c7d4 <SEGGER_RTT_WriteString+0x19c>
    r = RdOff - WrOff - 1u;
   1c798:	3e01      	subs	r6, #1
   1c79a:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c79e:	6a2d      	ldr	r5, [r5, #32]
   1c7a0:	454e      	cmp	r6, r9
   1c7a2:	bf28      	it	cs
   1c7a4:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c7a6:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c7aa:	4296      	cmp	r6, r2
   1c7ac:	d21e      	bcs.n	1c7ec <SEGGER_RTT_WriteString+0x1b4>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c7ae:	f108 0301 	add.w	r3, r8, #1
   1c7b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c7b6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    pRing->WrOff = WrOff + NumBytes;
   1c7ba:	44a0      	add	r8, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c7bc:	6858      	ldr	r0, [r3, #4]
   1c7be:	4632      	mov	r2, r6
   1c7c0:	4651      	mov	r1, sl
   1c7c2:	4458      	add	r0, fp
    pRing->WrOff = WrOff + NumBytes;
   1c7c4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1c7c8:	f000 f9ea 	bl	1cba0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1c7cc:	eb0b 0206 	add.w	r2, fp, r6
   1c7d0:	627a      	str	r2, [r7, #36]	; 0x24
   1c7d2:	e753      	b.n	1c67c <SEGGER_RTT_WriteString+0x44>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1c7d4:	6a2d      	ldr	r5, [r5, #32]
   1c7d6:	442e      	add	r6, r5
   1c7d8:	3e01      	subs	r6, #1
   1c7da:	eba6 060b 	sub.w	r6, r6, fp
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c7de:	454e      	cmp	r6, r9
   1c7e0:	bf28      	it	cs
   1c7e2:	464e      	movcs	r6, r9
  Rem = pRing->SizeOfBuffer - WrOff;
   1c7e4:	eba5 020b 	sub.w	r2, r5, fp
  if (Rem > NumBytes) {
   1c7e8:	4296      	cmp	r6, r2
   1c7ea:	d3e0      	bcc.n	1c7ae <SEGGER_RTT_WriteString+0x176>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c7ec:	f108 0901 	add.w	r9, r8, #1
   1c7f0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1c7f4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
   1c7f8:	4651      	mov	r1, sl
   1c7fa:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c7fe:	9201      	str	r2, [sp, #4]
   1c800:	4458      	add	r0, fp
   1c802:	f000 f9cd 	bl	1cba0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1c806:	1b75      	subs	r5, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c808:	9a01      	ldr	r2, [sp, #4]
   1c80a:	f8d9 0004 	ldr.w	r0, [r9, #4]
    pRing->WrOff = NumBytesAtOnce;
   1c80e:	44a0      	add	r8, r4
    NumBytesAtOnce = NumBytes - Rem;
   1c810:	445d      	add	r5, fp
    pRing->WrOff = NumBytesAtOnce;
   1c812:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c816:	eb0a 0102 	add.w	r1, sl, r2
   1c81a:	462a      	mov	r2, r5
   1c81c:	f000 f9c0 	bl	1cba0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c820:	627d      	str	r5, [r7, #36]	; 0x24
   1c822:	e72b      	b.n	1c67c <SEGGER_RTT_WriteString+0x44>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c824:	6878      	ldr	r0, [r7, #4]
   1c826:	4458      	add	r0, fp
    NumBytesAtOnce = NumBytes - Rem;
   1c828:	ebab 0b05 	sub.w	fp, fp, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c82c:	4632      	mov	r2, r6
   1c82e:	4651      	mov	r1, sl
    NumBytesAtOnce = NumBytes - Rem;
   1c830:	eb0b 0509 	add.w	r5, fp, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1c834:	f000 f9b4 	bl	1cba0 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1c838:	eb0a 0106 	add.w	r1, sl, r6
   1c83c:	6878      	ldr	r0, [r7, #4]
   1c83e:	462a      	mov	r2, r5
   1c840:	f000 f9ae 	bl	1cba0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1c844:	464e      	mov	r6, r9
   1c846:	6265      	str	r5, [r4, #36]	; 0x24
   1c848:	e718      	b.n	1c67c <SEGGER_RTT_WriteString+0x44>
   1c84a:	bf00      	nop
   1c84c:	20001610 	.word	0x20001610
   1c850:	200013f4 	.word	0x200013f4
   1c854:	0001e888 	.word	0x0001e888
   1c858:	200013e4 	.word	0x200013e4
   1c85c:	0001e894 	.word	0x0001e894
   1c860:	0001e898 	.word	0x0001e898

0001c864 <sd_softdevice_enable>:
 * @retval ::NRF_ERROR_INVALID_STATE SoftDevice is already enabled, and the clock source and fault handler cannot be updated.
 * @retval ::NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION SoftDevice interrupt is already enabled, or an enabled interrupt has an illegal priority level.
 * @retval ::NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN Unknown low frequency clock source selected.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid clock source configuration supplied in p_clock_lf_cfg.
 */
SVCALL(SD_SOFTDEVICE_ENABLE, uint32_t, sd_softdevice_enable(nrf_clock_lf_cfg_t const * p_clock_lf_cfg, nrf_fault_handler_t fault_handler));
   1c864:	df10      	svc	16
   1c866:	4770      	bx	lr

0001c868 <nrf_sdh_enable_request>:
#endif
}


ret_code_t nrf_sdh_enable_request(void)
{
   1c868:	b570      	push	{r4, r5, r6, lr}
    ret_code_t ret_code;

    if (m_nrf_sdh_enabled)
   1c86a:	4d3c      	ldr	r5, [pc, #240]	; (1c95c <nrf_sdh_enable_request+0xf4>)
   1c86c:	782b      	ldrb	r3, [r5, #0]
{
   1c86e:	b084      	sub	sp, #16
    if (m_nrf_sdh_enabled)
   1c870:	2b00      	cmp	r3, #0
   1c872:	d166      	bne.n	1c942 <nrf_sdh_enable_request+0xda>
    {
        return NRF_ERROR_INVALID_STATE;
    }

    m_nrf_sdh_continue = true;
   1c874:	4e3a      	ldr	r6, [pc, #232]	; (1c960 <nrf_sdh_enable_request+0xf8>)
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c876:	493b      	ldr	r1, [pc, #236]	; (1c964 <nrf_sdh_enable_request+0xfc>)
    m_nrf_sdh_continue = true;
   1c878:	2301      	movs	r3, #1
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c87a:	a802      	add	r0, sp, #8
    m_nrf_sdh_continue = true;
   1c87c:	7033      	strb	r3, [r6, #0]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c87e:	f7fd f9db 	bl	19c38 <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c882:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c884:	b923      	cbnz	r3, 1c890 <nrf_sdh_enable_request+0x28>
   1c886:	e00e      	b.n	1c8a6 <nrf_sdh_enable_request+0x3e>
         nrf_section_iter_next(&iter))
   1c888:	f7fd f9e0 	bl	19c4c <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c88c:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   1c88e:	b153      	cbz	r3, 1c8a6 <nrf_sdh_enable_request+0x3e>
        if (handler(req, p_observer->p_context))
   1c890:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c894:	2000      	movs	r0, #0
   1c896:	4790      	blx	r2
   1c898:	4604      	mov	r4, r0
         nrf_section_iter_next(&iter))
   1c89a:	a802      	add	r0, sp, #8
        if (handler(req, p_observer->p_context))
   1c89c:	2c00      	cmp	r4, #0
   1c89e:	d1f3      	bne.n	1c888 <nrf_sdh_enable_request+0x20>

    // Notify observers about a finished SoftDevice enable process.
    sdh_state_observer_notify(NRF_SDH_EVT_STATE_ENABLED);

    return NRF_SUCCESS;
}
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	b004      	add	sp, #16
   1c8a4:	bd70      	pop	{r4, r5, r6, pc}
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c8a6:	4930      	ldr	r1, [pc, #192]	; (1c968 <nrf_sdh_enable_request+0x100>)
   1c8a8:	a802      	add	r0, sp, #8
   1c8aa:	f7fd f9c5 	bl	19c38 <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c8ae:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c8b0:	b14b      	cbz	r3, 1c8c6 <nrf_sdh_enable_request+0x5e>
        handler(evt, p_observer->p_context);
   1c8b2:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c8b6:	2000      	movs	r0, #0
   1c8b8:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c8ba:	a802      	add	r0, sp, #8
   1c8bc:	f7fd f9c6 	bl	19c4c <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c8c0:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c8c2:	2b00      	cmp	r3, #0
   1c8c4:	d1f5      	bne.n	1c8b2 <nrf_sdh_enable_request+0x4a>
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c8c6:	4a29      	ldr	r2, [pc, #164]	; (1c96c <nrf_sdh_enable_request+0x104>)
    CRITICAL_REGION_ENTER();
   1c8c8:	2300      	movs	r3, #0
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c8ca:	6812      	ldr	r2, [r2, #0]
    CRITICAL_REGION_ENTER();
   1c8cc:	f88d 3008 	strb.w	r3, [sp, #8]
   1c8d0:	a802      	add	r0, sp, #8
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   1c8d2:	9201      	str	r2, [sp, #4]
    CRITICAL_REGION_ENTER();
   1c8d4:	f7fc ff74 	bl	197c0 <app_util_critical_region_enter>
    ret_code = sd_softdevice_enable(&clock_lf_cfg, app_error_fault_handler);
   1c8d8:	4925      	ldr	r1, [pc, #148]	; (1c970 <nrf_sdh_enable_request+0x108>)
   1c8da:	a801      	add	r0, sp, #4
   1c8dc:	f7ff ffc2 	bl	1c864 <sd_softdevice_enable>
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   1c8e0:	fab0 f380 	clz	r3, r0
   1c8e4:	4604      	mov	r4, r0
   1c8e6:	095b      	lsrs	r3, r3, #5
    CRITICAL_REGION_EXIT();
   1c8e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   1c8ec:	702b      	strb	r3, [r5, #0]
    CRITICAL_REGION_EXIT();
   1c8ee:	f7fc ff8d 	bl	1980c <app_util_critical_region_exit>
    if (ret_code != NRF_SUCCESS)
   1c8f2:	2c00      	cmp	r4, #0
   1c8f4:	d1d4      	bne.n	1c8a0 <nrf_sdh_enable_request+0x38>
    m_nrf_sdh_suspended = false;
   1c8f6:	4b1f      	ldr	r3, [pc, #124]	; (1c974 <nrf_sdh_enable_request+0x10c>)
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
   1c8f8:	491f      	ldr	r1, [pc, #124]	; (1c978 <nrf_sdh_enable_request+0x110>)
   1c8fa:	701c      	strb	r4, [r3, #0]
    m_nrf_sdh_continue  = false;
   1c8fc:	7034      	strb	r4, [r6, #0]
   1c8fe:	f891 2316 	ldrb.w	r2, [r1, #790]	; 0x316
   || (((1 << priority) & __NRF_NVIC_APP_IRQ_PRIOS) == 0)
   1c902:	23ec      	movs	r3, #236	; 0xec
   1c904:	0952      	lsrs	r2, r2, #5
   1c906:	4113      	asrs	r3, r2
   1c908:	07db      	lsls	r3, r3, #31
   1c90a:	d51e      	bpl.n	1c94a <nrf_sdh_enable_request+0xe2>
  if (nrf_nvic_state.__cr_flag)
   1c90c:	4b1b      	ldr	r3, [pc, #108]	; (1c97c <nrf_sdh_enable_request+0x114>)
   1c90e:	689a      	ldr	r2, [r3, #8]
   1c910:	b302      	cbz	r2, 1c954 <nrf_sdh_enable_request+0xec>
    nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] |= (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));
   1c912:	681a      	ldr	r2, [r3, #0]
   1c914:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1c918:	601a      	str	r2, [r3, #0]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c91a:	4913      	ldr	r1, [pc, #76]	; (1c968 <nrf_sdh_enable_request+0x100>)
   1c91c:	a802      	add	r0, sp, #8
   1c91e:	f7fd f98b 	bl	19c38 <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c922:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c924:	2b00      	cmp	r3, #0
   1c926:	d0bb      	beq.n	1c8a0 <nrf_sdh_enable_request+0x38>
        handler(evt, p_observer->p_context);
   1c928:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c92c:	2001      	movs	r0, #1
   1c92e:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c930:	a802      	add	r0, sp, #8
   1c932:	f7fd f98b 	bl	19c4c <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c936:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   1c938:	2b00      	cmp	r3, #0
   1c93a:	d1f5      	bne.n	1c928 <nrf_sdh_enable_request+0xc0>
}
   1c93c:	4620      	mov	r0, r4
   1c93e:	b004      	add	sp, #16
   1c940:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_INVALID_STATE;
   1c942:	2408      	movs	r4, #8
}
   1c944:	4620      	mov	r0, r4
   1c946:	b004      	add	sp, #16
   1c948:	bd70      	pop	{r4, r5, r6, pc}
    APP_ERROR_CHECK(ret_code);
   1c94a:	f242 0002 	movw	r0, #8194	; 0x2002
   1c94e:	f7fc fce9 	bl	19324 <app_error_handler_bare>
   1c952:	e7e2      	b.n	1c91a <nrf_sdh_enable_request+0xb2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1c954:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c958:	600b      	str	r3, [r1, #0]
   1c95a:	e7de      	b.n	1c91a <nrf_sdh_enable_request+0xb2>
   1c95c:	200015f5 	.word	0x200015f5
   1c960:	200015f4 	.word	0x200015f4
   1c964:	0001e8a4 	.word	0x0001e8a4
   1c968:	0001e8bc 	.word	0x0001e8bc
   1c96c:	0001e8a0 	.word	0x0001e8a0
   1c970:	00019345 	.word	0x00019345
   1c974:	200015f6 	.word	0x200015f6
   1c978:	e000e100 	.word	0xe000e100
   1c97c:	20001604 	.word	0x20001604

0001c980 <nrf_sdh_is_enabled>:
}


bool nrf_sdh_is_enabled(void)
{
    return m_nrf_sdh_enabled;
   1c980:	4b01      	ldr	r3, [pc, #4]	; (1c988 <nrf_sdh_is_enabled+0x8>)
}
   1c982:	7818      	ldrb	r0, [r3, #0]
   1c984:	4770      	bx	lr
   1c986:	bf00      	nop
   1c988:	200015f5 	.word	0x200015f5

0001c98c <SWI2_IRQHandler>:


#if (NRF_SDH_DISPATCH_MODEL == NRF_SDH_DISPATCH_MODEL_INTERRUPT)

void SD_EVT_IRQHandler(void)
{
   1c98c:	b500      	push	{lr}
   1c98e:	b083      	sub	sp, #12
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c990:	4908      	ldr	r1, [pc, #32]	; (1c9b4 <SWI2_IRQHandler+0x28>)
   1c992:	4668      	mov	r0, sp
   1c994:	f7fd f950 	bl	19c38 <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   1c998:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c99a:	b143      	cbz	r3, 1c9ae <SWI2_IRQHandler+0x22>
        handler(p_observer->p_context);
   1c99c:	e9d3 2000 	ldrd	r2, r0, [r3]
   1c9a0:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   1c9a2:	4668      	mov	r0, sp
   1c9a4:	f7fd f952 	bl	19c4c <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   1c9a8:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   1c9aa:	2b00      	cmp	r3, #0
   1c9ac:	d1f6      	bne.n	1c99c <SWI2_IRQHandler+0x10>
    nrf_sdh_evts_poll();
}
   1c9ae:	b003      	add	sp, #12
   1c9b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9b4:	0001e8b0 	.word	0x0001e8b0

0001c9b8 <sd_ble_enable>:
 *                                      and set the start address of the application RAM region accordingly.
 *                                    - Dynamic part of the SoftDevice RAM region is larger then 64 kB which
 *                                      is currently not supported.
 * @retval ::NRF_ERROR_RESOURCES      The total number of L2CAP Channels configured using @ref sd_ble_cfg_set is too large.
 */
SVCALL(SD_BLE_ENABLE, uint32_t, sd_ble_enable(uint32_t * p_app_ram_base));
   1c9b8:	df60      	svc	96	; 0x60
   1c9ba:	4770      	bx	lr

0001c9bc <sd_ble_cfg_set>:
 * @retval ::NRF_ERROR_INVALID_ADDR   Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_INVALID_PARAM  Invalid cfg_id supplied.
 * @retval ::NRF_ERROR_NO_MEM         The amount of memory assigned to the SoftDevice by app_ram_base is not
 *                                    large enough to fit this configuration's memory requirement.
 */
SVCALL(SD_BLE_CFG_SET, uint32_t, sd_ble_cfg_set(uint32_t cfg_id, ble_cfg_t const * p_cfg, uint32_t app_ram_base));
   1c9bc:	df69      	svc	105	; 0x69
   1c9be:	4770      	bx	lr

0001c9c0 <sd_ble_evt_get>:
 * @retval ::NRF_SUCCESS Event pulled and stored into the supplied buffer.
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_NOT_FOUND No events ready to be pulled.
 * @retval ::NRF_ERROR_DATA_SIZE Event ready but could not fit into the supplied buffer.
 */
SVCALL(SD_BLE_EVT_GET, uint32_t, sd_ble_evt_get(uint8_t *p_dest, uint16_t *p_len));
   1c9c0:	df61      	svc	97	; 0x61
   1c9c2:	4770      	bx	lr

0001c9c4 <nrf_sdh_ble_evts_poll>:
{
    UNUSED_VARIABLE(p_context);

    ret_code_t ret_code;

    if (!m_stack_is_enabled)
   1c9c4:	4b14      	ldr	r3, [pc, #80]	; (1ca18 <nrf_sdh_ble_evts_poll+0x54>)
   1c9c6:	781b      	ldrb	r3, [r3, #0]
   1c9c8:	b32b      	cbz	r3, 1ca16 <nrf_sdh_ble_evts_poll+0x52>
{
   1c9ca:	b530      	push	{r4, r5, lr}

        NRF_LOG_DEBUG("BLE event: 0x%x.", p_ble_evt->header.evt_id);

        // Forward the event to BLE observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c9cc:	4d13      	ldr	r5, [pc, #76]	; (1ca1c <nrf_sdh_ble_evts_poll+0x58>)
{
   1c9ce:	b091      	sub	sp, #68	; 0x44
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1c9d0:	2434      	movs	r4, #52	; 0x34
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1c9d2:	f10d 0102 	add.w	r1, sp, #2
   1c9d6:	a803      	add	r0, sp, #12
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   1c9d8:	f8ad 4002 	strh.w	r4, [sp, #2]
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   1c9dc:	f7ff fff0 	bl	1c9c0 <sd_ble_evt_get>
        if (ret_code != NRF_SUCCESS)
   1c9e0:	b988      	cbnz	r0, 1ca06 <nrf_sdh_ble_evts_poll+0x42>
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c9e2:	4629      	mov	r1, r5
   1c9e4:	a801      	add	r0, sp, #4
   1c9e6:	f7fd f927 	bl	19c38 <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1c9ea:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1c9ec:	2b00      	cmp	r3, #0
   1c9ee:	d0f0      	beq.n	1c9d2 <nrf_sdh_ble_evts_poll+0xe>
            nrf_sdh_ble_evt_handler_t    handler;

            p_observer = (nrf_sdh_ble_evt_observer_t *)nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(p_ble_evt, p_observer->p_context);
   1c9f0:	e9d3 2100 	ldrd	r2, r1, [r3]
   1c9f4:	a803      	add	r0, sp, #12
   1c9f6:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1c9f8:	a801      	add	r0, sp, #4
   1c9fa:	f7fd f927 	bl	19c4c <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1c9fe:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   1ca00:	2b00      	cmp	r3, #0
   1ca02:	d1f5      	bne.n	1c9f0 <nrf_sdh_ble_evts_poll+0x2c>
   1ca04:	e7e5      	b.n	1c9d2 <nrf_sdh_ble_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1ca06:	2805      	cmp	r0, #5
   1ca08:	d101      	bne.n	1ca0e <nrf_sdh_ble_evts_poll+0x4a>
    {
        APP_ERROR_HANDLER(ret_code);
    }
}
   1ca0a:	b011      	add	sp, #68	; 0x44
   1ca0c:	bd30      	pop	{r4, r5, pc}
        APP_ERROR_HANDLER(ret_code);
   1ca0e:	f7fc fc89 	bl	19324 <app_error_handler_bare>
}
   1ca12:	b011      	add	sp, #68	; 0x44
   1ca14:	bd30      	pop	{r4, r5, pc}
   1ca16:	4770      	bx	lr
   1ca18:	200015f7 	.word	0x200015f7
   1ca1c:	0001e8c8 	.word	0x0001e8c8

0001ca20 <nrf_sdh_ble_default_cfg_set>:
    if (p_app_ram_start == NULL)
   1ca20:	2900      	cmp	r1, #0
   1ca22:	d04f      	beq.n	1cac4 <nrf_sdh_ble_default_cfg_set+0xa4>
{
   1ca24:	b570      	push	{r4, r5, r6, lr}
    *p_app_ram_start = APP_RAM_START;
   1ca26:	4b28      	ldr	r3, [pc, #160]	; (1cac8 <nrf_sdh_ble_default_cfg_set+0xa8>)
   1ca28:	600b      	str	r3, [r1, #0]
{
   1ca2a:	b084      	sub	sp, #16
   1ca2c:	460c      	mov	r4, r1
   1ca2e:	4605      	mov	r5, r0
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1ca30:	220c      	movs	r2, #12
   1ca32:	a801      	add	r0, sp, #4
   1ca34:	2100      	movs	r1, #0
   1ca36:	f000 f8c1 	bl	1cbbc <memset>
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   1ca3a:	2601      	movs	r6, #1
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   1ca3c:	2306      	movs	r3, #6
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1ca3e:	6822      	ldr	r2, [r4, #0]
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   1ca40:	f8ad 3008 	strh.w	r3, [sp, #8]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1ca44:	a901      	add	r1, sp, #4
   1ca46:	2020      	movs	r0, #32
    ble_cfg.conn_cfg.conn_cfg_tag                     = conn_cfg_tag;
   1ca48:	f88d 5004 	strb.w	r5, [sp, #4]
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   1ca4c:	f88d 6006 	strb.w	r6, [sp, #6]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   1ca50:	f7ff ffb4 	bl	1c9bc <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1ca54:	a801      	add	r0, sp, #4
   1ca56:	220c      	movs	r2, #12
   1ca58:	2100      	movs	r1, #0
    ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
   1ca5a:	2500      	movs	r5, #0
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1ca5c:	f000 f8ae 	bl	1cbbc <memset>
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   1ca60:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
   1ca62:	f88d 5005 	strb.w	r5, [sp, #5]
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   1ca66:	a901      	add	r1, sp, #4
   1ca68:	2040      	movs	r0, #64	; 0x40
   1ca6a:	f7ff ffa7 	bl	1c9bc <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   1ca6e:	4629      	mov	r1, r5
   1ca70:	a801      	add	r0, sp, #4
   1ca72:	220c      	movs	r2, #12
   1ca74:	f000 f8a2 	bl	1cbbc <memset>
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   1ca78:	6822      	ldr	r2, [r4, #0]
    ble_cfg.common_cfg.vs_uuid_cfg.vs_uuid_count = NRF_SDH_BLE_VS_UUID_COUNT;
   1ca7a:	f88d 5004 	strb.w	r5, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   1ca7e:	a901      	add	r1, sp, #4
   1ca80:	4630      	mov	r0, r6
   1ca82:	f7ff ff9b 	bl	1c9bc <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   1ca86:	4629      	mov	r1, r5
   1ca88:	a801      	add	r0, sp, #4
   1ca8a:	220c      	movs	r2, #12
   1ca8c:	f000 f896 	bl	1cbbc <memset>
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   1ca90:	23f8      	movs	r3, #248	; 0xf8
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   1ca92:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   1ca94:	9301      	str	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   1ca96:	a901      	add	r1, sp, #4
   1ca98:	20a1      	movs	r0, #161	; 0xa1
   1ca9a:	f7ff ff8f 	bl	1c9bc <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   1ca9e:	4629      	mov	r1, r5
   1caa0:	a801      	add	r0, sp, #4
   1caa2:	220c      	movs	r2, #12
   1caa4:	f000 f88a 	bl	1cbbc <memset>
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1caa8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1caac:	6822      	ldr	r2, [r4, #0]
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1caae:	f365 0300 	bfi	r3, r5, #0, #1
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1cab2:	a901      	add	r1, sp, #4
   1cab4:	20a0      	movs	r0, #160	; 0xa0
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   1cab6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   1caba:	f7ff ff7f 	bl	1c9bc <sd_ble_cfg_set>
    return NRF_SUCCESS;
   1cabe:	4628      	mov	r0, r5
}
   1cac0:	b004      	add	sp, #16
   1cac2:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_NULL;
   1cac4:	200e      	movs	r0, #14
}
   1cac6:	4770      	bx	lr
   1cac8:	20001118 	.word	0x20001118

0001cacc <nrf_sdh_ble_enable>:
{
   1cacc:	b508      	push	{r3, lr}
    ret_code_t ret_code = sd_ble_enable(p_app_ram_start);
   1cace:	f7ff ff73 	bl	1c9b8 <sd_ble_enable>
    if (ret_code == NRF_SUCCESS)
   1cad2:	b910      	cbnz	r0, 1cada <nrf_sdh_ble_enable+0xe>
        m_stack_is_enabled = true;
   1cad4:	4b01      	ldr	r3, [pc, #4]	; (1cadc <nrf_sdh_ble_enable+0x10>)
   1cad6:	2201      	movs	r2, #1
   1cad8:	701a      	strb	r2, [r3, #0]
}
   1cada:	bd08      	pop	{r3, pc}
   1cadc:	200015f7 	.word	0x200015f7

0001cae0 <sd_evt_get>:
SVCALL(SD_EVT_GET, uint32_t, sd_evt_get(uint32_t * p_evt_id));
   1cae0:	df4b      	svc	75	; 0x4b
   1cae2:	4770      	bx	lr

0001cae4 <nrf_sdh_soc_evts_poll>:
/**@brief   Function for polling SoC events.
 *
 * @param[in]   p_context   Context of the observer.
 */
static void nrf_sdh_soc_evts_poll(void * p_context)
{
   1cae4:	b510      	push	{r4, lr}

        NRF_LOG_DEBUG("SoC event: 0x%x.", evt_id);

        // Forward the event to SoC observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1cae6:	4c11      	ldr	r4, [pc, #68]	; (1cb2c <nrf_sdh_soc_evts_poll+0x48>)
{
   1cae8:	b084      	sub	sp, #16
        ret_code = sd_evt_get(&evt_id);
   1caea:	a801      	add	r0, sp, #4
   1caec:	f7ff fff8 	bl	1cae0 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1caf0:	b9a8      	cbnz	r0, 1cb1e <nrf_sdh_soc_evts_poll+0x3a>
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1caf2:	4621      	mov	r1, r4
   1caf4:	a802      	add	r0, sp, #8
   1caf6:	f7fd f89f 	bl	19c38 <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   1cafa:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1cafc:	2b00      	cmp	r3, #0
   1cafe:	d0f4      	beq.n	1caea <nrf_sdh_soc_evts_poll+0x6>
            nrf_sdh_soc_evt_handler_t    handler;

            p_observer = (nrf_sdh_soc_evt_observer_t *) nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(evt_id, p_observer->p_context);
   1cb00:	e9d3 2100 	ldrd	r2, r1, [r3]
   1cb04:	9801      	ldr	r0, [sp, #4]
   1cb06:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   1cb08:	a802      	add	r0, sp, #8
   1cb0a:	f7fd f89f 	bl	19c4c <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   1cb0e:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d1f5      	bne.n	1cb00 <nrf_sdh_soc_evts_poll+0x1c>
        ret_code = sd_evt_get(&evt_id);
   1cb14:	a801      	add	r0, sp, #4
   1cb16:	f7ff ffe3 	bl	1cae0 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   1cb1a:	2800      	cmp	r0, #0
   1cb1c:	d0e9      	beq.n	1caf2 <nrf_sdh_soc_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   1cb1e:	2805      	cmp	r0, #5
   1cb20:	d001      	beq.n	1cb26 <nrf_sdh_soc_evts_poll+0x42>
    {
        APP_ERROR_HANDLER(ret_code);
   1cb22:	f7fc fbff 	bl	19324 <app_error_handler_bare>
    }
}
   1cb26:	b004      	add	sp, #16
   1cb28:	bd10      	pop	{r4, pc}
   1cb2a:	bf00      	nop
   1cb2c:	0001e8d4 	.word	0x0001e8d4

0001cb30 <exit>:
   1cb30:	b508      	push	{r3, lr}
   1cb32:	4b07      	ldr	r3, [pc, #28]	; (1cb50 <exit+0x20>)
   1cb34:	4604      	mov	r4, r0
   1cb36:	b113      	cbz	r3, 1cb3e <exit+0xe>
   1cb38:	2100      	movs	r1, #0
   1cb3a:	f3af 8000 	nop.w
   1cb3e:	4b05      	ldr	r3, [pc, #20]	; (1cb54 <exit+0x24>)
   1cb40:	6818      	ldr	r0, [r3, #0]
   1cb42:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1cb44:	b103      	cbz	r3, 1cb48 <exit+0x18>
   1cb46:	4798      	blx	r3
   1cb48:	4620      	mov	r0, r4
   1cb4a:	f000 fce5 	bl	1d518 <_exit>
   1cb4e:	bf00      	nop
   1cb50:	00000000 	.word	0x00000000
   1cb54:	0001e8e0 	.word	0x0001e8e0

0001cb58 <__libc_init_array>:
   1cb58:	b570      	push	{r4, r5, r6, lr}
   1cb5a:	4d0d      	ldr	r5, [pc, #52]	; (1cb90 <__libc_init_array+0x38>)
   1cb5c:	4c0d      	ldr	r4, [pc, #52]	; (1cb94 <__libc_init_array+0x3c>)
   1cb5e:	1b64      	subs	r4, r4, r5
   1cb60:	10a4      	asrs	r4, r4, #2
   1cb62:	2600      	movs	r6, #0
   1cb64:	42a6      	cmp	r6, r4
   1cb66:	d109      	bne.n	1cb7c <__libc_init_array+0x24>
   1cb68:	4d0b      	ldr	r5, [pc, #44]	; (1cb98 <__libc_init_array+0x40>)
   1cb6a:	4c0c      	ldr	r4, [pc, #48]	; (1cb9c <__libc_init_array+0x44>)
   1cb6c:	f001 fca4 	bl	1e4b8 <_init>
   1cb70:	1b64      	subs	r4, r4, r5
   1cb72:	10a4      	asrs	r4, r4, #2
   1cb74:	2600      	movs	r6, #0
   1cb76:	42a6      	cmp	r6, r4
   1cb78:	d105      	bne.n	1cb86 <__libc_init_array+0x2e>
   1cb7a:	bd70      	pop	{r4, r5, r6, pc}
   1cb7c:	f855 3b04 	ldr.w	r3, [r5], #4
   1cb80:	4798      	blx	r3
   1cb82:	3601      	adds	r6, #1
   1cb84:	e7ee      	b.n	1cb64 <__libc_init_array+0xc>
   1cb86:	f855 3b04 	ldr.w	r3, [r5], #4
   1cb8a:	4798      	blx	r3
   1cb8c:	3601      	adds	r6, #1
   1cb8e:	e7f2      	b.n	1cb76 <__libc_init_array+0x1e>
   1cb90:	200011a8 	.word	0x200011a8
   1cb94:	200011a8 	.word	0x200011a8
   1cb98:	200011a8 	.word	0x200011a8
   1cb9c:	200011b0 	.word	0x200011b0

0001cba0 <memcpy>:
   1cba0:	440a      	add	r2, r1
   1cba2:	4291      	cmp	r1, r2
   1cba4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1cba8:	d100      	bne.n	1cbac <memcpy+0xc>
   1cbaa:	4770      	bx	lr
   1cbac:	b510      	push	{r4, lr}
   1cbae:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1cbb6:	4291      	cmp	r1, r2
   1cbb8:	d1f9      	bne.n	1cbae <memcpy+0xe>
   1cbba:	bd10      	pop	{r4, pc}

0001cbbc <memset>:
   1cbbc:	4402      	add	r2, r0
   1cbbe:	4603      	mov	r3, r0
   1cbc0:	4293      	cmp	r3, r2
   1cbc2:	d100      	bne.n	1cbc6 <memset+0xa>
   1cbc4:	4770      	bx	lr
   1cbc6:	f803 1b01 	strb.w	r1, [r3], #1
   1cbca:	e7f9      	b.n	1cbc0 <memset+0x4>

0001cbcc <sniprintf>:
   1cbcc:	b40c      	push	{r2, r3}
   1cbce:	b530      	push	{r4, r5, lr}
   1cbd0:	4b17      	ldr	r3, [pc, #92]	; (1cc30 <sniprintf+0x64>)
   1cbd2:	1e0c      	subs	r4, r1, #0
   1cbd4:	681d      	ldr	r5, [r3, #0]
   1cbd6:	b09d      	sub	sp, #116	; 0x74
   1cbd8:	da08      	bge.n	1cbec <sniprintf+0x20>
   1cbda:	238b      	movs	r3, #139	; 0x8b
   1cbdc:	602b      	str	r3, [r5, #0]
   1cbde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cbe2:	b01d      	add	sp, #116	; 0x74
   1cbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1cbe8:	b002      	add	sp, #8
   1cbea:	4770      	bx	lr
   1cbec:	f44f 7302 	mov.w	r3, #520	; 0x208
   1cbf0:	f8ad 3014 	strh.w	r3, [sp, #20]
   1cbf4:	bf14      	ite	ne
   1cbf6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1cbfa:	4623      	moveq	r3, r4
   1cbfc:	9304      	str	r3, [sp, #16]
   1cbfe:	9307      	str	r3, [sp, #28]
   1cc00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cc04:	9002      	str	r0, [sp, #8]
   1cc06:	9006      	str	r0, [sp, #24]
   1cc08:	f8ad 3016 	strh.w	r3, [sp, #22]
   1cc0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1cc0e:	ab21      	add	r3, sp, #132	; 0x84
   1cc10:	a902      	add	r1, sp, #8
   1cc12:	4628      	mov	r0, r5
   1cc14:	9301      	str	r3, [sp, #4]
   1cc16:	f000 f879 	bl	1cd0c <_svfiprintf_r>
   1cc1a:	1c43      	adds	r3, r0, #1
   1cc1c:	bfbc      	itt	lt
   1cc1e:	238b      	movlt	r3, #139	; 0x8b
   1cc20:	602b      	strlt	r3, [r5, #0]
   1cc22:	2c00      	cmp	r4, #0
   1cc24:	d0dd      	beq.n	1cbe2 <sniprintf+0x16>
   1cc26:	9b02      	ldr	r3, [sp, #8]
   1cc28:	2200      	movs	r2, #0
   1cc2a:	701a      	strb	r2, [r3, #0]
   1cc2c:	e7d9      	b.n	1cbe2 <sniprintf+0x16>
   1cc2e:	bf00      	nop
   1cc30:	20001144 	.word	0x20001144

0001cc34 <strcpy>:
   1cc34:	4603      	mov	r3, r0
   1cc36:	f811 2b01 	ldrb.w	r2, [r1], #1
   1cc3a:	f803 2b01 	strb.w	r2, [r3], #1
   1cc3e:	2a00      	cmp	r2, #0
   1cc40:	d1f9      	bne.n	1cc36 <strcpy+0x2>
   1cc42:	4770      	bx	lr

0001cc44 <strlen>:
   1cc44:	4603      	mov	r3, r0
   1cc46:	f813 2b01 	ldrb.w	r2, [r3], #1
   1cc4a:	2a00      	cmp	r2, #0
   1cc4c:	d1fb      	bne.n	1cc46 <strlen+0x2>
   1cc4e:	1a18      	subs	r0, r3, r0
   1cc50:	3801      	subs	r0, #1
   1cc52:	4770      	bx	lr

0001cc54 <__ssputs_r>:
   1cc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc58:	688e      	ldr	r6, [r1, #8]
   1cc5a:	429e      	cmp	r6, r3
   1cc5c:	4682      	mov	sl, r0
   1cc5e:	460c      	mov	r4, r1
   1cc60:	4690      	mov	r8, r2
   1cc62:	461f      	mov	r7, r3
   1cc64:	d838      	bhi.n	1ccd8 <__ssputs_r+0x84>
   1cc66:	898a      	ldrh	r2, [r1, #12]
   1cc68:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1cc6c:	d032      	beq.n	1ccd4 <__ssputs_r+0x80>
   1cc6e:	6825      	ldr	r5, [r4, #0]
   1cc70:	6909      	ldr	r1, [r1, #16]
   1cc72:	eba5 0901 	sub.w	r9, r5, r1
   1cc76:	6965      	ldr	r5, [r4, #20]
   1cc78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cc7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1cc80:	3301      	adds	r3, #1
   1cc82:	444b      	add	r3, r9
   1cc84:	106d      	asrs	r5, r5, #1
   1cc86:	429d      	cmp	r5, r3
   1cc88:	bf38      	it	cc
   1cc8a:	461d      	movcc	r5, r3
   1cc8c:	0553      	lsls	r3, r2, #21
   1cc8e:	d531      	bpl.n	1ccf4 <__ssputs_r+0xa0>
   1cc90:	4629      	mov	r1, r5
   1cc92:	f000 fb8d 	bl	1d3b0 <_malloc_r>
   1cc96:	4606      	mov	r6, r0
   1cc98:	b950      	cbnz	r0, 1ccb0 <__ssputs_r+0x5c>
   1cc9a:	230c      	movs	r3, #12
   1cc9c:	f8ca 3000 	str.w	r3, [sl]
   1cca0:	89a3      	ldrh	r3, [r4, #12]
   1cca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cca6:	81a3      	strh	r3, [r4, #12]
   1cca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ccac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ccb0:	6921      	ldr	r1, [r4, #16]
   1ccb2:	464a      	mov	r2, r9
   1ccb4:	f7ff ff74 	bl	1cba0 <memcpy>
   1ccb8:	89a3      	ldrh	r3, [r4, #12]
   1ccba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1ccbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ccc2:	81a3      	strh	r3, [r4, #12]
   1ccc4:	6126      	str	r6, [r4, #16]
   1ccc6:	6165      	str	r5, [r4, #20]
   1ccc8:	444e      	add	r6, r9
   1ccca:	eba5 0509 	sub.w	r5, r5, r9
   1ccce:	6026      	str	r6, [r4, #0]
   1ccd0:	60a5      	str	r5, [r4, #8]
   1ccd2:	463e      	mov	r6, r7
   1ccd4:	42be      	cmp	r6, r7
   1ccd6:	d900      	bls.n	1ccda <__ssputs_r+0x86>
   1ccd8:	463e      	mov	r6, r7
   1ccda:	4632      	mov	r2, r6
   1ccdc:	6820      	ldr	r0, [r4, #0]
   1ccde:	4641      	mov	r1, r8
   1cce0:	f000 fafe 	bl	1d2e0 <memmove>
   1cce4:	68a3      	ldr	r3, [r4, #8]
   1cce6:	6822      	ldr	r2, [r4, #0]
   1cce8:	1b9b      	subs	r3, r3, r6
   1ccea:	4432      	add	r2, r6
   1ccec:	60a3      	str	r3, [r4, #8]
   1ccee:	6022      	str	r2, [r4, #0]
   1ccf0:	2000      	movs	r0, #0
   1ccf2:	e7db      	b.n	1ccac <__ssputs_r+0x58>
   1ccf4:	462a      	mov	r2, r5
   1ccf6:	f000 fbb5 	bl	1d464 <_realloc_r>
   1ccfa:	4606      	mov	r6, r0
   1ccfc:	2800      	cmp	r0, #0
   1ccfe:	d1e1      	bne.n	1ccc4 <__ssputs_r+0x70>
   1cd00:	6921      	ldr	r1, [r4, #16]
   1cd02:	4650      	mov	r0, sl
   1cd04:	f000 fb06 	bl	1d314 <_free_r>
   1cd08:	e7c7      	b.n	1cc9a <__ssputs_r+0x46>
	...

0001cd0c <_svfiprintf_r>:
   1cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd10:	4698      	mov	r8, r3
   1cd12:	898b      	ldrh	r3, [r1, #12]
   1cd14:	061b      	lsls	r3, r3, #24
   1cd16:	b09d      	sub	sp, #116	; 0x74
   1cd18:	4607      	mov	r7, r0
   1cd1a:	460d      	mov	r5, r1
   1cd1c:	4614      	mov	r4, r2
   1cd1e:	d50e      	bpl.n	1cd3e <_svfiprintf_r+0x32>
   1cd20:	690b      	ldr	r3, [r1, #16]
   1cd22:	b963      	cbnz	r3, 1cd3e <_svfiprintf_r+0x32>
   1cd24:	2140      	movs	r1, #64	; 0x40
   1cd26:	f000 fb43 	bl	1d3b0 <_malloc_r>
   1cd2a:	6028      	str	r0, [r5, #0]
   1cd2c:	6128      	str	r0, [r5, #16]
   1cd2e:	b920      	cbnz	r0, 1cd3a <_svfiprintf_r+0x2e>
   1cd30:	230c      	movs	r3, #12
   1cd32:	603b      	str	r3, [r7, #0]
   1cd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd38:	e0d1      	b.n	1cede <_svfiprintf_r+0x1d2>
   1cd3a:	2340      	movs	r3, #64	; 0x40
   1cd3c:	616b      	str	r3, [r5, #20]
   1cd3e:	2300      	movs	r3, #0
   1cd40:	9309      	str	r3, [sp, #36]	; 0x24
   1cd42:	2320      	movs	r3, #32
   1cd44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1cd48:	f8cd 800c 	str.w	r8, [sp, #12]
   1cd4c:	2330      	movs	r3, #48	; 0x30
   1cd4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1cef8 <_svfiprintf_r+0x1ec>
   1cd52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1cd56:	f04f 0901 	mov.w	r9, #1
   1cd5a:	4623      	mov	r3, r4
   1cd5c:	469a      	mov	sl, r3
   1cd5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1cd62:	b10a      	cbz	r2, 1cd68 <_svfiprintf_r+0x5c>
   1cd64:	2a25      	cmp	r2, #37	; 0x25
   1cd66:	d1f9      	bne.n	1cd5c <_svfiprintf_r+0x50>
   1cd68:	ebba 0b04 	subs.w	fp, sl, r4
   1cd6c:	d00b      	beq.n	1cd86 <_svfiprintf_r+0x7a>
   1cd6e:	465b      	mov	r3, fp
   1cd70:	4622      	mov	r2, r4
   1cd72:	4629      	mov	r1, r5
   1cd74:	4638      	mov	r0, r7
   1cd76:	f7ff ff6d 	bl	1cc54 <__ssputs_r>
   1cd7a:	3001      	adds	r0, #1
   1cd7c:	f000 80aa 	beq.w	1ced4 <_svfiprintf_r+0x1c8>
   1cd80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cd82:	445a      	add	r2, fp
   1cd84:	9209      	str	r2, [sp, #36]	; 0x24
   1cd86:	f89a 3000 	ldrb.w	r3, [sl]
   1cd8a:	2b00      	cmp	r3, #0
   1cd8c:	f000 80a2 	beq.w	1ced4 <_svfiprintf_r+0x1c8>
   1cd90:	2300      	movs	r3, #0
   1cd92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cd96:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1cd9a:	f10a 0a01 	add.w	sl, sl, #1
   1cd9e:	9304      	str	r3, [sp, #16]
   1cda0:	9307      	str	r3, [sp, #28]
   1cda2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1cda6:	931a      	str	r3, [sp, #104]	; 0x68
   1cda8:	4654      	mov	r4, sl
   1cdaa:	2205      	movs	r2, #5
   1cdac:	f814 1b01 	ldrb.w	r1, [r4], #1
   1cdb0:	4851      	ldr	r0, [pc, #324]	; (1cef8 <_svfiprintf_r+0x1ec>)
   1cdb2:	f000 fa45 	bl	1d240 <memchr>
   1cdb6:	9a04      	ldr	r2, [sp, #16]
   1cdb8:	b9d8      	cbnz	r0, 1cdf2 <_svfiprintf_r+0xe6>
   1cdba:	06d0      	lsls	r0, r2, #27
   1cdbc:	bf44      	itt	mi
   1cdbe:	2320      	movmi	r3, #32
   1cdc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1cdc4:	0711      	lsls	r1, r2, #28
   1cdc6:	bf44      	itt	mi
   1cdc8:	232b      	movmi	r3, #43	; 0x2b
   1cdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1cdce:	f89a 3000 	ldrb.w	r3, [sl]
   1cdd2:	2b2a      	cmp	r3, #42	; 0x2a
   1cdd4:	d015      	beq.n	1ce02 <_svfiprintf_r+0xf6>
   1cdd6:	9a07      	ldr	r2, [sp, #28]
   1cdd8:	4654      	mov	r4, sl
   1cdda:	2000      	movs	r0, #0
   1cddc:	f04f 0c0a 	mov.w	ip, #10
   1cde0:	4621      	mov	r1, r4
   1cde2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1cde6:	3b30      	subs	r3, #48	; 0x30
   1cde8:	2b09      	cmp	r3, #9
   1cdea:	d94e      	bls.n	1ce8a <_svfiprintf_r+0x17e>
   1cdec:	b1b0      	cbz	r0, 1ce1c <_svfiprintf_r+0x110>
   1cdee:	9207      	str	r2, [sp, #28]
   1cdf0:	e014      	b.n	1ce1c <_svfiprintf_r+0x110>
   1cdf2:	eba0 0308 	sub.w	r3, r0, r8
   1cdf6:	fa09 f303 	lsl.w	r3, r9, r3
   1cdfa:	4313      	orrs	r3, r2
   1cdfc:	9304      	str	r3, [sp, #16]
   1cdfe:	46a2      	mov	sl, r4
   1ce00:	e7d2      	b.n	1cda8 <_svfiprintf_r+0x9c>
   1ce02:	9b03      	ldr	r3, [sp, #12]
   1ce04:	1d19      	adds	r1, r3, #4
   1ce06:	681b      	ldr	r3, [r3, #0]
   1ce08:	9103      	str	r1, [sp, #12]
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	bfbb      	ittet	lt
   1ce0e:	425b      	neglt	r3, r3
   1ce10:	f042 0202 	orrlt.w	r2, r2, #2
   1ce14:	9307      	strge	r3, [sp, #28]
   1ce16:	9307      	strlt	r3, [sp, #28]
   1ce18:	bfb8      	it	lt
   1ce1a:	9204      	strlt	r2, [sp, #16]
   1ce1c:	7823      	ldrb	r3, [r4, #0]
   1ce1e:	2b2e      	cmp	r3, #46	; 0x2e
   1ce20:	d10c      	bne.n	1ce3c <_svfiprintf_r+0x130>
   1ce22:	7863      	ldrb	r3, [r4, #1]
   1ce24:	2b2a      	cmp	r3, #42	; 0x2a
   1ce26:	d135      	bne.n	1ce94 <_svfiprintf_r+0x188>
   1ce28:	9b03      	ldr	r3, [sp, #12]
   1ce2a:	1d1a      	adds	r2, r3, #4
   1ce2c:	681b      	ldr	r3, [r3, #0]
   1ce2e:	9203      	str	r2, [sp, #12]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	bfb8      	it	lt
   1ce34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1ce38:	3402      	adds	r4, #2
   1ce3a:	9305      	str	r3, [sp, #20]
   1ce3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1cf08 <_svfiprintf_r+0x1fc>
   1ce40:	7821      	ldrb	r1, [r4, #0]
   1ce42:	2203      	movs	r2, #3
   1ce44:	4650      	mov	r0, sl
   1ce46:	f000 f9fb 	bl	1d240 <memchr>
   1ce4a:	b140      	cbz	r0, 1ce5e <_svfiprintf_r+0x152>
   1ce4c:	2340      	movs	r3, #64	; 0x40
   1ce4e:	eba0 000a 	sub.w	r0, r0, sl
   1ce52:	fa03 f000 	lsl.w	r0, r3, r0
   1ce56:	9b04      	ldr	r3, [sp, #16]
   1ce58:	4303      	orrs	r3, r0
   1ce5a:	3401      	adds	r4, #1
   1ce5c:	9304      	str	r3, [sp, #16]
   1ce5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ce62:	4826      	ldr	r0, [pc, #152]	; (1cefc <_svfiprintf_r+0x1f0>)
   1ce64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1ce68:	2206      	movs	r2, #6
   1ce6a:	f000 f9e9 	bl	1d240 <memchr>
   1ce6e:	2800      	cmp	r0, #0
   1ce70:	d038      	beq.n	1cee4 <_svfiprintf_r+0x1d8>
   1ce72:	4b23      	ldr	r3, [pc, #140]	; (1cf00 <_svfiprintf_r+0x1f4>)
   1ce74:	bb1b      	cbnz	r3, 1cebe <_svfiprintf_r+0x1b2>
   1ce76:	9b03      	ldr	r3, [sp, #12]
   1ce78:	3307      	adds	r3, #7
   1ce7a:	f023 0307 	bic.w	r3, r3, #7
   1ce7e:	3308      	adds	r3, #8
   1ce80:	9303      	str	r3, [sp, #12]
   1ce82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ce84:	4433      	add	r3, r6
   1ce86:	9309      	str	r3, [sp, #36]	; 0x24
   1ce88:	e767      	b.n	1cd5a <_svfiprintf_r+0x4e>
   1ce8a:	fb0c 3202 	mla	r2, ip, r2, r3
   1ce8e:	460c      	mov	r4, r1
   1ce90:	2001      	movs	r0, #1
   1ce92:	e7a5      	b.n	1cde0 <_svfiprintf_r+0xd4>
   1ce94:	2300      	movs	r3, #0
   1ce96:	3401      	adds	r4, #1
   1ce98:	9305      	str	r3, [sp, #20]
   1ce9a:	4619      	mov	r1, r3
   1ce9c:	f04f 0c0a 	mov.w	ip, #10
   1cea0:	4620      	mov	r0, r4
   1cea2:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cea6:	3a30      	subs	r2, #48	; 0x30
   1cea8:	2a09      	cmp	r2, #9
   1ceaa:	d903      	bls.n	1ceb4 <_svfiprintf_r+0x1a8>
   1ceac:	2b00      	cmp	r3, #0
   1ceae:	d0c5      	beq.n	1ce3c <_svfiprintf_r+0x130>
   1ceb0:	9105      	str	r1, [sp, #20]
   1ceb2:	e7c3      	b.n	1ce3c <_svfiprintf_r+0x130>
   1ceb4:	fb0c 2101 	mla	r1, ip, r1, r2
   1ceb8:	4604      	mov	r4, r0
   1ceba:	2301      	movs	r3, #1
   1cebc:	e7f0      	b.n	1cea0 <_svfiprintf_r+0x194>
   1cebe:	ab03      	add	r3, sp, #12
   1cec0:	9300      	str	r3, [sp, #0]
   1cec2:	462a      	mov	r2, r5
   1cec4:	4b0f      	ldr	r3, [pc, #60]	; (1cf04 <_svfiprintf_r+0x1f8>)
   1cec6:	a904      	add	r1, sp, #16
   1cec8:	4638      	mov	r0, r7
   1ceca:	f3af 8000 	nop.w
   1cece:	1c42      	adds	r2, r0, #1
   1ced0:	4606      	mov	r6, r0
   1ced2:	d1d6      	bne.n	1ce82 <_svfiprintf_r+0x176>
   1ced4:	89ab      	ldrh	r3, [r5, #12]
   1ced6:	065b      	lsls	r3, r3, #25
   1ced8:	f53f af2c 	bmi.w	1cd34 <_svfiprintf_r+0x28>
   1cedc:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cede:	b01d      	add	sp, #116	; 0x74
   1cee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cee4:	ab03      	add	r3, sp, #12
   1cee6:	9300      	str	r3, [sp, #0]
   1cee8:	462a      	mov	r2, r5
   1ceea:	4b06      	ldr	r3, [pc, #24]	; (1cf04 <_svfiprintf_r+0x1f8>)
   1ceec:	a904      	add	r1, sp, #16
   1ceee:	4638      	mov	r0, r7
   1cef0:	f000 f87a 	bl	1cfe8 <_printf_i>
   1cef4:	e7eb      	b.n	1cece <_svfiprintf_r+0x1c2>
   1cef6:	bf00      	nop
   1cef8:	0001e8e4 	.word	0x0001e8e4
   1cefc:	0001e8ee 	.word	0x0001e8ee
   1cf00:	00000000 	.word	0x00000000
   1cf04:	0001cc55 	.word	0x0001cc55
   1cf08:	0001e8ea 	.word	0x0001e8ea

0001cf0c <_printf_common>:
   1cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf10:	4616      	mov	r6, r2
   1cf12:	4699      	mov	r9, r3
   1cf14:	688a      	ldr	r2, [r1, #8]
   1cf16:	690b      	ldr	r3, [r1, #16]
   1cf18:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1cf1c:	4293      	cmp	r3, r2
   1cf1e:	bfb8      	it	lt
   1cf20:	4613      	movlt	r3, r2
   1cf22:	6033      	str	r3, [r6, #0]
   1cf24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1cf28:	4607      	mov	r7, r0
   1cf2a:	460c      	mov	r4, r1
   1cf2c:	b10a      	cbz	r2, 1cf32 <_printf_common+0x26>
   1cf2e:	3301      	adds	r3, #1
   1cf30:	6033      	str	r3, [r6, #0]
   1cf32:	6823      	ldr	r3, [r4, #0]
   1cf34:	0699      	lsls	r1, r3, #26
   1cf36:	bf42      	ittt	mi
   1cf38:	6833      	ldrmi	r3, [r6, #0]
   1cf3a:	3302      	addmi	r3, #2
   1cf3c:	6033      	strmi	r3, [r6, #0]
   1cf3e:	6825      	ldr	r5, [r4, #0]
   1cf40:	f015 0506 	ands.w	r5, r5, #6
   1cf44:	d106      	bne.n	1cf54 <_printf_common+0x48>
   1cf46:	f104 0a19 	add.w	sl, r4, #25
   1cf4a:	68e3      	ldr	r3, [r4, #12]
   1cf4c:	6832      	ldr	r2, [r6, #0]
   1cf4e:	1a9b      	subs	r3, r3, r2
   1cf50:	42ab      	cmp	r3, r5
   1cf52:	dc26      	bgt.n	1cfa2 <_printf_common+0x96>
   1cf54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1cf58:	1e13      	subs	r3, r2, #0
   1cf5a:	6822      	ldr	r2, [r4, #0]
   1cf5c:	bf18      	it	ne
   1cf5e:	2301      	movne	r3, #1
   1cf60:	0692      	lsls	r2, r2, #26
   1cf62:	d42b      	bmi.n	1cfbc <_printf_common+0xb0>
   1cf64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1cf68:	4649      	mov	r1, r9
   1cf6a:	4638      	mov	r0, r7
   1cf6c:	47c0      	blx	r8
   1cf6e:	3001      	adds	r0, #1
   1cf70:	d01e      	beq.n	1cfb0 <_printf_common+0xa4>
   1cf72:	6823      	ldr	r3, [r4, #0]
   1cf74:	68e5      	ldr	r5, [r4, #12]
   1cf76:	6832      	ldr	r2, [r6, #0]
   1cf78:	f003 0306 	and.w	r3, r3, #6
   1cf7c:	2b04      	cmp	r3, #4
   1cf7e:	bf08      	it	eq
   1cf80:	1aad      	subeq	r5, r5, r2
   1cf82:	68a3      	ldr	r3, [r4, #8]
   1cf84:	6922      	ldr	r2, [r4, #16]
   1cf86:	bf0c      	ite	eq
   1cf88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1cf8c:	2500      	movne	r5, #0
   1cf8e:	4293      	cmp	r3, r2
   1cf90:	bfc4      	itt	gt
   1cf92:	1a9b      	subgt	r3, r3, r2
   1cf94:	18ed      	addgt	r5, r5, r3
   1cf96:	2600      	movs	r6, #0
   1cf98:	341a      	adds	r4, #26
   1cf9a:	42b5      	cmp	r5, r6
   1cf9c:	d11a      	bne.n	1cfd4 <_printf_common+0xc8>
   1cf9e:	2000      	movs	r0, #0
   1cfa0:	e008      	b.n	1cfb4 <_printf_common+0xa8>
   1cfa2:	2301      	movs	r3, #1
   1cfa4:	4652      	mov	r2, sl
   1cfa6:	4649      	mov	r1, r9
   1cfa8:	4638      	mov	r0, r7
   1cfaa:	47c0      	blx	r8
   1cfac:	3001      	adds	r0, #1
   1cfae:	d103      	bne.n	1cfb8 <_printf_common+0xac>
   1cfb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cfb8:	3501      	adds	r5, #1
   1cfba:	e7c6      	b.n	1cf4a <_printf_common+0x3e>
   1cfbc:	18e1      	adds	r1, r4, r3
   1cfbe:	1c5a      	adds	r2, r3, #1
   1cfc0:	2030      	movs	r0, #48	; 0x30
   1cfc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1cfc6:	4422      	add	r2, r4
   1cfc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1cfcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1cfd0:	3302      	adds	r3, #2
   1cfd2:	e7c7      	b.n	1cf64 <_printf_common+0x58>
   1cfd4:	2301      	movs	r3, #1
   1cfd6:	4622      	mov	r2, r4
   1cfd8:	4649      	mov	r1, r9
   1cfda:	4638      	mov	r0, r7
   1cfdc:	47c0      	blx	r8
   1cfde:	3001      	adds	r0, #1
   1cfe0:	d0e6      	beq.n	1cfb0 <_printf_common+0xa4>
   1cfe2:	3601      	adds	r6, #1
   1cfe4:	e7d9      	b.n	1cf9a <_printf_common+0x8e>
	...

0001cfe8 <_printf_i>:
   1cfe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1cfec:	460c      	mov	r4, r1
   1cfee:	4691      	mov	r9, r2
   1cff0:	7e27      	ldrb	r7, [r4, #24]
   1cff2:	990c      	ldr	r1, [sp, #48]	; 0x30
   1cff4:	2f78      	cmp	r7, #120	; 0x78
   1cff6:	4680      	mov	r8, r0
   1cff8:	469a      	mov	sl, r3
   1cffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1cffe:	d807      	bhi.n	1d010 <_printf_i+0x28>
   1d000:	2f62      	cmp	r7, #98	; 0x62
   1d002:	d80a      	bhi.n	1d01a <_printf_i+0x32>
   1d004:	2f00      	cmp	r7, #0
   1d006:	f000 80d8 	beq.w	1d1ba <_printf_i+0x1d2>
   1d00a:	2f58      	cmp	r7, #88	; 0x58
   1d00c:	f000 80a3 	beq.w	1d156 <_printf_i+0x16e>
   1d010:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1d018:	e03a      	b.n	1d090 <_printf_i+0xa8>
   1d01a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1d01e:	2b15      	cmp	r3, #21
   1d020:	d8f6      	bhi.n	1d010 <_printf_i+0x28>
   1d022:	a001      	add	r0, pc, #4	; (adr r0, 1d028 <_printf_i+0x40>)
   1d024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d028:	0001d081 	.word	0x0001d081
   1d02c:	0001d095 	.word	0x0001d095
   1d030:	0001d011 	.word	0x0001d011
   1d034:	0001d011 	.word	0x0001d011
   1d038:	0001d011 	.word	0x0001d011
   1d03c:	0001d011 	.word	0x0001d011
   1d040:	0001d095 	.word	0x0001d095
   1d044:	0001d011 	.word	0x0001d011
   1d048:	0001d011 	.word	0x0001d011
   1d04c:	0001d011 	.word	0x0001d011
   1d050:	0001d011 	.word	0x0001d011
   1d054:	0001d1a1 	.word	0x0001d1a1
   1d058:	0001d0c5 	.word	0x0001d0c5
   1d05c:	0001d183 	.word	0x0001d183
   1d060:	0001d011 	.word	0x0001d011
   1d064:	0001d011 	.word	0x0001d011
   1d068:	0001d1c3 	.word	0x0001d1c3
   1d06c:	0001d011 	.word	0x0001d011
   1d070:	0001d0c5 	.word	0x0001d0c5
   1d074:	0001d011 	.word	0x0001d011
   1d078:	0001d011 	.word	0x0001d011
   1d07c:	0001d18b 	.word	0x0001d18b
   1d080:	680b      	ldr	r3, [r1, #0]
   1d082:	1d1a      	adds	r2, r3, #4
   1d084:	681b      	ldr	r3, [r3, #0]
   1d086:	600a      	str	r2, [r1, #0]
   1d088:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d08c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d090:	2301      	movs	r3, #1
   1d092:	e0a3      	b.n	1d1dc <_printf_i+0x1f4>
   1d094:	6825      	ldr	r5, [r4, #0]
   1d096:	6808      	ldr	r0, [r1, #0]
   1d098:	062e      	lsls	r6, r5, #24
   1d09a:	f100 0304 	add.w	r3, r0, #4
   1d09e:	d50a      	bpl.n	1d0b6 <_printf_i+0xce>
   1d0a0:	6805      	ldr	r5, [r0, #0]
   1d0a2:	600b      	str	r3, [r1, #0]
   1d0a4:	2d00      	cmp	r5, #0
   1d0a6:	da03      	bge.n	1d0b0 <_printf_i+0xc8>
   1d0a8:	232d      	movs	r3, #45	; 0x2d
   1d0aa:	426d      	negs	r5, r5
   1d0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d0b0:	485e      	ldr	r0, [pc, #376]	; (1d22c <_printf_i+0x244>)
   1d0b2:	230a      	movs	r3, #10
   1d0b4:	e019      	b.n	1d0ea <_printf_i+0x102>
   1d0b6:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d0ba:	6805      	ldr	r5, [r0, #0]
   1d0bc:	600b      	str	r3, [r1, #0]
   1d0be:	bf18      	it	ne
   1d0c0:	b22d      	sxthne	r5, r5
   1d0c2:	e7ef      	b.n	1d0a4 <_printf_i+0xbc>
   1d0c4:	680b      	ldr	r3, [r1, #0]
   1d0c6:	6825      	ldr	r5, [r4, #0]
   1d0c8:	1d18      	adds	r0, r3, #4
   1d0ca:	6008      	str	r0, [r1, #0]
   1d0cc:	0628      	lsls	r0, r5, #24
   1d0ce:	d501      	bpl.n	1d0d4 <_printf_i+0xec>
   1d0d0:	681d      	ldr	r5, [r3, #0]
   1d0d2:	e002      	b.n	1d0da <_printf_i+0xf2>
   1d0d4:	0669      	lsls	r1, r5, #25
   1d0d6:	d5fb      	bpl.n	1d0d0 <_printf_i+0xe8>
   1d0d8:	881d      	ldrh	r5, [r3, #0]
   1d0da:	4854      	ldr	r0, [pc, #336]	; (1d22c <_printf_i+0x244>)
   1d0dc:	2f6f      	cmp	r7, #111	; 0x6f
   1d0de:	bf0c      	ite	eq
   1d0e0:	2308      	moveq	r3, #8
   1d0e2:	230a      	movne	r3, #10
   1d0e4:	2100      	movs	r1, #0
   1d0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1d0ea:	6866      	ldr	r6, [r4, #4]
   1d0ec:	60a6      	str	r6, [r4, #8]
   1d0ee:	2e00      	cmp	r6, #0
   1d0f0:	bfa2      	ittt	ge
   1d0f2:	6821      	ldrge	r1, [r4, #0]
   1d0f4:	f021 0104 	bicge.w	r1, r1, #4
   1d0f8:	6021      	strge	r1, [r4, #0]
   1d0fa:	b90d      	cbnz	r5, 1d100 <_printf_i+0x118>
   1d0fc:	2e00      	cmp	r6, #0
   1d0fe:	d04d      	beq.n	1d19c <_printf_i+0x1b4>
   1d100:	4616      	mov	r6, r2
   1d102:	fbb5 f1f3 	udiv	r1, r5, r3
   1d106:	fb03 5711 	mls	r7, r3, r1, r5
   1d10a:	5dc7      	ldrb	r7, [r0, r7]
   1d10c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1d110:	462f      	mov	r7, r5
   1d112:	42bb      	cmp	r3, r7
   1d114:	460d      	mov	r5, r1
   1d116:	d9f4      	bls.n	1d102 <_printf_i+0x11a>
   1d118:	2b08      	cmp	r3, #8
   1d11a:	d10b      	bne.n	1d134 <_printf_i+0x14c>
   1d11c:	6823      	ldr	r3, [r4, #0]
   1d11e:	07df      	lsls	r7, r3, #31
   1d120:	d508      	bpl.n	1d134 <_printf_i+0x14c>
   1d122:	6923      	ldr	r3, [r4, #16]
   1d124:	6861      	ldr	r1, [r4, #4]
   1d126:	4299      	cmp	r1, r3
   1d128:	bfde      	ittt	le
   1d12a:	2330      	movle	r3, #48	; 0x30
   1d12c:	f806 3c01 	strble.w	r3, [r6, #-1]
   1d130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1d134:	1b92      	subs	r2, r2, r6
   1d136:	6122      	str	r2, [r4, #16]
   1d138:	f8cd a000 	str.w	sl, [sp]
   1d13c:	464b      	mov	r3, r9
   1d13e:	aa03      	add	r2, sp, #12
   1d140:	4621      	mov	r1, r4
   1d142:	4640      	mov	r0, r8
   1d144:	f7ff fee2 	bl	1cf0c <_printf_common>
   1d148:	3001      	adds	r0, #1
   1d14a:	d14c      	bne.n	1d1e6 <_printf_i+0x1fe>
   1d14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d150:	b004      	add	sp, #16
   1d152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d156:	4835      	ldr	r0, [pc, #212]	; (1d22c <_printf_i+0x244>)
   1d158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1d15c:	6823      	ldr	r3, [r4, #0]
   1d15e:	680e      	ldr	r6, [r1, #0]
   1d160:	061f      	lsls	r7, r3, #24
   1d162:	f856 5b04 	ldr.w	r5, [r6], #4
   1d166:	600e      	str	r6, [r1, #0]
   1d168:	d514      	bpl.n	1d194 <_printf_i+0x1ac>
   1d16a:	07d9      	lsls	r1, r3, #31
   1d16c:	bf44      	itt	mi
   1d16e:	f043 0320 	orrmi.w	r3, r3, #32
   1d172:	6023      	strmi	r3, [r4, #0]
   1d174:	b91d      	cbnz	r5, 1d17e <_printf_i+0x196>
   1d176:	6823      	ldr	r3, [r4, #0]
   1d178:	f023 0320 	bic.w	r3, r3, #32
   1d17c:	6023      	str	r3, [r4, #0]
   1d17e:	2310      	movs	r3, #16
   1d180:	e7b0      	b.n	1d0e4 <_printf_i+0xfc>
   1d182:	6823      	ldr	r3, [r4, #0]
   1d184:	f043 0320 	orr.w	r3, r3, #32
   1d188:	6023      	str	r3, [r4, #0]
   1d18a:	2378      	movs	r3, #120	; 0x78
   1d18c:	4828      	ldr	r0, [pc, #160]	; (1d230 <_printf_i+0x248>)
   1d18e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1d192:	e7e3      	b.n	1d15c <_printf_i+0x174>
   1d194:	065e      	lsls	r6, r3, #25
   1d196:	bf48      	it	mi
   1d198:	b2ad      	uxthmi	r5, r5
   1d19a:	e7e6      	b.n	1d16a <_printf_i+0x182>
   1d19c:	4616      	mov	r6, r2
   1d19e:	e7bb      	b.n	1d118 <_printf_i+0x130>
   1d1a0:	680b      	ldr	r3, [r1, #0]
   1d1a2:	6826      	ldr	r6, [r4, #0]
   1d1a4:	6960      	ldr	r0, [r4, #20]
   1d1a6:	1d1d      	adds	r5, r3, #4
   1d1a8:	600d      	str	r5, [r1, #0]
   1d1aa:	0635      	lsls	r5, r6, #24
   1d1ac:	681b      	ldr	r3, [r3, #0]
   1d1ae:	d501      	bpl.n	1d1b4 <_printf_i+0x1cc>
   1d1b0:	6018      	str	r0, [r3, #0]
   1d1b2:	e002      	b.n	1d1ba <_printf_i+0x1d2>
   1d1b4:	0671      	lsls	r1, r6, #25
   1d1b6:	d5fb      	bpl.n	1d1b0 <_printf_i+0x1c8>
   1d1b8:	8018      	strh	r0, [r3, #0]
   1d1ba:	2300      	movs	r3, #0
   1d1bc:	6123      	str	r3, [r4, #16]
   1d1be:	4616      	mov	r6, r2
   1d1c0:	e7ba      	b.n	1d138 <_printf_i+0x150>
   1d1c2:	680b      	ldr	r3, [r1, #0]
   1d1c4:	1d1a      	adds	r2, r3, #4
   1d1c6:	600a      	str	r2, [r1, #0]
   1d1c8:	681e      	ldr	r6, [r3, #0]
   1d1ca:	6862      	ldr	r2, [r4, #4]
   1d1cc:	2100      	movs	r1, #0
   1d1ce:	4630      	mov	r0, r6
   1d1d0:	f000 f836 	bl	1d240 <memchr>
   1d1d4:	b108      	cbz	r0, 1d1da <_printf_i+0x1f2>
   1d1d6:	1b80      	subs	r0, r0, r6
   1d1d8:	6060      	str	r0, [r4, #4]
   1d1da:	6863      	ldr	r3, [r4, #4]
   1d1dc:	6123      	str	r3, [r4, #16]
   1d1de:	2300      	movs	r3, #0
   1d1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d1e4:	e7a8      	b.n	1d138 <_printf_i+0x150>
   1d1e6:	6923      	ldr	r3, [r4, #16]
   1d1e8:	4632      	mov	r2, r6
   1d1ea:	4649      	mov	r1, r9
   1d1ec:	4640      	mov	r0, r8
   1d1ee:	47d0      	blx	sl
   1d1f0:	3001      	adds	r0, #1
   1d1f2:	d0ab      	beq.n	1d14c <_printf_i+0x164>
   1d1f4:	6823      	ldr	r3, [r4, #0]
   1d1f6:	079b      	lsls	r3, r3, #30
   1d1f8:	d413      	bmi.n	1d222 <_printf_i+0x23a>
   1d1fa:	68e0      	ldr	r0, [r4, #12]
   1d1fc:	9b03      	ldr	r3, [sp, #12]
   1d1fe:	4298      	cmp	r0, r3
   1d200:	bfb8      	it	lt
   1d202:	4618      	movlt	r0, r3
   1d204:	e7a4      	b.n	1d150 <_printf_i+0x168>
   1d206:	2301      	movs	r3, #1
   1d208:	4632      	mov	r2, r6
   1d20a:	4649      	mov	r1, r9
   1d20c:	4640      	mov	r0, r8
   1d20e:	47d0      	blx	sl
   1d210:	3001      	adds	r0, #1
   1d212:	d09b      	beq.n	1d14c <_printf_i+0x164>
   1d214:	3501      	adds	r5, #1
   1d216:	68e3      	ldr	r3, [r4, #12]
   1d218:	9903      	ldr	r1, [sp, #12]
   1d21a:	1a5b      	subs	r3, r3, r1
   1d21c:	42ab      	cmp	r3, r5
   1d21e:	dcf2      	bgt.n	1d206 <_printf_i+0x21e>
   1d220:	e7eb      	b.n	1d1fa <_printf_i+0x212>
   1d222:	2500      	movs	r5, #0
   1d224:	f104 0619 	add.w	r6, r4, #25
   1d228:	e7f5      	b.n	1d216 <_printf_i+0x22e>
   1d22a:	bf00      	nop
   1d22c:	0001e8f5 	.word	0x0001e8f5
   1d230:	0001e906 	.word	0x0001e906
	...

0001d240 <memchr>:
   1d240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d244:	2a10      	cmp	r2, #16
   1d246:	db2b      	blt.n	1d2a0 <memchr+0x60>
   1d248:	f010 0f07 	tst.w	r0, #7
   1d24c:	d008      	beq.n	1d260 <memchr+0x20>
   1d24e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d252:	3a01      	subs	r2, #1
   1d254:	428b      	cmp	r3, r1
   1d256:	d02d      	beq.n	1d2b4 <memchr+0x74>
   1d258:	f010 0f07 	tst.w	r0, #7
   1d25c:	b342      	cbz	r2, 1d2b0 <memchr+0x70>
   1d25e:	d1f6      	bne.n	1d24e <memchr+0xe>
   1d260:	b4f0      	push	{r4, r5, r6, r7}
   1d262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1d266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1d26a:	f022 0407 	bic.w	r4, r2, #7
   1d26e:	f07f 0700 	mvns.w	r7, #0
   1d272:	2300      	movs	r3, #0
   1d274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1d278:	3c08      	subs	r4, #8
   1d27a:	ea85 0501 	eor.w	r5, r5, r1
   1d27e:	ea86 0601 	eor.w	r6, r6, r1
   1d282:	fa85 f547 	uadd8	r5, r5, r7
   1d286:	faa3 f587 	sel	r5, r3, r7
   1d28a:	fa86 f647 	uadd8	r6, r6, r7
   1d28e:	faa5 f687 	sel	r6, r5, r7
   1d292:	b98e      	cbnz	r6, 1d2b8 <memchr+0x78>
   1d294:	d1ee      	bne.n	1d274 <memchr+0x34>
   1d296:	bcf0      	pop	{r4, r5, r6, r7}
   1d298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d29c:	f002 0207 	and.w	r2, r2, #7
   1d2a0:	b132      	cbz	r2, 1d2b0 <memchr+0x70>
   1d2a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d2a6:	3a01      	subs	r2, #1
   1d2a8:	ea83 0301 	eor.w	r3, r3, r1
   1d2ac:	b113      	cbz	r3, 1d2b4 <memchr+0x74>
   1d2ae:	d1f8      	bne.n	1d2a2 <memchr+0x62>
   1d2b0:	2000      	movs	r0, #0
   1d2b2:	4770      	bx	lr
   1d2b4:	3801      	subs	r0, #1
   1d2b6:	4770      	bx	lr
   1d2b8:	2d00      	cmp	r5, #0
   1d2ba:	bf06      	itte	eq
   1d2bc:	4635      	moveq	r5, r6
   1d2be:	3803      	subeq	r0, #3
   1d2c0:	3807      	subne	r0, #7
   1d2c2:	f015 0f01 	tst.w	r5, #1
   1d2c6:	d107      	bne.n	1d2d8 <memchr+0x98>
   1d2c8:	3001      	adds	r0, #1
   1d2ca:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d2ce:	bf02      	ittt	eq
   1d2d0:	3001      	addeq	r0, #1
   1d2d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1d2d6:	3001      	addeq	r0, #1
   1d2d8:	bcf0      	pop	{r4, r5, r6, r7}
   1d2da:	3801      	subs	r0, #1
   1d2dc:	4770      	bx	lr
   1d2de:	bf00      	nop

0001d2e0 <memmove>:
   1d2e0:	4288      	cmp	r0, r1
   1d2e2:	b510      	push	{r4, lr}
   1d2e4:	eb01 0402 	add.w	r4, r1, r2
   1d2e8:	d902      	bls.n	1d2f0 <memmove+0x10>
   1d2ea:	4284      	cmp	r4, r0
   1d2ec:	4623      	mov	r3, r4
   1d2ee:	d807      	bhi.n	1d300 <memmove+0x20>
   1d2f0:	1e43      	subs	r3, r0, #1
   1d2f2:	42a1      	cmp	r1, r4
   1d2f4:	d008      	beq.n	1d308 <memmove+0x28>
   1d2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
   1d2fe:	e7f8      	b.n	1d2f2 <memmove+0x12>
   1d300:	4402      	add	r2, r0
   1d302:	4601      	mov	r1, r0
   1d304:	428a      	cmp	r2, r1
   1d306:	d100      	bne.n	1d30a <memmove+0x2a>
   1d308:	bd10      	pop	{r4, pc}
   1d30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1d30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1d312:	e7f7      	b.n	1d304 <memmove+0x24>

0001d314 <_free_r>:
   1d314:	b538      	push	{r3, r4, r5, lr}
   1d316:	4605      	mov	r5, r0
   1d318:	2900      	cmp	r1, #0
   1d31a:	d045      	beq.n	1d3a8 <_free_r+0x94>
   1d31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d320:	1f0c      	subs	r4, r1, #4
   1d322:	2b00      	cmp	r3, #0
   1d324:	bfb8      	it	lt
   1d326:	18e4      	addlt	r4, r4, r3
   1d328:	f000 f8d2 	bl	1d4d0 <__malloc_lock>
   1d32c:	4a1f      	ldr	r2, [pc, #124]	; (1d3ac <_free_r+0x98>)
   1d32e:	6813      	ldr	r3, [r2, #0]
   1d330:	4610      	mov	r0, r2
   1d332:	b933      	cbnz	r3, 1d342 <_free_r+0x2e>
   1d334:	6063      	str	r3, [r4, #4]
   1d336:	6014      	str	r4, [r2, #0]
   1d338:	4628      	mov	r0, r5
   1d33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d33e:	f000 b8cd 	b.w	1d4dc <__malloc_unlock>
   1d342:	42a3      	cmp	r3, r4
   1d344:	d90b      	bls.n	1d35e <_free_r+0x4a>
   1d346:	6821      	ldr	r1, [r4, #0]
   1d348:	1862      	adds	r2, r4, r1
   1d34a:	4293      	cmp	r3, r2
   1d34c:	bf04      	itt	eq
   1d34e:	681a      	ldreq	r2, [r3, #0]
   1d350:	685b      	ldreq	r3, [r3, #4]
   1d352:	6063      	str	r3, [r4, #4]
   1d354:	bf04      	itt	eq
   1d356:	1852      	addeq	r2, r2, r1
   1d358:	6022      	streq	r2, [r4, #0]
   1d35a:	6004      	str	r4, [r0, #0]
   1d35c:	e7ec      	b.n	1d338 <_free_r+0x24>
   1d35e:	461a      	mov	r2, r3
   1d360:	685b      	ldr	r3, [r3, #4]
   1d362:	b10b      	cbz	r3, 1d368 <_free_r+0x54>
   1d364:	42a3      	cmp	r3, r4
   1d366:	d9fa      	bls.n	1d35e <_free_r+0x4a>
   1d368:	6811      	ldr	r1, [r2, #0]
   1d36a:	1850      	adds	r0, r2, r1
   1d36c:	42a0      	cmp	r0, r4
   1d36e:	d10b      	bne.n	1d388 <_free_r+0x74>
   1d370:	6820      	ldr	r0, [r4, #0]
   1d372:	4401      	add	r1, r0
   1d374:	1850      	adds	r0, r2, r1
   1d376:	4283      	cmp	r3, r0
   1d378:	6011      	str	r1, [r2, #0]
   1d37a:	d1dd      	bne.n	1d338 <_free_r+0x24>
   1d37c:	6818      	ldr	r0, [r3, #0]
   1d37e:	685b      	ldr	r3, [r3, #4]
   1d380:	6053      	str	r3, [r2, #4]
   1d382:	4401      	add	r1, r0
   1d384:	6011      	str	r1, [r2, #0]
   1d386:	e7d7      	b.n	1d338 <_free_r+0x24>
   1d388:	d902      	bls.n	1d390 <_free_r+0x7c>
   1d38a:	230c      	movs	r3, #12
   1d38c:	602b      	str	r3, [r5, #0]
   1d38e:	e7d3      	b.n	1d338 <_free_r+0x24>
   1d390:	6820      	ldr	r0, [r4, #0]
   1d392:	1821      	adds	r1, r4, r0
   1d394:	428b      	cmp	r3, r1
   1d396:	bf04      	itt	eq
   1d398:	6819      	ldreq	r1, [r3, #0]
   1d39a:	685b      	ldreq	r3, [r3, #4]
   1d39c:	6063      	str	r3, [r4, #4]
   1d39e:	bf04      	itt	eq
   1d3a0:	1809      	addeq	r1, r1, r0
   1d3a2:	6021      	streq	r1, [r4, #0]
   1d3a4:	6054      	str	r4, [r2, #4]
   1d3a6:	e7c7      	b.n	1d338 <_free_r+0x24>
   1d3a8:	bd38      	pop	{r3, r4, r5, pc}
   1d3aa:	bf00      	nop
   1d3ac:	200015f8 	.word	0x200015f8

0001d3b0 <_malloc_r>:
   1d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3b2:	1ccd      	adds	r5, r1, #3
   1d3b4:	f025 0503 	bic.w	r5, r5, #3
   1d3b8:	3508      	adds	r5, #8
   1d3ba:	2d0c      	cmp	r5, #12
   1d3bc:	bf38      	it	cc
   1d3be:	250c      	movcc	r5, #12
   1d3c0:	2d00      	cmp	r5, #0
   1d3c2:	4606      	mov	r6, r0
   1d3c4:	db01      	blt.n	1d3ca <_malloc_r+0x1a>
   1d3c6:	42a9      	cmp	r1, r5
   1d3c8:	d903      	bls.n	1d3d2 <_malloc_r+0x22>
   1d3ca:	230c      	movs	r3, #12
   1d3cc:	6033      	str	r3, [r6, #0]
   1d3ce:	2000      	movs	r0, #0
   1d3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d3d2:	f000 f87d 	bl	1d4d0 <__malloc_lock>
   1d3d6:	4921      	ldr	r1, [pc, #132]	; (1d45c <_malloc_r+0xac>)
   1d3d8:	680a      	ldr	r2, [r1, #0]
   1d3da:	4614      	mov	r4, r2
   1d3dc:	b99c      	cbnz	r4, 1d406 <_malloc_r+0x56>
   1d3de:	4f20      	ldr	r7, [pc, #128]	; (1d460 <_malloc_r+0xb0>)
   1d3e0:	683b      	ldr	r3, [r7, #0]
   1d3e2:	b923      	cbnz	r3, 1d3ee <_malloc_r+0x3e>
   1d3e4:	4621      	mov	r1, r4
   1d3e6:	4630      	mov	r0, r6
   1d3e8:	f000 f862 	bl	1d4b0 <_sbrk_r>
   1d3ec:	6038      	str	r0, [r7, #0]
   1d3ee:	4629      	mov	r1, r5
   1d3f0:	4630      	mov	r0, r6
   1d3f2:	f000 f85d 	bl	1d4b0 <_sbrk_r>
   1d3f6:	1c43      	adds	r3, r0, #1
   1d3f8:	d123      	bne.n	1d442 <_malloc_r+0x92>
   1d3fa:	230c      	movs	r3, #12
   1d3fc:	6033      	str	r3, [r6, #0]
   1d3fe:	4630      	mov	r0, r6
   1d400:	f000 f86c 	bl	1d4dc <__malloc_unlock>
   1d404:	e7e3      	b.n	1d3ce <_malloc_r+0x1e>
   1d406:	6823      	ldr	r3, [r4, #0]
   1d408:	1b5b      	subs	r3, r3, r5
   1d40a:	d417      	bmi.n	1d43c <_malloc_r+0x8c>
   1d40c:	2b0b      	cmp	r3, #11
   1d40e:	d903      	bls.n	1d418 <_malloc_r+0x68>
   1d410:	6023      	str	r3, [r4, #0]
   1d412:	441c      	add	r4, r3
   1d414:	6025      	str	r5, [r4, #0]
   1d416:	e004      	b.n	1d422 <_malloc_r+0x72>
   1d418:	6863      	ldr	r3, [r4, #4]
   1d41a:	42a2      	cmp	r2, r4
   1d41c:	bf0c      	ite	eq
   1d41e:	600b      	streq	r3, [r1, #0]
   1d420:	6053      	strne	r3, [r2, #4]
   1d422:	4630      	mov	r0, r6
   1d424:	f000 f85a 	bl	1d4dc <__malloc_unlock>
   1d428:	f104 000b 	add.w	r0, r4, #11
   1d42c:	1d23      	adds	r3, r4, #4
   1d42e:	f020 0007 	bic.w	r0, r0, #7
   1d432:	1ac2      	subs	r2, r0, r3
   1d434:	d0cc      	beq.n	1d3d0 <_malloc_r+0x20>
   1d436:	1a1b      	subs	r3, r3, r0
   1d438:	50a3      	str	r3, [r4, r2]
   1d43a:	e7c9      	b.n	1d3d0 <_malloc_r+0x20>
   1d43c:	4622      	mov	r2, r4
   1d43e:	6864      	ldr	r4, [r4, #4]
   1d440:	e7cc      	b.n	1d3dc <_malloc_r+0x2c>
   1d442:	1cc4      	adds	r4, r0, #3
   1d444:	f024 0403 	bic.w	r4, r4, #3
   1d448:	42a0      	cmp	r0, r4
   1d44a:	d0e3      	beq.n	1d414 <_malloc_r+0x64>
   1d44c:	1a21      	subs	r1, r4, r0
   1d44e:	4630      	mov	r0, r6
   1d450:	f000 f82e 	bl	1d4b0 <_sbrk_r>
   1d454:	3001      	adds	r0, #1
   1d456:	d1dd      	bne.n	1d414 <_malloc_r+0x64>
   1d458:	e7cf      	b.n	1d3fa <_malloc_r+0x4a>
   1d45a:	bf00      	nop
   1d45c:	200015f8 	.word	0x200015f8
   1d460:	200015fc 	.word	0x200015fc

0001d464 <_realloc_r>:
   1d464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d466:	4607      	mov	r7, r0
   1d468:	4614      	mov	r4, r2
   1d46a:	460e      	mov	r6, r1
   1d46c:	b921      	cbnz	r1, 1d478 <_realloc_r+0x14>
   1d46e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d472:	4611      	mov	r1, r2
   1d474:	f7ff bf9c 	b.w	1d3b0 <_malloc_r>
   1d478:	b922      	cbnz	r2, 1d484 <_realloc_r+0x20>
   1d47a:	f7ff ff4b 	bl	1d314 <_free_r>
   1d47e:	4625      	mov	r5, r4
   1d480:	4628      	mov	r0, r5
   1d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d484:	f000 f830 	bl	1d4e8 <_malloc_usable_size_r>
   1d488:	42a0      	cmp	r0, r4
   1d48a:	d20f      	bcs.n	1d4ac <_realloc_r+0x48>
   1d48c:	4621      	mov	r1, r4
   1d48e:	4638      	mov	r0, r7
   1d490:	f7ff ff8e 	bl	1d3b0 <_malloc_r>
   1d494:	4605      	mov	r5, r0
   1d496:	2800      	cmp	r0, #0
   1d498:	d0f2      	beq.n	1d480 <_realloc_r+0x1c>
   1d49a:	4631      	mov	r1, r6
   1d49c:	4622      	mov	r2, r4
   1d49e:	f7ff fb7f 	bl	1cba0 <memcpy>
   1d4a2:	4631      	mov	r1, r6
   1d4a4:	4638      	mov	r0, r7
   1d4a6:	f7ff ff35 	bl	1d314 <_free_r>
   1d4aa:	e7e9      	b.n	1d480 <_realloc_r+0x1c>
   1d4ac:	4635      	mov	r5, r6
   1d4ae:	e7e7      	b.n	1d480 <_realloc_r+0x1c>

0001d4b0 <_sbrk_r>:
   1d4b0:	b538      	push	{r3, r4, r5, lr}
   1d4b2:	4d06      	ldr	r5, [pc, #24]	; (1d4cc <_sbrk_r+0x1c>)
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	4604      	mov	r4, r0
   1d4b8:	4608      	mov	r0, r1
   1d4ba:	602b      	str	r3, [r5, #0]
   1d4bc:	f000 f81e 	bl	1d4fc <_sbrk>
   1d4c0:	1c43      	adds	r3, r0, #1
   1d4c2:	d102      	bne.n	1d4ca <_sbrk_r+0x1a>
   1d4c4:	682b      	ldr	r3, [r5, #0]
   1d4c6:	b103      	cbz	r3, 1d4ca <_sbrk_r+0x1a>
   1d4c8:	6023      	str	r3, [r4, #0]
   1d4ca:	bd38      	pop	{r3, r4, r5, pc}
   1d4cc:	20001688 	.word	0x20001688

0001d4d0 <__malloc_lock>:
   1d4d0:	4801      	ldr	r0, [pc, #4]	; (1d4d8 <__malloc_lock+0x8>)
   1d4d2:	f000 b811 	b.w	1d4f8 <__retarget_lock_acquire_recursive>
   1d4d6:	bf00      	nop
   1d4d8:	20001690 	.word	0x20001690

0001d4dc <__malloc_unlock>:
   1d4dc:	4801      	ldr	r0, [pc, #4]	; (1d4e4 <__malloc_unlock+0x8>)
   1d4de:	f000 b80c 	b.w	1d4fa <__retarget_lock_release_recursive>
   1d4e2:	bf00      	nop
   1d4e4:	20001690 	.word	0x20001690

0001d4e8 <_malloc_usable_size_r>:
   1d4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d4ec:	1f18      	subs	r0, r3, #4
   1d4ee:	2b00      	cmp	r3, #0
   1d4f0:	bfbc      	itt	lt
   1d4f2:	580b      	ldrlt	r3, [r1, r0]
   1d4f4:	18c0      	addlt	r0, r0, r3
   1d4f6:	4770      	bx	lr

0001d4f8 <__retarget_lock_acquire_recursive>:
   1d4f8:	4770      	bx	lr

0001d4fa <__retarget_lock_release_recursive>:
   1d4fa:	4770      	bx	lr

0001d4fc <_sbrk>:
   1d4fc:	4a04      	ldr	r2, [pc, #16]	; (1d510 <_sbrk+0x14>)
   1d4fe:	4905      	ldr	r1, [pc, #20]	; (1d514 <_sbrk+0x18>)
   1d500:	6813      	ldr	r3, [r2, #0]
   1d502:	2b00      	cmp	r3, #0
   1d504:	bf08      	it	eq
   1d506:	460b      	moveq	r3, r1
   1d508:	4418      	add	r0, r3
   1d50a:	6010      	str	r0, [r2, #0]
   1d50c:	4618      	mov	r0, r3
   1d50e:	4770      	bx	lr
   1d510:	20001600 	.word	0x20001600
   1d514:	20001698 	.word	0x20001698

0001d518 <_exit>:
   1d518:	e7fe      	b.n	1d518 <_exit>
   1d51a:	bf00      	nop

0001d51c <__aeabi_d2uiz>:
   1d51c:	004a      	lsls	r2, r1, #1
   1d51e:	d211      	bcs.n	1d544 <__aeabi_d2uiz+0x28>
   1d520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d524:	d211      	bcs.n	1d54a <__aeabi_d2uiz+0x2e>
   1d526:	d50d      	bpl.n	1d544 <__aeabi_d2uiz+0x28>
   1d528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d52c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d530:	d40e      	bmi.n	1d550 <__aeabi_d2uiz+0x34>
   1d532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d53a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d53e:	fa23 f002 	lsr.w	r0, r3, r2
   1d542:	4770      	bx	lr
   1d544:	f04f 0000 	mov.w	r0, #0
   1d548:	4770      	bx	lr
   1d54a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d54e:	d102      	bne.n	1d556 <__aeabi_d2uiz+0x3a>
   1d550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d554:	4770      	bx	lr
   1d556:	f04f 0000 	mov.w	r0, #0
   1d55a:	4770      	bx	lr

0001d55c <selfrel_offset31>:
   1d55c:	6803      	ldr	r3, [r0, #0]
   1d55e:	005a      	lsls	r2, r3, #1
   1d560:	bf4c      	ite	mi
   1d562:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1d566:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1d56a:	4418      	add	r0, r3
   1d56c:	4770      	bx	lr
   1d56e:	bf00      	nop

0001d570 <search_EIT_table>:
   1d570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d574:	b329      	cbz	r1, 1d5c2 <search_EIT_table+0x52>
   1d576:	1e4f      	subs	r7, r1, #1
   1d578:	4604      	mov	r4, r0
   1d57a:	4615      	mov	r5, r2
   1d57c:	463e      	mov	r6, r7
   1d57e:	f04f 0800 	mov.w	r8, #0
   1d582:	eb08 0106 	add.w	r1, r8, r6
   1d586:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   1d58a:	1049      	asrs	r1, r1, #1
   1d58c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   1d590:	4648      	mov	r0, r9
   1d592:	f7ff ffe3 	bl	1d55c <selfrel_offset31>
   1d596:	4603      	mov	r3, r0
   1d598:	00c8      	lsls	r0, r1, #3
   1d59a:	3008      	adds	r0, #8
   1d59c:	428f      	cmp	r7, r1
   1d59e:	4420      	add	r0, r4
   1d5a0:	d009      	beq.n	1d5b6 <search_EIT_table+0x46>
   1d5a2:	42ab      	cmp	r3, r5
   1d5a4:	d809      	bhi.n	1d5ba <search_EIT_table+0x4a>
   1d5a6:	f7ff ffd9 	bl	1d55c <selfrel_offset31>
   1d5aa:	3801      	subs	r0, #1
   1d5ac:	42a8      	cmp	r0, r5
   1d5ae:	d20a      	bcs.n	1d5c6 <search_EIT_table+0x56>
   1d5b0:	f101 0801 	add.w	r8, r1, #1
   1d5b4:	e7e5      	b.n	1d582 <search_EIT_table+0x12>
   1d5b6:	42ab      	cmp	r3, r5
   1d5b8:	d905      	bls.n	1d5c6 <search_EIT_table+0x56>
   1d5ba:	4588      	cmp	r8, r1
   1d5bc:	d001      	beq.n	1d5c2 <search_EIT_table+0x52>
   1d5be:	1e4e      	subs	r6, r1, #1
   1d5c0:	e7df      	b.n	1d582 <search_EIT_table+0x12>
   1d5c2:	f04f 0900 	mov.w	r9, #0
   1d5c6:	4648      	mov	r0, r9
   1d5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d5cc <__gnu_unwind_get_pr_addr>:
   1d5cc:	2801      	cmp	r0, #1
   1d5ce:	d007      	beq.n	1d5e0 <__gnu_unwind_get_pr_addr+0x14>
   1d5d0:	2802      	cmp	r0, #2
   1d5d2:	d007      	beq.n	1d5e4 <__gnu_unwind_get_pr_addr+0x18>
   1d5d4:	4b04      	ldr	r3, [pc, #16]	; (1d5e8 <__gnu_unwind_get_pr_addr+0x1c>)
   1d5d6:	2800      	cmp	r0, #0
   1d5d8:	bf0c      	ite	eq
   1d5da:	4618      	moveq	r0, r3
   1d5dc:	2000      	movne	r0, #0
   1d5de:	4770      	bx	lr
   1d5e0:	4802      	ldr	r0, [pc, #8]	; (1d5ec <__gnu_unwind_get_pr_addr+0x20>)
   1d5e2:	4770      	bx	lr
   1d5e4:	4802      	ldr	r0, [pc, #8]	; (1d5f0 <__gnu_unwind_get_pr_addr+0x24>)
   1d5e6:	4770      	bx	lr
   1d5e8:	0001dc91 	.word	0x0001dc91
   1d5ec:	0001dc95 	.word	0x0001dc95
   1d5f0:	0001dc99 	.word	0x0001dc99

0001d5f4 <get_eit_entry>:
   1d5f4:	b530      	push	{r4, r5, lr}
   1d5f6:	4b23      	ldr	r3, [pc, #140]	; (1d684 <get_eit_entry+0x90>)
   1d5f8:	b083      	sub	sp, #12
   1d5fa:	4604      	mov	r4, r0
   1d5fc:	1e8d      	subs	r5, r1, #2
   1d5fe:	b33b      	cbz	r3, 1d650 <get_eit_entry+0x5c>
   1d600:	a901      	add	r1, sp, #4
   1d602:	4628      	mov	r0, r5
   1d604:	f3af 8000 	nop.w
   1d608:	b1e8      	cbz	r0, 1d646 <get_eit_entry+0x52>
   1d60a:	9901      	ldr	r1, [sp, #4]
   1d60c:	462a      	mov	r2, r5
   1d60e:	f7ff ffaf 	bl	1d570 <search_EIT_table>
   1d612:	4601      	mov	r1, r0
   1d614:	b1b8      	cbz	r0, 1d646 <get_eit_entry+0x52>
   1d616:	f7ff ffa1 	bl	1d55c <selfrel_offset31>
   1d61a:	684b      	ldr	r3, [r1, #4]
   1d61c:	64a0      	str	r0, [r4, #72]	; 0x48
   1d61e:	2b01      	cmp	r3, #1
   1d620:	d02b      	beq.n	1d67a <get_eit_entry+0x86>
   1d622:	2b00      	cmp	r3, #0
   1d624:	f101 0004 	add.w	r0, r1, #4
   1d628:	db23      	blt.n	1d672 <get_eit_entry+0x7e>
   1d62a:	f7ff ff97 	bl	1d55c <selfrel_offset31>
   1d62e:	2300      	movs	r3, #0
   1d630:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1d634:	6803      	ldr	r3, [r0, #0]
   1d636:	2b00      	cmp	r3, #0
   1d638:	db10      	blt.n	1d65c <get_eit_entry+0x68>
   1d63a:	f7ff ff8f 	bl	1d55c <selfrel_offset31>
   1d63e:	6120      	str	r0, [r4, #16]
   1d640:	2000      	movs	r0, #0
   1d642:	b003      	add	sp, #12
   1d644:	bd30      	pop	{r4, r5, pc}
   1d646:	2300      	movs	r3, #0
   1d648:	2009      	movs	r0, #9
   1d64a:	6123      	str	r3, [r4, #16]
   1d64c:	b003      	add	sp, #12
   1d64e:	bd30      	pop	{r4, r5, pc}
   1d650:	490d      	ldr	r1, [pc, #52]	; (1d688 <get_eit_entry+0x94>)
   1d652:	480e      	ldr	r0, [pc, #56]	; (1d68c <get_eit_entry+0x98>)
   1d654:	1a09      	subs	r1, r1, r0
   1d656:	10c9      	asrs	r1, r1, #3
   1d658:	9101      	str	r1, [sp, #4]
   1d65a:	e7d7      	b.n	1d60c <get_eit_entry+0x18>
   1d65c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1d660:	f7ff ffb4 	bl	1d5cc <__gnu_unwind_get_pr_addr>
   1d664:	2800      	cmp	r0, #0
   1d666:	6120      	str	r0, [r4, #16]
   1d668:	bf14      	ite	ne
   1d66a:	2000      	movne	r0, #0
   1d66c:	2009      	moveq	r0, #9
   1d66e:	b003      	add	sp, #12
   1d670:	bd30      	pop	{r4, r5, pc}
   1d672:	2301      	movs	r3, #1
   1d674:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1d678:	e7dc      	b.n	1d634 <get_eit_entry+0x40>
   1d67a:	2300      	movs	r3, #0
   1d67c:	6123      	str	r3, [r4, #16]
   1d67e:	2005      	movs	r0, #5
   1d680:	e7df      	b.n	1d642 <get_eit_entry+0x4e>
   1d682:	bf00      	nop
   1d684:	00000000 	.word	0x00000000
   1d688:	0001eb10 	.word	0x0001eb10
   1d68c:	0001e968 	.word	0x0001e968

0001d690 <restore_non_core_regs>:
   1d690:	6803      	ldr	r3, [r0, #0]
   1d692:	07da      	lsls	r2, r3, #31
   1d694:	b510      	push	{r4, lr}
   1d696:	4604      	mov	r4, r0
   1d698:	d406      	bmi.n	1d6a8 <restore_non_core_regs+0x18>
   1d69a:	079b      	lsls	r3, r3, #30
   1d69c:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1d6a0:	d509      	bpl.n	1d6b6 <restore_non_core_regs+0x26>
   1d6a2:	f000 fc4b 	bl	1df3c <__gnu_Unwind_Restore_VFP_D>
   1d6a6:	6823      	ldr	r3, [r4, #0]
   1d6a8:	0759      	lsls	r1, r3, #29
   1d6aa:	d509      	bpl.n	1d6c0 <restore_non_core_regs+0x30>
   1d6ac:	071a      	lsls	r2, r3, #28
   1d6ae:	d50e      	bpl.n	1d6ce <restore_non_core_regs+0x3e>
   1d6b0:	06db      	lsls	r3, r3, #27
   1d6b2:	d513      	bpl.n	1d6dc <restore_non_core_regs+0x4c>
   1d6b4:	bd10      	pop	{r4, pc}
   1d6b6:	f000 fc39 	bl	1df2c <__gnu_Unwind_Restore_VFP>
   1d6ba:	6823      	ldr	r3, [r4, #0]
   1d6bc:	0759      	lsls	r1, r3, #29
   1d6be:	d4f5      	bmi.n	1d6ac <restore_non_core_regs+0x1c>
   1d6c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1d6c4:	f000 fc42 	bl	1df4c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d6c8:	6823      	ldr	r3, [r4, #0]
   1d6ca:	071a      	lsls	r2, r3, #28
   1d6cc:	d4f0      	bmi.n	1d6b0 <restore_non_core_regs+0x20>
   1d6ce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d6d2:	f000 fc43 	bl	1df5c <__gnu_Unwind_Restore_WMMXD>
   1d6d6:	6823      	ldr	r3, [r4, #0]
   1d6d8:	06db      	lsls	r3, r3, #27
   1d6da:	d4eb      	bmi.n	1d6b4 <restore_non_core_regs+0x24>
   1d6dc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d6e4:	f000 bc7e 	b.w	1dfe4 <__gnu_Unwind_Restore_WMMXC>

0001d6e8 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1d6e8:	4603      	mov	r3, r0
   1d6ea:	6800      	ldr	r0, [r0, #0]
   1d6ec:	b100      	cbz	r0, 1d6f0 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   1d6ee:	4418      	add	r0, r3
   1d6f0:	4770      	bx	lr
   1d6f2:	bf00      	nop

0001d6f4 <__gnu_unwind_24bit.isra.0>:
   1d6f4:	2009      	movs	r0, #9
   1d6f6:	4770      	bx	lr

0001d6f8 <_Unwind_DebugHook>:
   1d6f8:	4770      	bx	lr
   1d6fa:	bf00      	nop

0001d6fc <unwind_phase2>:
   1d6fc:	b570      	push	{r4, r5, r6, lr}
   1d6fe:	4604      	mov	r4, r0
   1d700:	460e      	mov	r6, r1
   1d702:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1d704:	4620      	mov	r0, r4
   1d706:	f7ff ff75 	bl	1d5f4 <get_eit_entry>
   1d70a:	4605      	mov	r5, r0
   1d70c:	b988      	cbnz	r0, 1d732 <unwind_phase2+0x36>
   1d70e:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1d710:	6163      	str	r3, [r4, #20]
   1d712:	4632      	mov	r2, r6
   1d714:	6923      	ldr	r3, [r4, #16]
   1d716:	4621      	mov	r1, r4
   1d718:	2001      	movs	r0, #1
   1d71a:	4798      	blx	r3
   1d71c:	2808      	cmp	r0, #8
   1d71e:	d0f0      	beq.n	1d702 <unwind_phase2+0x6>
   1d720:	2807      	cmp	r0, #7
   1d722:	d106      	bne.n	1d732 <unwind_phase2+0x36>
   1d724:	4628      	mov	r0, r5
   1d726:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1d728:	f7ff ffe6 	bl	1d6f8 <_Unwind_DebugHook>
   1d72c:	1d30      	adds	r0, r6, #4
   1d72e:	f000 fbf1 	bl	1df14 <__restore_core_regs>
   1d732:	f000 fe65 	bl	1e400 <abort>
   1d736:	bf00      	nop

0001d738 <unwind_phase2_forced>:
   1d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d73c:	1d0d      	adds	r5, r1, #4
   1d73e:	4606      	mov	r6, r0
   1d740:	4614      	mov	r4, r2
   1d742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d744:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1d748:	f10d 0c0c 	add.w	ip, sp, #12
   1d74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d752:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d75c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d760:	ad02      	add	r5, sp, #8
   1d762:	68f7      	ldr	r7, [r6, #12]
   1d764:	f8d6 8018 	ldr.w	r8, [r6, #24]
   1d768:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1d76c:	2300      	movs	r3, #0
   1d76e:	602b      	str	r3, [r5, #0]
   1d770:	e021      	b.n	1d7b6 <unwind_phase2_forced+0x7e>
   1d772:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1d774:	6173      	str	r3, [r6, #20]
   1d776:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1d77a:	4629      	mov	r1, r5
   1d77c:	a87a      	add	r0, sp, #488	; 0x1e8
   1d77e:	f7ff fa0f 	bl	1cba0 <memcpy>
   1d782:	6933      	ldr	r3, [r6, #16]
   1d784:	aa7a      	add	r2, sp, #488	; 0x1e8
   1d786:	4631      	mov	r1, r6
   1d788:	4650      	mov	r0, sl
   1d78a:	4798      	blx	r3
   1d78c:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1d78e:	e9cd 5800 	strd	r5, r8, [sp]
   1d792:	4621      	mov	r1, r4
   1d794:	646b      	str	r3, [r5, #68]	; 0x44
   1d796:	4681      	mov	r9, r0
   1d798:	4633      	mov	r3, r6
   1d79a:	4632      	mov	r2, r6
   1d79c:	2001      	movs	r0, #1
   1d79e:	47b8      	blx	r7
   1d7a0:	4604      	mov	r4, r0
   1d7a2:	b9e8      	cbnz	r0, 1d7e0 <unwind_phase2_forced+0xa8>
   1d7a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1d7a8:	a97a      	add	r1, sp, #488	; 0x1e8
   1d7aa:	4628      	mov	r0, r5
   1d7ac:	f7ff f9f8 	bl	1cba0 <memcpy>
   1d7b0:	f1b9 0f08 	cmp.w	r9, #8
   1d7b4:	d11b      	bne.n	1d7ee <unwind_phase2_forced+0xb6>
   1d7b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d7b8:	4630      	mov	r0, r6
   1d7ba:	f7ff ff1b 	bl	1d5f4 <get_eit_entry>
   1d7be:	3409      	adds	r4, #9
   1d7c0:	fa5f fa84 	uxtb.w	sl, r4
   1d7c4:	4681      	mov	r9, r0
   1d7c6:	2800      	cmp	r0, #0
   1d7c8:	d0d3      	beq.n	1d772 <unwind_phase2_forced+0x3a>
   1d7ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d7cc:	f04a 0110 	orr.w	r1, sl, #16
   1d7d0:	e9cd 5800 	strd	r5, r8, [sp]
   1d7d4:	4632      	mov	r2, r6
   1d7d6:	646b      	str	r3, [r5, #68]	; 0x44
   1d7d8:	2001      	movs	r0, #1
   1d7da:	4633      	mov	r3, r6
   1d7dc:	47b8      	blx	r7
   1d7de:	b108      	cbz	r0, 1d7e4 <unwind_phase2_forced+0xac>
   1d7e0:	f04f 0909 	mov.w	r9, #9
   1d7e4:	4648      	mov	r0, r9
   1d7e6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d7ee:	f1b9 0f07 	cmp.w	r9, #7
   1d7f2:	d1f5      	bne.n	1d7e0 <unwind_phase2_forced+0xa8>
   1d7f4:	4620      	mov	r0, r4
   1d7f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d7f8:	f7ff ff7e 	bl	1d6f8 <_Unwind_DebugHook>
   1d7fc:	a803      	add	r0, sp, #12
   1d7fe:	f000 fb89 	bl	1df14 <__restore_core_regs>
   1d802:	bf00      	nop

0001d804 <_Unwind_GetCFA>:
   1d804:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1d806:	4770      	bx	lr

0001d808 <__gnu_Unwind_RaiseException>:
   1d808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d80a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1d80c:	640b      	str	r3, [r1, #64]	; 0x40
   1d80e:	1d0e      	adds	r6, r1, #4
   1d810:	460f      	mov	r7, r1
   1d812:	4605      	mov	r5, r0
   1d814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d816:	b0f9      	sub	sp, #484	; 0x1e4
   1d818:	ac01      	add	r4, sp, #4
   1d81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d81c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d820:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d824:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1d828:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d82c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d830:	9600      	str	r6, [sp, #0]
   1d832:	e006      	b.n	1d842 <__gnu_Unwind_RaiseException+0x3a>
   1d834:	692b      	ldr	r3, [r5, #16]
   1d836:	466a      	mov	r2, sp
   1d838:	4629      	mov	r1, r5
   1d83a:	4798      	blx	r3
   1d83c:	2808      	cmp	r0, #8
   1d83e:	4604      	mov	r4, r0
   1d840:	d108      	bne.n	1d854 <__gnu_Unwind_RaiseException+0x4c>
   1d842:	9910      	ldr	r1, [sp, #64]	; 0x40
   1d844:	4628      	mov	r0, r5
   1d846:	f7ff fed5 	bl	1d5f4 <get_eit_entry>
   1d84a:	2800      	cmp	r0, #0
   1d84c:	d0f2      	beq.n	1d834 <__gnu_Unwind_RaiseException+0x2c>
   1d84e:	2009      	movs	r0, #9
   1d850:	b079      	add	sp, #484	; 0x1e4
   1d852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d854:	4668      	mov	r0, sp
   1d856:	f7ff ff1b 	bl	1d690 <restore_non_core_regs>
   1d85a:	2c06      	cmp	r4, #6
   1d85c:	d1f7      	bne.n	1d84e <__gnu_Unwind_RaiseException+0x46>
   1d85e:	4639      	mov	r1, r7
   1d860:	4628      	mov	r0, r5
   1d862:	f7ff ff4b 	bl	1d6fc <unwind_phase2>
   1d866:	bf00      	nop

0001d868 <__gnu_Unwind_ForcedUnwind>:
   1d868:	b430      	push	{r4, r5}
   1d86a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1d86c:	60c1      	str	r1, [r0, #12]
   1d86e:	6182      	str	r2, [r0, #24]
   1d870:	4619      	mov	r1, r3
   1d872:	641d      	str	r5, [r3, #64]	; 0x40
   1d874:	2200      	movs	r2, #0
   1d876:	bc30      	pop	{r4, r5}
   1d878:	e75e      	b.n	1d738 <unwind_phase2_forced>
   1d87a:	bf00      	nop

0001d87c <__gnu_Unwind_Resume>:
   1d87c:	b570      	push	{r4, r5, r6, lr}
   1d87e:	68c6      	ldr	r6, [r0, #12]
   1d880:	6943      	ldr	r3, [r0, #20]
   1d882:	640b      	str	r3, [r1, #64]	; 0x40
   1d884:	b9ae      	cbnz	r6, 1d8b2 <__gnu_Unwind_Resume+0x36>
   1d886:	6903      	ldr	r3, [r0, #16]
   1d888:	460a      	mov	r2, r1
   1d88a:	4604      	mov	r4, r0
   1d88c:	460d      	mov	r5, r1
   1d88e:	4601      	mov	r1, r0
   1d890:	2002      	movs	r0, #2
   1d892:	4798      	blx	r3
   1d894:	2807      	cmp	r0, #7
   1d896:	d005      	beq.n	1d8a4 <__gnu_Unwind_Resume+0x28>
   1d898:	2808      	cmp	r0, #8
   1d89a:	d10f      	bne.n	1d8bc <__gnu_Unwind_Resume+0x40>
   1d89c:	4629      	mov	r1, r5
   1d89e:	4620      	mov	r0, r4
   1d8a0:	f7ff ff2c 	bl	1d6fc <unwind_phase2>
   1d8a4:	4630      	mov	r0, r6
   1d8a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d8a8:	f7ff ff26 	bl	1d6f8 <_Unwind_DebugHook>
   1d8ac:	1d28      	adds	r0, r5, #4
   1d8ae:	f000 fb31 	bl	1df14 <__restore_core_regs>
   1d8b2:	2201      	movs	r2, #1
   1d8b4:	f7ff ff40 	bl	1d738 <unwind_phase2_forced>
   1d8b8:	f000 fda2 	bl	1e400 <abort>
   1d8bc:	f000 fda0 	bl	1e400 <abort>

0001d8c0 <__gnu_Unwind_Resume_or_Rethrow>:
   1d8c0:	68c2      	ldr	r2, [r0, #12]
   1d8c2:	b11a      	cbz	r2, 1d8cc <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1d8c4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1d8c6:	640a      	str	r2, [r1, #64]	; 0x40
   1d8c8:	2200      	movs	r2, #0
   1d8ca:	e735      	b.n	1d738 <unwind_phase2_forced>
   1d8cc:	e79c      	b.n	1d808 <__gnu_Unwind_RaiseException>
   1d8ce:	bf00      	nop

0001d8d0 <_Unwind_Complete>:
   1d8d0:	4770      	bx	lr
   1d8d2:	bf00      	nop

0001d8d4 <_Unwind_DeleteException>:
   1d8d4:	6883      	ldr	r3, [r0, #8]
   1d8d6:	4601      	mov	r1, r0
   1d8d8:	b10b      	cbz	r3, 1d8de <_Unwind_DeleteException+0xa>
   1d8da:	2001      	movs	r0, #1
   1d8dc:	4718      	bx	r3
   1d8de:	4770      	bx	lr

0001d8e0 <_Unwind_VRS_Get>:
   1d8e0:	2901      	cmp	r1, #1
   1d8e2:	d012      	beq.n	1d90a <_Unwind_VRS_Get+0x2a>
   1d8e4:	d809      	bhi.n	1d8fa <_Unwind_VRS_Get+0x1a>
   1d8e6:	b973      	cbnz	r3, 1d906 <_Unwind_VRS_Get+0x26>
   1d8e8:	2a0f      	cmp	r2, #15
   1d8ea:	d80c      	bhi.n	1d906 <_Unwind_VRS_Get+0x26>
   1d8ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1d8f0:	4618      	mov	r0, r3
   1d8f2:	6853      	ldr	r3, [r2, #4]
   1d8f4:	9a00      	ldr	r2, [sp, #0]
   1d8f6:	6013      	str	r3, [r2, #0]
   1d8f8:	4770      	bx	lr
   1d8fa:	3903      	subs	r1, #3
   1d8fc:	2901      	cmp	r1, #1
   1d8fe:	bf94      	ite	ls
   1d900:	2001      	movls	r0, #1
   1d902:	2002      	movhi	r0, #2
   1d904:	4770      	bx	lr
   1d906:	2002      	movs	r0, #2
   1d908:	4770      	bx	lr
   1d90a:	4608      	mov	r0, r1
   1d90c:	4770      	bx	lr
   1d90e:	bf00      	nop

0001d910 <_Unwind_GetGR>:
   1d910:	b510      	push	{r4, lr}
   1d912:	b084      	sub	sp, #16
   1d914:	2300      	movs	r3, #0
   1d916:	ac03      	add	r4, sp, #12
   1d918:	460a      	mov	r2, r1
   1d91a:	9400      	str	r4, [sp, #0]
   1d91c:	4619      	mov	r1, r3
   1d91e:	f7ff ffdf 	bl	1d8e0 <_Unwind_VRS_Get>
   1d922:	9803      	ldr	r0, [sp, #12]
   1d924:	b004      	add	sp, #16
   1d926:	bd10      	pop	{r4, pc}

0001d928 <_Unwind_VRS_Set>:
   1d928:	2901      	cmp	r1, #1
   1d92a:	d012      	beq.n	1d952 <_Unwind_VRS_Set+0x2a>
   1d92c:	d809      	bhi.n	1d942 <_Unwind_VRS_Set+0x1a>
   1d92e:	b973      	cbnz	r3, 1d94e <_Unwind_VRS_Set+0x26>
   1d930:	2a0f      	cmp	r2, #15
   1d932:	d80c      	bhi.n	1d94e <_Unwind_VRS_Set+0x26>
   1d934:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1d938:	9a00      	ldr	r2, [sp, #0]
   1d93a:	6812      	ldr	r2, [r2, #0]
   1d93c:	6042      	str	r2, [r0, #4]
   1d93e:	4618      	mov	r0, r3
   1d940:	4770      	bx	lr
   1d942:	3903      	subs	r1, #3
   1d944:	2901      	cmp	r1, #1
   1d946:	bf94      	ite	ls
   1d948:	2001      	movls	r0, #1
   1d94a:	2002      	movhi	r0, #2
   1d94c:	4770      	bx	lr
   1d94e:	2002      	movs	r0, #2
   1d950:	4770      	bx	lr
   1d952:	4608      	mov	r0, r1
   1d954:	4770      	bx	lr
   1d956:	bf00      	nop

0001d958 <_Unwind_SetGR>:
   1d958:	b510      	push	{r4, lr}
   1d95a:	b084      	sub	sp, #16
   1d95c:	2300      	movs	r3, #0
   1d95e:	ac03      	add	r4, sp, #12
   1d960:	9203      	str	r2, [sp, #12]
   1d962:	9400      	str	r4, [sp, #0]
   1d964:	460a      	mov	r2, r1
   1d966:	4619      	mov	r1, r3
   1d968:	f7ff ffde 	bl	1d928 <_Unwind_VRS_Set>
   1d96c:	b004      	add	sp, #16
   1d96e:	bd10      	pop	{r4, pc}

0001d970 <__gnu_Unwind_Backtrace>:
   1d970:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d972:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1d974:	6413      	str	r3, [r2, #64]	; 0x40
   1d976:	1d15      	adds	r5, r2, #4
   1d978:	468c      	mov	ip, r1
   1d97a:	4606      	mov	r6, r0
   1d97c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d97e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1d982:	ac17      	add	r4, sp, #92	; 0x5c
   1d984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d98e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d992:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d99a:	4665      	mov	r5, ip
   1d99c:	9716      	str	r7, [sp, #88]	; 0x58
   1d99e:	e010      	b.n	1d9c2 <__gnu_Unwind_Backtrace+0x52>
   1d9a0:	f7ff ffda 	bl	1d958 <_Unwind_SetGR>
   1d9a4:	4629      	mov	r1, r5
   1d9a6:	a816      	add	r0, sp, #88	; 0x58
   1d9a8:	47b0      	blx	r6
   1d9aa:	4603      	mov	r3, r0
   1d9ac:	aa16      	add	r2, sp, #88	; 0x58
   1d9ae:	4669      	mov	r1, sp
   1d9b0:	2008      	movs	r0, #8
   1d9b2:	b983      	cbnz	r3, 1d9d6 <__gnu_Unwind_Backtrace+0x66>
   1d9b4:	9b04      	ldr	r3, [sp, #16]
   1d9b6:	4798      	blx	r3
   1d9b8:	2805      	cmp	r0, #5
   1d9ba:	4604      	mov	r4, r0
   1d9bc:	d00c      	beq.n	1d9d8 <__gnu_Unwind_Backtrace+0x68>
   1d9be:	2809      	cmp	r0, #9
   1d9c0:	d009      	beq.n	1d9d6 <__gnu_Unwind_Backtrace+0x66>
   1d9c2:	9926      	ldr	r1, [sp, #152]	; 0x98
   1d9c4:	4668      	mov	r0, sp
   1d9c6:	f7ff fe15 	bl	1d5f4 <get_eit_entry>
   1d9ca:	4603      	mov	r3, r0
   1d9cc:	466a      	mov	r2, sp
   1d9ce:	210c      	movs	r1, #12
   1d9d0:	a816      	add	r0, sp, #88	; 0x58
   1d9d2:	2b00      	cmp	r3, #0
   1d9d4:	d0e4      	beq.n	1d9a0 <__gnu_Unwind_Backtrace+0x30>
   1d9d6:	2409      	movs	r4, #9
   1d9d8:	a816      	add	r0, sp, #88	; 0x58
   1d9da:	f7ff fe59 	bl	1d690 <restore_non_core_regs>
   1d9de:	4620      	mov	r0, r4
   1d9e0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1d9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d9e6:	bf00      	nop

0001d9e8 <__gnu_unwind_pr_common>:
   1d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9ec:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   1d9ee:	b089      	sub	sp, #36	; 0x24
   1d9f0:	460d      	mov	r5, r1
   1d9f2:	f854 1b04 	ldr.w	r1, [r4], #4
   1d9f6:	9406      	str	r4, [sp, #24]
   1d9f8:	4617      	mov	r7, r2
   1d9fa:	f000 0803 	and.w	r8, r0, #3
   1d9fe:	461e      	mov	r6, r3
   1da00:	2b00      	cmp	r3, #0
   1da02:	d079      	beq.n	1daf8 <__gnu_unwind_pr_common+0x110>
   1da04:	0c0b      	lsrs	r3, r1, #16
   1da06:	b2da      	uxtb	r2, r3
   1da08:	0409      	lsls	r1, r1, #16
   1da0a:	f88d 301d 	strb.w	r3, [sp, #29]
   1da0e:	2302      	movs	r3, #2
   1da10:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1da14:	9105      	str	r1, [sp, #20]
   1da16:	f88d 301c 	strb.w	r3, [sp, #28]
   1da1a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1da1c:	f1b8 0f02 	cmp.w	r8, #2
   1da20:	bf08      	it	eq
   1da22:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1da24:	f013 0301 	ands.w	r3, r3, #1
   1da28:	d00c      	beq.n	1da44 <__gnu_unwind_pr_common+0x5c>
   1da2a:	4638      	mov	r0, r7
   1da2c:	a905      	add	r1, sp, #20
   1da2e:	f000 fb73 	bl	1e118 <__gnu_unwind_execute>
   1da32:	b918      	cbnz	r0, 1da3c <__gnu_unwind_pr_common+0x54>
   1da34:	2008      	movs	r0, #8
   1da36:	b009      	add	sp, #36	; 0x24
   1da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da3c:	2009      	movs	r0, #9
   1da3e:	b009      	add	sp, #36	; 0x24
   1da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da44:	f8d4 a000 	ldr.w	sl, [r4]
   1da48:	f1ba 0f00 	cmp.w	sl, #0
   1da4c:	d0ed      	beq.n	1da2a <__gnu_unwind_pr_common+0x42>
   1da4e:	9301      	str	r3, [sp, #4]
   1da50:	f000 0308 	and.w	r3, r0, #8
   1da54:	9302      	str	r3, [sp, #8]
   1da56:	2e02      	cmp	r6, #2
   1da58:	d04a      	beq.n	1daf0 <__gnu_unwind_pr_common+0x108>
   1da5a:	f8b4 a000 	ldrh.w	sl, [r4]
   1da5e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   1da62:	3404      	adds	r4, #4
   1da64:	6caa      	ldr	r2, [r5, #72]	; 0x48
   1da66:	f029 0b01 	bic.w	fp, r9, #1
   1da6a:	210f      	movs	r1, #15
   1da6c:	4638      	mov	r0, r7
   1da6e:	4493      	add	fp, r2
   1da70:	f7ff ff4e 	bl	1d910 <_Unwind_GetGR>
   1da74:	4583      	cmp	fp, r0
   1da76:	d839      	bhi.n	1daec <__gnu_unwind_pr_common+0x104>
   1da78:	f02a 0201 	bic.w	r2, sl, #1
   1da7c:	445a      	add	r2, fp
   1da7e:	4282      	cmp	r2, r0
   1da80:	bf94      	ite	ls
   1da82:	2000      	movls	r0, #0
   1da84:	2001      	movhi	r0, #1
   1da86:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1da8a:	f003 0302 	and.w	r3, r3, #2
   1da8e:	f00a 0a01 	and.w	sl, sl, #1
   1da92:	ea43 030a 	orr.w	r3, r3, sl
   1da96:	2b01      	cmp	r3, #1
   1da98:	d049      	beq.n	1db2e <__gnu_unwind_pr_common+0x146>
   1da9a:	2b02      	cmp	r3, #2
   1da9c:	d032      	beq.n	1db04 <__gnu_unwind_pr_common+0x11c>
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	d1cc      	bne.n	1da3c <__gnu_unwind_pr_common+0x54>
   1daa2:	f1b8 0f00 	cmp.w	r8, #0
   1daa6:	d002      	beq.n	1daae <__gnu_unwind_pr_common+0xc6>
   1daa8:	2800      	cmp	r0, #0
   1daaa:	f040 80cd 	bne.w	1dc48 <__gnu_unwind_pr_common+0x260>
   1daae:	3404      	adds	r4, #4
   1dab0:	f8d4 a000 	ldr.w	sl, [r4]
   1dab4:	f1ba 0f00 	cmp.w	sl, #0
   1dab8:	d1cd      	bne.n	1da56 <__gnu_unwind_pr_common+0x6e>
   1daba:	a905      	add	r1, sp, #20
   1dabc:	4638      	mov	r0, r7
   1dabe:	f000 fb2b 	bl	1e118 <__gnu_unwind_execute>
   1dac2:	2800      	cmp	r0, #0
   1dac4:	d1ba      	bne.n	1da3c <__gnu_unwind_pr_common+0x54>
   1dac6:	9b01      	ldr	r3, [sp, #4]
   1dac8:	2b00      	cmp	r3, #0
   1daca:	d0b3      	beq.n	1da34 <__gnu_unwind_pr_common+0x4c>
   1dacc:	210f      	movs	r1, #15
   1dace:	4638      	mov	r0, r7
   1dad0:	f7ff ff1e 	bl	1d910 <_Unwind_GetGR>
   1dad4:	210e      	movs	r1, #14
   1dad6:	4602      	mov	r2, r0
   1dad8:	4638      	mov	r0, r7
   1dada:	f7ff ff3d 	bl	1d958 <_Unwind_SetGR>
   1dade:	4638      	mov	r0, r7
   1dae0:	4a6a      	ldr	r2, [pc, #424]	; (1dc8c <__gnu_unwind_pr_common+0x2a4>)
   1dae2:	210f      	movs	r1, #15
   1dae4:	f7ff ff38 	bl	1d958 <_Unwind_SetGR>
   1dae8:	2007      	movs	r0, #7
   1daea:	e7a8      	b.n	1da3e <__gnu_unwind_pr_common+0x56>
   1daec:	2000      	movs	r0, #0
   1daee:	e7ca      	b.n	1da86 <__gnu_unwind_pr_common+0x9e>
   1daf0:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1daf4:	3408      	adds	r4, #8
   1daf6:	e7b5      	b.n	1da64 <__gnu_unwind_pr_common+0x7c>
   1daf8:	0209      	lsls	r1, r1, #8
   1dafa:	2303      	movs	r3, #3
   1dafc:	9105      	str	r1, [sp, #20]
   1dafe:	f8ad 301c 	strh.w	r3, [sp, #28]
   1db02:	e78a      	b.n	1da1a <__gnu_unwind_pr_common+0x32>
   1db04:	6823      	ldr	r3, [r4, #0]
   1db06:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   1db0a:	f1b8 0f00 	cmp.w	r8, #0
   1db0e:	d145      	bne.n	1db9c <__gnu_unwind_pr_common+0x1b4>
   1db10:	b128      	cbz	r0, 1db1e <__gnu_unwind_pr_common+0x136>
   1db12:	9a02      	ldr	r2, [sp, #8]
   1db14:	2a00      	cmp	r2, #0
   1db16:	d05c      	beq.n	1dbd2 <__gnu_unwind_pr_common+0x1ea>
   1db18:	f1bb 0f00 	cmp.w	fp, #0
   1db1c:	d074      	beq.n	1dc08 <__gnu_unwind_pr_common+0x220>
   1db1e:	2b00      	cmp	r3, #0
   1db20:	da00      	bge.n	1db24 <__gnu_unwind_pr_common+0x13c>
   1db22:	3404      	adds	r4, #4
   1db24:	f10b 0b01 	add.w	fp, fp, #1
   1db28:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   1db2c:	e7c0      	b.n	1dab0 <__gnu_unwind_pr_common+0xc8>
   1db2e:	f1b8 0f00 	cmp.w	r8, #0
   1db32:	d119      	bne.n	1db68 <__gnu_unwind_pr_common+0x180>
   1db34:	b1b0      	cbz	r0, 1db64 <__gnu_unwind_pr_common+0x17c>
   1db36:	e9d4 2300 	ldrd	r2, r3, [r4]
   1db3a:	1c99      	adds	r1, r3, #2
   1db3c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1db40:	f43f af7c 	beq.w	1da3c <__gnu_unwind_pr_common+0x54>
   1db44:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1db48:	3301      	adds	r3, #1
   1db4a:	9104      	str	r1, [sp, #16]
   1db4c:	f000 8090 	beq.w	1dc70 <__gnu_unwind_pr_common+0x288>
   1db50:	1d20      	adds	r0, r4, #4
   1db52:	f7ff fdc9 	bl	1d6e8 <_Unwind_decode_typeinfo_ptr.isra.0>
   1db56:	ab04      	add	r3, sp, #16
   1db58:	4601      	mov	r1, r0
   1db5a:	4628      	mov	r0, r5
   1db5c:	f3af 8000 	nop.w
   1db60:	2800      	cmp	r0, #0
   1db62:	d15b      	bne.n	1dc1c <__gnu_unwind_pr_common+0x234>
   1db64:	3408      	adds	r4, #8
   1db66:	e7a3      	b.n	1dab0 <__gnu_unwind_pr_common+0xc8>
   1db68:	210d      	movs	r1, #13
   1db6a:	4638      	mov	r0, r7
   1db6c:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1db70:	f7ff fece 	bl	1d910 <_Unwind_GetGR>
   1db74:	4581      	cmp	r9, r0
   1db76:	d1f5      	bne.n	1db64 <__gnu_unwind_pr_common+0x17c>
   1db78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1db7a:	429c      	cmp	r4, r3
   1db7c:	d1f2      	bne.n	1db64 <__gnu_unwind_pr_common+0x17c>
   1db7e:	4620      	mov	r0, r4
   1db80:	f7ff fcec 	bl	1d55c <selfrel_offset31>
   1db84:	210f      	movs	r1, #15
   1db86:	4602      	mov	r2, r0
   1db88:	4638      	mov	r0, r7
   1db8a:	f7ff fee5 	bl	1d958 <_Unwind_SetGR>
   1db8e:	4638      	mov	r0, r7
   1db90:	462a      	mov	r2, r5
   1db92:	2100      	movs	r1, #0
   1db94:	f7ff fee0 	bl	1d958 <_Unwind_SetGR>
   1db98:	2007      	movs	r0, #7
   1db9a:	e750      	b.n	1da3e <__gnu_unwind_pr_common+0x56>
   1db9c:	210d      	movs	r1, #13
   1db9e:	4638      	mov	r0, r7
   1dba0:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1dba4:	f7ff feb4 	bl	1d910 <_Unwind_GetGR>
   1dba8:	4581      	cmp	r9, r0
   1dbaa:	d001      	beq.n	1dbb0 <__gnu_unwind_pr_common+0x1c8>
   1dbac:	6823      	ldr	r3, [r4, #0]
   1dbae:	e7b6      	b.n	1db1e <__gnu_unwind_pr_common+0x136>
   1dbb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1dbb2:	429c      	cmp	r4, r3
   1dbb4:	d1fa      	bne.n	1dbac <__gnu_unwind_pr_common+0x1c4>
   1dbb6:	2204      	movs	r2, #4
   1dbb8:	2100      	movs	r1, #0
   1dbba:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
   1dbbe:	18a3      	adds	r3, r4, r2
   1dbc0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   1dbc4:	636b      	str	r3, [r5, #52]	; 0x34
   1dbc6:	6823      	ldr	r3, [r4, #0]
   1dbc8:	428b      	cmp	r3, r1
   1dbca:	db59      	blt.n	1dc80 <__gnu_unwind_pr_common+0x298>
   1dbcc:	2301      	movs	r3, #1
   1dbce:	9301      	str	r3, [sp, #4]
   1dbd0:	e7a8      	b.n	1db24 <__gnu_unwind_pr_common+0x13c>
   1dbd2:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1dbd6:	f8cd 800c 	str.w	r8, [sp, #12]
   1dbda:	f104 0a04 	add.w	sl, r4, #4
   1dbde:	46b0      	mov	r8, r6
   1dbe0:	4691      	mov	r9, r2
   1dbe2:	461e      	mov	r6, r3
   1dbe4:	e00d      	b.n	1dc02 <__gnu_unwind_pr_common+0x21a>
   1dbe6:	9604      	str	r6, [sp, #16]
   1dbe8:	f7ff fd7e 	bl	1d6e8 <_Unwind_decode_typeinfo_ptr.isra.0>
   1dbec:	ab04      	add	r3, sp, #16
   1dbee:	4601      	mov	r1, r0
   1dbf0:	2200      	movs	r2, #0
   1dbf2:	4628      	mov	r0, r5
   1dbf4:	f3af 8000 	nop.w
   1dbf8:	f109 0901 	add.w	r9, r9, #1
   1dbfc:	f10a 0a04 	add.w	sl, sl, #4
   1dc00:	b9e8      	cbnz	r0, 1dc3e <__gnu_unwind_pr_common+0x256>
   1dc02:	45d9      	cmp	r9, fp
   1dc04:	4650      	mov	r0, sl
   1dc06:	d1ee      	bne.n	1dbe6 <__gnu_unwind_pr_common+0x1fe>
   1dc08:	4638      	mov	r0, r7
   1dc0a:	210d      	movs	r1, #13
   1dc0c:	f7ff fe80 	bl	1d910 <_Unwind_GetGR>
   1dc10:	9b04      	ldr	r3, [sp, #16]
   1dc12:	6228      	str	r0, [r5, #32]
   1dc14:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   1dc18:	2006      	movs	r0, #6
   1dc1a:	e710      	b.n	1da3e <__gnu_unwind_pr_common+0x56>
   1dc1c:	4681      	mov	r9, r0
   1dc1e:	210d      	movs	r1, #13
   1dc20:	4638      	mov	r0, r7
   1dc22:	f7ff fe75 	bl	1d910 <_Unwind_GetGR>
   1dc26:	f1b9 0f02 	cmp.w	r9, #2
   1dc2a:	6228      	str	r0, [r5, #32]
   1dc2c:	d125      	bne.n	1dc7a <__gnu_unwind_pr_common+0x292>
   1dc2e:	462b      	mov	r3, r5
   1dc30:	9a04      	ldr	r2, [sp, #16]
   1dc32:	f843 2f2c 	str.w	r2, [r3, #44]!
   1dc36:	626b      	str	r3, [r5, #36]	; 0x24
   1dc38:	62ac      	str	r4, [r5, #40]	; 0x28
   1dc3a:	2006      	movs	r0, #6
   1dc3c:	e6ff      	b.n	1da3e <__gnu_unwind_pr_common+0x56>
   1dc3e:	4646      	mov	r6, r8
   1dc40:	6823      	ldr	r3, [r4, #0]
   1dc42:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1dc46:	e76a      	b.n	1db1e <__gnu_unwind_pr_common+0x136>
   1dc48:	4620      	mov	r0, r4
   1dc4a:	f7ff fc87 	bl	1d55c <selfrel_offset31>
   1dc4e:	3404      	adds	r4, #4
   1dc50:	4602      	mov	r2, r0
   1dc52:	63ac      	str	r4, [r5, #56]	; 0x38
   1dc54:	4628      	mov	r0, r5
   1dc56:	4614      	mov	r4, r2
   1dc58:	f3af 8000 	nop.w
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	f43f aeed 	beq.w	1da3c <__gnu_unwind_pr_common+0x54>
   1dc62:	4638      	mov	r0, r7
   1dc64:	4622      	mov	r2, r4
   1dc66:	210f      	movs	r1, #15
   1dc68:	f7ff fe76 	bl	1d958 <_Unwind_SetGR>
   1dc6c:	2007      	movs	r0, #7
   1dc6e:	e6e6      	b.n	1da3e <__gnu_unwind_pr_common+0x56>
   1dc70:	4638      	mov	r0, r7
   1dc72:	210d      	movs	r1, #13
   1dc74:	f7ff fe4c 	bl	1d910 <_Unwind_GetGR>
   1dc78:	6228      	str	r0, [r5, #32]
   1dc7a:	9b04      	ldr	r3, [sp, #16]
   1dc7c:	626b      	str	r3, [r5, #36]	; 0x24
   1dc7e:	e7db      	b.n	1dc38 <__gnu_unwind_pr_common+0x250>
   1dc80:	f10b 0001 	add.w	r0, fp, #1
   1dc84:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1dc88:	e77a      	b.n	1db80 <__gnu_unwind_pr_common+0x198>
   1dc8a:	bf00      	nop
   1dc8c:	00000000 	.word	0x00000000

0001dc90 <__aeabi_unwind_cpp_pr0>:
   1dc90:	2300      	movs	r3, #0
   1dc92:	e6a9      	b.n	1d9e8 <__gnu_unwind_pr_common>

0001dc94 <__aeabi_unwind_cpp_pr1>:
   1dc94:	2301      	movs	r3, #1
   1dc96:	e6a7      	b.n	1d9e8 <__gnu_unwind_pr_common>

0001dc98 <__aeabi_unwind_cpp_pr2>:
   1dc98:	2302      	movs	r3, #2
   1dc9a:	e6a5      	b.n	1d9e8 <__gnu_unwind_pr_common>

0001dc9c <_Unwind_VRS_Pop>:
   1dc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dca0:	4606      	mov	r6, r0
   1dca2:	b0c3      	sub	sp, #268	; 0x10c
   1dca4:	4615      	mov	r5, r2
   1dca6:	461c      	mov	r4, r3
   1dca8:	2904      	cmp	r1, #4
   1dcaa:	f200 80b9 	bhi.w	1de20 <_Unwind_VRS_Pop+0x184>
   1dcae:	e8df f001 	tbb	[pc, r1]
   1dcb2:	539a      	.short	0x539a
   1dcb4:	29b7      	.short	0x29b7
   1dcb6:	03          	.byte	0x03
   1dcb7:	00          	.byte	0x00
   1dcb8:	2c00      	cmp	r4, #0
   1dcba:	f040 80b1 	bne.w	1de20 <_Unwind_VRS_Pop+0x184>
   1dcbe:	2a10      	cmp	r2, #16
   1dcc0:	f200 80ae 	bhi.w	1de20 <_Unwind_VRS_Pop+0x184>
   1dcc4:	6803      	ldr	r3, [r0, #0]
   1dcc6:	06d8      	lsls	r0, r3, #27
   1dcc8:	f100 80f3 	bmi.w	1deb2 <_Unwind_VRS_Pop+0x216>
   1dccc:	af20      	add	r7, sp, #128	; 0x80
   1dcce:	4638      	mov	r0, r7
   1dcd0:	f000 f992 	bl	1dff8 <__gnu_Unwind_Save_WMMXC>
   1dcd4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1dcd6:	2300      	movs	r3, #0
   1dcd8:	2401      	movs	r4, #1
   1dcda:	fa04 f203 	lsl.w	r2, r4, r3
   1dcde:	422a      	tst	r2, r5
   1dce0:	4601      	mov	r1, r0
   1dce2:	d004      	beq.n	1dcee <_Unwind_VRS_Pop+0x52>
   1dce4:	f851 2b04 	ldr.w	r2, [r1], #4
   1dce8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1dcec:	4608      	mov	r0, r1
   1dcee:	3301      	adds	r3, #1
   1dcf0:	2b04      	cmp	r3, #4
   1dcf2:	d1f2      	bne.n	1dcda <_Unwind_VRS_Pop+0x3e>
   1dcf4:	63b0      	str	r0, [r6, #56]	; 0x38
   1dcf6:	4638      	mov	r0, r7
   1dcf8:	f000 f974 	bl	1dfe4 <__gnu_Unwind_Restore_WMMXC>
   1dcfc:	2000      	movs	r0, #0
   1dcfe:	b043      	add	sp, #268	; 0x10c
   1dd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dd04:	2c03      	cmp	r4, #3
   1dd06:	f040 808b 	bne.w	1de20 <_Unwind_VRS_Pop+0x184>
   1dd0a:	b294      	uxth	r4, r2
   1dd0c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   1dd10:	2b10      	cmp	r3, #16
   1dd12:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1dd16:	f200 8083 	bhi.w	1de20 <_Unwind_VRS_Pop+0x184>
   1dd1a:	6803      	ldr	r3, [r0, #0]
   1dd1c:	071f      	lsls	r7, r3, #28
   1dd1e:	f100 80d0 	bmi.w	1dec2 <_Unwind_VRS_Pop+0x226>
   1dd22:	af20      	add	r7, sp, #128	; 0x80
   1dd24:	4638      	mov	r0, r7
   1dd26:	f000 f93b 	bl	1dfa0 <__gnu_Unwind_Save_WMMXD>
   1dd2a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1dd2e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   1dd30:	b154      	cbz	r4, 1dd48 <_Unwind_VRS_Pop+0xac>
   1dd32:	460b      	mov	r3, r1
   1dd34:	1ae8      	subs	r0, r5, r3
   1dd36:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   1dd3a:	00e4      	lsls	r4, r4, #3
   1dd3c:	581a      	ldr	r2, [r3, r0]
   1dd3e:	f843 2b04 	str.w	r2, [r3], #4
   1dd42:	428b      	cmp	r3, r1
   1dd44:	d1fa      	bne.n	1dd3c <_Unwind_VRS_Pop+0xa0>
   1dd46:	4425      	add	r5, r4
   1dd48:	4638      	mov	r0, r7
   1dd4a:	63b5      	str	r5, [r6, #56]	; 0x38
   1dd4c:	f000 f906 	bl	1df5c <__gnu_Unwind_Restore_WMMXD>
   1dd50:	2000      	movs	r0, #0
   1dd52:	b043      	add	sp, #268	; 0x10c
   1dd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dd58:	2c01      	cmp	r4, #1
   1dd5a:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1dd5e:	b295      	uxth	r5, r2
   1dd60:	d05a      	beq.n	1de18 <_Unwind_VRS_Pop+0x17c>
   1dd62:	2c05      	cmp	r4, #5
   1dd64:	d15c      	bne.n	1de20 <_Unwind_VRS_Pop+0x184>
   1dd66:	eb08 0905 	add.w	r9, r8, r5
   1dd6a:	f1b9 0f20 	cmp.w	r9, #32
   1dd6e:	d857      	bhi.n	1de20 <_Unwind_VRS_Pop+0x184>
   1dd70:	f1b8 0f0f 	cmp.w	r8, #15
   1dd74:	d977      	bls.n	1de66 <_Unwind_VRS_Pop+0x1ca>
   1dd76:	46a9      	mov	r9, r5
   1dd78:	2d00      	cmp	r5, #0
   1dd7a:	f040 8088 	bne.w	1de8e <_Unwind_VRS_Pop+0x1f2>
   1dd7e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1dd80:	b36d      	cbz	r5, 1ddde <_Unwind_VRS_Pop+0x142>
   1dd82:	af20      	add	r7, sp, #128	; 0x80
   1dd84:	f04f 0900 	mov.w	r9, #0
   1dd88:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   1dd8c:	3f04      	subs	r7, #4
   1dd8e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1dd92:	f853 1b04 	ldr.w	r1, [r3], #4
   1dd96:	f847 1f04 	str.w	r1, [r7, #4]!
   1dd9a:	42ab      	cmp	r3, r5
   1dd9c:	d1f9      	bne.n	1dd92 <_Unwind_VRS_Pop+0xf6>
   1dd9e:	f1b9 0f00 	cmp.w	r9, #0
   1dda2:	d00f      	beq.n	1ddc4 <_Unwind_VRS_Pop+0x128>
   1dda4:	466f      	mov	r7, sp
   1dda6:	4641      	mov	r1, r8
   1dda8:	2910      	cmp	r1, #16
   1ddaa:	bf38      	it	cc
   1ddac:	2110      	movcc	r1, #16
   1ddae:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1ddb2:	3984      	subs	r1, #132	; 0x84
   1ddb4:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   1ddb8:	f853 0b04 	ldr.w	r0, [r3], #4
   1ddbc:	f841 0f04 	str.w	r0, [r1, #4]!
   1ddc0:	42ab      	cmp	r3, r5
   1ddc2:	d1f9      	bne.n	1ddb8 <_Unwind_VRS_Pop+0x11c>
   1ddc4:	2c01      	cmp	r4, #1
   1ddc6:	f000 8084 	beq.w	1ded2 <_Unwind_VRS_Pop+0x236>
   1ddca:	f1b8 0f0f 	cmp.w	r8, #15
   1ddce:	63b5      	str	r5, [r6, #56]	; 0x38
   1ddd0:	d945      	bls.n	1de5e <_Unwind_VRS_Pop+0x1c2>
   1ddd2:	f1b9 0f00 	cmp.w	r9, #0
   1ddd6:	d002      	beq.n	1ddde <_Unwind_VRS_Pop+0x142>
   1ddd8:	4668      	mov	r0, sp
   1ddda:	f000 f8b7 	bl	1df4c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1ddde:	2000      	movs	r0, #0
   1dde0:	b043      	add	sp, #268	; 0x10c
   1dde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dde6:	b9dc      	cbnz	r4, 1de20 <_Unwind_VRS_Pop+0x184>
   1dde8:	6b87      	ldr	r7, [r0, #56]	; 0x38
   1ddea:	4623      	mov	r3, r4
   1ddec:	2001      	movs	r0, #1
   1ddee:	b294      	uxth	r4, r2
   1ddf0:	f106 0c04 	add.w	ip, r6, #4
   1ddf4:	fa00 f203 	lsl.w	r2, r0, r3
   1ddf8:	4222      	tst	r2, r4
   1ddfa:	4639      	mov	r1, r7
   1ddfc:	d004      	beq.n	1de08 <_Unwind_VRS_Pop+0x16c>
   1ddfe:	f851 2b04 	ldr.w	r2, [r1], #4
   1de02:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
   1de06:	460f      	mov	r7, r1
   1de08:	3301      	adds	r3, #1
   1de0a:	2b10      	cmp	r3, #16
   1de0c:	d1f2      	bne.n	1ddf4 <_Unwind_VRS_Pop+0x158>
   1de0e:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   1de12:	d1e4      	bne.n	1ddde <_Unwind_VRS_Pop+0x142>
   1de14:	63b7      	str	r7, [r6, #56]	; 0x38
   1de16:	e004      	b.n	1de22 <_Unwind_VRS_Pop+0x186>
   1de18:	eb08 0305 	add.w	r3, r8, r5
   1de1c:	2b10      	cmp	r3, #16
   1de1e:	d903      	bls.n	1de28 <_Unwind_VRS_Pop+0x18c>
   1de20:	2002      	movs	r0, #2
   1de22:	b043      	add	sp, #268	; 0x10c
   1de24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1de28:	f1b8 0f0f 	cmp.w	r8, #15
   1de2c:	d8f8      	bhi.n	1de20 <_Unwind_VRS_Pop+0x184>
   1de2e:	6833      	ldr	r3, [r6, #0]
   1de30:	07da      	lsls	r2, r3, #31
   1de32:	d506      	bpl.n	1de42 <_Unwind_VRS_Pop+0x1a6>
   1de34:	4630      	mov	r0, r6
   1de36:	f023 0303 	bic.w	r3, r3, #3
   1de3a:	f840 3b48 	str.w	r3, [r0], #72
   1de3e:	f000 f879 	bl	1df34 <__gnu_Unwind_Save_VFP>
   1de42:	af20      	add	r7, sp, #128	; 0x80
   1de44:	4638      	mov	r0, r7
   1de46:	f000 f875 	bl	1df34 <__gnu_Unwind_Save_VFP>
   1de4a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1de4c:	2d00      	cmp	r5, #0
   1de4e:	d199      	bne.n	1dd84 <_Unwind_VRS_Pop+0xe8>
   1de50:	461d      	mov	r5, r3
   1de52:	3504      	adds	r5, #4
   1de54:	63b5      	str	r5, [r6, #56]	; 0x38
   1de56:	4638      	mov	r0, r7
   1de58:	f000 f868 	bl	1df2c <__gnu_Unwind_Restore_VFP>
   1de5c:	e7bf      	b.n	1ddde <_Unwind_VRS_Pop+0x142>
   1de5e:	a820      	add	r0, sp, #128	; 0x80
   1de60:	f000 f86c 	bl	1df3c <__gnu_Unwind_Restore_VFP_D>
   1de64:	e7b5      	b.n	1ddd2 <_Unwind_VRS_Pop+0x136>
   1de66:	f1b9 0f10 	cmp.w	r9, #16
   1de6a:	d940      	bls.n	1deee <_Unwind_VRS_Pop+0x252>
   1de6c:	f1a9 0910 	sub.w	r9, r9, #16
   1de70:	6833      	ldr	r3, [r6, #0]
   1de72:	07d9      	lsls	r1, r3, #31
   1de74:	d508      	bpl.n	1de88 <_Unwind_VRS_Pop+0x1ec>
   1de76:	f023 0301 	bic.w	r3, r3, #1
   1de7a:	4630      	mov	r0, r6
   1de7c:	f043 0302 	orr.w	r3, r3, #2
   1de80:	f840 3b48 	str.w	r3, [r0], #72
   1de84:	f000 f85e 	bl	1df44 <__gnu_Unwind_Save_VFP_D>
   1de88:	f1b9 0f00 	cmp.w	r9, #0
   1de8c:	d032      	beq.n	1def4 <_Unwind_VRS_Pop+0x258>
   1de8e:	6833      	ldr	r3, [r6, #0]
   1de90:	075a      	lsls	r2, r3, #29
   1de92:	d420      	bmi.n	1ded6 <_Unwind_VRS_Pop+0x23a>
   1de94:	f1b8 0f0f 	cmp.w	r8, #15
   1de98:	d925      	bls.n	1dee6 <_Unwind_VRS_Pop+0x24a>
   1de9a:	466f      	mov	r7, sp
   1de9c:	4638      	mov	r0, r7
   1de9e:	f1c8 0510 	rsb	r5, r8, #16
   1dea2:	f000 f857 	bl	1df54 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dea6:	2d00      	cmp	r5, #0
   1dea8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1deaa:	f77f af7c 	ble.w	1dda6 <_Unwind_VRS_Pop+0x10a>
   1deae:	af20      	add	r7, sp, #128	; 0x80
   1deb0:	e76a      	b.n	1dd88 <_Unwind_VRS_Pop+0xec>
   1deb2:	f023 0310 	bic.w	r3, r3, #16
   1deb6:	6033      	str	r3, [r6, #0]
   1deb8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
   1debc:	f000 f89c 	bl	1dff8 <__gnu_Unwind_Save_WMMXC>
   1dec0:	e704      	b.n	1dccc <_Unwind_VRS_Pop+0x30>
   1dec2:	f023 0308 	bic.w	r3, r3, #8
   1dec6:	6003      	str	r3, [r0, #0]
   1dec8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1decc:	f000 f868 	bl	1dfa0 <__gnu_Unwind_Save_WMMXD>
   1ded0:	e727      	b.n	1dd22 <_Unwind_VRS_Pop+0x86>
   1ded2:	af20      	add	r7, sp, #128	; 0x80
   1ded4:	e7bd      	b.n	1de52 <_Unwind_VRS_Pop+0x1b6>
   1ded6:	4630      	mov	r0, r6
   1ded8:	f023 0304 	bic.w	r3, r3, #4
   1dedc:	f840 3bd0 	str.w	r3, [r0], #208
   1dee0:	f000 f838 	bl	1df54 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dee4:	e7d6      	b.n	1de94 <_Unwind_VRS_Pop+0x1f8>
   1dee6:	a820      	add	r0, sp, #128	; 0x80
   1dee8:	f000 f82c 	bl	1df44 <__gnu_Unwind_Save_VFP_D>
   1deec:	e7d5      	b.n	1de9a <_Unwind_VRS_Pop+0x1fe>
   1deee:	f04f 0900 	mov.w	r9, #0
   1def2:	e7bd      	b.n	1de70 <_Unwind_VRS_Pop+0x1d4>
   1def4:	f1b8 0f0f 	cmp.w	r8, #15
   1def8:	f63f af41 	bhi.w	1dd7e <_Unwind_VRS_Pop+0xe2>
   1defc:	af20      	add	r7, sp, #128	; 0x80
   1defe:	4638      	mov	r0, r7
   1df00:	f000 f820 	bl	1df44 <__gnu_Unwind_Save_VFP_D>
   1df04:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1df06:	2d00      	cmp	r5, #0
   1df08:	f47f af3c 	bne.w	1dd84 <_Unwind_VRS_Pop+0xe8>
   1df0c:	4638      	mov	r0, r7
   1df0e:	f000 f815 	bl	1df3c <__gnu_Unwind_Restore_VFP_D>
   1df12:	e764      	b.n	1ddde <_Unwind_VRS_Pop+0x142>

0001df14 <__restore_core_regs>:
   1df14:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1df18:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1df1c:	469c      	mov	ip, r3
   1df1e:	46a6      	mov	lr, r4
   1df20:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1df24:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1df28:	46e5      	mov	sp, ip
   1df2a:	bd00      	pop	{pc}

0001df2c <__gnu_Unwind_Restore_VFP>:
   1df2c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1df30:	4770      	bx	lr
   1df32:	bf00      	nop

0001df34 <__gnu_Unwind_Save_VFP>:
   1df34:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1df38:	4770      	bx	lr
   1df3a:	bf00      	nop

0001df3c <__gnu_Unwind_Restore_VFP_D>:
   1df3c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1df40:	4770      	bx	lr
   1df42:	bf00      	nop

0001df44 <__gnu_Unwind_Save_VFP_D>:
   1df44:	ec80 0b20 	vstmia	r0, {d0-d15}
   1df48:	4770      	bx	lr
   1df4a:	bf00      	nop

0001df4c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1df4c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1df50:	4770      	bx	lr
   1df52:	bf00      	nop

0001df54 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1df54:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1df58:	4770      	bx	lr
   1df5a:	bf00      	nop

0001df5c <__gnu_Unwind_Restore_WMMXD>:
   1df5c:	ecf0 0102 	ldfe	f0, [r0], #8
   1df60:	ecf0 1102 	ldfe	f1, [r0], #8
   1df64:	ecf0 2102 	ldfe	f2, [r0], #8
   1df68:	ecf0 3102 	ldfe	f3, [r0], #8
   1df6c:	ecf0 4102 	ldfe	f4, [r0], #8
   1df70:	ecf0 5102 	ldfe	f5, [r0], #8
   1df74:	ecf0 6102 	ldfe	f6, [r0], #8
   1df78:	ecf0 7102 	ldfe	f7, [r0], #8
   1df7c:	ecf0 8102 	ldfp	f0, [r0], #8
   1df80:	ecf0 9102 	ldfp	f1, [r0], #8
   1df84:	ecf0 a102 	ldfp	f2, [r0], #8
   1df88:	ecf0 b102 	ldfp	f3, [r0], #8
   1df8c:	ecf0 c102 	ldfp	f4, [r0], #8
   1df90:	ecf0 d102 	ldfp	f5, [r0], #8
   1df94:	ecf0 e102 	ldfp	f6, [r0], #8
   1df98:	ecf0 f102 	ldfp	f7, [r0], #8
   1df9c:	4770      	bx	lr
   1df9e:	bf00      	nop

0001dfa0 <__gnu_Unwind_Save_WMMXD>:
   1dfa0:	ece0 0102 	stfe	f0, [r0], #8
   1dfa4:	ece0 1102 	stfe	f1, [r0], #8
   1dfa8:	ece0 2102 	stfe	f2, [r0], #8
   1dfac:	ece0 3102 	stfe	f3, [r0], #8
   1dfb0:	ece0 4102 	stfe	f4, [r0], #8
   1dfb4:	ece0 5102 	stfe	f5, [r0], #8
   1dfb8:	ece0 6102 	stfe	f6, [r0], #8
   1dfbc:	ece0 7102 	stfe	f7, [r0], #8
   1dfc0:	ece0 8102 	stfp	f0, [r0], #8
   1dfc4:	ece0 9102 	stfp	f1, [r0], #8
   1dfc8:	ece0 a102 	stfp	f2, [r0], #8
   1dfcc:	ece0 b102 	stfp	f3, [r0], #8
   1dfd0:	ece0 c102 	stfp	f4, [r0], #8
   1dfd4:	ece0 d102 	stfp	f5, [r0], #8
   1dfd8:	ece0 e102 	stfp	f6, [r0], #8
   1dfdc:	ece0 f102 	stfp	f7, [r0], #8
   1dfe0:	4770      	bx	lr
   1dfe2:	bf00      	nop

0001dfe4 <__gnu_Unwind_Restore_WMMXC>:
   1dfe4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1dfe8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1dfec:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1dff0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1dff4:	4770      	bx	lr
   1dff6:	bf00      	nop

0001dff8 <__gnu_Unwind_Save_WMMXC>:
   1dff8:	fca0 8101 	stc2	1, cr8, [r0], #4
   1dffc:	fca0 9101 	stc2	1, cr9, [r0], #4
   1e000:	fca0 a101 	stc2	1, cr10, [r0], #4
   1e004:	fca0 b101 	stc2	1, cr11, [r0], #4
   1e008:	4770      	bx	lr
   1e00a:	bf00      	nop

0001e00c <_Unwind_RaiseException>:
   1e00c:	46ec      	mov	ip, sp
   1e00e:	b500      	push	{lr}
   1e010:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e014:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e018:	f04f 0300 	mov.w	r3, #0
   1e01c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e020:	a901      	add	r1, sp, #4
   1e022:	f7ff fbf1 	bl	1d808 <__gnu_Unwind_RaiseException>
   1e026:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e02a:	b012      	add	sp, #72	; 0x48
   1e02c:	4770      	bx	lr
   1e02e:	bf00      	nop

0001e030 <_Unwind_Resume>:
   1e030:	46ec      	mov	ip, sp
   1e032:	b500      	push	{lr}
   1e034:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e038:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e03c:	f04f 0300 	mov.w	r3, #0
   1e040:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e044:	a901      	add	r1, sp, #4
   1e046:	f7ff fc19 	bl	1d87c <__gnu_Unwind_Resume>
   1e04a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e04e:	b012      	add	sp, #72	; 0x48
   1e050:	4770      	bx	lr
   1e052:	bf00      	nop

0001e054 <_Unwind_Resume_or_Rethrow>:
   1e054:	46ec      	mov	ip, sp
   1e056:	b500      	push	{lr}
   1e058:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e05c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e060:	f04f 0300 	mov.w	r3, #0
   1e064:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e068:	a901      	add	r1, sp, #4
   1e06a:	f7ff fc29 	bl	1d8c0 <__gnu_Unwind_Resume_or_Rethrow>
   1e06e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e072:	b012      	add	sp, #72	; 0x48
   1e074:	4770      	bx	lr
   1e076:	bf00      	nop

0001e078 <_Unwind_ForcedUnwind>:
   1e078:	46ec      	mov	ip, sp
   1e07a:	b500      	push	{lr}
   1e07c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e080:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e084:	f04f 0300 	mov.w	r3, #0
   1e088:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e08c:	ab01      	add	r3, sp, #4
   1e08e:	f7ff fbeb 	bl	1d868 <__gnu_Unwind_ForcedUnwind>
   1e092:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e096:	b012      	add	sp, #72	; 0x48
   1e098:	4770      	bx	lr
   1e09a:	bf00      	nop

0001e09c <_Unwind_Backtrace>:
   1e09c:	46ec      	mov	ip, sp
   1e09e:	b500      	push	{lr}
   1e0a0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1e0a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1e0a8:	f04f 0300 	mov.w	r3, #0
   1e0ac:	e92d 000c 	stmdb	sp!, {r2, r3}
   1e0b0:	aa01      	add	r2, sp, #4
   1e0b2:	f7ff fc5d 	bl	1d970 <__gnu_Unwind_Backtrace>
   1e0b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1e0ba:	b012      	add	sp, #72	; 0x48
   1e0bc:	4770      	bx	lr
   1e0be:	bf00      	nop

0001e0c0 <next_unwind_byte>:
   1e0c0:	7a02      	ldrb	r2, [r0, #8]
   1e0c2:	b97a      	cbnz	r2, 1e0e4 <next_unwind_byte+0x24>
   1e0c4:	7a43      	ldrb	r3, [r0, #9]
   1e0c6:	b1a3      	cbz	r3, 1e0f2 <next_unwind_byte+0x32>
   1e0c8:	6842      	ldr	r2, [r0, #4]
   1e0ca:	3b01      	subs	r3, #1
   1e0cc:	b410      	push	{r4}
   1e0ce:	7243      	strb	r3, [r0, #9]
   1e0d0:	6813      	ldr	r3, [r2, #0]
   1e0d2:	2103      	movs	r1, #3
   1e0d4:	1d14      	adds	r4, r2, #4
   1e0d6:	7201      	strb	r1, [r0, #8]
   1e0d8:	021a      	lsls	r2, r3, #8
   1e0da:	6044      	str	r4, [r0, #4]
   1e0dc:	6002      	str	r2, [r0, #0]
   1e0de:	bc10      	pop	{r4}
   1e0e0:	0e18      	lsrs	r0, r3, #24
   1e0e2:	4770      	bx	lr
   1e0e4:	6803      	ldr	r3, [r0, #0]
   1e0e6:	3a01      	subs	r2, #1
   1e0e8:	7202      	strb	r2, [r0, #8]
   1e0ea:	021a      	lsls	r2, r3, #8
   1e0ec:	6002      	str	r2, [r0, #0]
   1e0ee:	0e18      	lsrs	r0, r3, #24
   1e0f0:	4770      	bx	lr
   1e0f2:	20b0      	movs	r0, #176	; 0xb0
   1e0f4:	4770      	bx	lr
   1e0f6:	bf00      	nop

0001e0f8 <_Unwind_GetGR.constprop.0>:
   1e0f8:	b500      	push	{lr}
   1e0fa:	b085      	sub	sp, #20
   1e0fc:	aa03      	add	r2, sp, #12
   1e0fe:	2300      	movs	r3, #0
   1e100:	9200      	str	r2, [sp, #0]
   1e102:	4619      	mov	r1, r3
   1e104:	220c      	movs	r2, #12
   1e106:	f7ff fbeb 	bl	1d8e0 <_Unwind_VRS_Get>
   1e10a:	9803      	ldr	r0, [sp, #12]
   1e10c:	b005      	add	sp, #20
   1e10e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e112:	bf00      	nop

0001e114 <unwind_UCB_from_context>:
   1e114:	e7f0      	b.n	1e0f8 <_Unwind_GetGR.constprop.0>
   1e116:	bf00      	nop

0001e118 <__gnu_unwind_execute>:
   1e118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e11c:	4605      	mov	r5, r0
   1e11e:	b085      	sub	sp, #20
   1e120:	460e      	mov	r6, r1
   1e122:	f04f 0800 	mov.w	r8, #0
   1e126:	4630      	mov	r0, r6
   1e128:	f7ff ffca 	bl	1e0c0 <next_unwind_byte>
   1e12c:	28b0      	cmp	r0, #176	; 0xb0
   1e12e:	4604      	mov	r4, r0
   1e130:	f000 80b2 	beq.w	1e298 <__gnu_unwind_execute+0x180>
   1e134:	0607      	lsls	r7, r0, #24
   1e136:	d520      	bpl.n	1e17a <__gnu_unwind_execute+0x62>
   1e138:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e13c:	2b80      	cmp	r3, #128	; 0x80
   1e13e:	d04d      	beq.n	1e1dc <__gnu_unwind_execute+0xc4>
   1e140:	2b90      	cmp	r3, #144	; 0x90
   1e142:	d036      	beq.n	1e1b2 <__gnu_unwind_execute+0x9a>
   1e144:	2ba0      	cmp	r3, #160	; 0xa0
   1e146:	d060      	beq.n	1e20a <__gnu_unwind_execute+0xf2>
   1e148:	2bb0      	cmp	r3, #176	; 0xb0
   1e14a:	d074      	beq.n	1e236 <__gnu_unwind_execute+0x11e>
   1e14c:	2bc0      	cmp	r3, #192	; 0xc0
   1e14e:	f000 808b 	beq.w	1e268 <__gnu_unwind_execute+0x150>
   1e152:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e156:	2bd0      	cmp	r3, #208	; 0xd0
   1e158:	d10b      	bne.n	1e172 <__gnu_unwind_execute+0x5a>
   1e15a:	f000 0207 	and.w	r2, r0, #7
   1e15e:	3201      	adds	r2, #1
   1e160:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e164:	2305      	movs	r3, #5
   1e166:	2101      	movs	r1, #1
   1e168:	4628      	mov	r0, r5
   1e16a:	f7ff fd97 	bl	1dc9c <_Unwind_VRS_Pop>
   1e16e:	2800      	cmp	r0, #0
   1e170:	d0d9      	beq.n	1e126 <__gnu_unwind_execute+0xe>
   1e172:	2009      	movs	r0, #9
   1e174:	b005      	add	sp, #20
   1e176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e17a:	f10d 090c 	add.w	r9, sp, #12
   1e17e:	2300      	movs	r3, #0
   1e180:	4619      	mov	r1, r3
   1e182:	0087      	lsls	r7, r0, #2
   1e184:	f8cd 9000 	str.w	r9, [sp]
   1e188:	220d      	movs	r2, #13
   1e18a:	4628      	mov	r0, r5
   1e18c:	f7ff fba8 	bl	1d8e0 <_Unwind_VRS_Get>
   1e190:	b2ff      	uxtb	r7, r7
   1e192:	9b03      	ldr	r3, [sp, #12]
   1e194:	f8cd 9000 	str.w	r9, [sp]
   1e198:	3704      	adds	r7, #4
   1e19a:	0660      	lsls	r0, r4, #25
   1e19c:	bf4c      	ite	mi
   1e19e:	1bdf      	submi	r7, r3, r7
   1e1a0:	18ff      	addpl	r7, r7, r3
   1e1a2:	2300      	movs	r3, #0
   1e1a4:	4619      	mov	r1, r3
   1e1a6:	220d      	movs	r2, #13
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	9703      	str	r7, [sp, #12]
   1e1ac:	f7ff fbbc 	bl	1d928 <_Unwind_VRS_Set>
   1e1b0:	e7b9      	b.n	1e126 <__gnu_unwind_execute+0xe>
   1e1b2:	f000 030d 	and.w	r3, r0, #13
   1e1b6:	2b0d      	cmp	r3, #13
   1e1b8:	d0db      	beq.n	1e172 <__gnu_unwind_execute+0x5a>
   1e1ba:	af03      	add	r7, sp, #12
   1e1bc:	2300      	movs	r3, #0
   1e1be:	f000 020f 	and.w	r2, r0, #15
   1e1c2:	4619      	mov	r1, r3
   1e1c4:	9700      	str	r7, [sp, #0]
   1e1c6:	4628      	mov	r0, r5
   1e1c8:	f7ff fb8a 	bl	1d8e0 <_Unwind_VRS_Get>
   1e1cc:	2300      	movs	r3, #0
   1e1ce:	9700      	str	r7, [sp, #0]
   1e1d0:	4619      	mov	r1, r3
   1e1d2:	220d      	movs	r2, #13
   1e1d4:	4628      	mov	r0, r5
   1e1d6:	f7ff fba7 	bl	1d928 <_Unwind_VRS_Set>
   1e1da:	e7a4      	b.n	1e126 <__gnu_unwind_execute+0xe>
   1e1dc:	4630      	mov	r0, r6
   1e1de:	f7ff ff6f 	bl	1e0c0 <next_unwind_byte>
   1e1e2:	0224      	lsls	r4, r4, #8
   1e1e4:	4320      	orrs	r0, r4
   1e1e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e1ea:	d0c2      	beq.n	1e172 <__gnu_unwind_execute+0x5a>
   1e1ec:	0104      	lsls	r4, r0, #4
   1e1ee:	2300      	movs	r3, #0
   1e1f0:	b2a2      	uxth	r2, r4
   1e1f2:	4619      	mov	r1, r3
   1e1f4:	4628      	mov	r0, r5
   1e1f6:	f7ff fd51 	bl	1dc9c <_Unwind_VRS_Pop>
   1e1fa:	2800      	cmp	r0, #0
   1e1fc:	d1b9      	bne.n	1e172 <__gnu_unwind_execute+0x5a>
   1e1fe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1e202:	bf18      	it	ne
   1e204:	f04f 0801 	movne.w	r8, #1
   1e208:	e78d      	b.n	1e126 <__gnu_unwind_execute+0xe>
   1e20a:	43c2      	mvns	r2, r0
   1e20c:	f002 0307 	and.w	r3, r2, #7
   1e210:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1e214:	411a      	asrs	r2, r3
   1e216:	0701      	lsls	r1, r0, #28
   1e218:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1e21c:	f04f 0300 	mov.w	r3, #0
   1e220:	bf48      	it	mi
   1e222:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1e226:	4619      	mov	r1, r3
   1e228:	4628      	mov	r0, r5
   1e22a:	f7ff fd37 	bl	1dc9c <_Unwind_VRS_Pop>
   1e22e:	2800      	cmp	r0, #0
   1e230:	f43f af79 	beq.w	1e126 <__gnu_unwind_execute+0xe>
   1e234:	e79d      	b.n	1e172 <__gnu_unwind_execute+0x5a>
   1e236:	28b1      	cmp	r0, #177	; 0xb1
   1e238:	d033      	beq.n	1e2a2 <__gnu_unwind_execute+0x18a>
   1e23a:	28b2      	cmp	r0, #178	; 0xb2
   1e23c:	f000 808b 	beq.w	1e356 <__gnu_unwind_execute+0x23e>
   1e240:	28b3      	cmp	r0, #179	; 0xb3
   1e242:	d039      	beq.n	1e2b8 <__gnu_unwind_execute+0x1a0>
   1e244:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1e248:	2bb4      	cmp	r3, #180	; 0xb4
   1e24a:	d092      	beq.n	1e172 <__gnu_unwind_execute+0x5a>
   1e24c:	f000 0207 	and.w	r2, r0, #7
   1e250:	3201      	adds	r2, #1
   1e252:	2301      	movs	r3, #1
   1e254:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e258:	4619      	mov	r1, r3
   1e25a:	4628      	mov	r0, r5
   1e25c:	f7ff fd1e 	bl	1dc9c <_Unwind_VRS_Pop>
   1e260:	2800      	cmp	r0, #0
   1e262:	f43f af60 	beq.w	1e126 <__gnu_unwind_execute+0xe>
   1e266:	e784      	b.n	1e172 <__gnu_unwind_execute+0x5a>
   1e268:	28c6      	cmp	r0, #198	; 0xc6
   1e26a:	d042      	beq.n	1e2f2 <__gnu_unwind_execute+0x1da>
   1e26c:	28c7      	cmp	r0, #199	; 0xc7
   1e26e:	d04c      	beq.n	1e30a <__gnu_unwind_execute+0x1f2>
   1e270:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e274:	2bc0      	cmp	r3, #192	; 0xc0
   1e276:	d05b      	beq.n	1e330 <__gnu_unwind_execute+0x218>
   1e278:	28c8      	cmp	r0, #200	; 0xc8
   1e27a:	d060      	beq.n	1e33e <__gnu_unwind_execute+0x226>
   1e27c:	28c9      	cmp	r0, #201	; 0xc9
   1e27e:	f47f af78 	bne.w	1e172 <__gnu_unwind_execute+0x5a>
   1e282:	4630      	mov	r0, r6
   1e284:	f7ff ff1c 	bl	1e0c0 <next_unwind_byte>
   1e288:	0302      	lsls	r2, r0, #12
   1e28a:	f000 000f 	and.w	r0, r0, #15
   1e28e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1e292:	3001      	adds	r0, #1
   1e294:	4302      	orrs	r2, r0
   1e296:	e765      	b.n	1e164 <__gnu_unwind_execute+0x4c>
   1e298:	f1b8 0f00 	cmp.w	r8, #0
   1e29c:	d018      	beq.n	1e2d0 <__gnu_unwind_execute+0x1b8>
   1e29e:	2000      	movs	r0, #0
   1e2a0:	e768      	b.n	1e174 <__gnu_unwind_execute+0x5c>
   1e2a2:	4630      	mov	r0, r6
   1e2a4:	f7ff ff0c 	bl	1e0c0 <next_unwind_byte>
   1e2a8:	4602      	mov	r2, r0
   1e2aa:	2800      	cmp	r0, #0
   1e2ac:	f43f af61 	beq.w	1e172 <__gnu_unwind_execute+0x5a>
   1e2b0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e2b4:	d0d0      	beq.n	1e258 <__gnu_unwind_execute+0x140>
   1e2b6:	e75c      	b.n	1e172 <__gnu_unwind_execute+0x5a>
   1e2b8:	4630      	mov	r0, r6
   1e2ba:	f7ff ff01 	bl	1e0c0 <next_unwind_byte>
   1e2be:	0301      	lsls	r1, r0, #12
   1e2c0:	f000 000f 	and.w	r0, r0, #15
   1e2c4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e2c8:	1c42      	adds	r2, r0, #1
   1e2ca:	2301      	movs	r3, #1
   1e2cc:	430a      	orrs	r2, r1
   1e2ce:	e7c3      	b.n	1e258 <__gnu_unwind_execute+0x140>
   1e2d0:	ac03      	add	r4, sp, #12
   1e2d2:	4643      	mov	r3, r8
   1e2d4:	220e      	movs	r2, #14
   1e2d6:	4641      	mov	r1, r8
   1e2d8:	9400      	str	r4, [sp, #0]
   1e2da:	4628      	mov	r0, r5
   1e2dc:	f7ff fb00 	bl	1d8e0 <_Unwind_VRS_Get>
   1e2e0:	9400      	str	r4, [sp, #0]
   1e2e2:	4628      	mov	r0, r5
   1e2e4:	4643      	mov	r3, r8
   1e2e6:	220f      	movs	r2, #15
   1e2e8:	4641      	mov	r1, r8
   1e2ea:	f7ff fb1d 	bl	1d928 <_Unwind_VRS_Set>
   1e2ee:	4640      	mov	r0, r8
   1e2f0:	e740      	b.n	1e174 <__gnu_unwind_execute+0x5c>
   1e2f2:	4630      	mov	r0, r6
   1e2f4:	f7ff fee4 	bl	1e0c0 <next_unwind_byte>
   1e2f8:	0301      	lsls	r1, r0, #12
   1e2fa:	f000 000f 	and.w	r0, r0, #15
   1e2fe:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e302:	1c42      	adds	r2, r0, #1
   1e304:	2303      	movs	r3, #3
   1e306:	430a      	orrs	r2, r1
   1e308:	e7a6      	b.n	1e258 <__gnu_unwind_execute+0x140>
   1e30a:	4630      	mov	r0, r6
   1e30c:	f7ff fed8 	bl	1e0c0 <next_unwind_byte>
   1e310:	4602      	mov	r2, r0
   1e312:	2800      	cmp	r0, #0
   1e314:	f43f af2d 	beq.w	1e172 <__gnu_unwind_execute+0x5a>
   1e318:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e31c:	f47f af29 	bne.w	1e172 <__gnu_unwind_execute+0x5a>
   1e320:	2104      	movs	r1, #4
   1e322:	4628      	mov	r0, r5
   1e324:	f7ff fcba 	bl	1dc9c <_Unwind_VRS_Pop>
   1e328:	2800      	cmp	r0, #0
   1e32a:	f43f aefc 	beq.w	1e126 <__gnu_unwind_execute+0xe>
   1e32e:	e720      	b.n	1e172 <__gnu_unwind_execute+0x5a>
   1e330:	f000 020f 	and.w	r2, r0, #15
   1e334:	3201      	adds	r2, #1
   1e336:	2303      	movs	r3, #3
   1e338:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1e33c:	e78c      	b.n	1e258 <__gnu_unwind_execute+0x140>
   1e33e:	4630      	mov	r0, r6
   1e340:	f7ff febe 	bl	1e0c0 <next_unwind_byte>
   1e344:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1e348:	f000 030f 	and.w	r3, r0, #15
   1e34c:	3210      	adds	r2, #16
   1e34e:	3301      	adds	r3, #1
   1e350:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1e354:	e706      	b.n	1e164 <__gnu_unwind_execute+0x4c>
   1e356:	2300      	movs	r3, #0
   1e358:	f10d 090c 	add.w	r9, sp, #12
   1e35c:	220d      	movs	r2, #13
   1e35e:	4619      	mov	r1, r3
   1e360:	f8cd 9000 	str.w	r9, [sp]
   1e364:	4628      	mov	r0, r5
   1e366:	f7ff fabb 	bl	1d8e0 <_Unwind_VRS_Get>
   1e36a:	4630      	mov	r0, r6
   1e36c:	f7ff fea8 	bl	1e0c0 <next_unwind_byte>
   1e370:	0602      	lsls	r2, r0, #24
   1e372:	f04f 0702 	mov.w	r7, #2
   1e376:	d50c      	bpl.n	1e392 <__gnu_unwind_execute+0x27a>
   1e378:	9b03      	ldr	r3, [sp, #12]
   1e37a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1e37e:	40b8      	lsls	r0, r7
   1e380:	4403      	add	r3, r0
   1e382:	4630      	mov	r0, r6
   1e384:	9303      	str	r3, [sp, #12]
   1e386:	f7ff fe9b 	bl	1e0c0 <next_unwind_byte>
   1e38a:	0603      	lsls	r3, r0, #24
   1e38c:	f107 0707 	add.w	r7, r7, #7
   1e390:	d4f2      	bmi.n	1e378 <__gnu_unwind_execute+0x260>
   1e392:	9b03      	ldr	r3, [sp, #12]
   1e394:	f8cd 9000 	str.w	r9, [sp]
   1e398:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   1e39c:	f503 7201 	add.w	r2, r3, #516	; 0x204
   1e3a0:	40bc      	lsls	r4, r7
   1e3a2:	2300      	movs	r3, #0
   1e3a4:	4414      	add	r4, r2
   1e3a6:	4619      	mov	r1, r3
   1e3a8:	220d      	movs	r2, #13
   1e3aa:	4628      	mov	r0, r5
   1e3ac:	9403      	str	r4, [sp, #12]
   1e3ae:	f7ff fabb 	bl	1d928 <_Unwind_VRS_Set>
   1e3b2:	e6b8      	b.n	1e126 <__gnu_unwind_execute+0xe>

0001e3b4 <__gnu_unwind_frame>:
   1e3b4:	b510      	push	{r4, lr}
   1e3b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1e3b8:	b084      	sub	sp, #16
   1e3ba:	6853      	ldr	r3, [r2, #4]
   1e3bc:	2403      	movs	r4, #3
   1e3be:	f88d 400c 	strb.w	r4, [sp, #12]
   1e3c2:	021b      	lsls	r3, r3, #8
   1e3c4:	f102 0408 	add.w	r4, r2, #8
   1e3c8:	4608      	mov	r0, r1
   1e3ca:	79d2      	ldrb	r2, [r2, #7]
   1e3cc:	9301      	str	r3, [sp, #4]
   1e3ce:	a901      	add	r1, sp, #4
   1e3d0:	9402      	str	r4, [sp, #8]
   1e3d2:	f88d 200d 	strb.w	r2, [sp, #13]
   1e3d6:	f7ff fe9f 	bl	1e118 <__gnu_unwind_execute>
   1e3da:	b004      	add	sp, #16
   1e3dc:	bd10      	pop	{r4, pc}
   1e3de:	bf00      	nop

0001e3e0 <_Unwind_GetRegionStart>:
   1e3e0:	b508      	push	{r3, lr}
   1e3e2:	f7ff fe97 	bl	1e114 <unwind_UCB_from_context>
   1e3e6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1e3e8:	bd08      	pop	{r3, pc}
   1e3ea:	bf00      	nop

0001e3ec <_Unwind_GetLanguageSpecificData>:
   1e3ec:	b508      	push	{r3, lr}
   1e3ee:	f7ff fe91 	bl	1e114 <unwind_UCB_from_context>
   1e3f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e3f4:	79c3      	ldrb	r3, [r0, #7]
   1e3f6:	3302      	adds	r3, #2
   1e3f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e3fc:	bd08      	pop	{r3, pc}
   1e3fe:	bf00      	nop

0001e400 <abort>:
   1e400:	b508      	push	{r3, lr}
   1e402:	2006      	movs	r0, #6
   1e404:	f000 f82c 	bl	1e460 <raise>
   1e408:	2001      	movs	r0, #1
   1e40a:	f7ff f885 	bl	1d518 <_exit>

0001e40e <_raise_r>:
   1e40e:	291f      	cmp	r1, #31
   1e410:	b538      	push	{r3, r4, r5, lr}
   1e412:	4604      	mov	r4, r0
   1e414:	460d      	mov	r5, r1
   1e416:	d904      	bls.n	1e422 <_raise_r+0x14>
   1e418:	2316      	movs	r3, #22
   1e41a:	6003      	str	r3, [r0, #0]
   1e41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e420:	bd38      	pop	{r3, r4, r5, pc}
   1e422:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1e424:	b112      	cbz	r2, 1e42c <_raise_r+0x1e>
   1e426:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e42a:	b94b      	cbnz	r3, 1e440 <_raise_r+0x32>
   1e42c:	4620      	mov	r0, r4
   1e42e:	f000 f831 	bl	1e494 <_getpid_r>
   1e432:	462a      	mov	r2, r5
   1e434:	4601      	mov	r1, r0
   1e436:	4620      	mov	r0, r4
   1e438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e43c:	f000 b818 	b.w	1e470 <_kill_r>
   1e440:	2b01      	cmp	r3, #1
   1e442:	d00a      	beq.n	1e45a <_raise_r+0x4c>
   1e444:	1c59      	adds	r1, r3, #1
   1e446:	d103      	bne.n	1e450 <_raise_r+0x42>
   1e448:	2316      	movs	r3, #22
   1e44a:	6003      	str	r3, [r0, #0]
   1e44c:	2001      	movs	r0, #1
   1e44e:	e7e7      	b.n	1e420 <_raise_r+0x12>
   1e450:	2400      	movs	r4, #0
   1e452:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1e456:	4628      	mov	r0, r5
   1e458:	4798      	blx	r3
   1e45a:	2000      	movs	r0, #0
   1e45c:	e7e0      	b.n	1e420 <_raise_r+0x12>
	...

0001e460 <raise>:
   1e460:	4b02      	ldr	r3, [pc, #8]	; (1e46c <raise+0xc>)
   1e462:	4601      	mov	r1, r0
   1e464:	6818      	ldr	r0, [r3, #0]
   1e466:	f7ff bfd2 	b.w	1e40e <_raise_r>
   1e46a:	bf00      	nop
   1e46c:	20001144 	.word	0x20001144

0001e470 <_kill_r>:
   1e470:	b538      	push	{r3, r4, r5, lr}
   1e472:	4d07      	ldr	r5, [pc, #28]	; (1e490 <_kill_r+0x20>)
   1e474:	2300      	movs	r3, #0
   1e476:	4604      	mov	r4, r0
   1e478:	4608      	mov	r0, r1
   1e47a:	4611      	mov	r1, r2
   1e47c:	602b      	str	r3, [r5, #0]
   1e47e:	f000 f813 	bl	1e4a8 <_kill>
   1e482:	1c43      	adds	r3, r0, #1
   1e484:	d102      	bne.n	1e48c <_kill_r+0x1c>
   1e486:	682b      	ldr	r3, [r5, #0]
   1e488:	b103      	cbz	r3, 1e48c <_kill_r+0x1c>
   1e48a:	6023      	str	r3, [r4, #0]
   1e48c:	bd38      	pop	{r3, r4, r5, pc}
   1e48e:	bf00      	nop
   1e490:	20001688 	.word	0x20001688

0001e494 <_getpid_r>:
   1e494:	f000 b800 	b.w	1e498 <_getpid>

0001e498 <_getpid>:
   1e498:	4b02      	ldr	r3, [pc, #8]	; (1e4a4 <_getpid+0xc>)
   1e49a:	2258      	movs	r2, #88	; 0x58
   1e49c:	601a      	str	r2, [r3, #0]
   1e49e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4a2:	4770      	bx	lr
   1e4a4:	20001688 	.word	0x20001688

0001e4a8 <_kill>:
   1e4a8:	4b02      	ldr	r3, [pc, #8]	; (1e4b4 <_kill+0xc>)
   1e4aa:	2258      	movs	r2, #88	; 0x58
   1e4ac:	601a      	str	r2, [r3, #0]
   1e4ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4b2:	4770      	bx	lr
   1e4b4:	20001688 	.word	0x20001688

0001e4b8 <_init>:
   1e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4ba:	bf00      	nop
   1e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e4be:	bc08      	pop	{r3}
   1e4c0:	469e      	mov	lr, r3
   1e4c2:	4770      	bx	lr

0001e4c4 <_fini>:
   1e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4c6:	bf00      	nop
   1e4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e4ca:	bc08      	pop	{r3}
   1e4cc:	469e      	mov	lr, r3
   1e4ce:	4770      	bx	lr
   1e4d0:	00060001 	.word	0x00060001

0001e4d4 <m_app_timer_sortlist>:
   1e4d4:	00000000 200011d4 00019379              ....... y...

0001e4e0 <delay_machine_code.6859>:
   1e4e0:	d8fd3807 00004770                       .8..pG..

0001e4e8 <pwr_mgmt_data>:
   1e4e8:	0001e92c 0001e92c 00000004 00005b1b     ,...,........[..
   1e4f8:	323b3833 0000003b 323b3834 0000003b     38;2;...48;2;...
   1e508:	732a2e25 00000020 58323025 58323025     %.*s ...%02X%02X
   1e518:	00000020 69532020 31353037 77617220      ...  Si7051 raw
   1e528:	6425203a 3a462020 32302520 64252e64     : %d  F: %02d.%d
   1e538:	0000000a 6d542020 37313170 77617220     ....  Tmp117 raw
   1e548:	6425203a 3a462020 32302520 64252e64     : %d  F: %02d.%d
   1e558:	0000000a 7267467b 7d6e6565 3430255b     ....{Fgreen}[%04
   1e568:	30252e64 5b5d6436 253a7325 3a3a2064     d.%06d][%s:%d ::
   1e578:	7b5d7325 69687746 0a7d6574 00000000     %s]{Fwhite}.....
   1e588:	542f2e2e 65706d65 75746172 682e6572     ../Temperature.h
   1e598:	00007070 64616572 00000000 467b2020     pp..read....  {F
   1e5a8:	7d646572 6c696166 74206465 6572206f     red}failed to re
   1e5b8:	74206461 20706d65 756c6176 77467b65     ad temp value{Fw
   1e5c8:	65746968 00000a7d 65722020 6e727574     hite}...  return
   1e5d8:	64206465 75616665 7420746c 20706d65     ed default temp 
   1e5e8:	756c6176 00000a65 467b2020 7d646572     value...  {Fred}
   1e5f8:	656d6974 2c74756f 61657220 62207964     timeout, ready b
   1e608:	6e207469 7320746f 467b7465 74696877     it not set{Fwhit
   1e618:	000a7d65 33256325 75252e64 00000000     e}..%c%3d.%u....
   1e628:	412f2e2e 72657664 69736974 682e676e     ../Advertising.h
   1e638:	00007070 61647075 00006574 7963467b     pp..update..{Fcy
   1e648:	207d6e61 64612d20 74726576 6e697369     an}  -advertisin
   1e658:	61702067 74656b63 77467b2d 65746968     g packet-{Fwhite
   1e668:	00000a7d 656c2020 25203a6e 20207532     }...  len: %2u  
   1e678:	65707974 3025203a 20207832 61746164     type: %02x  data
   1e688:	0000203a 726f6e7b 7d6c616d 7267467b     : ..{normal}{Fgr
   1e698:	7d6e6565 6f6f420a 2e2e2e74 0000000a     een}.Boot.......
   1e6a8:	616d467b 746e6567 6f627d61 2e647261     {Fmagenta}board.
   1e6b8:	74696e69 2e2e2928 00000a2e 5f66726e     init()......nrf_
   1e6c8:	5f727770 746d676d 696e695f 2e292874     pwr_mgmt_init().
   1e6d8:	000a2e2e 2e656c62 74696e69 2e2e2928     ....ble.init()..
   1e6e8:	00000a2e 2e766461 74696e69 2e2e2928     ....adv.init()..
   1e6f8:	00000a2e 6d2f2e2e 2e6e6961 00707063     ....../main.cpp.
   1e708:	6e69616d 00000000 616d467b 746e6567     main....{Fmagent
   1e718:	20207d61 20776f6c 65776f70 2e2e2e72     a}  low power...
   1e728:	6877467b 7d657469 00000a20 6e692020     {Fwhite} ...  in
   1e738:	6e726574 72206c61 203a7761 20206425     ternal raw: %d  
   1e748:	25203a46 2e643230 000a6425 3b303b30     F: %02d.%d..0;0;
   1e758:	00006d30 3b353532 6d303b30 00000000     0m..255;0;0m....
   1e768:	35323b30 6d303b35 00000000 3b353532     0;255;0m....255;
   1e778:	3b353532 00006d30 3b303b30 6d353532     255;0m..0;0;255m
   1e788:	00000000 3b353532 35323b30 00006d35     ....255;0;255m..
   1e798:	33313b30 31323b35 00006d35 3b353532     0;135;215m..255;
   1e7a8:	3b353532 6d353532 00000000 3b353532     255;255m....255;
   1e7b8:	373b3939 00006d31 3b333431 31323b30     99;71m..143;0;21
   1e7c8:	00006d31 00004a32 48313b31 00000000     1m..2J..1;1H....
   1e7d8:	5b1b4a32 48313b31 6d305b1b 00000000     2J.[1;1H.[0m....
   1e7e8:	00006d33 00006d34                       3m..4m..

0001e7f0 <SD_TX_LEVELS>:
   1e7f0:	f0ecd800 00fcf8f4 00000403 00000000     ................

0001e800 <nrfx_coredep_delay_us::delay_machine_code>:
   1e800:	d8fd3807 00004770                       .8..pG..

0001e808 <markupCodes>:
   1e808:	0000441d 0001e754 0000f25b 0001e75c     .D..T...[...\...
   1e818:	00001a31 0001e768 0000f21c 0001e774     1...h.......t...
   1e828:	00009808 0001e780 0000649d 0001e78c     .........d......
   1e838:	0000592b 0001e798 00003961 0001e7a4     +Y......a9......
   1e848:	0000999c 0001e7b4 00006758 0001e7c0     ........Xg......
   1e858:	0000b382 0001e7cc 0000ee09 0001e7d0     ................
   1e868:	00004263 0001e7d8 0000ce96 0001e7e8     cB..............
   1e878:	000074e9 0001e758 0000d0a6 0001e7ec     .t..X...........
   1e888:	6d726554 6c616e69 00000000 00545452     Terminal....RTT.
   1e898:	47474553 00005245 01021000              SEGGER......

0001e8a4 <sdh_req_observers>:
   1e8a4:	0001e944 0001e944 00000008              D...D.......

0001e8b0 <sdh_stack_observers>:
   1e8b0:	0001e934 0001e944 00000008              4...D.......

0001e8bc <sdh_state_observers>:
   1e8bc:	0001e92c 0001e934 00000008              ,...4.......

0001e8c8 <sdh_ble_observers>:
   1e8c8:	0001e924 0001e92c 00000008              $...,.......

0001e8d4 <sdh_soc_observers>:
   1e8d4:	0001e91c 0001e924 00000008              ....$.......

0001e8e0 <_global_impure_ptr>:
   1e8e0:	20001148 2b302d23 6c680020 6665004c     H.. #-0+ .hlL.ef
   1e8f0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1e900:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1e910:	64636261 00006665                       abcdef..

0001e918 <__EH_FRAME_BEGIN__>:
   1e918:	00000000                                ....
