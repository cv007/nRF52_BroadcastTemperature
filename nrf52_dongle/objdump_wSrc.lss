
_build/nrf52840_xxaa.out:     file format elf32-littlearm


Disassembly of section .text:

00027000 <__isr_vector>:
   27000:	20040000 	.word	0x20040000
   27004:	000272bd 	.word	0x000272bd
   27008:	000272e5 	.word	0x000272e5
   2700c:	000272e7 	.word	0x000272e7
   27010:	000272e9 	.word	0x000272e9
   27014:	000272eb 	.word	0x000272eb
   27018:	000272ed 	.word	0x000272ed
	...
   2702c:	000272ef 	.word	0x000272ef
   27030:	000272f1 	.word	0x000272f1
   27034:	00000000 	.word	0x00000000
   27038:	000272f3 	.word	0x000272f3
   2703c:	000272f5 	.word	0x000272f5
   27040:	00027fed 	.word	0x00027fed
   27044:	000272f7 	.word	0x000272f7
   27048:	000285f9 	.word	0x000285f9
   2704c:	000272f7 	.word	0x000272f7
   27050:	000272f7 	.word	0x000272f7
   27054:	000272f7 	.word	0x000272f7
   27058:	00028059 	.word	0x00028059
   2705c:	000272f7 	.word	0x000272f7
   27060:	000272f7 	.word	0x000272f7
   27064:	000272f7 	.word	0x000272f7
   27068:	000272f7 	.word	0x000272f7
   2706c:	000272f7 	.word	0x000272f7
   27070:	000272f7 	.word	0x000272f7
   27074:	000272f7 	.word	0x000272f7
   27078:	000272f7 	.word	0x000272f7
   2707c:	000272f7 	.word	0x000272f7
   27080:	000272f7 	.word	0x000272f7
   27084:	00027a79 	.word	0x00027a79
   27088:	000272f7 	.word	0x000272f7
   2708c:	000272f7 	.word	0x000272f7
   27090:	000272f7 	.word	0x000272f7
   27094:	000272f7 	.word	0x000272f7
   27098:	000297e1 	.word	0x000297e1
   2709c:	000272f7 	.word	0x000272f7
   270a0:	000272f7 	.word	0x000272f7
   270a4:	000272f7 	.word	0x000272f7
   270a8:	000272f7 	.word	0x000272f7
   270ac:	000272f7 	.word	0x000272f7
   270b0:	000272f7 	.word	0x000272f7
   270b4:	000272f7 	.word	0x000272f7
	...
   270c0:	000272f7 	.word	0x000272f7
   270c4:	000272f7 	.word	0x000272f7
   270c8:	000272f7 	.word	0x000272f7
   270cc:	000272f7 	.word	0x000272f7
   270d0:	000272f7 	.word	0x000272f7
   270d4:	000272f7 	.word	0x000272f7
   270d8:	000272f7 	.word	0x000272f7
   270dc:	000272f7 	.word	0x000272f7
   270e0:	000272f7 	.word	0x000272f7
   270e4:	000272f7 	.word	0x000272f7
   270e8:	000272f7 	.word	0x000272f7
	...
   270f4:	000272f7 	.word	0x000272f7
   270f8:	00000000 	.word	0x00000000
   270fc:	000272f7 	.word	0x000272f7
	...

00027200 <__do_global_dtors_aux>:
   27200:	b510      	push	{r4, lr}
   27202:	4c05      	ldr	r4, [pc, #20]	; (27218 <__do_global_dtors_aux+0x18>)
   27204:	7823      	ldrb	r3, [r4, #0]
   27206:	b933      	cbnz	r3, 27216 <__do_global_dtors_aux+0x16>
   27208:	4b04      	ldr	r3, [pc, #16]	; (2721c <__do_global_dtors_aux+0x1c>)
   2720a:	b113      	cbz	r3, 27212 <__do_global_dtors_aux+0x12>
   2720c:	4804      	ldr	r0, [pc, #16]	; (27220 <__do_global_dtors_aux+0x20>)
   2720e:	f3af 8000 	nop.w
   27212:	2301      	movs	r3, #1
   27214:	7023      	strb	r3, [r4, #0]
   27216:	bd10      	pop	{r4, pc}
   27218:	20001978 	.word	0x20001978
   2721c:	00000000 	.word	0x00000000
   27220:	0002b3e0 	.word	0x0002b3e0

00027224 <frame_dummy>:
   27224:	b508      	push	{r3, lr}
   27226:	4b03      	ldr	r3, [pc, #12]	; (27234 <frame_dummy+0x10>)
   27228:	b11b      	cbz	r3, 27232 <frame_dummy+0xe>
   2722a:	4903      	ldr	r1, [pc, #12]	; (27238 <frame_dummy+0x14>)
   2722c:	4803      	ldr	r0, [pc, #12]	; (2723c <frame_dummy+0x18>)
   2722e:	f3af 8000 	nop.w
   27232:	bd08      	pop	{r3, pc}
   27234:	00000000 	.word	0x00000000
   27238:	2000197c 	.word	0x2000197c
   2723c:	0002b3e0 	.word	0x0002b3e0

00027240 <_stack_init>:
   27240:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
   27244:	4770      	bx	lr
   27246:	bf00      	nop

00027248 <_mainCRTStartup>:
   27248:	4b17      	ldr	r3, [pc, #92]	; (272a8 <_mainCRTStartup+0x60>)
   2724a:	2b00      	cmp	r3, #0
   2724c:	bf08      	it	eq
   2724e:	4b13      	ldreq	r3, [pc, #76]	; (2729c <_mainCRTStartup+0x54>)
   27250:	469d      	mov	sp, r3
   27252:	f7ff fff5 	bl	27240 <_stack_init>
   27256:	2100      	movs	r1, #0
   27258:	468b      	mov	fp, r1
   2725a:	460f      	mov	r7, r1
   2725c:	4813      	ldr	r0, [pc, #76]	; (272ac <_mainCRTStartup+0x64>)
   2725e:	4a14      	ldr	r2, [pc, #80]	; (272b0 <_mainCRTStartup+0x68>)
   27260:	1a12      	subs	r2, r2, r0
   27262:	f002 fbd7 	bl	29a14 <memset>
   27266:	4b0e      	ldr	r3, [pc, #56]	; (272a0 <_mainCRTStartup+0x58>)
   27268:	2b00      	cmp	r3, #0
   2726a:	d000      	beq.n	2726e <_mainCRTStartup+0x26>
   2726c:	4798      	blx	r3
   2726e:	4b0d      	ldr	r3, [pc, #52]	; (272a4 <_mainCRTStartup+0x5c>)
   27270:	2b00      	cmp	r3, #0
   27272:	d000      	beq.n	27276 <_mainCRTStartup+0x2e>
   27274:	4798      	blx	r3
   27276:	2000      	movs	r0, #0
   27278:	2100      	movs	r1, #0
   2727a:	0004      	movs	r4, r0
   2727c:	000d      	movs	r5, r1
   2727e:	480d      	ldr	r0, [pc, #52]	; (272b4 <_mainCRTStartup+0x6c>)
   27280:	2800      	cmp	r0, #0
   27282:	d002      	beq.n	2728a <_mainCRTStartup+0x42>
   27284:	480c      	ldr	r0, [pc, #48]	; (272b8 <_mainCRTStartup+0x70>)
   27286:	f3af 8000 	nop.w
   2728a:	f002 fb91 	bl	299b0 <__libc_init_array>
   2728e:	0020      	movs	r0, r4
   27290:	0029      	movs	r1, r5
   27292:	f002 f98b 	bl	295ac <main>
   27296:	f002 fb77 	bl	29988 <exit>
   2729a:	bf00      	nop
   2729c:	00080000 	.word	0x00080000
	...
   272a8:	20040000 	.word	0x20040000
   272ac:	20001978 	.word	0x20001978
   272b0:	20001bac 	.word	0x20001bac
	...

000272bc <Reset_Handler>:
 *      __bss_start__: VMA of end of the section to copy to. Normally __data_end__ is used, but by using __bss_start__
 *                    the user can add their own initialized data section before BSS section with the INTERT AFTER command.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__etext
   272bc:	4906      	ldr	r1, [pc, #24]	; (272d8 <Reset_Handler+0x1c>)
    ldr r2, =__data_start__
   272be:	4a07      	ldr	r2, [pc, #28]	; (272dc <Reset_Handler+0x20>)
    ldr r3, =__bss_start__
   272c0:	4b07      	ldr	r3, [pc, #28]	; (272e0 <Reset_Handler+0x24>)

    subs r3, r3, r2
   272c2:	1a9b      	subs	r3, r3, r2
    ble .L_loop1_done
   272c4:	dd03      	ble.n	272ce <Reset_Handler+0x12>

.L_loop1:
    subs r3, r3, #4
   272c6:	3b04      	subs	r3, #4
    ldr r0, [r1,r3]
   272c8:	58c8      	ldr	r0, [r1, r3]
    str r0, [r2,r3]
   272ca:	50d0      	str	r0, [r2, r3]
    bgt .L_loop1
   272cc:	dcfb      	bgt.n	272c6 <Reset_Handler+0xa>

.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */

/* Execute SystemInit function. */
    bl SystemInit
   272ce:	f000 fcf7 	bl	27cc0 <SystemInit>
 * If those libraries are not accessible, define __START as your entry point.
 */
#ifndef __START
#define __START _start
#endif
    bl __START
   272d2:	f7ff ffb9 	bl	27248 <_mainCRTStartup>
   272d6:	0000      	.short	0x0000
    ldr r1, =__etext
   272d8:	0002b564 	.word	0x0002b564
    ldr r2, =__data_start__
   272dc:	200018d8 	.word	0x200018d8
    ldr r3, =__bss_start__
   272e0:	20001978 	.word	0x20001978

000272e4 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    b       .
   272e4:	e7fe      	b.n	272e4 <NMI_Handler>

000272e6 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    b       .
   272e6:	e7fe      	b.n	272e6 <HardFault_Handler>

000272e8 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    b       .
   272e8:	e7fe      	b.n	272e8 <MemoryManagement_Handler>

000272ea <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    b       .
   272ea:	e7fe      	b.n	272ea <BusFault_Handler>

000272ec <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    b       .
   272ec:	e7fe      	b.n	272ec <UsageFault_Handler>

000272ee <SVC_Handler>:


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    b       .
   272ee:	e7fe      	b.n	272ee <SVC_Handler>

000272f0 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
   272f0:	e7fe      	b.n	272f0 <DebugMon_Handler>

000272f2 <PendSV_Handler>:


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    b       .
   272f2:	e7fe      	b.n	272f2 <PendSV_Handler>

000272f4 <SysTick_Handler>:


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    b       .
   272f4:	e7fe      	b.n	272f4 <SysTick_Handler>

000272f6 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
   272f6:	e7fe      	b.n	272f6 <Default_Handler>

000272f8 <app_error_handler_bare>:
 * @param[in] error_code  Error code supplied to the handler.
 * @param[in] line_num    Line number where the handler is called.
 * @param[in] p_file_name Pointer to the file name.
 */
void app_error_handler_bare(ret_code_t error_code)
{
   272f8:	b500      	push	{lr}
   272fa:	b085      	sub	sp, #20
   272fc:	4603      	mov	r3, r0
    error_info_t error_info =
   272fe:	2100      	movs	r1, #0
        .line_num    = 0,
        .p_file_name = NULL,
        .err_code    = error_code,
    };

    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   27300:	aa01      	add	r2, sp, #4
   27302:	f244 0001 	movw	r0, #16385	; 0x4001
    error_info_t error_info =
   27306:	e9cd 1101 	strd	r1, r1, [sp, #4]
   2730a:	9303      	str	r3, [sp, #12]
    app_error_fault_handler(NRF_FAULT_ID_SDK_ERROR, 0, (uint32_t)(&error_info));
   2730c:	f000 f804 	bl	27318 <app_error_fault_handler>

    UNUSED_VARIABLE(error_info);
}
   27310:	b005      	add	sp, #20
   27312:	f85d fb04 	ldr.w	pc, [sp], #4
   27316:	bf00      	nop

00027318 <app_error_fault_handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   27318:	b672      	cpsid	i
            NRF_LOG_ERROR("UNKNOWN FAULT at 0x%08X", pc);
            break;
    }
#endif

    NRF_BREAKPOINT_COND;
   2731a:	4b09      	ldr	r3, [pc, #36]	; (27340 <app_error_fault_handler+0x28>)
   2731c:	681b      	ldr	r3, [r3, #0]
   2731e:	07db      	lsls	r3, r3, #31
   27320:	d500      	bpl.n	27324 <app_error_fault_handler+0xc>
   27322:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27324:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27328:	4906      	ldr	r1, [pc, #24]	; (27344 <app_error_fault_handler+0x2c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2732a:	4b07      	ldr	r3, [pc, #28]	; (27348 <app_error_fault_handler+0x30>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2732c:	68ca      	ldr	r2, [r1, #12]
   2732e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27332:	4313      	orrs	r3, r2
   27334:	60cb      	str	r3, [r1, #12]
   27336:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   2733a:	bf00      	nop
   2733c:	e7fd      	b.n	2733a <app_error_fault_handler+0x22>
   2733e:	bf00      	nop
   27340:	e000edf0 	.word	0xe000edf0
   27344:	e000ed00 	.word	0xe000ed00
   27348:	05fa0004 	.word	0x05fa0004

0002734c <compare_func>:
    app_timer_t * p0 = CONTAINER_OF(p_item0, app_timer_t, list_item);
    app_timer_t * p1 = CONTAINER_OF(p_item1, app_timer_t, list_item);

    uint64_t p0_end = p0->end_val;
    uint64_t p1_end = p1->end_val;
    return (p0_end <= p1_end) ? true : false;
   2734c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   27350:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   27354:	4299      	cmp	r1, r3
   27356:	bf08      	it	eq
   27358:	4290      	cmpeq	r0, r2
}
   2735a:	bf2c      	ite	cs
   2735c:	2001      	movcs	r0, #1
   2735e:	2000      	movcc	r0, #0
   27360:	4770      	bx	lr
   27362:	bf00      	nop

00027364 <rtc_irq>:
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
    }
}

static void rtc_irq(drv_rtc_t const * const  p_instance)
{
   27364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27368:	ed2d 8b02 	vpush	{d8}
   2736c:	b085      	sub	sp, #20
   2736e:	4606      	mov	r6, r0
    if (drv_rtc_overflow_pending(p_instance))
   27370:	f000 fb42 	bl	279f8 <drv_rtc_overflow_pending>
   27374:	b140      	cbz	r0, 27388 <rtc_irq+0x24>
    m_base_counter += (DRV_RTC_MAX_CNT + 1);
   27376:	4ab5      	ldr	r2, [pc, #724]	; (2764c <rtc_irq+0x2e8>)
   27378:	e9d2 3100 	ldrd	r3, r1, [r2]
   2737c:	f113 7380 	adds.w	r3, r3, #16777216	; 0x1000000
   27380:	f141 0100 	adc.w	r1, r1, #0
   27384:	e9c2 3100 	strd	r3, r1, [r2]
    {
        on_overflow_evt();
    }
    if (drv_rtc_compare_pending(p_instance, 0))
   27388:	2100      	movs	r1, #0
   2738a:	4630      	mov	r0, r6
   2738c:	f000 fb50 	bl	27a30 <drv_rtc_compare_pending>
    if (mp_active_timer)
   27390:	4caf      	ldr	r4, [pc, #700]	; (27650 <rtc_irq+0x2ec>)
    if (drv_rtc_compare_pending(p_instance, 0))
   27392:	b160      	cbz	r0, 273ae <rtc_irq+0x4a>
    if (mp_active_timer)
   27394:	6823      	ldr	r3, [r4, #0]
   27396:	b153      	cbz	r3, 273ae <rtc_irq+0x4a>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   27398:	4bae      	ldr	r3, [pc, #696]	; (27654 <rtc_irq+0x2f0>)
        UNUSED_RETURN_VALUE(timer_expire(mp_active_timer));
   2739a:	6825      	ldr	r5, [r4, #0]
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   2739c:	781b      	ldrb	r3, [r3, #0]
   2739e:	b123      	cbz	r3, 273aa <rtc_irq+0x46>
   273a0:	b11d      	cbz	r5, 273aa <rtc_irq+0x46>
   273a2:	7f2b      	ldrb	r3, [r5, #28]
   273a4:	2b00      	cmp	r3, #0
   273a6:	f040 811c 	bne.w	275e2 <rtc_irq+0x27e>
        mp_active_timer = NULL;
   273aa:	2300      	movs	r3, #0
   273ac:	6023      	str	r3, [r4, #0]
    {
        on_compare_evt(p_instance);
    }
    if (drv_rtc_compare_pending(p_instance, 1))
   273ae:	2101      	movs	r1, #1
   273b0:	4630      	mov	r0, r6
   273b2:	f000 fb3d 	bl	27a30 <drv_rtc_compare_pending>
   273b6:	2800      	cmp	r0, #0
   273b8:	f040 80f6 	bne.w	275a8 <rtc_irq+0x244>
    timer_req_t *         p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   273bc:	48a6      	ldr	r0, [pc, #664]	; (27658 <rtc_irq+0x2f4>)
   273be:	a903      	add	r1, sp, #12
   273c0:	f000 fbba 	bl	27b38 <nrf_atfifo_item_get>
    while (p_req)
   273c4:	b378      	cbz	r0, 27426 <rtc_irq+0xc2>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   273c6:	4da5      	ldr	r5, [pc, #660]	; (2765c <rtc_irq+0x2f8>)
                m_global_active = true;
   273c8:	f8df 8288 	ldr.w	r8, [pc, #648]	; 27654 <rtc_irq+0x2f0>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   273cc:	4fa2      	ldr	r7, [pc, #648]	; (27658 <rtc_irq+0x2f4>)
   273ce:	e00b      	b.n	273e8 <rtc_irq+0x84>
        switch (p_req->type)
   273d0:	2b00      	cmp	r3, #0
   273d2:	f000 80cd 	beq.w	27570 <rtc_irq+0x20c>
        UNUSED_RETURN_VALUE(nrf_atfifo_item_free(m_req_fifo, &fifo_ctx));
   273d6:	a903      	add	r1, sp, #12
   273d8:	4638      	mov	r0, r7
   273da:	f000 fbdd 	bl	27b98 <nrf_atfifo_item_free>
        p_req = nrf_atfifo_item_get(m_req_fifo, &fifo_ctx);
   273de:	a903      	add	r1, sp, #12
   273e0:	4638      	mov	r0, r7
   273e2:	f000 fba9 	bl	27b38 <nrf_atfifo_item_get>
    while (p_req)
   273e6:	b1f0      	cbz	r0, 27426 <rtc_irq+0xc2>
        switch (p_req->type)
   273e8:	7803      	ldrb	r3, [r0, #0]
   273ea:	2b01      	cmp	r3, #1
   273ec:	d012      	beq.n	27414 <rtc_irq+0xb0>
   273ee:	2b02      	cmp	r3, #2
   273f0:	d1ee      	bne.n	273d0 <rtc_irq+0x6c>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   273f2:	4628      	mov	r0, r5
            p_next->active = false;
   273f4:	f04f 0900 	mov.w	r9, #0
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   273f8:	f000 fc4a 	bl	27c90 <nrf_sortlist_pop>
        if (p_next)
   273fc:	b130      	cbz	r0, 2740c <rtc_irq+0xa8>
            p_next->active = false;
   273fe:	f880 901c 	strb.w	r9, [r0, #28]
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   27402:	4628      	mov	r0, r5
   27404:	f000 fc44 	bl	27c90 <nrf_sortlist_pop>
        if (p_next)
   27408:	2800      	cmp	r0, #0
   2740a:	d1f8      	bne.n	273fe <rtc_irq+0x9a>
                m_global_active = true;
   2740c:	2301      	movs	r3, #1
   2740e:	f888 3000 	strb.w	r3, [r8]
                break;
   27412:	e7e0      	b.n	273d6 <rtc_irq+0x72>
                if (p_req->p_timer == mp_active_timer)
   27414:	6841      	ldr	r1, [r0, #4]
   27416:	6823      	ldr	r3, [r4, #0]
   27418:	4299      	cmp	r1, r3
   2741a:	f000 80ba 	beq.w	27592 <rtc_irq+0x22e>
                    bool found = nrf_sortlist_remove(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   2741e:	4628      	mov	r0, r5
   27420:	f000 fc40 	bl	27ca4 <nrf_sortlist_remove>
                    if (!found)
   27424:	e7d7      	b.n	273d6 <rtc_irq+0x72>
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   27426:	f8df 8234 	ldr.w	r8, [pc, #564]	; 2765c <rtc_irq+0x2f8>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   2742a:	4f8d      	ldr	r7, [pc, #564]	; (27660 <rtc_irq+0x2fc>)
   2742c:	f8df 921c 	ldr.w	r9, [pc, #540]	; 2764c <rtc_irq+0x2e8>
   27430:	ee08 6a10 	vmov	s16, r6
}
   27434:	e037      	b.n	274a6 <rtc_irq+0x142>
    nrf_sortlist_item_t * p_next_item = nrf_sortlist_pop(&m_app_timer_sortlist);
   27436:	4640      	mov	r0, r8
   27438:	f000 fc2a 	bl	27c90 <nrf_sortlist_pop>
   2743c:	4605      	mov	r5, r0
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   2743e:	4638      	mov	r0, r7
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   27440:	68ab      	ldr	r3, [r5, #8]
   27442:	68ea      	ldr	r2, [r5, #12]
   27444:	9301      	str	r3, [sp, #4]
   27446:	9200      	str	r2, [sp, #0]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27448:	f000 fb02 	bl	27a50 <drv_rtc_counter_get>
    if (now < m_stamp64) {
   2744c:	4e85      	ldr	r6, [pc, #532]	; (27664 <rtc_irq+0x300>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   2744e:	4684      	mov	ip, r0
   27450:	e9d9 0100 	ldrd	r0, r1, [r9]
    if (now < m_stamp64) {
   27454:	e9d6 2300 	ldrd	r2, r3, [r6]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27458:	eb10 000c 	adds.w	r0, r0, ip
   2745c:	f141 0100 	adc.w	r1, r1, #0
    if (now < m_stamp64) {
   27460:	4299      	cmp	r1, r3
   27462:	bf08      	it	eq
   27464:	4290      	cmpeq	r0, r2
   27466:	e9dd 2300 	ldrd	r2, r3, [sp]
   2746a:	d203      	bcs.n	27474 <rtc_irq+0x110>
        now += (DRV_RTC_MAX_CNT + 1);
   2746c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   27470:	f141 0100 	adc.w	r1, r1, #0
    int64_t remaining = (int64_t)(p_timer->end_val - get_now());
   27474:	ebb3 0a00 	subs.w	sl, r3, r0
   27478:	eb62 0b01 	sbc.w	fp, r2, r1
    if (remaining > 0) {
   2747c:	f1ba 0f01 	cmp.w	sl, #1
   27480:	f17b 0300 	sbcs.w	r3, fp, #0
   27484:	db29      	blt.n	274da <rtc_irq+0x176>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   27486:	f5ba 0f35 	cmp.w	sl, #11862016	; 0xb50000
   2748a:	d26b      	bcs.n	27564 <rtc_irq+0x200>
   2748c:	68aa      	ldr	r2, [r5, #8]
        ret = drv_rtc_windowed_compare_set(&m_rtc_inst, 0, cc_val, APP_TIMER_SAFE_WINDOW);
   2748e:	f44f 0396 	mov.w	r3, #4915200	; 0x4b0000
   27492:	2100      	movs	r1, #0
   27494:	4638      	mov	r0, r7
   27496:	f000 fa29 	bl	278ec <drv_rtc_windowed_compare_set>
        if (ret == NRF_SUCCESS)
   2749a:	2800      	cmp	r0, #0
   2749c:	d05a      	beq.n	27554 <rtc_irq+0x1f0>
    if (ret == NRF_ERROR_TIMEOUT)
   2749e:	280d      	cmp	r0, #13
   274a0:	d01f      	beq.n	274e2 <rtc_irq+0x17e>
                    mp_active_timer = NULL;
   274a2:	2300      	movs	r3, #0
   274a4:	6023      	str	r3, [r4, #0]
    nrf_sortlist_item_t const * p_next_item = nrf_sortlist_peek(&m_app_timer_sortlist);
   274a6:	4640      	mov	r0, r8
   274a8:	f000 fbf8 	bl	27c9c <nrf_sortlist_peek>
        if (p_next) //Candidate for active timer
   274ac:	2800      	cmp	r0, #0
   274ae:	d073      	beq.n	27598 <rtc_irq+0x234>
            if (mp_active_timer == NULL)
   274b0:	6823      	ldr	r3, [r4, #0]
   274b2:	2b00      	cmp	r3, #0
   274b4:	d0bf      	beq.n	27436 <rtc_irq+0xd2>
            else if (p_next->end_val < mp_active_timer->end_val)
   274b6:	6823      	ldr	r3, [r4, #0]
   274b8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   274bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   274c0:	4299      	cmp	r1, r3
   274c2:	bf08      	it	eq
   274c4:	4290      	cmpeq	r0, r2
   274c6:	d248      	bcs.n	2755a <rtc_irq+0x1f6>
                if (mp_active_timer->active)
   274c8:	6823      	ldr	r3, [r4, #0]
   274ca:	7f1b      	ldrb	r3, [r3, #28]
   274cc:	2b00      	cmp	r3, #0
   274ce:	d0b2      	beq.n	27436 <rtc_irq+0xd2>
                    nrf_sortlist_add(&m_app_timer_sortlist, &mp_active_timer->list_item);
   274d0:	6821      	ldr	r1, [r4, #0]
   274d2:	4640      	mov	r0, r8
   274d4:	f000 fbc8 	bl	27c68 <nrf_sortlist_add>
            if (rtc_reconf)
   274d8:	e7ad      	b.n	27436 <rtc_irq+0xd2>
        drv_rtc_compare_disable(&m_rtc_inst, 0);
   274da:	2100      	movs	r1, #0
   274dc:	4638      	mov	r0, r7
   274de:	f000 fa9b 	bl	27a18 <drv_rtc_compare_disable>
    if ((m_global_active == true) && (p_timer != NULL) && (p_timer->active))
   274e2:	4b5c      	ldr	r3, [pc, #368]	; (27654 <rtc_irq+0x2f0>)
   274e4:	781b      	ldrb	r3, [r3, #0]
   274e6:	2b00      	cmp	r3, #0
   274e8:	d0db      	beq.n	274a2 <rtc_irq+0x13e>
   274ea:	7f2b      	ldrb	r3, [r5, #28]
   274ec:	2b00      	cmp	r3, #0
   274ee:	d0d8      	beq.n	274a2 <rtc_irq+0x13e>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   274f0:	4638      	mov	r0, r7
   274f2:	f000 faad 	bl	27a50 <drv_rtc_counter_get>
   274f6:	4684      	mov	ip, r0
   274f8:	e9d9 0100 	ldrd	r0, r1, [r9]
    if (now < m_stamp64) {
   274fc:	e9d6 2300 	ldrd	r2, r3, [r6]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27500:	eb10 000c 	adds.w	r0, r0, ip
   27504:	f141 0100 	adc.w	r1, r1, #0
    if (now < m_stamp64) {
   27508:	4299      	cmp	r1, r3
   2750a:	bf08      	it	eq
   2750c:	4290      	cmpeq	r0, r2
   2750e:	d203      	bcs.n	27518 <rtc_irq+0x1b4>
        now += (DRV_RTC_MAX_CNT + 1);
   27510:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   27514:	f141 0100 	adc.w	r1, r1, #0
        if (get_now() >= p_timer->end_val) {
   27518:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2751c:	4299      	cmp	r1, r3
   2751e:	bf08      	it	eq
   27520:	4290      	cmpeq	r0, r2
   27522:	d359      	bcc.n	275d8 <rtc_irq+0x274>
            if (p_timer->repeat_period == 0)
   27524:	692b      	ldr	r3, [r5, #16]
   27526:	b903      	cbnz	r3, 2752a <rtc_irq+0x1c6>
                p_timer->active = false;
   27528:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   2752a:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   2752e:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   27530:	6929      	ldr	r1, [r5, #16]
   27532:	2900      	cmp	r1, #0
   27534:	d0b5      	beq.n	274a2 <rtc_irq+0x13e>
   27536:	7f2b      	ldrb	r3, [r5, #28]
   27538:	2b00      	cmp	r3, #0
   2753a:	d0b2      	beq.n	274a2 <rtc_irq+0x13e>
                p_timer->end_val += p_timer->repeat_period;
   2753c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   27540:	1852      	adds	r2, r2, r1
   27542:	f143 0300 	adc.w	r3, r3, #0
   27546:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   2754a:	4629      	mov	r1, r5
   2754c:	4640      	mov	r0, r8
   2754e:	f000 fb8b 	bl	27c68 <nrf_sortlist_add>
                ret = true;
   27552:	e7a6      	b.n	274a2 <rtc_irq+0x13e>
                    if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   27554:	6823      	ldr	r3, [r4, #0]
   27556:	b1bb      	cbz	r3, 27588 <rtc_irq+0x224>
                    mp_active_timer = p_next;
   27558:	6025      	str	r5, [r4, #0]
        on_compare1_evt(p_instance);
    }

    timer_req_process(p_instance);
    rtc_update(p_instance);
}
   2755a:	b005      	add	sp, #20
   2755c:	ecbd 8b02 	vpop	{d8}
   27560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((ticks_to - ticks_from) & RTC_COUNTER_COUNTER_Msk);
}

uint32_t app_timer_cnt_get(void)
{
    return drv_rtc_counter_get(&m_rtc_inst);
   27564:	4638      	mov	r0, r7
   27566:	f000 fa73 	bl	27a50 <drv_rtc_counter_get>
        uint32_t cc_val = ((uint32_t)remaining > APP_TIMER_RTC_MAX_VALUE) ?
   2756a:	4a3f      	ldr	r2, [pc, #252]	; (27668 <rtc_irq+0x304>)
   2756c:	4402      	add	r2, r0
   2756e:	e78e      	b.n	2748e <rtc_irq+0x12a>
                if (!p_req->p_timer->active)
   27570:	6843      	ldr	r3, [r0, #4]
   27572:	7f1a      	ldrb	r2, [r3, #28]
   27574:	2a00      	cmp	r2, #0
   27576:	f47f af2e 	bne.w	273d6 <rtc_irq+0x72>
                    p_req->p_timer->active = true;
   2757a:	2201      	movs	r2, #1
   2757c:	771a      	strb	r2, [r3, #28]
                    nrf_sortlist_add(&m_app_timer_sortlist, &(p_req->p_timer->list_item));
   2757e:	6841      	ldr	r1, [r0, #4]
   27580:	4628      	mov	r0, r5
   27582:	f000 fb71 	bl	27c68 <nrf_sortlist_add>
                    NRF_LOG_INST_DEBUG(p_req->p_timer->p_log,"Start request (expiring at %d/0x%08x).",
   27586:	e726      	b.n	273d6 <rtc_irq+0x72>
                        drv_rtc_start(p_instance);
   27588:	ee18 0a10 	vmov	r0, s16
   2758c:	f000 f980 	bl	27890 <drv_rtc_start>
   27590:	e7e2      	b.n	27558 <rtc_irq+0x1f4>
                    mp_active_timer = NULL;
   27592:	2300      	movs	r3, #0
   27594:	6023      	str	r3, [r4, #0]
   27596:	e71e      	b.n	273d6 <rtc_irq+0x72>
            if (!APP_TIMER_KEEPS_RTC_ACTIVE && (mp_active_timer == NULL))
   27598:	6823      	ldr	r3, [r4, #0]
   2759a:	2b00      	cmp	r3, #0
   2759c:	d1dd      	bne.n	2755a <rtc_irq+0x1f6>
                drv_rtc_stop(p_instance);
   2759e:	ee18 0a10 	vmov	r0, s16
   275a2:	f000 f979 	bl	27898 <drv_rtc_stop>
}
   275a6:	e7d8      	b.n	2755a <rtc_irq+0x1f6>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275a8:	482d      	ldr	r0, [pc, #180]	; (27660 <rtc_irq+0x2fc>)
    if (now < m_stamp64) {
   275aa:	4d2e      	ldr	r5, [pc, #184]	; (27664 <rtc_irq+0x300>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275ac:	f000 fa50 	bl	27a50 <drv_rtc_counter_get>
   275b0:	4b26      	ldr	r3, [pc, #152]	; (2764c <rtc_irq+0x2e8>)
   275b2:	e9d3 8900 	ldrd	r8, r9, [r3]
    if (now < m_stamp64) {
   275b6:	e9d5 2300 	ldrd	r2, r3, [r5]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275ba:	eb18 0800 	adds.w	r8, r8, r0
   275be:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   275c2:	4599      	cmp	r9, r3
   275c4:	bf08      	it	eq
   275c6:	4590      	cmpeq	r8, r2
   275c8:	d203      	bcs.n	275d2 <rtc_irq+0x26e>
        now += (DRV_RTC_MAX_CNT + 1);
   275ca:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   275ce:	f149 0900 	adc.w	r9, r9, #0
    m_stamp64 = get_now();
   275d2:	e9c5 8900 	strd	r8, r9, [r5]
}
   275d6:	e6f1      	b.n	273bc <rtc_irq+0x58>
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   275d8:	4629      	mov	r1, r5
   275da:	4640      	mov	r0, r8
   275dc:	f000 fb44 	bl	27c68 <nrf_sortlist_add>
            ret = true;
   275e0:	e75f      	b.n	274a2 <rtc_irq+0x13e>
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275e2:	481f      	ldr	r0, [pc, #124]	; (27660 <rtc_irq+0x2fc>)
   275e4:	f000 fa34 	bl	27a50 <drv_rtc_counter_get>
   275e8:	4a18      	ldr	r2, [pc, #96]	; (2764c <rtc_irq+0x2e8>)
    if (now < m_stamp64) {
   275ea:	4b1e      	ldr	r3, [pc, #120]	; (27664 <rtc_irq+0x300>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275ec:	e9d2 8900 	ldrd	r8, r9, [r2]
    if (now < m_stamp64) {
   275f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   275f4:	eb18 0800 	adds.w	r8, r8, r0
   275f8:	f149 0900 	adc.w	r9, r9, #0
    if (now < m_stamp64) {
   275fc:	4599      	cmp	r9, r3
   275fe:	bf08      	it	eq
   27600:	4590      	cmpeq	r8, r2
   27602:	d203      	bcs.n	2760c <rtc_irq+0x2a8>
        now += (DRV_RTC_MAX_CNT + 1);
   27604:	f118 7880 	adds.w	r8, r8, #16777216	; 0x1000000
   27608:	f149 0900 	adc.w	r9, r9, #0
        if (get_now() >= p_timer->end_val) {
   2760c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   27610:	4599      	cmp	r9, r3
   27612:	bf08      	it	eq
   27614:	4590      	cmpeq	r8, r2
   27616:	d329      	bcc.n	2766c <rtc_irq+0x308>
            if (p_timer->repeat_period == 0)
   27618:	692b      	ldr	r3, [r5, #16]
   2761a:	b903      	cbnz	r3, 2761e <rtc_irq+0x2ba>
                p_timer->active = false;
   2761c:	772b      	strb	r3, [r5, #28]
            p_timer->handler(p_timer->p_context);
   2761e:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   27622:	4798      	blx	r3
            if ((p_timer->repeat_period) && (p_timer->active))
   27624:	6929      	ldr	r1, [r5, #16]
   27626:	2900      	cmp	r1, #0
   27628:	f43f aebf 	beq.w	273aa <rtc_irq+0x46>
   2762c:	7f2b      	ldrb	r3, [r5, #28]
   2762e:	2b00      	cmp	r3, #0
   27630:	f43f aebb 	beq.w	273aa <rtc_irq+0x46>
                p_timer->end_val += p_timer->repeat_period;
   27634:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   27638:	1852      	adds	r2, r2, r1
   2763a:	f143 0300 	adc.w	r3, r3, #0
   2763e:	e9c5 2302 	strd	r2, r3, [r5, #8]
                nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   27642:	4806      	ldr	r0, [pc, #24]	; (2765c <rtc_irq+0x2f8>)
   27644:	4629      	mov	r1, r5
   27646:	f000 fb0f 	bl	27c68 <nrf_sortlist_add>
                ret = true;
   2764a:	e6ae      	b.n	273aa <rtc_irq+0x46>
   2764c:	20001998 	.word	0x20001998
   27650:	20001a18 	.word	0x20001a18
   27654:	200019a0 	.word	0x200019a0
   27658:	200019fc 	.word	0x200019fc
   2765c:	0002b318 	.word	0x0002b318
   27660:	200018d8 	.word	0x200018d8
   27664:	20001a10 	.word	0x20001a10
   27668:	00b4ffff 	.word	0x00b4ffff
            nrf_sortlist_add(&m_app_timer_sortlist, &p_timer->list_item);
   2766c:	4802      	ldr	r0, [pc, #8]	; (27678 <rtc_irq+0x314>)
   2766e:	4629      	mov	r1, r5
   27670:	f000 fafa 	bl	27c68 <nrf_sortlist_add>
            ret = true;
   27674:	e699      	b.n	273aa <rtc_irq+0x46>
   27676:	bf00      	nop
   27678:	0002b318 	.word	0x0002b318

0002767c <app_timer_init>:
{
   2767c:	b510      	push	{r4, lr}
    drv_rtc_config_t config = {
   2767e:	4b13      	ldr	r3, [pc, #76]	; (276cc <app_timer_init+0x50>)
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   27680:	4913      	ldr	r1, [pc, #76]	; (276d0 <app_timer_init+0x54>)
    drv_rtc_config_t config = {
   27682:	681b      	ldr	r3, [r3, #0]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   27684:	4813      	ldr	r0, [pc, #76]	; (276d4 <app_timer_init+0x58>)
{
   27686:	b082      	sub	sp, #8
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   27688:	2258      	movs	r2, #88	; 0x58
    drv_rtc_config_t config = {
   2768a:	9301      	str	r3, [sp, #4]
    err_code = NRF_ATFIFO_INIT(m_req_fifo);
   2768c:	2308      	movs	r3, #8
   2768e:	f000 f9fd 	bl	27a8c <nrf_atfifo_init>
    if (err_code != NRFX_SUCCESS)
   27692:	4604      	mov	r4, r0
   27694:	b110      	cbz	r0, 2769c <app_timer_init+0x20>
}
   27696:	4620      	mov	r0, r4
   27698:	b002      	add	sp, #8
   2769a:	bd10      	pop	{r4, pc}
    err_code = drv_rtc_init(&m_rtc_inst, &config, rtc_irq);
   2769c:	4a0e      	ldr	r2, [pc, #56]	; (276d8 <app_timer_init+0x5c>)
   2769e:	480f      	ldr	r0, [pc, #60]	; (276dc <app_timer_init+0x60>)
   276a0:	a901      	add	r1, sp, #4
   276a2:	f000 f8b3 	bl	2780c <drv_rtc_init>
    if (err_code != NRFX_SUCCESS)
   276a6:	4604      	mov	r4, r0
   276a8:	2800      	cmp	r0, #0
   276aa:	d1f4      	bne.n	27696 <app_timer_init+0x1a>
    drv_rtc_overflow_enable(&m_rtc_inst, true);
   276ac:	480b      	ldr	r0, [pc, #44]	; (276dc <app_timer_init+0x60>)
   276ae:	2101      	movs	r1, #1
   276b0:	f000 f998 	bl	279e4 <drv_rtc_overflow_enable>
    drv_rtc_compare_set(&m_rtc_inst, 1, DRV_RTC_MAX_CNT >> 1, true);
   276b4:	2301      	movs	r3, #1
   276b6:	4619      	mov	r1, r3
   276b8:	4a09      	ldr	r2, [pc, #36]	; (276e0 <app_timer_init+0x64>)
   276ba:	4808      	ldr	r0, [pc, #32]	; (276dc <app_timer_init+0x60>)
   276bc:	f000 f8f0 	bl	278a0 <drv_rtc_compare_set>
    m_global_active = true;
   276c0:	4b08      	ldr	r3, [pc, #32]	; (276e4 <app_timer_init+0x68>)
   276c2:	2201      	movs	r2, #1
}
   276c4:	4620      	mov	r0, r4
    m_global_active = true;
   276c6:	701a      	strb	r2, [r3, #0]
}
   276c8:	b002      	add	sp, #8
   276ca:	bd10      	pop	{r4, pc}
   276cc:	0002b314 	.word	0x0002b314
   276d0:	200019a4 	.word	0x200019a4
   276d4:	200019fc 	.word	0x200019fc
   276d8:	00027365 	.word	0x00027365
   276dc:	200018d8 	.word	0x200018d8
   276e0:	007fffff 	.word	0x007fffff
   276e4:	200019a0 	.word	0x200019a0

000276e8 <app_timer_create>:
    if (timeout_handler == NULL)
   276e8:	b14a      	cbz	r2, 276fe <app_timer_create+0x16>
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   276ea:	f1a1 0101 	sub.w	r1, r1, #1
    app_timer_t * p_t = (app_timer_t *) *p_timer_id;
   276ee:	6803      	ldr	r3, [r0, #0]
    p_t->repeat_period = (mode == APP_TIMER_MODE_REPEATED) ? 1 : 0;
   276f0:	fab1 f181 	clz	r1, r1
   276f4:	0949      	lsrs	r1, r1, #5
   276f6:	e9c3 1204 	strd	r1, r2, [r3, #16]
    return NRF_SUCCESS;
   276fa:	2000      	movs	r0, #0
   276fc:	4770      	bx	lr
        return NRF_ERROR_INVALID_PARAM;
   276fe:	2007      	movs	r0, #7
}
   27700:	4770      	bx	lr
   27702:	bf00      	nop

00027704 <app_timer_start>:
    if (p_t->active)
   27704:	7f03      	ldrb	r3, [r0, #28]
   27706:	b10b      	cbz	r3, 2770c <app_timer_start+0x8>
        return NRF_SUCCESS;
   27708:	2000      	movs	r0, #0
}
   2770a:	4770      	bx	lr
{
   2770c:	b5f0      	push	{r4, r5, r6, r7, lr}
    p_t->p_context = p_context;
   2770e:	6182      	str	r2, [r0, #24]
{
   27710:	b083      	sub	sp, #12
   27712:	4604      	mov	r4, r0
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27714:	481a      	ldr	r0, [pc, #104]	; (27780 <app_timer_start+0x7c>)
   27716:	460d      	mov	r5, r1
   27718:	f000 f99a 	bl	27a50 <drv_rtc_counter_get>
   2771c:	4b19      	ldr	r3, [pc, #100]	; (27784 <app_timer_start+0x80>)
    if (now < m_stamp64) {
   2771e:	491a      	ldr	r1, [pc, #104]	; (27788 <app_timer_start+0x84>)
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27720:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (now < m_stamp64) {
   27724:	e9d1 6700 	ldrd	r6, r7, [r1]
    uint64_t now = m_base_counter + drv_rtc_counter_get(&m_rtc_inst);
   27728:	1812      	adds	r2, r2, r0
   2772a:	f143 0300 	adc.w	r3, r3, #0
    if (now < m_stamp64) {
   2772e:	42bb      	cmp	r3, r7
   27730:	bf08      	it	eq
   27732:	42b2      	cmpeq	r2, r6
   27734:	d203      	bcs.n	2773e <app_timer_start+0x3a>
        now += (DRV_RTC_MAX_CNT + 1);
   27736:	f112 7280 	adds.w	r2, r2, #16777216	; 0x1000000
   2773a:	f143 0300 	adc.w	r3, r3, #0
    p_t->end_val = get_now() + timeout_ticks;
   2773e:	1952      	adds	r2, r2, r5
    if (p_t->repeat_period)
   27740:	6921      	ldr	r1, [r4, #16]
    p_t->end_val = get_now() + timeout_ticks;
   27742:	f143 0300 	adc.w	r3, r3, #0
   27746:	e9c4 2302 	strd	r2, r3, [r4, #8]
    if (p_t->repeat_period)
   2774a:	b101      	cbz	r1, 2774e <app_timer_start+0x4a>
        p_t->repeat_period = timeout_ticks;
   2774c:	6125      	str	r5, [r4, #16]
    p_req = nrf_atfifo_item_alloc(m_req_fifo, &fifo_ctx);
   2774e:	480f      	ldr	r0, [pc, #60]	; (2778c <app_timer_start+0x88>)
   27750:	a901      	add	r1, sp, #4
   27752:	f000 f9b3 	bl	27abc <nrf_atfifo_item_alloc>
    if (p_req)
   27756:	b148      	cbz	r0, 2776c <app_timer_start+0x68>
        p_req->type    = type;
   27758:	2500      	movs	r5, #0
        p_req->p_timer = p_timer;
   2775a:	6044      	str	r4, [r0, #4]
        p_req->type    = type;
   2775c:	7005      	strb	r5, [r0, #0]
        if (nrf_atfifo_item_put(m_req_fifo, &fifo_ctx))
   2775e:	a901      	add	r1, sp, #4
   27760:	480a      	ldr	r0, [pc, #40]	; (2778c <app_timer_start+0x88>)
   27762:	f000 f9d9 	bl	27b18 <nrf_atfifo_item_put>
   27766:	b920      	cbnz	r0, 27772 <app_timer_start+0x6e>
}
   27768:	b003      	add	sp, #12
   2776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRF_ERROR_NO_MEM;
   2776c:	2004      	movs	r0, #4
}
   2776e:	b003      	add	sp, #12
   27770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drv_rtc_irq_trigger(&m_rtc_inst);
   27772:	4803      	ldr	r0, [pc, #12]	; (27780 <app_timer_start+0x7c>)
   27774:	f000 f970 	bl	27a58 <drv_rtc_irq_trigger>
        return NRF_SUCCESS;
   27778:	4628      	mov	r0, r5
}
   2777a:	b003      	add	sp, #12
   2777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2777e:	bf00      	nop
   27780:	200018d8 	.word	0x200018d8
   27784:	20001998 	.word	0x20001998
   27788:	20001a10 	.word	0x20001a10
   2778c:	200019fc 	.word	0x200019fc

00027790 <app_util_critical_region_enter>:
        __enable_irq();
    }
}

void app_util_critical_region_enter(uint8_t *p_nested)
{
   27790:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   27792:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   27796:	b672      	cpsid	i
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)
{
  int was_masked = __sd_nvic_irq_disable();
  if (!nrf_nvic_state.__cr_flag)
   27798:	4b0d      	ldr	r3, [pc, #52]	; (277d0 <app_util_critical_region_enter+0x40>)
   2779a:	689a      	ldr	r2, [r3, #8]
   2779c:	b9aa      	cbnz	r2, 277ca <app_util_critical_region_enter+0x3a>
  {
    nrf_nvic_state.__cr_flag = 1;
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   2779e:	490d      	ldr	r1, [pc, #52]	; (277d4 <app_util_critical_region_enter+0x44>)
   277a0:	4e0d      	ldr	r6, [pc, #52]	; (277d8 <app_util_critical_region_enter+0x48>)
    nrf_nvic_state.__cr_flag = 1;
   277a2:	2501      	movs	r5, #1
   277a4:	609d      	str	r5, [r3, #8]
    nrf_nvic_state.__irq_masks[0] = ( NVIC->ICER[0] & __NRF_NVIC_APP_IRQS_0 );
   277a6:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
   277aa:	4035      	ands	r5, r6
   277ac:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0] = __NRF_NVIC_APP_IRQS_0;
   277ae:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
    nrf_nvic_state.__irq_masks[1] = ( NVIC->ICER[1] & __NRF_NVIC_APP_IRQS_1 );
   277b2:	f8d1 5084 	ldr.w	r5, [r1, #132]	; 0x84
   277b6:	605d      	str	r5, [r3, #4]
    NVIC->ICER[1] = __NRF_NVIC_APP_IRQS_1;
   277b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   277bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    *p_is_nested_critical_region = 0;
   277c0:	7002      	strb	r2, [r0, #0]
  }
  else
  {
    *p_is_nested_critical_region = 1;
  }
  if (!was_masked)
   277c2:	b904      	cbnz	r4, 277c6 <app_util_critical_region_enter+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   277c4:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_enter(p_nested);
#else
    app_util_disable_irq();
#endif
}
   277c6:	bc70      	pop	{r4, r5, r6}
   277c8:	4770      	bx	lr
    *p_is_nested_critical_region = 1;
   277ca:	2301      	movs	r3, #1
   277cc:	7003      	strb	r3, [r0, #0]
   277ce:	e7f8      	b.n	277c2 <app_util_critical_region_enter+0x32>
   277d0:	20001b90 	.word	0x20001b90
   277d4:	e000e100 	.word	0xe000e100
   277d8:	bdff06fc 	.word	0xbdff06fc

000277dc <app_util_critical_region_exit>:
  return NRF_SUCCESS;
}

__STATIC_INLINE uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)
{
  if (nrf_nvic_state.__cr_flag && (is_nested_critical_region == 0))
   277dc:	4b09      	ldr	r3, [pc, #36]	; (27804 <app_util_critical_region_exit+0x28>)
   277de:	689a      	ldr	r2, [r3, #8]
   277e0:	b17a      	cbz	r2, 27802 <app_util_critical_region_exit+0x26>
   277e2:	b970      	cbnz	r0, 27802 <app_util_critical_region_exit+0x26>

void app_util_critical_region_exit(uint8_t nested)
{
   277e4:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   277e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   277ea:	b672      	cpsid	i
  {
    int was_masked = __sd_nvic_irq_disable();
    NVIC->ISER[0] = nrf_nvic_state.__irq_masks[0];
   277ec:	4a06      	ldr	r2, [pc, #24]	; (27808 <app_util_critical_region_exit+0x2c>)
   277ee:	681c      	ldr	r4, [r3, #0]
   277f0:	6014      	str	r4, [r2, #0]
    NVIC->ISER[1] = nrf_nvic_state.__irq_masks[1];
   277f2:	685c      	ldr	r4, [r3, #4]
   277f4:	6054      	str	r4, [r2, #4]
    nrf_nvic_state.__cr_flag = 0;
   277f6:	6098      	str	r0, [r3, #8]
    if (!was_masked)
   277f8:	b901      	cbnz	r1, 277fc <app_util_critical_region_exit+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
   277fa:	b662      	cpsie	i
    /* return value can be safely ignored */
    (void) sd_nvic_critical_region_exit(nested);
#else
    app_util_enable_irq();
#endif
}
   277fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   27800:	4770      	bx	lr
   27802:	4770      	bx	lr
   27804:	20001b90 	.word	0x20001b90
   27808:	e000e100 	.word	0xe000e100

0002780c <drv_rtc_init>:
#define COUNTER_TO_CC_MIN_DISTANCE 2

ret_code_t drv_rtc_init(drv_rtc_t const * const  p_instance,
                        drv_rtc_config_t const * p_config,
                        drv_rtc_handler_t        handler)
{
   2780c:	b470      	push	{r4, r5, r6}

    ret_code_t err_code;

    m_handlers[p_instance->instance_id] = handler;

    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   2780e:	4c1c      	ldr	r4, [pc, #112]	; (27880 <drv_rtc_init+0x74>)
    m_handlers[p_instance->instance_id] = handler;
   27810:	7943      	ldrb	r3, [r0, #5]
   27812:	4e1c      	ldr	r6, [pc, #112]	; (27884 <drv_rtc_init+0x78>)
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   27814:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
    m_handlers[p_instance->instance_id] = handler;
   27818:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    if (m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED)
   2781c:	792d      	ldrb	r5, [r5, #4]
   2781e:	bb65      	cbnz	r5, 2787a <drv_rtc_init+0x6e>
        err_code = NRF_ERROR_INVALID_STATE;
        NRF_LOG_WARNING("RTC instance already initialized.");
        return err_code;
    }

    nrf_rtc_prescaler_set(p_instance->p_reg, p_config->prescaler);
   27820:	6803      	ldr	r3, [r0, #0]
   27822:	880a      	ldrh	r2, [r1, #0]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   27824:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRFX_IRQ_PRIORITY_SET(p_instance->irq, p_config->interrupt_priority);
   27828:	f990 3004 	ldrsb.w	r3, [r0, #4]
   2782c:	788a      	ldrb	r2, [r1, #2]
  if ((int32_t)(IRQn) < 0)
   2782e:	2b00      	cmp	r3, #0
   27830:	db1b      	blt.n	2786a <drv_rtc_init+0x5e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27832:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27836:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   2783a:	0152      	lsls	r2, r2, #5
   2783c:	b2d2      	uxtb	r2, r2
   2783e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NRFX_IRQ_ENABLE(p_instance->irq);
   27842:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27846:	4d10      	ldr	r5, [pc, #64]	; (27888 <drv_rtc_init+0x7c>)
   27848:	f003 021f 	and.w	r2, r3, #31
   2784c:	2101      	movs	r1, #1
   2784e:	095b      	lsrs	r3, r3, #5
   27850:	fa01 f202 	lsl.w	r2, r1, r2
   27854:	f845 2023 	str.w	r2, [r5, r3, lsl #2]

    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   27858:	7943      	ldrb	r3, [r0, #5]
   2785a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    m_cb[p_instance->instance_id].p_instance = p_instance;
   2785e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   27862:	7111      	strb	r1, [r2, #4]

    err_code = NRF_SUCCESS;
    NRF_LOG_INFO("RTC: initialized.");
    return err_code;
   27864:	2000      	movs	r0, #0
}
   27866:	bc70      	pop	{r4, r5, r6}
   27868:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2786a:	4908      	ldr	r1, [pc, #32]	; (2788c <drv_rtc_init+0x80>)
   2786c:	f003 030f 	and.w	r3, r3, #15
   27870:	0152      	lsls	r2, r2, #5
   27872:	4419      	add	r1, r3
   27874:	b2d2      	uxtb	r2, r2
   27876:	760a      	strb	r2, [r1, #24]
   27878:	e7e3      	b.n	27842 <drv_rtc_init+0x36>
        return err_code;
   2787a:	2008      	movs	r0, #8
}
   2787c:	bc70      	pop	{r4, r5, r6}
   2787e:	4770      	bx	lr
   27880:	20001a1c 	.word	0x20001a1c
   27884:	20001a24 	.word	0x20001a24
   27888:	e000e100 	.word	0xe000e100
   2788c:	e000ecfc 	.word	0xe000ecfc

00027890 <drv_rtc_start>:
}

void drv_rtc_start(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_START);
   27890:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   27892:	2201      	movs	r2, #1
   27894:	601a      	str	r2, [r3, #0]
}
   27896:	4770      	bx	lr

00027898 <drv_rtc_stop>:
   27898:	6803      	ldr	r3, [r0, #0]
   2789a:	2201      	movs	r2, #1
   2789c:	605a      	str	r2, [r3, #4]

void drv_rtc_stop(drv_rtc_t const * const p_instance)
{
    ASSERT(p_instance);
    nrf_rtc_task_trigger(p_instance->p_reg, NRF_RTC_TASK_STOP);
}
   2789e:	4770      	bx	lr

000278a0 <drv_rtc_compare_set>:

void drv_rtc_compare_set(drv_rtc_t const * const p_instance,
                         uint32_t                cc,
                         uint32_t                abs_value,
                         bool                    irq_enable)
{
   278a0:	b4f0      	push	{r4, r5, r6, r7}
    ASSERT(p_instance);
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
    abs_value &= RTC_COUNTER_COUNTER_Msk;

    nrf_rtc_int_disable(p_instance->p_reg, cc_int_mask);
   278a2:	6804      	ldr	r4, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   278a4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
   278a8:	408d      	lsls	r5, r1
    p_reg->INTENCLR = mask;
   278aa:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    nrf_rtc_event_disable(p_instance->p_reg, cc_int_mask);
   278ae:	6806      	ldr	r6, [r0, #0]
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);
   278b0:	f101 0450 	add.w	r4, r1, #80	; 0x50
    p_reg->EVTENSET = mask;
}

__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   278b4:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
   278b8:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   278ba:	6806      	ldr	r6, [r0, #0]
   278bc:	b2a4      	uxth	r4, r4
   278be:	2700      	movs	r7, #0
   278c0:	5137      	str	r7, [r6, r4]
{
   278c2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   278c4:	5936      	ldr	r6, [r6, r4]
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    nrf_rtc_cc_set(p_instance->p_reg, cc,abs_value);
   278c6:	6804      	ldr	r4, [r0, #0]
   278c8:	9601      	str	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   278ca:	f501 71a8 	add.w	r1, r1, #336	; 0x150
    abs_value &= RTC_COUNTER_COUNTER_Msk;
   278ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    (void)dummy;
   278d2:	9e01      	ldr	r6, [sp, #4]
    p_reg->CC[ch] = cc_val;
   278d4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);
   278d8:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   278da:	f8c2 5344 	str.w	r5, [r2, #836]	; 0x344

    if (irq_enable)
   278de:	b113      	cbz	r3, 278e6 <drv_rtc_compare_set+0x46>
    {
        nrf_rtc_int_enable(p_instance->p_reg, cc_int_mask);
   278e0:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
   278e2:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    }
}
   278e6:	b002      	add	sp, #8
   278e8:	bcf0      	pop	{r4, r5, r6, r7}
   278ea:	4770      	bx	lr

000278ec <drv_rtc_windowed_compare_set>:

ret_code_t drv_rtc_windowed_compare_set(drv_rtc_t const * const p_instance,
                                        uint32_t                cc,
                                        uint32_t                abs_value,
                                        uint32_t                safe_window)
{
   278ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   278f0:	4604      	mov	r4, r0
    ASSERT(p_instance);
    uint32_t        prev_cc_set;
    uint32_t        now;
    uint32_t        diff;
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   278f2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   278f6:	6800      	ldr	r0, [r0, #0]
    nrf_rtc_int_t   cc_int_mask = (nrf_rtc_int_t)(NRF_RTC_INT_COMPARE0_MASK << cc);
   278f8:	408e      	lsls	r6, r1
    p_reg->EVTENCLR = mask;
   278fa:	f8c0 6348 	str.w	r6, [r0, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   278fe:	6820      	ldr	r0, [r4, #0]
    p_reg->INTENCLR = mask;
   27900:	f8c0 6308 	str.w	r6, [r0, #776]	; 0x308
     * - read previous CC
     * - write current counter value to CC (furtherest in future)
     * - if previous CC was in one tick from now wait half of the 32k tick and clear event which
     *   may be set. Half tick delay is used because CC is latched in the middle of the 32k tick.
     */
    now = nrf_rtc_counter_get(p_instance->p_reg);
   27904:	6820      	ldr	r0, [r4, #0]
   27906:	eb00 0581 	add.w	r5, r0, r1, lsl #2
{
   2790a:	468a      	mov	sl, r1
     return p_reg->COUNTER;
   2790c:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    return p_reg->CC[ch];
   27910:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    p_reg->CC[ch] = cc_val;
   27914:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    nrf_rtc_event_t cc_evt      = CC_IDX_TO_CC_EVENT(cc);;
   27918:	f10a 0550 	add.w	r5, sl, #80	; 0x50
   2791c:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2791e:	6827      	ldr	r7, [r4, #0]
   27920:	b2ad      	uxth	r5, r5
   27922:	f04f 0800 	mov.w	r8, #0
   27926:	f847 8005 	str.w	r8, [r7, r5]
{
   2792a:	b082      	sub	sp, #8
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   2792c:	1a40      	subs	r0, r0, r1
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2792e:	597f      	ldr	r7, [r7, r5]
   27930:	9700      	str	r7, [sp, #0]
   27932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    prev_cc_set = nrf_rtc_cc_get(p_instance->p_reg, cc);
    nrf_rtc_cc_set(p_instance->p_reg, cc, now);
    nrf_rtc_event_clear(p_instance->p_reg, cc_evt);

    if (ticks_sub(prev_cc_set, now) == 1)
   27936:	2801      	cmp	r0, #1
    abs_value &=RTC_COUNTER_COUNTER_Msk;
   27938:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
{
   2793c:	4699      	mov	r9, r3
    (void)dummy;
   2793e:	9a00      	ldr	r2, [sp, #0]
    if (ticks_sub(prev_cc_set, now) == 1)
   27940:	d041      	beq.n	279c6 <drv_rtc_windowed_compare_set+0xda>
    {
        nrf_delay_us(16);
        nrf_rtc_event_clear(p_instance->p_reg, cc_evt);
    }

    now = nrf_rtc_counter_get(p_instance->p_reg);
   27942:	6822      	ldr	r2, [r4, #0]
     return p_reg->COUNTER;
   27944:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
    p_reg->EVTENSET = mask;
   27948:	f8c2 6344 	str.w	r6, [r2, #836]	; 0x344
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   2794c:	1b7a      	subs	r2, r7, r5
   2794e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000

    nrf_rtc_event_enable(p_instance->p_reg, cc_int_mask);

    /* Setting CC for +1 from now may not generate event. In that case set CC+2 and check if counter
     * changed during that process. If changed it means that 1 tick expired. */
    if (diff == 1)
   27952:	2a01      	cmp	r2, #1
    p_reg->CC[ch] = cc_val;
   27954:	f50a 71a8 	add.w	r1, sl, #336	; 0x150
   27958:	d025      	beq.n	279a6 <drv_rtc_windowed_compare_set+0xba>
        {
            /* one tick elapsed already. */
            return NRF_ERROR_TIMEOUT;
        }
    } else {
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value);
   2795a:	6822      	ldr	r2, [r4, #0]
   2795c:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
        now = nrf_rtc_counter_get(p_instance->p_reg);
   27960:	6820      	ldr	r0, [r4, #0]
     return p_reg->COUNTER;
   27962:	f8d0 5504 	ldr.w	r5, [r0, #1284]	; 0x504
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   27966:	1b7a      	subs	r2, r7, r5
        diff = ticks_sub(abs_value - 1, now);
        /* Check if counter equals cc value or is behind in the safe window. If yes it means that
         * CC expired. */
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   27968:	f1c9 13ff 	rsb	r3, r9, #16711935	; 0xff00ff
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   2796c:	3a01      	subs	r2, #1
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   2796e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    return (a - b) & RTC_COUNTER_COUNTER_Msk;
   27972:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        if (diff > (RTC_COUNTER_COUNTER_Msk - safe_window))
   27976:	4293      	cmp	r3, r2
   27978:	d311      	bcc.n	2799e <drv_rtc_windowed_compare_set+0xb2>
        {
            return NRF_ERROR_TIMEOUT;
        }
        else if (diff == 0)
   2797a:	b142      	cbz	r2, 2798e <drv_rtc_windowed_compare_set+0xa2>
    p_reg->EVTENSET = mask;
   2797c:	f8c0 6344 	str.w	r6, [r0, #836]	; 0x344
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   27980:	6823      	ldr	r3, [r4, #0]
        }
    }

    evt_enable(p_instance, cc_int_mask, true);

    return NRF_SUCCESS;
   27982:	2000      	movs	r0, #0
    p_reg->INTENSET = mask;
   27984:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
}
   27988:	b002      	add	sp, #8
   2798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   2798e:	3701      	adds	r7, #1
    p_reg->CC[ch] = cc_val;
   27990:	f840 7021 	str.w	r7, [r0, r1, lsl #2]
            if (now != nrf_rtc_counter_get(p_instance->p_reg))
   27994:	6820      	ldr	r0, [r4, #0]
     return p_reg->COUNTER;
   27996:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
   2799a:	429d      	cmp	r5, r3
   2799c:	d0ee      	beq.n	2797c <drv_rtc_windowed_compare_set+0x90>
            return NRF_ERROR_TIMEOUT;
   2799e:	200d      	movs	r0, #13
}
   279a0:	b002      	add	sp, #8
   279a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_rtc_cc_set(p_instance->p_reg, cc, abs_value + 1);
   279a6:	6820      	ldr	r0, [r4, #0]
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   279a8:	4b0d      	ldr	r3, [pc, #52]	; (279e0 <drv_rtc_windowed_compare_set+0xf4>)
   279aa:	3701      	adds	r7, #1
    p_reg->CC[ch] = cc_val;
   279ac:	f840 7021 	str.w	r7, [r0, r1, lsl #2]
   279b0:	f043 0301 	orr.w	r3, r3, #1
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   279b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   279b8:	4798      	blx	r3
        if (now != nrf_rtc_counter_get(p_instance->p_reg))
   279ba:	6820      	ldr	r0, [r4, #0]
     return p_reg->COUNTER;
   279bc:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
   279c0:	429d      	cmp	r5, r3
   279c2:	d0db      	beq.n	2797c <drv_rtc_windowed_compare_set+0x90>
   279c4:	e7eb      	b.n	2799e <drv_rtc_windowed_compare_set+0xb2>
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   279c6:	4a06      	ldr	r2, [pc, #24]	; (279e0 <drv_rtc_windowed_compare_set+0xf4>)
    delay_cycles(cycles);
   279c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   279cc:	f042 0201 	orr.w	r2, r2, #1
    delay_cycles(cycles);
   279d0:	4790      	blx	r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   279d2:	6822      	ldr	r2, [r4, #0]
   279d4:	f842 8005 	str.w	r8, [r2, r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   279d8:	5952      	ldr	r2, [r2, r5]
   279da:	9201      	str	r2, [sp, #4]
    (void)dummy;
   279dc:	9a01      	ldr	r2, [sp, #4]
}
   279de:	e7b0      	b.n	27942 <drv_rtc_windowed_compare_set+0x56>
   279e0:	0002b330 	.word	0x0002b330

000279e4 <drv_rtc_overflow_enable>:
    nrf_rtc_event_enable(p_instance->p_reg, mask);
   279e4:	6802      	ldr	r2, [r0, #0]
    p_reg->EVTENSET = mask;
   279e6:	2302      	movs	r3, #2
   279e8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    if (irq_enable)
   279ec:	b111      	cbz	r1, 279f4 <drv_rtc_overflow_enable+0x10>
        nrf_rtc_int_enable(p_instance->p_reg, mask);
   279ee:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENSET = mask;
   279f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

void drv_rtc_overflow_enable(drv_rtc_t const * const p_instance, bool irq_enable)
{
    evt_enable(p_instance, NRF_RTC_INT_OVERFLOW_MASK, irq_enable);
}
   279f4:	4770      	bx	lr
   279f6:	bf00      	nop

000279f8 <drv_rtc_overflow_pending>:
    evt_disable(p_instance, NRF_RTC_INT_OVERFLOW_MASK);
}

bool drv_rtc_overflow_pending(drv_rtc_t const * const p_instance)
{
    return evt_pending(p_instance, NRF_RTC_EVENT_OVERFLOW);
   279f8:	6803      	ldr	r3, [r0, #0]
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   279fa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   279fe:	b900      	cbnz	r0, 27a02 <drv_rtc_overflow_pending+0xa>
}
   27a00:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   27a02:	2200      	movs	r2, #0
{
   27a04:	b082      	sub	sp, #8
   27a06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   27a0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   27a0e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   27a10:	9b01      	ldr	r3, [sp, #4]
        return true;
   27a12:	2001      	movs	r0, #1
}
   27a14:	b002      	add	sp, #8
   27a16:	4770      	bx	lr

00027a18 <drv_rtc_compare_disable>:
    nrf_rtc_event_disable(p_instance->p_reg, mask);
   27a18:	6802      	ldr	r2, [r0, #0]
    evt_enable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc, irq_enable);
}

void drv_rtc_compare_disable(drv_rtc_t const * const p_instance, uint32_t cc)
{
    evt_disable(p_instance, (uint32_t)NRF_RTC_INT_COMPARE0_MASK << cc);
   27a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   27a1e:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->EVTENCLR = mask;
   27a22:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
    nrf_rtc_int_disable(p_instance->p_reg, mask);
   27a26:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   27a28:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
}
   27a2c:	4770      	bx	lr
   27a2e:	bf00      	nop

00027a30 <drv_rtc_compare_pending>:

bool drv_rtc_compare_pending(drv_rtc_t const * const p_instance, uint32_t cc)
{
    nrf_rtc_event_t cc_evt = CC_IDX_TO_CC_EVENT(cc);
   27a30:	3150      	adds	r1, #80	; 0x50
   27a32:	0089      	lsls	r1, r1, #2
    return *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27a34:	6803      	ldr	r3, [r0, #0]
   27a36:	b289      	uxth	r1, r1
   27a38:	5858      	ldr	r0, [r3, r1]
    if (nrf_rtc_event_pending(p_instance->p_reg, event))
   27a3a:	b900      	cbnz	r0, 27a3e <drv_rtc_compare_pending+0xe>
    return evt_pending(p_instance, cc_evt);
}
   27a3c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   27a3e:	2200      	movs	r2, #0
   27a40:	505a      	str	r2, [r3, r1]
{
   27a42:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   27a44:	585b      	ldr	r3, [r3, r1]
   27a46:	9301      	str	r3, [sp, #4]
    (void)dummy;
   27a48:	9b01      	ldr	r3, [sp, #4]
        return true;
   27a4a:	2001      	movs	r0, #1
}
   27a4c:	b002      	add	sp, #8
   27a4e:	4770      	bx	lr

00027a50 <drv_rtc_counter_get>:

uint32_t drv_rtc_counter_get(drv_rtc_t const * const p_instance)
{
    return nrf_rtc_counter_get(p_instance->p_reg);
   27a50:	6803      	ldr	r3, [r0, #0]
     return p_reg->COUNTER;
   27a52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   27a56:	4770      	bx	lr

00027a58 <drv_rtc_irq_trigger>:

void drv_rtc_irq_trigger(drv_rtc_t const * const p_instance)
{
    NVIC_SetPendingIRQ(p_instance->irq);
   27a58:	f990 3004 	ldrsb.w	r3, [r0, #4]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27a5c:	4805      	ldr	r0, [pc, #20]	; (27a74 <drv_rtc_irq_trigger+0x1c>)
   27a5e:	095a      	lsrs	r2, r3, #5
   27a60:	2101      	movs	r1, #1
   27a62:	3240      	adds	r2, #64	; 0x40
   27a64:	f003 031f 	and.w	r3, r3, #31
   27a68:	fa01 f303 	lsl.w	r3, r1, r3
   27a6c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   27a70:	4770      	bx	lr
   27a72:	bf00      	nop
   27a74:	e000e100 	.word	0xe000e100

00027a78 <RTC1_IRQHandler>:
#endif

#if defined(APP_TIMER_V2_RTC1_ENABLED)
void drv_rtc_rtc_1_irq_handler(void)
{
    m_handlers[DRV_RTC_RTC1_INST_IDX](m_cb[DRV_RTC_RTC1_INST_IDX].p_instance);
   27a78:	4a02      	ldr	r2, [pc, #8]	; (27a84 <RTC1_IRQHandler+0xc>)
   27a7a:	4b03      	ldr	r3, [pc, #12]	; (27a88 <RTC1_IRQHandler+0x10>)
   27a7c:	6810      	ldr	r0, [r2, #0]
   27a7e:	681b      	ldr	r3, [r3, #0]
   27a80:	4718      	bx	r3
   27a82:	bf00      	nop
   27a84:	20001a1c 	.word	0x20001a1c
   27a88:	20001a24 	.word	0x20001a24

00027a8c <nrf_atfifo_init>:
STATIC_ASSERT(sizeof(nrf_atfifo_postag_t) == sizeof(uint32_t));


ret_code_t nrf_atfifo_init(nrf_atfifo_t * const p_fifo, void * p_buf, uint16_t buf_size, uint16_t item_size)
{
    if (NULL == p_buf)
   27a8c:	b199      	cbz	r1, 27ab6 <nrf_atfifo_init+0x2a>
{
   27a8e:	b410      	push	{r4}
    {
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. p_buf == NULL");
        return NRF_ERROR_NULL;
    }
    if (0 != (buf_size % item_size))
   27a90:	fbb2 f4f3 	udiv	r4, r2, r3
   27a94:	fb03 2414 	mls	r4, r3, r4, r2
   27a98:	b2a4      	uxth	r4, r4
   27a9a:	b944      	cbnz	r4, 27aae <nrf_atfifo_init+0x22>
        NRF_LOG_INST_ERROR(p_fifo->p_log, "Initialization failed. Buf_size not multiple of item_size");
        return NRF_ERROR_INVALID_LENGTH;
    }

    p_fifo->p_buf     = p_buf;
    p_fifo->tail.tag  = 0;
   27a9c:	e9c0 1400 	strd	r1, r4, [r0]
    p_fifo->head.tag  = 0;
   27aa0:	6084      	str	r4, [r0, #8]
    p_fifo->buf_size  = buf_size;
   27aa2:	8182      	strh	r2, [r0, #12]
    p_fifo->item_size = item_size;
   27aa4:	81c3      	strh	r3, [r0, #14]

    NRF_LOG_INST_INFO(p_fifo->p_log, "Initialized.");
    return NRF_SUCCESS;
   27aa6:	4620      	mov	r0, r4
}
   27aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
   27aac:	4770      	bx	lr
        return NRF_ERROR_INVALID_LENGTH;
   27aae:	2009      	movs	r0, #9
}
   27ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
   27ab4:	4770      	bx	lr
        return NRF_ERROR_NULL;
   27ab6:	200e      	movs	r0, #14
}
   27ab8:	4770      	bx	lr
   27aba:	bf00      	nop

00027abc <nrf_atfifo_item_alloc>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_alloc(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
   27abc:	b430      	push	{r4, r5}
   27abe:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_tail;
    uint32_t new_tail;
    uint32_t temp;

    __ASM volatile(
   27ac0:	e850 3f01 	ldrex	r3, [r0, #4]
   27ac4:	b29d      	uxth	r5, r3
   27ac6:	89c4      	ldrh	r4, [r0, #14]
   27ac8:	4425      	add	r5, r4
   27aca:	8984      	ldrh	r4, [r0, #12]
   27acc:	42a5      	cmp	r5, r4
   27ace:	bf28      	it	cs
   27ad0:	1b2d      	subcs	r5, r5, r4
   27ad2:	8904      	ldrh	r4, [r0, #8]
   27ad4:	42a5      	cmp	r5, r4
   27ad6:	bf02      	ittt	eq
   27ad8:	f3bf 8f2f 	clrexeq
   27adc:	2200      	moveq	r2, #0
   27ade:	e007      	beq.n	27af0 <nrf_atfifo_item_alloc+0x34>
   27ae0:	eac5 0503 	pkhbt	r5, r5, r3
   27ae4:	e840 5401 	strex	r4, r5, [r0, #4]
   27ae8:	2c00      	cmp	r4, #0
   27aea:	d1e9      	bne.n	27ac0 <nrf_atfifo_item_alloc+0x4>
   27aec:	f04f 0201 	mov.w	r2, #1
   27af0:	f88d 2003 	strb.w	r2, [sp, #3]
   27af4:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_tail->tag = old_tail;
   27af6:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_tail);
    UNUSED_VARIABLE(temp);
    return ret;
   27af8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_tail->tag = old_tail;
   27afc:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_wspace_req(p_fifo, &(p_context->last_tail)))
   27afe:	b12a      	cbz	r2, 27b0c <nrf_atfifo_item_alloc+0x50>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_tail.pos.wr;
   27b00:	880b      	ldrh	r3, [r1, #0]
   27b02:	6800      	ldr	r0, [r0, #0]
   27b04:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Allocated  element (0x%08X).", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Allocation failed - no space.");
    return NULL;
}
   27b06:	b002      	add	sp, #8
   27b08:	bc30      	pop	{r4, r5}
   27b0a:	4770      	bx	lr
   27b0c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   27b10:	4618      	mov	r0, r3
}
   27b12:	b002      	add	sp, #8
   27b14:	bc30      	pop	{r4, r5}
   27b16:	4770      	bx	lr

00027b18 <nrf_atfifo_item_put>:


bool nrf_atfifo_item_put(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_put_t * p_context)
{
    if ((p_context->last_tail.pos.wr) == (p_context->last_tail.pos.rd))
   27b18:	880a      	ldrh	r2, [r1, #0]
   27b1a:	884b      	ldrh	r3, [r1, #2]
   27b1c:	429a      	cmp	r2, r3
   27b1e:	d001      	beq.n	27b24 <nrf_atfifo_item_put+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (uninterrupted)");
        nrf_atfifo_wspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Put (interrupted!)");
    return false;
   27b20:	2000      	movs	r0, #0
}
   27b22:	4770      	bx	lr
void nrf_atfifo_wspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_tail;

    __ASM volatile(
   27b24:	e850 2f01 	ldrex	r2, [r0, #4]
   27b28:	eac2 4202 	pkhbt	r2, r2, r2, lsl #16
   27b2c:	e840 2301 	strex	r3, r2, [r0, #4]
   27b30:	2b00      	cmp	r3, #0
   27b32:	d1f7      	bne.n	27b24 <nrf_atfifo_item_put+0xc>
   27b34:	2001      	movs	r0, #1
   27b36:	4770      	bx	lr

00027b38 <nrf_atfifo_item_get>:
    return NRF_SUCCESS;
}


void * nrf_atfifo_item_get(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
   27b38:	b430      	push	{r4, r5}
   27b3a:	b082      	sub	sp, #8
    volatile bool ret;
    volatile uint32_t old_head;
    uint32_t new_head;
    uint32_t temp;

    __ASM volatile(
   27b3c:	e850 3f02 	ldrex	r3, [r0, #8]
   27b40:	fa1f f5a3 	uxth.w	r5, r3, ror #16
   27b44:	88c4      	ldrh	r4, [r0, #6]
   27b46:	42a5      	cmp	r5, r4
   27b48:	bf02      	ittt	eq
   27b4a:	f3bf 8f2f 	clrexeq
   27b4e:	2200      	moveq	r2, #0
   27b50:	e00d      	beq.n	27b6e <nrf_atfifo_item_get+0x36>
   27b52:	89c4      	ldrh	r4, [r0, #14]
   27b54:	4425      	add	r5, r4
   27b56:	8984      	ldrh	r4, [r0, #12]
   27b58:	42a5      	cmp	r5, r4
   27b5a:	bf28      	it	cs
   27b5c:	1b2d      	subcs	r5, r5, r4
   27b5e:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
   27b62:	e840 5402 	strex	r4, r5, [r0, #8]
   27b66:	2c00      	cmp	r4, #0
   27b68:	d1e8      	bne.n	27b3c <nrf_atfifo_item_get+0x4>
   27b6a:	f04f 0201 	mov.w	r2, #1
   27b6e:	f88d 2003 	strb.w	r2, [sp, #3]
   27b72:	9301      	str	r3, [sp, #4]
            [true_val]        "I"(true),
            [false_val]       "I"(false)
        : /* Clobbers */
            "cc");

    p_old_head->tag = old_head;
   27b74:	9b01      	ldr	r3, [sp, #4]
    UNUSED_VARIABLE(new_head);
    UNUSED_VARIABLE(temp);
    return ret;
   27b76:	f89d 2003 	ldrb.w	r2, [sp, #3]
    p_old_head->tag = old_head;
   27b7a:	600b      	str	r3, [r1, #0]
    if (nrf_atfifo_rspace_req(p_fifo, &(p_context->last_head)))
   27b7c:	b12a      	cbz	r2, 27b8a <nrf_atfifo_item_get+0x52>
    {
        void * p_item = ((uint8_t*)(p_fifo->p_buf)) + p_context->last_head.pos.rd;
   27b7e:	884b      	ldrh	r3, [r1, #2]
   27b80:	6800      	ldr	r0, [r0, #0]
   27b82:	4418      	add	r0, r3
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Get element: 0x%08X", p_item);
        return p_item;
    }
    NRF_LOG_INST_WARNING(p_fifo->p_log, "Get failed - no item in the FIFO.");
    return NULL;
}
   27b84:	b002      	add	sp, #8
   27b86:	bc30      	pop	{r4, r5}
   27b88:	4770      	bx	lr
   27b8a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    return NULL;
   27b8e:	4618      	mov	r0, r3
}
   27b90:	b002      	add	sp, #8
   27b92:	bc30      	pop	{r4, r5}
   27b94:	4770      	bx	lr
   27b96:	bf00      	nop

00027b98 <nrf_atfifo_item_free>:


bool nrf_atfifo_item_free(nrf_atfifo_t * const p_fifo, nrf_atfifo_item_get_t * p_context)
{
    if ((p_context->last_head.pos.wr) == (p_context->last_head.pos.rd))
   27b98:	880a      	ldrh	r2, [r1, #0]
   27b9a:	884b      	ldrh	r3, [r1, #2]
   27b9c:	429a      	cmp	r2, r3
   27b9e:	d001      	beq.n	27ba4 <nrf_atfifo_item_free+0xc>
        NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (uninterrupted)");
        nrf_atfifo_rspace_close(p_fifo);
        return true;
    }
    NRF_LOG_INST_DEBUG(p_fifo->p_log, "Free (interrupted)");
    return false;
   27ba0:	2000      	movs	r0, #0
}
   27ba2:	4770      	bx	lr
void nrf_atfifo_rspace_close(nrf_atfifo_t * const p_fifo)
{
    uint32_t temp;
    uint32_t new_head;

    __ASM volatile(
   27ba4:	e850 2f02 	ldrex	r2, [r0, #8]
   27ba8:	eac2 4222 	pkhtb	r2, r2, r2, asr #16
   27bac:	e840 2302 	strex	r3, r2, [r0, #8]
   27bb0:	2b00      	cmp	r3, #0
   27bb2:	d1f7      	bne.n	27ba4 <nrf_atfifo_item_free+0xc>
   27bb4:	2001      	movs	r0, #1
   27bb6:	4770      	bx	lr

00027bb8 <sd_app_evt_wait>:
 *
 * @post An application interrupt has happened or a interrupt pending flag is set.
 *
 * @retval ::NRF_SUCCESS
 */
SVCALL(SD_APP_EVT_WAIT, uint32_t, sd_app_evt_wait(void));
   27bb8:	df41      	svc	65	; 0x41
   27bba:	4770      	bx	lr

00027bbc <nrf_pwr_mgmt_init>:

ret_code_t nrf_pwr_mgmt_init(void)
{
    NRF_LOG_INFO("Init");

    m_shutdown_started = false;
   27bbc:	4a06      	ldr	r2, [pc, #24]	; (27bd8 <nrf_pwr_mgmt_init+0x1c>)

__STATIC_INLINE void nrf_mtx_init(nrf_mtx_t * p_mtx)
{
    ASSERT(p_mtx  != NULL);

    *p_mtx = NRF_MTX_UNLOCKED;
   27bbe:	4b07      	ldr	r3, [pc, #28]	; (27bdc <nrf_pwr_mgmt_init+0x20>)
{
   27bc0:	b510      	push	{r4, lr}
    m_shutdown_started = false;
   27bc2:	2400      	movs	r4, #0
   27bc4:	7014      	strb	r4, [r2, #0]
   27bc6:	601c      	str	r4, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   27bc8:	f3bf 8f5f 	dmb	sy
    nrf_mtx_init(&m_sysoff_mtx);
    nrf_section_iter_init(&m_handlers_iter, &pwr_mgmt_data);
   27bcc:	4904      	ldr	r1, [pc, #16]	; (27be0 <nrf_pwr_mgmt_init+0x24>)
   27bce:	4805      	ldr	r0, [pc, #20]	; (27be4 <nrf_pwr_mgmt_init+0x28>)
   27bd0:	f000 f834 	bl	27c3c <nrf_section_iter_init>
    PWR_MGMT_DEBUG_PINS_INIT();
    PWR_MGMT_STANDBY_TIMEOUT_INIT();
    PWR_MGMT_CPU_USAGE_MONITOR_INIT();

    return PWR_MGMT_TIMER_CREATE();
}
   27bd4:	4620      	mov	r0, r4
   27bd6:	bd10      	pop	{r4, pc}
   27bd8:	20001a30 	.word	0x20001a30
   27bdc:	20001a34 	.word	0x20001a34
   27be0:	0002b338 	.word	0x0002b338
   27be4:	20001a28 	.word	0x20001a28

00027be8 <nrf_pwr_mgmt_run>:

void nrf_pwr_mgmt_run(void)
{
   27be8:	b500      	push	{lr}
   27bea:	b083      	sub	sp, #12
        CRITICAL_REGION_ENTER();
   27bec:	2300      	movs	r3, #0
   27bee:	f10d 0007 	add.w	r0, sp, #7
   27bf2:	f88d 3007 	strb.w	r3, [sp, #7]
   27bf6:	f7ff fdcb 	bl	27790 <app_util_critical_region_enter>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
   27bfa:	eef1 3a10 	vmrs	r3, fpscr
        __set_FPSCR(original_fpscr & ~0x9Fu);
   27bfe:	f023 039f 	bic.w	r3, r3, #159	; 0x9f
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
   27c02:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("dmb 0xF":::"memory");
   27c06:	f3bf 8f5f 	dmb	sy
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27c0a:	4b0b      	ldr	r3, [pc, #44]	; (27c38 <nrf_pwr_mgmt_run+0x50>)
   27c0c:	2240      	movs	r2, #64	; 0x40
   27c0e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CRITICAL_REGION_EXIT();
   27c12:	f89d 0007 	ldrb.w	r0, [sp, #7]
   27c16:	f7ff fde1 	bl	277dc <app_util_critical_region_exit>
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_ENTER();
    PWR_MGMT_DEBUG_PIN_SET();

    // Wait for an event.
#ifdef SOFTDEVICE_PRESENT
    if (nrf_sdh_is_enabled())
   27c1a:	f001 fddb 	bl	297d4 <nrf_sdh_is_enabled>
   27c1e:	b928      	cbnz	r0, 27c2c <nrf_pwr_mgmt_run+0x44>
  __ASM volatile ("wfe");
   27c20:	bf20      	wfe
  __ASM volatile ("sev");
   27c22:	bf40      	sev
  __ASM volatile ("wfe");
   27c24:	bf20      	wfe
    }

    PWR_MGMT_DEBUG_PIN_CLEAR();
    PWR_MGMT_CPU_USAGE_MONITOR_SECTION_EXIT();
    PWR_MGMT_SLEEP_LOCK_RELEASE();
}
   27c26:	b003      	add	sp, #12
   27c28:	f85d fb04 	ldr.w	pc, [sp], #4
        ret_code_t ret_code = sd_app_evt_wait();
   27c2c:	f7ff ffc4 	bl	27bb8 <sd_app_evt_wait>
}
   27c30:	b003      	add	sp, #12
   27c32:	f85d fb04 	ldr.w	pc, [sp], #4
   27c36:	bf00      	nop
   27c38:	e000e100 	.word	0xe000e100

00027c3c <nrf_section_iter_init>:
void nrf_section_iter_init(nrf_section_iter_t * p_iter, nrf_section_set_t const * p_set)
{
    ASSERT(p_iter != NULL);
    ASSERT(p_set  != NULL);

    p_iter->p_set = p_set;
   27c3c:	6001      	str	r1, [r0, #0]

#if defined(__GNUC__)
    p_iter->p_item = p_iter->p_set->section.p_start;
   27c3e:	680b      	ldr	r3, [r1, #0]
   27c40:	6043      	str	r3, [r0, #4]
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   27c42:	684a      	ldr	r2, [r1, #4]
   27c44:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   27c46:	bf04      	itt	eq
   27c48:	2300      	moveq	r3, #0
   27c4a:	6043      	streq	r3, [r0, #4]
    }
#else
    p_iter->p_section = p_set->p_first;
    nrf_section_iter_item_set(p_iter);
#endif
}
   27c4c:	4770      	bx	lr
   27c4e:	bf00      	nop

00027c50 <nrf_section_iter_next>:
void nrf_section_iter_next(nrf_section_iter_t * p_iter)
{
    ASSERT(p_iter        != NULL);
    ASSERT(p_iter->p_set != NULL);

    if (p_iter->p_item == NULL)
   27c50:	6843      	ldr	r3, [r0, #4]
   27c52:	b143      	cbz	r3, 27c66 <nrf_section_iter_next+0x16>
    {
        return;
    }

    p_iter->p_item = (void *)((size_t)(p_iter->p_item) + p_iter->p_set->item_size);
   27c54:	6802      	ldr	r2, [r0, #0]
   27c56:	6891      	ldr	r1, [r2, #8]
   27c58:	440b      	add	r3, r1
   27c5a:	6043      	str	r3, [r0, #4]

#if defined(__GNUC__)
    if (p_iter->p_item == p_iter->p_set->section.p_end)
   27c5c:	6852      	ldr	r2, [r2, #4]
   27c5e:	4293      	cmp	r3, r2
    {
        p_iter->p_item = NULL;
   27c60:	bf04      	itt	eq
   27c62:	2300      	moveq	r3, #0
   27c64:	6043      	streq	r3, [r0, #4]
    {
        p_iter->p_section++;
        nrf_section_iter_item_set(p_iter);
    }
#endif
}
   27c66:	4770      	bx	lr

00027c68 <nrf_sortlist_add>:
#endif // NRF_SORTLIST_CONFIG_LOG_ENABLED
#include "nrf_log.h"
NRF_LOG_MODULE_REGISTER();

void nrf_sortlist_add(nrf_sortlist_t const * p_list, nrf_sortlist_item_t * p_item)
{
   27c68:	b570      	push	{r4, r5, r6, lr}
    ASSERT(p_list);
    ASSERT(p_item);

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   27c6a:	6844      	ldr	r4, [r0, #4]
{
   27c6c:	4606      	mov	r6, r0

    while(*pp_curr != NULL)
   27c6e:	6820      	ldr	r0, [r4, #0]
{
   27c70:	460d      	mov	r5, r1
    while(*pp_curr != NULL)
   27c72:	b918      	cbnz	r0, 27c7c <nrf_sortlist_add+0x14>
   27c74:	e008      	b.n	27c88 <nrf_sortlist_add+0x20>
    {
        if(!(p_list->compare_func(*pp_curr, p_item)))
        {
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   27c76:	6824      	ldr	r4, [r4, #0]
    while(*pp_curr != NULL)
   27c78:	6820      	ldr	r0, [r4, #0]
   27c7a:	b128      	cbz	r0, 27c88 <nrf_sortlist_add+0x20>
        if(!(p_list->compare_func(*pp_curr, p_item)))
   27c7c:	68b3      	ldr	r3, [r6, #8]
   27c7e:	4629      	mov	r1, r5
   27c80:	4798      	blx	r3
   27c82:	2800      	cmp	r0, #0
   27c84:	d1f7      	bne.n	27c76 <nrf_sortlist_add+0xe>
   27c86:	6820      	ldr	r0, [r4, #0]
    }

    p_item->p_next = *pp_curr;
   27c88:	6028      	str	r0, [r5, #0]
    *pp_curr = p_item;
   27c8a:	6025      	str	r5, [r4, #0]

    NRF_LOG_INFO("List:%s, adding element:%08X after:%08X, before:%08X",
                                  p_list->p_name, p_item, *pp_curr, p_item->p_next);
}
   27c8c:	bd70      	pop	{r4, r5, r6, pc}
   27c8e:	bf00      	nop

00027c90 <nrf_sortlist_pop>:

nrf_sortlist_item_t * nrf_sortlist_pop(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    nrf_sortlist_item_t * ret = p_list->p_cb->p_head;
   27c90:	6843      	ldr	r3, [r0, #4]
   27c92:	6818      	ldr	r0, [r3, #0]
    if (p_list->p_cb->p_head != NULL)
   27c94:	b108      	cbz	r0, 27c9a <nrf_sortlist_pop+0xa>
    {
        p_list->p_cb->p_head = p_list->p_cb->p_head->p_next;
   27c96:	6802      	ldr	r2, [r0, #0]
   27c98:	601a      	str	r2, [r3, #0]
    }
    NRF_LOG_INFO("List:%s, poping element:%08X", p_list->p_name, ret);
    return ret;
}
   27c9a:	4770      	bx	lr

00027c9c <nrf_sortlist_peek>:

nrf_sortlist_item_t const * nrf_sortlist_peek(nrf_sortlist_t const * p_list)
{
    ASSERT(p_list);
    return p_list->p_cb->p_head;
   27c9c:	6843      	ldr	r3, [r0, #4]
}
   27c9e:	6818      	ldr	r0, [r3, #0]
   27ca0:	4770      	bx	lr
   27ca2:	bf00      	nop

00027ca4 <nrf_sortlist_remove>:
{
    ASSERT(p_list);
    ASSERT(p_item);
    bool ret = false;

    nrf_sortlist_item_t ** pp_curr = &(p_list->p_cb->p_head);
   27ca4:	6843      	ldr	r3, [r0, #4]
   27ca6:	6818      	ldr	r0, [r3, #0]

    while(*pp_curr != NULL)
   27ca8:	b918      	cbnz	r0, 27cb2 <nrf_sortlist_remove+0xe>
   27caa:	e008      	b.n	27cbe <nrf_sortlist_remove+0x1a>
        {
            *pp_curr = p_item->p_next;
            ret = true;
            break;
        }
        pp_curr = &((*pp_curr)->p_next);
   27cac:	4603      	mov	r3, r0
   27cae:	6800      	ldr	r0, [r0, #0]
    while(*pp_curr != NULL)
   27cb0:	b128      	cbz	r0, 27cbe <nrf_sortlist_remove+0x1a>
        if(*pp_curr == p_item)
   27cb2:	4281      	cmp	r1, r0
   27cb4:	d1fa      	bne.n	27cac <nrf_sortlist_remove+0x8>
            *pp_curr = p_item->p_next;
   27cb6:	680a      	ldr	r2, [r1, #0]
   27cb8:	601a      	str	r2, [r3, #0]
            ret = true;
   27cba:	2001      	movs	r0, #1
            break;
   27cbc:	4770      	bx	lr
    }

    NRF_LOG_INFO("List:%s, removing element:%08X %s",
                                  p_list->p_name, p_item, ret ? "succeeded" : "not found");
    return ret;
}
   27cbe:	4770      	bx	lr

00027cc0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   27cc0:	b410      	push	{r4}
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
        NRF_CLOCK->EVENTS_DONE = 0;
   27cc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   27cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        NRF_CLOCK->EVENTS_DONE = 0;
   27cca:	2000      	movs	r0, #0
   27ccc:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   27cd0:	4b5e      	ldr	r3, [pc, #376]	; (27e4c <SystemInit+0x18c>)
        NRF_CLOCK->EVENTS_CTTO = 0;
   27cd2:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   27cd6:	f8c1 0538 	str.w	r0, [r1, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   27cda:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   27cde:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   27ce2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   27ce6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   27cea:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   27cee:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   27cf2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   27cf6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   27cfa:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   27cfe:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   27d02:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   27d06:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   27d0a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   27d0e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   27d12:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   27d16:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   27d1a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   27d1e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   27d22:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   27d26:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   27d2a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   27d2e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   27d32:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   27d36:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   27d3a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   27d3e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   27d42:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   27d46:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   27d4a:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
   27d4e:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   27d52:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
}


static bool errata_98(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
   27d56:	493e      	ldr	r1, [pc, #248]	; (27e50 <SystemInit+0x190>)
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   27d58:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    if (*(uint32_t *)0x10000130ul == 0x8ul){
   27d5c:	6809      	ldr	r1, [r1, #0]
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   27d5e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   27d62:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (*(uint32_t *)0x10000130ul == 0x8ul){
   27d66:	2908      	cmp	r1, #8
   27d68:	d024      	beq.n	27db4 <SystemInit+0xf4>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   27d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27d6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   27d72:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   27d74:	bf44      	itt	mi
   27d76:	f06f 0201 	mvnmi.w	r2, #1
   27d7a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   27d7e:	4a35      	ldr	r2, [pc, #212]	; (27e54 <SystemInit+0x194>)
   27d80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   27d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   27d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   27d8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27d90:	f3bf 8f6f 	isb	sy
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   27d94:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27d98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   27d9c:	2a00      	cmp	r2, #0
   27d9e:	db23      	blt.n	27de8 <SystemInit+0x128>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   27da0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   27da4:	2b00      	cmp	r3, #0
   27da6:	db1f      	blt.n	27de8 <SystemInit+0x128>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   27da8:	4b2b      	ldr	r3, [pc, #172]	; (27e58 <SystemInit+0x198>)
   27daa:	4a2c      	ldr	r2, [pc, #176]	; (27e5c <SystemInit+0x19c>)
   27dac:	601a      	str	r2, [r3, #0]
}
   27dae:	f85d 4b04 	ldr.w	r4, [sp], #4
   27db2:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
   27db4:	4b2a      	ldr	r3, [pc, #168]	; (27e60 <SystemInit+0x1a0>)
   27db6:	681b      	ldr	r3, [r3, #0]
   27db8:	2b00      	cmp	r3, #0
   27dba:	d1d6      	bne.n	27d6a <SystemInit+0xaa>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   27dbc:	4829      	ldr	r0, [pc, #164]	; (27e64 <SystemInit+0x1a4>)
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   27dbe:	4a2a      	ldr	r2, [pc, #168]	; (27e68 <SystemInit+0x1a8>)
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   27dc0:	4c2a      	ldr	r4, [pc, #168]	; (27e6c <SystemInit+0x1ac>)
   27dc2:	6004      	str	r4, [r0, #0]
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   27dc4:	492a      	ldr	r1, [pc, #168]	; (27e70 <SystemInit+0x1b0>)
   27dc6:	4b2b      	ldr	r3, [pc, #172]	; (27e74 <SystemInit+0x1b4>)
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   27dc8:	20fb      	movs	r0, #251	; 0xfb
   27dca:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   27dce:	680a      	ldr	r2, [r1, #0]
   27dd0:	681b      	ldr	r3, [r3, #0]
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   27dd2:	4829      	ldr	r0, [pc, #164]	; (27e78 <SystemInit+0x1b8>)
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   27dd4:	f022 020f 	bic.w	r2, r2, #15
   27dd8:	f003 030f 	and.w	r3, r3, #15
   27ddc:	4313      	orrs	r3, r2
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   27dde:	f44f 7200 	mov.w	r2, #512	; 0x200
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   27de2:	600b      	str	r3, [r1, #0]
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   27de4:	6002      	str	r2, [r0, #0]
   27de6:	e7c0      	b.n	27d6a <SystemInit+0xaa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   27de8:	4a24      	ldr	r2, [pc, #144]	; (27e7c <SystemInit+0x1bc>)
   27dea:	2301      	movs	r3, #1
   27dec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27df0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   27df4:	2b00      	cmp	r3, #0
   27df6:	d0fb      	beq.n	27df0 <SystemInit+0x130>
            NRF_UICR->PSELRESET[0] = 18;
   27df8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27dfc:	2112      	movs	r1, #18
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27dfe:	4a1f      	ldr	r2, [pc, #124]	; (27e7c <SystemInit+0x1bc>)
            NRF_UICR->PSELRESET[0] = 18;
   27e00:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27e04:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   27e08:	2b00      	cmp	r3, #0
   27e0a:	d0fb      	beq.n	27e04 <SystemInit+0x144>
            NRF_UICR->PSELRESET[1] = 18;
   27e0c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27e10:	2112      	movs	r1, #18
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27e12:	4a1a      	ldr	r2, [pc, #104]	; (27e7c <SystemInit+0x1bc>)
            NRF_UICR->PSELRESET[1] = 18;
   27e14:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27e18:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   27e1c:	2b00      	cmp	r3, #0
   27e1e:	d0fb      	beq.n	27e18 <SystemInit+0x158>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   27e20:	2300      	movs	r3, #0
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27e22:	4916      	ldr	r1, [pc, #88]	; (27e7c <SystemInit+0x1bc>)
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   27e24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   27e28:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   27e2c:	2b00      	cmp	r3, #0
   27e2e:	d0fb      	beq.n	27e28 <SystemInit+0x168>
  __ASM volatile ("dsb 0xF":::"memory");
   27e30:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27e34:	4907      	ldr	r1, [pc, #28]	; (27e54 <SystemInit+0x194>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27e36:	4b12      	ldr	r3, [pc, #72]	; (27e80 <SystemInit+0x1c0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27e38:	68ca      	ldr	r2, [r1, #12]
   27e3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27e3e:	4313      	orrs	r3, r2
   27e40:	60cb      	str	r3, [r1, #12]
   27e42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   27e46:	bf00      	nop
   27e48:	e7fd      	b.n	27e46 <SystemInit+0x186>
   27e4a:	bf00      	nop
   27e4c:	4000c000 	.word	0x4000c000
   27e50:	10000130 	.word	0x10000130
   27e54:	e000ed00 	.word	0xe000ed00
   27e58:	200018e0 	.word	0x200018e0
   27e5c:	03d09000 	.word	0x03d09000
   27e60:	10000134 	.word	0x10000134
   27e64:	4000568c 	.word	0x4000568c
   27e68:	4000f000 	.word	0x4000f000
   27e6c:	00038148 	.word	0x00038148
   27e70:	40000ee4 	.word	0x40000ee4
   27e74:	10000258 	.word	0x10000258
   27e78:	40029640 	.word	0x40029640
   27e7c:	4001e000 	.word	0x4001e000
   27e80:	05fa0004 	.word	0x05fa0004

00027e84 <clock_irq_handler>:
        p_item->event_handler(evt_type);
    }
}

static void clock_irq_handler(nrfx_clock_evt_type_t evt)
{
   27e84:	b510      	push	{r4, lr}
    if (evt == NRFX_CLOCK_EVT_HFCLK_STARTED)
   27e86:	b968      	cbnz	r0, 27ea4 <clock_irq_handler+0x20>
    {
        m_clock_cb.hfclk_on = true;
   27e88:	4c0e      	ldr	r4, [pc, #56]	; (27ec4 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27e8a:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   27e8c:	2201      	movs	r2, #1
   27e8e:	7062      	strb	r2, [r4, #1]
    if (p_item)
   27e90:	b13b      	cbz	r3, 27ea2 <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   27e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   27e96:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   27e98:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   27e9a:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27e9c:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   27e9e:	2b00      	cmp	r3, #0
   27ea0:	d1f7      	bne.n	27e92 <clock_irq_handler+0xe>
            m_clock_cb.cal_done_handler(aborted ?
                NRF_DRV_CLOCK_EVT_CAL_ABORTED : NRF_DRV_CLOCK_EVT_CAL_DONE);
        }
    }
#endif // CALIBRATION_SUPPORT
}
   27ea2:	bd10      	pop	{r4, pc}
    if (evt == NRFX_CLOCK_EVT_LFCLK_STARTED)
   27ea4:	2801      	cmp	r0, #1
   27ea6:	d1fc      	bne.n	27ea2 <clock_irq_handler+0x1e>
        m_clock_cb.lfclk_on = true;
   27ea8:	4c06      	ldr	r4, [pc, #24]	; (27ec4 <clock_irq_handler+0x40>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27eaa:	6923      	ldr	r3, [r4, #16]
        m_clock_cb.lfclk_on = true;
   27eac:	70a0      	strb	r0, [r4, #2]
    if (p_item)
   27eae:	2b00      	cmp	r3, #0
   27eb0:	d0f7      	beq.n	27ea2 <clock_irq_handler+0x1e>
        p_item->event_handler(evt_type);
   27eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   27eb6:	2001      	movs	r0, #1
        *p_head = p_item->p_next;
   27eb8:	6122      	str	r2, [r4, #16]
        p_item->event_handler(evt_type);
   27eba:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27ebc:	6923      	ldr	r3, [r4, #16]
    if (p_item)
   27ebe:	2b00      	cmp	r3, #0
   27ec0:	d1f7      	bne.n	27eb2 <clock_irq_handler+0x2e>
}
   27ec2:	bd10      	pop	{r4, pc}
   27ec4:	20001a38 	.word	0x20001a38

00027ec8 <soc_evt_handler>:
 * @param[in] evt_id    SoC event.
 * @param[in] p_context Context.
 */
static void soc_evt_handler(uint32_t evt_id, void * p_context)
{
    if (evt_id == NRF_EVT_HFCLKSTARTED)
   27ec8:	b970      	cbnz	r0, 27ee8 <soc_evt_handler+0x20>
{
   27eca:	b510      	push	{r4, lr}
    {
        m_clock_cb.hfclk_on = true;
   27ecc:	4c07      	ldr	r4, [pc, #28]	; (27eec <soc_evt_handler+0x24>)
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27ece:	68a3      	ldr	r3, [r4, #8]
        m_clock_cb.hfclk_on = true;
   27ed0:	2201      	movs	r2, #1
   27ed2:	7062      	strb	r2, [r4, #1]
    if (p_item)
   27ed4:	b13b      	cbz	r3, 27ee6 <soc_evt_handler+0x1e>
        p_item->event_handler(evt_type);
   27ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   27eda:	2000      	movs	r0, #0
        *p_head = p_item->p_next;
   27edc:	60a2      	str	r2, [r4, #8]
        p_item->event_handler(evt_type);
   27ede:	4798      	blx	r3
    nrf_drv_clock_handler_item_t * p_item = *p_head;
   27ee0:	68a3      	ldr	r3, [r4, #8]
    if (p_item)
   27ee2:	2b00      	cmp	r3, #0
   27ee4:	d1f7      	bne.n	27ed6 <soc_evt_handler+0xe>
        clock_clk_started_notify(NRF_DRV_CLOCK_EVT_HFCLK_STARTED);
    }
}
   27ee6:	bd10      	pop	{r4, pc}
   27ee8:	4770      	bx	lr
   27eea:	bf00      	nop
   27eec:	20001a38 	.word	0x20001a38

00027ef0 <sd_state_evt_handler>:
 *
 * @param[in] state     State.
 * @param[in] p_context Context.
 */
static void sd_state_evt_handler(nrf_sdh_state_evt_t state, void * p_context)
{
   27ef0:	b530      	push	{r4, r5, lr}
    switch (state)
   27ef2:	2801      	cmp	r0, #1
{
   27ef4:	b083      	sub	sp, #12
    switch (state)
   27ef6:	d004      	beq.n	27f02 <sd_state_evt_handler+0x12>
   27ef8:	2803      	cmp	r0, #3
   27efa:	d01d      	beq.n	27f38 <sd_state_evt_handler+0x48>
   27efc:	b1b0      	cbz	r0, 27f2c <sd_state_evt_handler+0x3c>
            break;

        default:
            break;
    }
}
   27efe:	b003      	add	sp, #12
   27f00:	bd30      	pop	{r4, r5, pc}
            if (!m_clock_cb.module_initialized)
   27f02:	4c22      	ldr	r4, [pc, #136]	; (27f8c <sd_state_evt_handler+0x9c>)
            CRITICAL_REGION_ENTER();
   27f04:	2300      	movs	r3, #0
   27f06:	f10d 0007 	add.w	r0, sp, #7
   27f0a:	f88d 3007 	strb.w	r3, [sp, #7]
   27f0e:	f7ff fc3f 	bl	27790 <app_util_critical_region_enter>
            if (!m_clock_cb.module_initialized)
   27f12:	7823      	ldrb	r3, [r4, #0]
   27f14:	b34b      	cbz	r3, 27f6a <sd_state_evt_handler+0x7a>
            ++(m_clock_cb.lfclk_requests);
   27f16:	68e3      	ldr	r3, [r4, #12]
            CRITICAL_REGION_EXIT();
   27f18:	f89d 0007 	ldrb.w	r0, [sp, #7]
            ++(m_clock_cb.lfclk_requests);
   27f1c:	3301      	adds	r3, #1
            m_clock_cb.lfclk_on = true;
   27f1e:	2201      	movs	r2, #1
            ++(m_clock_cb.lfclk_requests);
   27f20:	60e3      	str	r3, [r4, #12]
            m_clock_cb.lfclk_on = true;
   27f22:	70a2      	strb	r2, [r4, #2]
            CRITICAL_REGION_EXIT();
   27f24:	f7ff fc5a 	bl	277dc <app_util_critical_region_exit>
}
   27f28:	b003      	add	sp, #12
   27f2a:	bd30      	pop	{r4, r5, pc}
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27f2c:	4b18      	ldr	r3, [pc, #96]	; (27f90 <sd_state_evt_handler+0xa0>)
   27f2e:	2201      	movs	r2, #1
   27f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   27f34:	b003      	add	sp, #12
   27f36:	bd30      	pop	{r4, r5, pc}
    --(m_clock_cb.lfclk_requests);
   27f38:	4c14      	ldr	r4, [pc, #80]	; (27f8c <sd_state_evt_handler+0x9c>)
            nrfx_clock_enable();
   27f3a:	f000 f839 	bl	27fb0 <nrfx_clock_enable>
    CRITICAL_REGION_ENTER();
   27f3e:	2300      	movs	r3, #0
   27f40:	f10d 0007 	add.w	r0, sp, #7
   27f44:	f88d 3007 	strb.w	r3, [sp, #7]
   27f48:	f7ff fc22 	bl	27790 <app_util_critical_region_enter>
    --(m_clock_cb.lfclk_requests);
   27f4c:	68e3      	ldr	r3, [r4, #12]
   27f4e:	3b01      	subs	r3, #1
   27f50:	60e3      	str	r3, [r4, #12]
    if (m_clock_cb.lfclk_requests == 0)
   27f52:	68e5      	ldr	r5, [r4, #12]
   27f54:	b12d      	cbz	r5, 27f62 <sd_state_evt_handler+0x72>
    CRITICAL_REGION_EXIT();
   27f56:	f89d 0007 	ldrb.w	r0, [sp, #7]
   27f5a:	f7ff fc3f 	bl	277dc <app_util_critical_region_exit>
}
   27f5e:	b003      	add	sp, #12
   27f60:	bd30      	pop	{r4, r5, pc}
    nrfx_clock_lfclk_stop();
   27f62:	f000 f837 	bl	27fd4 <nrfx_clock_lfclk_stop>
    m_clock_cb.lfclk_on = false;
   27f66:	70a5      	strb	r5, [r4, #2]
}
   27f68:	e7f5      	b.n	27f56 <sd_state_evt_handler+0x66>
        err_code = nrfx_clock_init(clock_irq_handler);
   27f6a:	480a      	ldr	r0, [pc, #40]	; (27f94 <sd_state_evt_handler+0xa4>)
        m_clock_cb.hfclk_requests = 0;
   27f6c:	6063      	str	r3, [r4, #4]
        m_clock_cb.p_hf_head      = NULL;
   27f6e:	60a3      	str	r3, [r4, #8]
        m_clock_cb.p_lf_head      = NULL;
   27f70:	6123      	str	r3, [r4, #16]
        m_clock_cb.lfclk_requests = 0;
   27f72:	60e3      	str	r3, [r4, #12]
        err_code = nrfx_clock_init(clock_irq_handler);
   27f74:	f000 f810 	bl	27f98 <nrfx_clock_init>
        if (!nrf_sdh_is_enabled())
   27f78:	f001 fc2c 	bl	297d4 <nrf_sdh_is_enabled>
   27f7c:	b110      	cbz	r0, 27f84 <sd_state_evt_handler+0x94>
        m_clock_cb.module_initialized = true;
   27f7e:	2301      	movs	r3, #1
   27f80:	7023      	strb	r3, [r4, #0]
    return err_code;
   27f82:	e7c8      	b.n	27f16 <sd_state_evt_handler+0x26>
            nrfx_clock_enable();
   27f84:	f000 f814 	bl	27fb0 <nrfx_clock_enable>
   27f88:	e7f9      	b.n	27f7e <sd_state_evt_handler+0x8e>
   27f8a:	bf00      	nop
   27f8c:	20001a38 	.word	0x20001a38
   27f90:	e000e100 	.word	0xe000e100
   27f94:	00027e85 	.word	0x00027e85

00027f98 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   27f98:	4a04      	ldr	r2, [pc, #16]	; (27fac <nrfx_clock_init+0x14>)
   27f9a:	7913      	ldrb	r3, [r2, #4]
   27f9c:	b923      	cbnz	r3, 27fa8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   27f9e:	2101      	movs	r1, #1
        m_clock_cb.event_handler = event_handler;
   27fa0:	6010      	str	r0, [r2, #0]
        m_clock_cb.module_initialized = true;
   27fa2:	8091      	strh	r1, [r2, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   27fa4:	4618      	mov	r0, r3
   27fa6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   27fa8:	2085      	movs	r0, #133	; 0x85
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   27faa:	4770      	bx	lr
   27fac:	20001a4c 	.word	0x20001a4c

00027fb0 <nrfx_clock_enable>:
 * @retval false Otherwise.
 */
#define NRFX_IRQ_IS_ENABLED(irq_number)  _NRFX_IRQ_IS_ENABLED(irq_number)
static inline bool _NRFX_IRQ_IS_ENABLED(IRQn_Type irq_number)
{
    return 0 != (NVIC->ISER[irq_number / 32] & (1UL << (irq_number % 32)));
   27fb0:	4b07      	ldr	r3, [pc, #28]	; (27fd0 <nrfx_clock_enable+0x20>)
   27fb2:	681a      	ldr	r2, [r3, #0]
    priority = NRFX_CLOCK_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   27fb4:	07d2      	lsls	r2, r2, #31
   27fb6:	d404      	bmi.n	27fc2 <nrfx_clock_enable+0x12>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27fb8:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27fba:	2201      	movs	r2, #1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27fbc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27fc0:	601a      	str	r2, [r3, #0]
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   27fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27fc6:	2201      	movs	r2, #1
   27fc8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   27fcc:	4770      	bx	lr
   27fce:	bf00      	nop
   27fd0:	e000e100 	.word	0xe000e100

00027fd4 <nrfx_clock_lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   27fd4:	4b04      	ldr	r3, [pc, #16]	; (27fe8 <nrfx_clock_lfclk_stop+0x14>)
   27fd6:	2201      	movs	r2, #1
   27fd8:	601a      	str	r2, [r3, #0]
                                CLOCK_LFCLKSRCCOPY_SRC_Msk) >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}

__STATIC_INLINE bool nrf_clock_lf_is_running(void)
{
    return ((NRF_CLOCK->LFCLKSTAT &
   27fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   27fde:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418

void nrfx_clock_lfclk_stop(void)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrf_clock_task_trigger(NRF_CLOCK_TASK_LFCLKSTOP);
    while (nrf_clock_lf_is_running())
   27fe2:	03db      	lsls	r3, r3, #15
   27fe4:	d4fb      	bmi.n	27fde <nrfx_clock_lfclk_stop+0xa>
    {}
}
   27fe6:	4770      	bx	lr
   27fe8:	4000000c 	.word	0x4000000c

00027fec <POWER_CLOCK_IRQHandler>:
    nrf_clock_task_trigger(NRF_CLOCK_TASK_CTSTOP);
#endif
}

void nrfx_clock_irq_handler(void)
{
   27fec:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   27fee:	4b17      	ldr	r3, [pc, #92]	; (2804c <POWER_CLOCK_IRQHandler+0x60>)
   27ff0:	681a      	ldr	r2, [r3, #0]
   27ff2:	b082      	sub	sp, #8
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_HFCLKSTARTED))
   27ff4:	b162      	cbz	r2, 28010 <POWER_CLOCK_IRQHandler+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   27ff6:	2100      	movs	r1, #0
        nrf_clock_event_clear(NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_HFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   27ff8:	4a15      	ldr	r2, [pc, #84]	; (28050 <POWER_CLOCK_IRQHandler+0x64>)
   27ffa:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   27ffc:	681b      	ldr	r3, [r3, #0]
   27ffe:	7950      	ldrb	r0, [r2, #5]
   28000:	9300      	str	r3, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   28002:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   28006:	2301      	movs	r3, #1
    (void)dummy;
   28008:	9c00      	ldr	r4, [sp, #0]
    NRF_CLOCK->INTENCLR = int_mask;
   2800a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
   2800e:	b198      	cbz	r0, 28038 <POWER_CLOCK_IRQHandler+0x4c>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   28010:	4b10      	ldr	r3, [pc, #64]	; (28054 <POWER_CLOCK_IRQHandler+0x68>)
   28012:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   28014:	b1ba      	cbz	r2, 28046 <POWER_CLOCK_IRQHandler+0x5a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   28016:	2200      	movs	r2, #0
   28018:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
   2801a:	681b      	ldr	r3, [r3, #0]
   2801c:	9301      	str	r3, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   2801e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   28022:	2102      	movs	r1, #2
    {
        nrf_clock_event_clear(NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_CLOCK_EVENT_LFCLKSTARTED));
        nrf_clock_int_disable(NRF_CLOCK_INT_LF_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   28024:	4b0a      	ldr	r3, [pc, #40]	; (28050 <POWER_CLOCK_IRQHandler+0x64>)
    (void)dummy;
   28026:	9801      	ldr	r0, [sp, #4]
    NRF_CLOCK->INTENCLR = int_mask;
   28028:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
   2802c:	681b      	ldr	r3, [r3, #0]
   2802e:	2001      	movs	r0, #1
        nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif //  NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
}
   28030:	b002      	add	sp, #8
   28032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   28036:	4718      	bx	r3
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   28038:	6811      	ldr	r1, [r2, #0]
            m_clock_cb.hfclk_started = true;
   2803a:	7153      	strb	r3, [r2, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2803c:	4788      	blx	r1
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   2803e:	4b05      	ldr	r3, [pc, #20]	; (28054 <POWER_CLOCK_IRQHandler+0x68>)
   28040:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK_EVENT_LFCLKSTARTED))
   28042:	2a00      	cmp	r2, #0
   28044:	d1e7      	bne.n	28016 <POWER_CLOCK_IRQHandler+0x2a>
}
   28046:	b002      	add	sp, #8
   28048:	bd10      	pop	{r4, pc}
   2804a:	bf00      	nop
   2804c:	40000100 	.word	0x40000100
   28050:	20001a4c 	.word	0x20001a4c
   28054:	40000104 	.word	0x40000104

00028058 <GPIOTE_IRQHandler>:
    return nrf_gpiote_event_addr_get(event);
}


void nrfx_gpiote_irq_handler(void)
{
   28058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t status            = 0;
    uint32_t input[GPIO_COUNT] = {0};
   2805c:	2300      	movs	r3, #0
{
   2805e:	b088      	sub	sp, #32
    uint32_t input[GPIO_COUNT] = {0};
   28060:	e9cd 3302 	strd	r3, r3, [sp, #8]
    return ((uint32_t)NRF_GPIOTE + task);
}

__STATIC_INLINE bool nrf_gpiote_event_is_set(nrf_gpiote_events_t event)
{
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   28064:	4ac9      	ldr	r2, [pc, #804]	; (2838c <GPIOTE_IRQHandler+0x334>)
    nrf_gpiote_events_t event = NRF_GPIOTE_EVENTS_IN_0;
    uint32_t            mask  = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    for (i = 0; i < GPIOTE_CH_NUM; i++)
    {
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   28066:	6811      	ldr	r1, [r2, #0]
   28068:	2901      	cmp	r1, #1
   2806a:	f000 824b 	beq.w	28504 <GPIOTE_IRQHandler+0x4ac>
    uint32_t status            = 0;
   2806e:	461e      	mov	r6, r3
   28070:	4bc7      	ldr	r3, [pc, #796]	; (28390 <GPIOTE_IRQHandler+0x338>)
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   28072:	681a      	ldr	r2, [r3, #0]
   28074:	2a01      	cmp	r2, #1
   28076:	f000 8237 	beq.w	284e8 <GPIOTE_IRQHandler+0x490>
   2807a:	4bc6      	ldr	r3, [pc, #792]	; (28394 <GPIOTE_IRQHandler+0x33c>)
   2807c:	681a      	ldr	r2, [r3, #0]
   2807e:	2a01      	cmp	r2, #1
   28080:	f000 8224 	beq.w	284cc <GPIOTE_IRQHandler+0x474>
   28084:	4bc4      	ldr	r3, [pc, #784]	; (28398 <GPIOTE_IRQHandler+0x340>)
   28086:	681a      	ldr	r2, [r3, #0]
   28088:	2a01      	cmp	r2, #1
   2808a:	f000 8211 	beq.w	284b0 <GPIOTE_IRQHandler+0x458>
   2808e:	4bc3      	ldr	r3, [pc, #780]	; (2839c <GPIOTE_IRQHandler+0x344>)
   28090:	681a      	ldr	r2, [r3, #0]
   28092:	2a01      	cmp	r2, #1
   28094:	f000 81fe 	beq.w	28494 <GPIOTE_IRQHandler+0x43c>
   28098:	4bc1      	ldr	r3, [pc, #772]	; (283a0 <GPIOTE_IRQHandler+0x348>)
   2809a:	681a      	ldr	r2, [r3, #0]
   2809c:	2a01      	cmp	r2, #1
   2809e:	f000 81eb 	beq.w	28478 <GPIOTE_IRQHandler+0x420>
   280a2:	4bc0      	ldr	r3, [pc, #768]	; (283a4 <GPIOTE_IRQHandler+0x34c>)
   280a4:	681a      	ldr	r2, [r3, #0]
   280a6:	2a01      	cmp	r2, #1
   280a8:	f000 81d8 	beq.w	2845c <GPIOTE_IRQHandler+0x404>
   280ac:	4bbe      	ldr	r3, [pc, #760]	; (283a8 <GPIOTE_IRQHandler+0x350>)
   280ae:	681a      	ldr	r2, [r3, #0]
   280b0:	2a01      	cmp	r2, #1
   280b2:	d008      	beq.n	280c6 <GPIOTE_IRQHandler+0x6e>
   280b4:	4bbd      	ldr	r3, [pc, #756]	; (283ac <GPIOTE_IRQHandler+0x354>)
        event = (nrf_gpiote_events_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
     * end of interrupt. */
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   280b6:	681a      	ldr	r2, [r3, #0]
   280b8:	2a01      	cmp	r2, #1
   280ba:	f000 822f 	beq.w	2851c <GPIOTE_IRQHandler+0x4c4>
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
        nrf_gpio_ports_read(0, GPIO_COUNT, input);
    }

    /* Process pin events. */
    if (status & NRF_GPIOTE_INT_IN_MASK)
   280be:	bb16      	cbnz	r6, 28106 <GPIOTE_IRQHandler+0xae>
                }
            }
        }
        while (repeat);
    }
}
   280c0:	b008      	add	sp, #32
   280c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   280c6:	4aba      	ldr	r2, [pc, #744]	; (283b0 <GPIOTE_IRQHandler+0x358>)
   280c8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   280cc:	0617      	lsls	r7, r2, #24
   280ce:	d5f1      	bpl.n	280b4 <GPIOTE_IRQHandler+0x5c>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   280d0:	2200      	movs	r2, #0
   280d2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   280d4:	6819      	ldr	r1, [r3, #0]
   280d6:	9100      	str	r1, [sp, #0]
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   280d8:	6e19      	ldr	r1, [r3, #96]	; 0x60
    (void)dummy;
   280da:	9800      	ldr	r0, [sp, #0]
   280dc:	2901      	cmp	r1, #1
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   280de:	f103 0360 	add.w	r3, r3, #96	; 0x60
            status |= mask;
   280e2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
   280e6:	d10e      	bne.n	28106 <GPIOTE_IRQHandler+0xae>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   280e8:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   280ea:	681b      	ldr	r3, [r3, #0]
   280ec:	9301      	str	r3, [sp, #4]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   280ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    (void)dummy;
   280f2:	9b01      	ldr	r3, [sp, #4]
   280f4:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
   280f8:	4bae      	ldr	r3, [pc, #696]	; (283b4 <GPIOTE_IRQHandler+0x35c>)
    NRFX_ASSERT(start_port + length <= GPIO_COUNT);
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   280fa:	9202      	str	r2, [sp, #8]
    return p_reg->IN;
   280fc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   28100:	9303      	str	r3, [sp, #12]
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   28102:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    return m_cb.handlers[channel];
   28106:	4fac      	ldr	r7, [pc, #688]	; (283b8 <GPIOTE_IRQHandler+0x360>)
        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   28108:	2501      	movs	r5, #1
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   2810a:	2400      	movs	r4, #0
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2810c:	00a3      	lsls	r3, r4, #2
   2810e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
            if (mask & status)
   28112:	422e      	tst	r6, r5
   28114:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
            mask <<= 1;
   28118:	ea4f 0545 	mov.w	r5, r5, lsl #1
            if (mask & status)
   2811c:	d00b      	beq.n	28136 <GPIOTE_IRQHandler+0xde>
   2811e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return m_cb.handlers[channel];
   28122:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
}

__STATIC_INLINE nrf_gpiote_polarity_t nrf_gpiote_event_polarity_get(uint32_t idx)
{
    return (nrf_gpiote_polarity_t)((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >> GPIOTE_CONFIG_POLARITY_Pos);
   28126:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                    handler(pin, polarity);
   2812a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2812e:	f3c1 4101 	ubfx	r1, r1, #16, #2
                if (handler)
   28132:	b102      	cbz	r2, 28136 <GPIOTE_IRQHandler+0xde>
                    handler(pin, polarity);
   28134:	4790      	blx	r2
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   28136:	3401      	adds	r4, #1
   28138:	2c08      	cmp	r4, #8
   2813a:	d1e7      	bne.n	2810c <GPIOTE_IRQHandler+0xb4>
    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   2813c:	2e00      	cmp	r6, #0
   2813e:	dabf      	bge.n	280c0 <GPIOTE_IRQHandler+0x68>
        uint32_t toggle_mask[GPIO_COUNT] = {0};
   28140:	4c9d      	ldr	r4, [pc, #628]	; (283b8 <GPIOTE_IRQHandler+0x360>)
        return NRF_P1;
   28142:	4f9c      	ldr	r7, [pc, #624]	; (283b4 <GPIOTE_IRQHandler+0x35c>)
            pins_to_check[port_idx] = 0xFFFFFFFF;
   28144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2814c:	e9cd 0106 	strd	r0, r1, [sp, #24]
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   28150:	f994 0060 	ldrsb.w	r0, [r4, #96]	; 0x60
        uint32_t toggle_mask[GPIO_COUNT] = {0};
   28154:	f10d 0810 	add.w	r8, sp, #16
   28158:	2300      	movs	r3, #0
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   2815a:	1c45      	adds	r5, r0, #1
        uint32_t toggle_mask[GPIO_COUNT] = {0};
   2815c:	f8c8 3004 	str.w	r3, [r8, #4]
   28160:	9304      	str	r3, [sp, #16]
__STATIC_INLINE uint32_t nrf_bitmask_bit_is_set(uint32_t bit, void const * p_mask)
{
    uint8_t const * p_mask8 = (uint8_t const *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    return (1 << bit) & p_mask8[byte_idx];
   28162:	f04f 0601 	mov.w	r6, #1
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   28166:	f000 80f7 	beq.w	28358 <GPIOTE_IRQHandler+0x300>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2816a:	f3c0 09c2 	ubfx	r9, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   2816e:	ab08      	add	r3, sp, #32
   28170:	eb03 0e09 	add.w	lr, r3, r9
    bit = BITMASK_RELBIT_GET(bit);
   28174:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   28178:	f81e 2c08 	ldrb.w	r2, [lr, #-8]
   2817c:	fa06 f303 	lsl.w	r3, r6, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   28180:	ea12 0503 	ands.w	r5, r2, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   28184:	fa5f fc80 	uxtb.w	ip, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   28188:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   2818c:	d021      	beq.n	281d2 <GPIOTE_IRQHandler+0x17a>
    return m_cb.pin_assignments[pin];
   2818e:	1822      	adds	r2, r4, r0
                    nrf_gpiote_polarity_t polarity =
   28190:	ea4f 119c 	mov.w	r1, ip, lsr #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   28194:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
    return m_cb.handlers[channel];
   28198:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   2819c:	2a00      	cmp	r2, #0
   2819e:	f000 8137 	beq.w	28410 <GPIOTE_IRQHandler+0x3b8>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   281a2:	2903      	cmp	r1, #3
   281a4:	f000 8136 	beq.w	28414 <GPIOTE_IRQHandler+0x3bc>
    if (*p_pin < P0_PIN_NUM)
   281a8:	281f      	cmp	r0, #31
   281aa:	f200 80eb 	bhi.w	28384 <GPIOTE_IRQHandler+0x32c>
   281ae:	4605      	mov	r5, r0
        return NRF_P0;
   281b0:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   281b4:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
   281b8:	f81e 5c18 	ldrb.w	r5, [lr, #-24]
   281bc:	f8dc e700 	ldr.w	lr, [ip, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   281c0:	401d      	ands	r5, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   281c2:	f3ce 4e01 	ubfx	lr, lr, #16, #2
   281c6:	f040 80d1 	bne.w	2836c <GPIOTE_IRQHandler+0x314>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   281ca:	f1be 0f03 	cmp.w	lr, #3
   281ce:	f000 81b7 	beq.w	28540 <GPIOTE_IRQHandler+0x4e8>
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   281d2:	f994 0061 	ldrsb.w	r0, [r4, #97]	; 0x61
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   281d6:	1c41      	adds	r1, r0, #1
   281d8:	d033      	beq.n	28242 <GPIOTE_IRQHandler+0x1ea>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   281da:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   281de:	ab08      	add	r3, sp, #32
   281e0:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   281e4:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   281e8:	f81c 1c08 	ldrb.w	r1, [ip, #-8]
   281ec:	fa06 f303 	lsl.w	r3, r6, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   281f0:	4219      	tst	r1, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   281f2:	b2c2      	uxtb	r2, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   281f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   281f8:	d023      	beq.n	28242 <GPIOTE_IRQHandler+0x1ea>
    return m_cb.pin_assignments[pin];
   281fa:	eb04 0900 	add.w	r9, r4, r0
                    nrf_gpiote_polarity_t polarity =
   281fe:	0991      	lsrs	r1, r2, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   28200:	f999 9030 	ldrsb.w	r9, [r9, #48]	; 0x30
    return m_cb.handlers[channel];
   28204:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   28208:	f1b9 0f00 	cmp.w	r9, #0
   2820c:	f000 8112 	beq.w	28434 <GPIOTE_IRQHandler+0x3dc>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   28210:	2903      	cmp	r1, #3
   28212:	f000 8112 	beq.w	2843a <GPIOTE_IRQHandler+0x3e2>
    if (*p_pin < P0_PIN_NUM)
   28216:	281f      	cmp	r0, #31
   28218:	f200 80f6 	bhi.w	28408 <GPIOTE_IRQHandler+0x3b0>
   2821c:	4686      	mov	lr, r0
        return NRF_P0;
   2821e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   28222:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   28226:	f81c ec18 	ldrb.w	lr, [ip, #-24]
   2822a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   2822e:	ea1e 0f03 	tst.w	lr, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   28232:	f3cc 4c01 	ubfx	ip, ip, #16, #2
   28236:	f040 80da 	bne.w	283ee <GPIOTE_IRQHandler+0x396>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   2823a:	f1bc 0f03 	cmp.w	ip, #3
   2823e:	f000 8191 	beq.w	28564 <GPIOTE_IRQHandler+0x50c>
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   28242:	f994 0062 	ldrsb.w	r0, [r4, #98]	; 0x62
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   28246:	1c42      	adds	r2, r0, #1
   28248:	d033      	beq.n	282b2 <GPIOTE_IRQHandler+0x25a>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2824a:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   2824e:	ab08      	add	r3, sp, #32
   28250:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   28254:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   28258:	f81c 1c08 	ldrb.w	r1, [ip, #-8]
   2825c:	fa06 f303 	lsl.w	r3, r6, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   28260:	4219      	tst	r1, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   28262:	b2c2      	uxtb	r2, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   28264:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   28268:	d023      	beq.n	282b2 <GPIOTE_IRQHandler+0x25a>
    return m_cb.pin_assignments[pin];
   2826a:	eb04 0900 	add.w	r9, r4, r0
                    nrf_gpiote_polarity_t polarity =
   2826e:	0991      	lsrs	r1, r2, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   28270:	f999 9030 	ldrsb.w	r9, [r9, #48]	; 0x30
    return m_cb.handlers[channel];
   28274:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   28278:	f1b9 0f00 	cmp.w	r9, #0
   2827c:	f000 80d0 	beq.w	28420 <GPIOTE_IRQHandler+0x3c8>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   28280:	2903      	cmp	r1, #3
   28282:	f000 80d0 	beq.w	28426 <GPIOTE_IRQHandler+0x3ce>
    if (*p_pin < P0_PIN_NUM)
   28286:	281f      	cmp	r0, #31
   28288:	f200 80a5 	bhi.w	283d6 <GPIOTE_IRQHandler+0x37e>
   2828c:	4686      	mov	lr, r0
        return NRF_P0;
   2828e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   28292:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   28296:	f81c ec18 	ldrb.w	lr, [ip, #-24]
   2829a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   2829e:	ea1e 0f03 	tst.w	lr, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   282a2:	f3cc 4c01 	ubfx	ip, ip, #16, #2
   282a6:	f040 8089 	bne.w	283bc <GPIOTE_IRQHandler+0x364>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   282aa:	f1bc 0f03 	cmp.w	ip, #3
   282ae:	f000 816d 	beq.w	2858c <GPIOTE_IRQHandler+0x534>
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   282b2:	f994 0063 	ldrsb.w	r0, [r4, #99]	; 0x63
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   282b6:	1c43      	adds	r3, r0, #1
   282b8:	d033      	beq.n	28322 <GPIOTE_IRQHandler+0x2ca>
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   282ba:	f3c0 0ec2 	ubfx	lr, r0, #3, #3
    return (1 << bit) & p_mask8[byte_idx];
   282be:	ab08      	add	r3, sp, #32
   282c0:	eb03 0c0e 	add.w	ip, r3, lr
    bit = BITMASK_RELBIT_GET(bit);
   282c4:	f000 0307 	and.w	r3, r0, #7
    return (1 << bit) & p_mask8[byte_idx];
   282c8:	f81c 1c08 	ldrb.w	r1, [ip, #-8]
   282cc:	fa06 f303 	lsl.w	r3, r6, r3
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   282d0:	4219      	tst	r1, r3
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   282d2:	b2c2      	uxtb	r2, r0
                nrfx_gpiote_pin_t pin           = (pin_and_sense & ~SENSE_FIELD_MASK);
   282d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                    && nrf_bitmask_bit_is_set(pin, pins_to_check))
   282d8:	d023      	beq.n	28322 <GPIOTE_IRQHandler+0x2ca>
    return m_cb.pin_assignments[pin];
   282da:	eb04 0900 	add.w	r9, r4, r0
                    nrf_gpiote_polarity_t polarity =
   282de:	0991      	lsrs	r1, r2, #6
                        channel_handler_get((uint32_t)channel_port_get(pin));
   282e0:	f999 9030 	ldrsb.w	r9, [r9, #48]	; 0x30
    return m_cb.handlers[channel];
   282e4:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   282e8:	f1b9 0f00 	cmp.w	r9, #0
   282ec:	f000 80ac 	beq.w	28448 <GPIOTE_IRQHandler+0x3f0>
                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   282f0:	2903      	cmp	r1, #3
   282f2:	f000 80ac 	beq.w	2844e <GPIOTE_IRQHandler+0x3f6>
    if (*p_pin < P0_PIN_NUM)
   282f6:	281f      	cmp	r0, #31
        return NRF_P1;
   282f8:	bf8b      	itete	hi
   282fa:	46be      	movhi	lr, r7
        return NRF_P0;
   282fc:	f04f 4ea0 	movls.w	lr, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   28300:	f002 021f 	andhi.w	r2, r2, #31
        return NRF_P1;
   28304:	4602      	movls	r2, r0
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   28306:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   2830a:	f81c ec18 	ldrb.w	lr, [ip, #-24]
   2830e:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   28312:	ea1e 0f03 	tst.w	lr, r3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   28316:	f3cc 4c01 	ubfx	ip, ip, #16, #2
   2831a:	d160      	bne.n	283de <GPIOTE_IRQHandler+0x386>
                            (!pin_state && (sense == NRF_GPIO_PIN_SENSE_LOW))  )
   2831c:	f1bc 0f03 	cmp.w	ip, #3
   28320:	d01c      	beq.n	2835c <GPIOTE_IRQHandler+0x304>
            if (repeat)
   28322:	2d00      	cmp	r5, #0
   28324:	f43f aecc 	beq.w	280c0 <GPIOTE_IRQHandler+0x68>
    return p_reg->IN;
   28328:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                    if (new_input[port_idx] != input[port_idx])
   2832c:	9b02      	ldr	r3, [sp, #8]
   2832e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   28332:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
   28336:	428b      	cmp	r3, r1
   28338:	d103      	bne.n	28342 <GPIOTE_IRQHandler+0x2ea>
   2833a:	9b03      	ldr	r3, [sp, #12]
   2833c:	4283      	cmp	r3, r0
   2833e:	f43f aebf 	beq.w	280c0 <GPIOTE_IRQHandler+0x68>
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   28342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                        input[port_idx]         = new_input[port_idx];
   28346:	e9cd 1002 	strd	r1, r0, [sp, #8]
                uint8_t           pin_and_sense = (uint8_t)m_cb.port_handlers_pins[i];
   2834a:	f994 0060 	ldrsb.w	r0, [r4, #96]	; 0x60
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   2834e:	1c45      	adds	r5, r0, #1
                        pins_to_check[port_idx] = toggle_mask[port_idx];
   28350:	e9cd 2306 	strd	r2, r3, [sp, #24]
                if ((m_cb.port_handlers_pins[i] != PIN_NOT_USED)
   28354:	f47f af09 	bne.w	2816a <GPIOTE_IRQHandler+0x112>
            repeat = 0;
   28358:	2500      	movs	r5, #0
   2835a:	e73a      	b.n	281d2 <GPIOTE_IRQHandler+0x17a>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   2835c:	2903      	cmp	r1, #3
   2835e:	f000 8129 	beq.w	285b4 <GPIOTE_IRQHandler+0x55c>
                            if (handler)
   28362:	f1b9 0f00 	cmp.w	r9, #0
   28366:	d0dc      	beq.n	28322 <GPIOTE_IRQHandler+0x2ca>
                                handler(pin, polarity);
   28368:	47c8      	blx	r9
   2836a:	e7da      	b.n	28322 <GPIOTE_IRQHandler+0x2ca>
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   2836c:	f1be 0f02 	cmp.w	lr, #2
   28370:	d1f2      	bne.n	28358 <GPIOTE_IRQHandler+0x300>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   28372:	2903      	cmp	r1, #3
   28374:	f000 8139 	beq.w	285ea <GPIOTE_IRQHandler+0x592>
            repeat = 0;
   28378:	2500      	movs	r5, #0
                            if (handler)
   2837a:	2a00      	cmp	r2, #0
   2837c:	f43f af29 	beq.w	281d2 <GPIOTE_IRQHandler+0x17a>
                                handler(pin, polarity);
   28380:	4790      	blx	r2
   28382:	e726      	b.n	281d2 <GPIOTE_IRQHandler+0x17a>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   28384:	f00c 051f 	and.w	r5, ip, #31
        return NRF_P1;
   28388:	46bc      	mov	ip, r7
   2838a:	e713      	b.n	281b4 <GPIOTE_IRQHandler+0x15c>
   2838c:	40006100 	.word	0x40006100
   28390:	40006104 	.word	0x40006104
   28394:	40006108 	.word	0x40006108
   28398:	4000610c 	.word	0x4000610c
   2839c:	40006110 	.word	0x40006110
   283a0:	40006114 	.word	0x40006114
   283a4:	40006118 	.word	0x40006118
   283a8:	4000611c 	.word	0x4000611c
   283ac:	4000617c 	.word	0x4000617c
   283b0:	40006000 	.word	0x40006000
   283b4:	50000300 	.word	0x50000300
   283b8:	20001a58 	.word	0x20001a58
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   283bc:	f1bc 0f02 	cmp.w	ip, #2
   283c0:	f47f af77 	bne.w	282b2 <GPIOTE_IRQHandler+0x25a>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   283c4:	2903      	cmp	r1, #3
   283c6:	f000 810d 	beq.w	285e4 <GPIOTE_IRQHandler+0x58c>
                            if (handler)
   283ca:	f1b9 0f00 	cmp.w	r9, #0
   283ce:	f43f af70 	beq.w	282b2 <GPIOTE_IRQHandler+0x25a>
                                handler(pin, polarity);
   283d2:	47c8      	blx	r9
   283d4:	e76d      	b.n	282b2 <GPIOTE_IRQHandler+0x25a>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   283d6:	f002 0e1f 	and.w	lr, r2, #31
        return NRF_P1;
   283da:	463a      	mov	r2, r7
   283dc:	e759      	b.n	28292 <GPIOTE_IRQHandler+0x23a>
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   283de:	f1bc 0f02 	cmp.w	ip, #2
   283e2:	d19e      	bne.n	28322 <GPIOTE_IRQHandler+0x2ca>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   283e4:	2903      	cmp	r1, #3
   283e6:	d1bc      	bne.n	28362 <GPIOTE_IRQHandler+0x30a>
   283e8:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
   283ec:	e0e4      	b.n	285b8 <GPIOTE_IRQHandler+0x560>
                        if ((pin_state && (sense == NRF_GPIO_PIN_SENSE_HIGH)) ||
   283ee:	f1bc 0f02 	cmp.w	ip, #2
   283f2:	f47f af26 	bne.w	28242 <GPIOTE_IRQHandler+0x1ea>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   283f6:	2903      	cmp	r1, #3
   283f8:	f000 80f1 	beq.w	285de <GPIOTE_IRQHandler+0x586>
                            if (handler)
   283fc:	f1b9 0f00 	cmp.w	r9, #0
   28400:	f43f af1f 	beq.w	28242 <GPIOTE_IRQHandler+0x1ea>
                                handler(pin, polarity);
   28404:	47c8      	blx	r9
   28406:	e71c      	b.n	28242 <GPIOTE_IRQHandler+0x1ea>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   28408:	f002 0e1f 	and.w	lr, r2, #31
        return NRF_P1;
   2840c:	463a      	mov	r2, r7
   2840e:	e708      	b.n	28222 <GPIOTE_IRQHandler+0x1ca>
                    if (handler || (polarity == NRF_GPIOTE_POLARITY_TOGGLE))
   28410:	2903      	cmp	r1, #3
   28412:	d1a1      	bne.n	28358 <GPIOTE_IRQHandler+0x300>
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] |= (1 << bit);
   28414:	f818 5009 	ldrb.w	r5, [r8, r9]
   28418:	431d      	orrs	r5, r3
   2841a:	f808 5009 	strb.w	r5, [r8, r9]
   2841e:	e6c3      	b.n	281a8 <GPIOTE_IRQHandler+0x150>
   28420:	2903      	cmp	r1, #3
   28422:	f47f af46 	bne.w	282b2 <GPIOTE_IRQHandler+0x25a>
   28426:	f818 a00e 	ldrb.w	sl, [r8, lr]
   2842a:	ea4a 0a03 	orr.w	sl, sl, r3
   2842e:	f808 a00e 	strb.w	sl, [r8, lr]
   28432:	e728      	b.n	28286 <GPIOTE_IRQHandler+0x22e>
   28434:	2903      	cmp	r1, #3
   28436:	f47f af04 	bne.w	28242 <GPIOTE_IRQHandler+0x1ea>
   2843a:	f818 a00e 	ldrb.w	sl, [r8, lr]
   2843e:	ea4a 0a03 	orr.w	sl, sl, r3
   28442:	f808 a00e 	strb.w	sl, [r8, lr]
   28446:	e6e6      	b.n	28216 <GPIOTE_IRQHandler+0x1be>
   28448:	2903      	cmp	r1, #3
   2844a:	f47f af6a 	bne.w	28322 <GPIOTE_IRQHandler+0x2ca>
   2844e:	f818 a00e 	ldrb.w	sl, [r8, lr]
   28452:	ea4a 0a03 	orr.w	sl, sl, r3
   28456:	f808 a00e 	strb.w	sl, [r8, lr]
}
   2845a:	e74c      	b.n	282f6 <GPIOTE_IRQHandler+0x29e>
    return (NRF_GPIOTE->INTENSET & mask);
   2845c:	4a64      	ldr	r2, [pc, #400]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   2845e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   28462:	0652      	lsls	r2, r2, #25
   28464:	f57f ae22 	bpl.w	280ac <GPIOTE_IRQHandler+0x54>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   28468:	2200      	movs	r2, #0
   2846a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2846c:	681b      	ldr	r3, [r3, #0]
   2846e:	9300      	str	r3, [sp, #0]
    (void)dummy;
   28470:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   28472:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   28476:	e619      	b.n	280ac <GPIOTE_IRQHandler+0x54>
    return (NRF_GPIOTE->INTENSET & mask);
   28478:	4a5d      	ldr	r2, [pc, #372]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   2847a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   2847e:	0691      	lsls	r1, r2, #26
   28480:	f57f ae0f 	bpl.w	280a2 <GPIOTE_IRQHandler+0x4a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   28484:	2200      	movs	r2, #0
   28486:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   28488:	681b      	ldr	r3, [r3, #0]
   2848a:	9300      	str	r3, [sp, #0]
    (void)dummy;
   2848c:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   2848e:	f046 0620 	orr.w	r6, r6, #32
   28492:	e606      	b.n	280a2 <GPIOTE_IRQHandler+0x4a>
    return (NRF_GPIOTE->INTENSET & mask);
   28494:	4a56      	ldr	r2, [pc, #344]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   28496:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   2849a:	06d0      	lsls	r0, r2, #27
   2849c:	f57f adfc 	bpl.w	28098 <GPIOTE_IRQHandler+0x40>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   284a0:	2200      	movs	r2, #0
   284a2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   284a4:	681b      	ldr	r3, [r3, #0]
   284a6:	9300      	str	r3, [sp, #0]
    (void)dummy;
   284a8:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   284aa:	f046 0610 	orr.w	r6, r6, #16
   284ae:	e5f3      	b.n	28098 <GPIOTE_IRQHandler+0x40>
    return (NRF_GPIOTE->INTENSET & mask);
   284b0:	4a4f      	ldr	r2, [pc, #316]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   284b2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   284b6:	0714      	lsls	r4, r2, #28
   284b8:	f57f ade9 	bpl.w	2808e <GPIOTE_IRQHandler+0x36>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   284bc:	2200      	movs	r2, #0
   284be:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   284c0:	681b      	ldr	r3, [r3, #0]
   284c2:	9300      	str	r3, [sp, #0]
    (void)dummy;
   284c4:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   284c6:	f046 0608 	orr.w	r6, r6, #8
   284ca:	e5e0      	b.n	2808e <GPIOTE_IRQHandler+0x36>
    return (NRF_GPIOTE->INTENSET & mask);
   284cc:	4a48      	ldr	r2, [pc, #288]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   284ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   284d2:	0755      	lsls	r5, r2, #29
   284d4:	f57f add6 	bpl.w	28084 <GPIOTE_IRQHandler+0x2c>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   284d8:	2200      	movs	r2, #0
   284da:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   284dc:	681b      	ldr	r3, [r3, #0]
   284de:	9300      	str	r3, [sp, #0]
    (void)dummy;
   284e0:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   284e2:	f046 0604 	orr.w	r6, r6, #4
   284e6:	e5cd      	b.n	28084 <GPIOTE_IRQHandler+0x2c>
    return (NRF_GPIOTE->INTENSET & mask);
   284e8:	4a41      	ldr	r2, [pc, #260]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   284ea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   284ee:	0797      	lsls	r7, r2, #30
   284f0:	f57f adc3 	bpl.w	2807a <GPIOTE_IRQHandler+0x22>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   284f4:	2200      	movs	r2, #0
   284f6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   284f8:	681b      	ldr	r3, [r3, #0]
   284fa:	9300      	str	r3, [sp, #0]
    (void)dummy;
   284fc:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   284fe:	f046 0602 	orr.w	r6, r6, #2
   28502:	e5ba      	b.n	2807a <GPIOTE_IRQHandler+0x22>
    return (NRF_GPIOTE->INTENSET & mask);
   28504:	493a      	ldr	r1, [pc, #232]	; (285f0 <GPIOTE_IRQHandler+0x598>)
   28506:	f8d1 6304 	ldr.w	r6, [r1, #772]	; 0x304
        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
   2850a:	f016 0601 	ands.w	r6, r6, #1
   2850e:	f43f adaf 	beq.w	28070 <GPIOTE_IRQHandler+0x18>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   28512:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   28514:	6813      	ldr	r3, [r2, #0]
   28516:	9300      	str	r3, [sp, #0]
    (void)dummy;
   28518:	9b00      	ldr	r3, [sp, #0]
            status |= mask;
   2851a:	e5a9      	b.n	28070 <GPIOTE_IRQHandler+0x18>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2851c:	2200      	movs	r2, #0
   2851e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   28520:	681b      	ldr	r3, [r3, #0]
   28522:	9301      	str	r3, [sp, #4]
    return p_reg->IN;
   28524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    (void)dummy;
   28528:	9b01      	ldr	r3, [sp, #4]
   2852a:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
   2852e:	4b31      	ldr	r3, [pc, #196]	; (285f4 <GPIOTE_IRQHandler+0x59c>)
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   28530:	9202      	str	r2, [sp, #8]
    return p_reg->IN;
   28532:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
   28536:	9303      	str	r3, [sp, #12]
    if (status & NRF_GPIOTE_INT_IN_MASK)
   28538:	2e00      	cmp	r6, #0
   2853a:	f43f ae01 	beq.w	28140 <GPIOTE_IRQHandler+0xe8>
   2853e:	e5e0      	b.n	28102 <GPIOTE_IRQHandler+0xaa>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   28540:	2903      	cmp	r1, #3
   28542:	f47f af1a 	bne.w	2837a <GPIOTE_IRQHandler+0x322>
   28546:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2854a:	f8dc 3700 	ldr.w	r3, [ip, #1792]	; 0x700
   2854e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   28552:	f8cc 3700 	str.w	r3, [ip, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   28556:	f8dc 3700 	ldr.w	r3, [ip, #1792]	; 0x700
   2855a:	432b      	orrs	r3, r5
   2855c:	f8cc 3700 	str.w	r3, [ip, #1792]	; 0x700
                                ++repeat;
   28560:	2501      	movs	r5, #1
   28562:	e70a      	b.n	2837a <GPIOTE_IRQHandler+0x322>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   28564:	2903      	cmp	r1, #3
   28566:	f47f af49 	bne.w	283fc <GPIOTE_IRQHandler+0x3a4>
   2856a:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2856e:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   28572:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   28576:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2857a:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
                                ++repeat;
   2857e:	3501      	adds	r5, #1
   28580:	ea4c 0303 	orr.w	r3, ip, r3
   28584:	b2ed      	uxtb	r5, r5
   28586:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
   2858a:	e737      	b.n	283fc <GPIOTE_IRQHandler+0x3a4>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   2858c:	2903      	cmp	r1, #3
   2858e:	f47f af1c 	bne.w	283ca <GPIOTE_IRQHandler+0x372>
   28592:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   28596:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   2859a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   2859e:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   285a2:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
                                ++repeat;
   285a6:	3501      	adds	r5, #1
   285a8:	ea4c 0303 	orr.w	r3, ip, r3
   285ac:	b2ed      	uxtb	r5, r5
   285ae:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
   285b2:	e70a      	b.n	283ca <GPIOTE_IRQHandler+0x372>
   285b4:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   285b8:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   285bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   285c0:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   285c4:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   285c8:	3501      	adds	r5, #1
   285ca:	ea43 030c 	orr.w	r3, r3, ip
   285ce:	b2ed      	uxtb	r5, r5
   285d0:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
                            if (handler)
   285d4:	f1b9 0f00 	cmp.w	r9, #0
   285d8:	f47f aec6 	bne.w	28368 <GPIOTE_IRQHandler+0x310>
   285dc:	e6a4      	b.n	28328 <GPIOTE_IRQHandler+0x2d0>
                            if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   285de:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
   285e2:	e7c4      	b.n	2856e <GPIOTE_IRQHandler+0x516>
   285e4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
   285e8:	e7d5      	b.n	28596 <GPIOTE_IRQHandler+0x53e>
   285ea:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   285ee:	e7ac      	b.n	2854a <GPIOTE_IRQHandler+0x4f2>
   285f0:	40006000 	.word	0x40006000
   285f4:	50000300 	.word	0x50000300

000285f8 <UARTE0_UART0_IRQHandler>:
#endif
#if defined(NRFX_PRS_BOX_3_ADDR) && NRFX_CHECK(NRFX_PRS_BOX_3_ENABLED)
PRS_BOX_DEFINE(3)
#endif
#if defined(NRFX_PRS_BOX_4_ADDR) && NRFX_CHECK(NRFX_PRS_BOX_4_ENABLED)
PRS_BOX_DEFINE(4)
   285f8:	4b01      	ldr	r3, [pc, #4]	; (28600 <UARTE0_UART0_IRQHandler+0x8>)
   285fa:	681b      	ldr	r3, [r3, #0]
   285fc:	4718      	bx	r3
   285fe:	bf00      	nop
   28600:	20001ac4 	.word	0x20001ac4

00028604 <nrf_nvmc_page_erase>:
}

void nrf_nvmc_page_erase(uint32_t address)
{
    // Enable erase.
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een;
   28604:	4a0a      	ldr	r2, [pc, #40]	; (28630 <nrf_nvmc_page_erase+0x2c>)
   28606:	2302      	movs	r3, #2
   28608:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   2860c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   28610:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();

    // Erase the page
    NRF_NVMC->ERASEPAGE = address;
   28614:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {;}
   28618:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2861c:	2b00      	cmp	r3, #0
   2861e:	d0fb      	beq.n	28618 <nrf_nvmc_page_erase+0x14>
    wait_for_flash_ready();

    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   28620:	2300      	movs	r3, #0
   28622:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   28626:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2862a:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
   2862e:	4770      	bx	lr
   28630:	4001e000 	.word	0x4001e000

00028634 <nrf_nvmc_write_byte>:


void nrf_nvmc_write_byte(uint32_t address, uint8_t value)
{
   28634:	b470      	push	{r4, r5, r6}
    uint32_t byte_shift = address & (uint32_t)0x03;
    uint32_t address32 = address & ~byte_shift; // Address to the word this byte is in.
   28636:	f020 0503 	bic.w	r5, r0, #3
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   2863a:	00c0      	lsls	r0, r0, #3
   2863c:	f000 0318 	and.w	r3, r0, #24
    value32 = value32 + ((uint32_t)value << (byte_shift << 3));

    // Enable write.
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   28640:	4a0e      	ldr	r2, [pc, #56]	; (2867c <nrf_nvmc_write_byte+0x48>)
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   28642:	6828      	ldr	r0, [r5, #0]
   28644:	24ff      	movs	r4, #255	; 0xff
   28646:	409c      	lsls	r4, r3
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   28648:	2601      	movs	r6, #1
    uint32_t value32 = (*(uint32_t*)address32 & ~((uint32_t)0xFF << (byte_shift << (uint32_t)3)));
   2864a:	ea20 0004 	bic.w	r0, r0, r4
    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
   2864e:	f8c2 6504 	str.w	r6, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   28652:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   28656:	f3bf 8f4f 	dsb	sy
    value32 = value32 + ((uint32_t)value << (byte_shift << 3));
   2865a:	fa01 f303 	lsl.w	r3, r1, r3
   2865e:	4403      	add	r3, r0
    __ISB();
    __DSB();

    *(uint32_t*)address32 = value32;
   28660:	602b      	str	r3, [r5, #0]
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {;}
   28662:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   28666:	2b00      	cmp	r3, #0
   28668:	d0fb      	beq.n	28662 <nrf_nvmc_write_byte+0x2e>
    wait_for_flash_ready();

    NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos);
   2866a:	2300      	movs	r3, #0
   2866c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
   28670:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   28674:	f3bf 8f4f 	dsb	sy
    __ISB();
    __DSB();
}
   28678:	bc70      	pop	{r4, r5, r6}
   2867a:	4770      	bx	lr
   2867c:	4001e000 	.word	0x4001e000

00028680 <sd_temp_get>:
 *
 * @param[out] p_temp Result of temperature measurement. Die temperature in 0.25 degrees Celsius.
 *
 * @retval ::NRF_SUCCESS A temperature measurement was done, and the temperature was written to temp
 */
SVCALL(SD_TEMP_GET, uint32_t, sd_temp_get(int32_t * p_temp));
   28680:	df4c      	svc	76	; 0x4c
   28682:	4770      	bx	lr

00028684 <sd_flash_write>:
* @retval ::NRF_ERROR_BUSY           The previous command has not yet completed.
* @retval ::NRF_ERROR_INVALID_LENGTH Size was 0, or higher than the maximum allowed size.
* @retval ::NRF_ERROR_FORBIDDEN      Tried to write to an address outside the application flash area.
* @retval ::NRF_SUCCESS              The command was accepted.
*/
SVCALL(SD_FLASH_WRITE, uint32_t, sd_flash_write(uint32_t * p_dst, uint32_t const * p_src, uint32_t size));
   28684:	df29      	svc	41	; 0x29
   28686:	4770      	bx	lr

00028688 <sd_flash_page_erase>:
* @retval ::NRF_ERROR_INVALID_ADDR  Tried to erase to a non existing flash page.
* @retval ::NRF_ERROR_BUSY          The previous command has not yet completed.
* @retval ::NRF_ERROR_FORBIDDEN     Tried to erase a page outside the application flash area.
* @retval ::NRF_SUCCESS             The command was accepted.
*/
SVCALL(SD_FLASH_PAGE_ERASE, uint32_t, sd_flash_page_erase(uint32_t page_number));
   28688:	df28      	svc	40	; 0x28
   2868a:	4770      	bx	lr

0002868c <sd_ble_gap_adv_set_configure>:
 * @retval ::NRF_ERROR_NOT_SUPPORTED                   Unsupported data length or advertising parameter configuration.
 * @retval ::NRF_ERROR_NO_MEM                          Not enough memory to configure a new advertising handle. Update an
 *                                                     existing advertising handle instead.
 * @retval ::BLE_ERROR_GAP_UUID_LIST_MISMATCH Invalid UUID list supplied.
 */
SVCALL(SD_BLE_GAP_ADV_SET_CONFIGURE, uint32_t, sd_ble_gap_adv_set_configure(uint8_t *p_adv_handle, ble_gap_adv_data_t const *p_adv_data, ble_gap_adv_params_t const *p_adv_params));
   2868c:	df72      	svc	114	; 0x72
   2868e:	4770      	bx	lr

00028690 <sd_ble_gap_adv_start>:
                                            Stop one or more currently active roles (Central, Peripheral, Broadcaster or Observer) and try again.
 *                                        - p_adv_params is configured with connectable advertising, but the event_length parameter
 *                                          associated with conn_cfg_tag is too small to be able to establish a connection on
 *                                          the selected advertising phys. Use @ref sd_ble_cfg_set to increase the event length.
 */
SVCALL(SD_BLE_GAP_ADV_START, uint32_t, sd_ble_gap_adv_start(uint8_t adv_handle, uint8_t conn_cfg_tag));
   28690:	df73      	svc	115	; 0x73
   28692:	4770      	bx	lr

00028694 <sd_ble_gap_adv_stop>:
 *
 * @retval ::NRF_SUCCESS The BLE stack has stopped advertising.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Invalid advertising handle.
 * @retval ::NRF_ERROR_INVALID_STATE The advertising handle is not advertising.
 */
SVCALL(SD_BLE_GAP_ADV_STOP, uint32_t, sd_ble_gap_adv_stop(uint8_t adv_handle));
   28694:	df74      	svc	116	; 0x74
   28696:	4770      	bx	lr

00028698 <sd_ble_gap_tx_power_set>:
 * @retval ::NRF_SUCCESS Successfully changed the transmit power.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid parameter(s) supplied.
 * @retval ::BLE_ERROR_INVALID_ADV_HANDLE Advertising handle not found.
 * @retval ::BLE_ERROR_INVALID_CONN_HANDLE Invalid connection handle supplied.
 */
SVCALL(SD_BLE_GAP_TX_POWER_SET, uint32_t, sd_ble_gap_tx_power_set(uint8_t role, uint16_t handle, int8_t tx_power));
   28698:	df77      	svc	119	; 0x77
   2869a:	4770      	bx	lr

0002869c <Errors::check(short, bool) [clone .constprop.0]>:
struct Errors {

                //if error, show error code 3 times, 
                //reset unless also pass in false
SA  check       (i16 err, bool reboot = true) {
                    if( err == 0 ) return;
   2869c:	2800      	cmp	r0, #0
   2869e:	f000 808a 	beq.w	287b6 <Errors::check(short, bool) [clone .constprop.0]+0x11a>
SA  check       (i16 err, bool reboot = true) {
   286a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286a6:	4e44      	ldr	r6, [pc, #272]	; (287b8 <Errors::check(short, bool) [clone .constprop.0]+0x11c>)
   286a8:	fa1f f880 	uxth.w	r8, r0
   286ac:	f046 0601 	orr.w	r6, r6, #1
                    if( err == 0 ) return;
   286b0:	f04f 0903 	mov.w	r9, #3
SA  latchOn     ()          { reg.DETECTMODE = 1; }

//------------
//  status
//------------
SA  isOutput    ()          { return reg.DIRP; }
   286b4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000

            //show error code via led's, skip leading 0's
            //show 1-15 blinks for each nibble (0x01-0x0f)
            //a zero will be a short blue blink
SA  error   (u16 hex) {
                bool lz = true;
   286b8:	2501      	movs	r5, #1
                for( auto i = 12; i >= 0; i -= 4 ){
   286ba:	270c      	movs	r7, #12
                    u8 v = (hex>>i) bitand 0xf;
   286bc:	fa48 f307 	asr.w	r3, r8, r7
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   286c0:	f013 030f 	ands.w	r3, r3, #15
   286c4:	d04e      	beq.n	28764 <Errors::check(short, bool) [clone .constprop.0]+0xc8>
   286c6:	f8d4 2720 	ldr.w	r2, [r4, #1824]	; 0x720
                //in places that sets a peripheral pin
                //  PSEL.SCA = board.sca.pinNumber();
SCA pinNumber   ()          { return Pin_; }

SA  blinkN      (uint16_t n, uint32_t mson, uint32_t msoff = 0, uint32_t lastdelayms = 0) {
                    if( not isOutput() ) return;
   286ca:	07d5      	lsls	r5, r2, #31
   286cc:	d529      	bpl.n	28722 <Errors::check(short, bool) [clone .constprop.0]+0x86>
                    if( not msoff ) msoff = mson;
                    while( n-- ){ 
   286ce:	3b01      	subs	r3, #1
   286d0:	b29d      	uxth	r5, r3
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   286d2:	f44f 7a80 	mov.w	sl, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   286d6:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   286da:	05d8      	lsls	r0, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   286dc:	bf4c      	ite	mi
   286de:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   286e2:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   286e6:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   286ea:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   286ee:	47b0      	blx	r6
        return;
    }

    do {
        nrf_delay_us(1000);
    } while (--ms_time);
   286f0:	f1bb 0b01 	subs.w	fp, fp, #1
   286f4:	d1f9      	bne.n	286ea <Errors::check(short, bool) [clone .constprop.0]+0x4e>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   286f6:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   286fa:	05d9      	lsls	r1, r3, #23
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   286fc:	bf4c      	ite	mi
   286fe:	f8c4 a50c 	strmi.w	sl, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28702:	f8c4 a508 	strpl.w	sl, [r4, #1288]	; 0x508
   28706:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
   2870a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2870e:	47b0      	blx	r6
   28710:	f1bb 0b01 	subs.w	fp, fp, #1
   28714:	d1f9      	bne.n	2870a <Errors::check(short, bool) [clone .constprop.0]+0x6e>
                    while( n-- ){ 
   28716:	3d01      	subs	r5, #1
   28718:	b2ad      	uxth	r5, r5
   2871a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2871e:	429d      	cmp	r5, r3
   28720:	d1d9      	bne.n	286d6 <Errors::check(short, bool) [clone .constprop.0]+0x3a>
   28722:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
   28726:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2872a:	47b0      	blx	r6
   2872c:	3d01      	subs	r5, #1
   2872e:	d1fa      	bne.n	28726 <Errors::check(short, bool) [clone .constprop.0]+0x8a>
   28730:	3f04      	subs	r7, #4
   28732:	1d3b      	adds	r3, r7, #4
   28734:	d1c2      	bne.n	286bc <Errors::check(short, bool) [clone .constprop.0]+0x20>
   28736:	f640 35b8 	movw	r5, #3000	; 0xbb8
   2873a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2873e:	47b0      	blx	r6
   28740:	3d01      	subs	r5, #1
   28742:	d1fa      	bne.n	2873a <Errors::check(short, bool) [clone .constprop.0]+0x9e>
                    for( auto i = 0; i < 3; i++ ){
   28744:	f1b9 0901 	subs.w	r9, r9, #1
   28748:	d1b6      	bne.n	286b8 <Errors::check(short, bool) [clone .constprop.0]+0x1c>
   2874a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2874e:	491b      	ldr	r1, [pc, #108]	; (287bc <Errors::check(short, bool) [clone .constprop.0]+0x120>)
   28750:	4b1b      	ldr	r3, [pc, #108]	; (287c0 <Errors::check(short, bool) [clone .constprop.0]+0x124>)
   28752:	68ca      	ldr	r2, [r1, #12]
   28754:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   28758:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2875a:	60cb      	str	r3, [r1, #12]
   2875c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   28760:	bf00      	nop
   28762:	e7fd      	b.n	28760 <Errors::check(short, bool) [clone .constprop.0]+0xc4>
                    if( v == 0 and lz == true ) continue; //skip leading 0's
   28764:	2d00      	cmp	r5, #0
   28766:	d1e3      	bne.n	28730 <Errors::check(short, bool) [clone .constprop.0]+0x94>
SA  isOutput    ()          { return reg.DIRP; }
   28768:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
                    if( not isOutput() ) return;
   2876c:	07da      	lsls	r2, r3, #31
   2876e:	d5d8      	bpl.n	28722 <Errors::check(short, bool) [clone .constprop.0]+0x86>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28770:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   28774:	f413 5f80 	tst.w	r3, #4096	; 0x1000
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2877c:	bf14      	ite	ne
   2877e:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28782:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
                for( auto i = 12; i >= 0; i -= 4 ){
   28786:	2532      	movs	r5, #50	; 0x32
   28788:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2878c:	47b0      	blx	r6
   2878e:	3d01      	subs	r5, #1
   28790:	d1fa      	bne.n	28788 <Errors::check(short, bool) [clone .constprop.0]+0xec>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28792:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   28796:	f413 5f80 	tst.w	r3, #4096	; 0x1000
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   2879a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2879e:	bf14      	ite	ne
   287a0:	f8c4 350c 	strne.w	r3, [r4, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   287a4:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
   287a8:	2532      	movs	r5, #50	; 0x32
   287aa:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   287ae:	47b0      	blx	r6
   287b0:	3d01      	subs	r5, #1
   287b2:	d1fa      	bne.n	287aa <Errors::check(short, bool) [clone .constprop.0]+0x10e>
   287b4:	e7b5      	b.n	28722 <Errors::check(short, bool) [clone .constprop.0]+0x86>
   287b6:	4770      	bx	lr
   287b8:	0002b360 	.word	0x0002b360
   287bc:	e000ed00 	.word	0xe000ed00
   287c0:	05fa0004 	.word	0x05fa0004

000287c4 <Ble::eventHandler(ble_evt_t const*, void*)>:
SA  isOutput    ()          { return reg.DIRP; }
   287c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   287c8:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                    if( not isOutput() ) return;
   287cc:	07d2      	lsls	r2, r2, #31
   287ce:	d524      	bpl.n	2881a <Ble::eventHandler(ble_evt_t const*, void*)+0x56>
------------------------------------------------------------------------------*/
struct Ble {

    private:
                    //unused, but if something shows up blink the red led
SA  eventHandler    (ble_evt_t const * p_ble_evt, void * p_context) {
   287d0:	b510      	push	{r4, lr}
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   287d2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   287d6:	4c11      	ldr	r4, [pc, #68]	; (2881c <Ble::eventHandler(ble_evt_t const*, void*)+0x58>)
   287d8:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   287dc:	f44f 7280 	mov.w	r2, #256	; 0x100
   287e0:	bf14      	ite	ne
   287e2:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   287e6:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   287ea:	f044 0401 	orr.w	r4, r4, #1
    delay_cycles(cycles);
   287ee:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   287f2:	47a0      	blx	r4
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   287f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   287f8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   287fc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   28800:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28804:	f44f 7280 	mov.w	r2, #256	; 0x100
   28808:	bf14      	ite	ne
   2880a:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2880e:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   28812:	4623      	mov	r3, r4
                        switch (p_ble_evt->header.evt_id){
                            default:
                                board.caution(); //red blink
                                break;
                        }
                    }
   28814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28818:	4718      	bx	r3
   2881a:	4770      	bx	lr
   2881c:	0002b360 	.word	0x0002b360

00028820 <Pca10059::init()>:
SA  init    () {
   28820:	b430      	push	{r4, r5}
   28822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   28826:	490f      	ldr	r1, [pc, #60]	; (28864 <Pca10059::init()+0x44>)
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   28828:	2201      	movs	r2, #1
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2882a:	2440      	movs	r4, #64	; 0x40
   2882c:	f44f 7000 	mov.w	r0, #512	; 0x200
   28830:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
   28834:	f44f 7580 	mov.w	r5, #256	; 0x100
                    reg.PIN_CNF = it.INIT_CNF;
   28838:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2883c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   28840:	f8c1 0508 	str.w	r0, [r1, #1288]	; 0x508
SA  init        (Ts... ts)  { initT it{2}; init_(it, ts...); }
   28844:	200c      	movs	r0, #12
                    reg.PIN_CNF = it.INIT_CNF;
   28846:	f8c1 2724 	str.w	r2, [r1, #1828]	; 0x724
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2884a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
                    reg.PIN_CNF = it.INIT_CNF;
   2884e:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28852:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
                    reg.PIN_CNF = it.INIT_CNF;
   28856:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730
   2885a:	f8c1 0718 	str.w	r0, [r1, #1816]	; 0x718
            }
   2885e:	bc30      	pop	{r4, r5}
   28860:	4770      	bx	lr
   28862:	bf00      	nop
   28864:	50000300 	.word	0x50000300

00028868 <Pca10059::alive()>:
SA  alive   () {
   28868:	b538      	push	{r3, r4, r5, lr}
SA  isOutput    ()          { return reg.DIRP; }
   2886a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2886e:	f8d3 2718 	ldr.w	r2, [r3, #1816]	; 0x718
                    if( not isOutput() ) return;
   28872:	07d1      	lsls	r1, r2, #31
   28874:	d52c      	bpl.n	288d0 <Pca10059::alive()+0x68>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28876:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2887a:	4c65      	ldr	r4, [pc, #404]	; (28a10 <Pca10059::alive()+0x1a8>)
   2887c:	f012 0f40 	tst.w	r2, #64	; 0x40
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28880:	f04f 0240 	mov.w	r2, #64	; 0x40
   28884:	bf14      	ite	ne
   28886:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2888a:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   2888e:	2519      	movs	r5, #25
   28890:	f044 0401 	orr.w	r4, r4, #1
   28894:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28898:	47a0      	blx	r4
   2889a:	3d01      	subs	r5, #1
   2889c:	d1fa      	bne.n	28894 <Pca10059::alive()+0x2c>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2889e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   288a2:	2519      	movs	r5, #25
   288a4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   288a8:	f012 0f40 	tst.w	r2, #64	; 0x40
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   288ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   288b0:	bf14      	ite	ne
   288b2:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   288b6:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   288ba:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   288be:	47a0      	blx	r4
   288c0:	3d01      	subs	r5, #1
   288c2:	d1fa      	bne.n	288ba <Pca10059::alive()+0x52>
   288c4:	25c8      	movs	r5, #200	; 0xc8
   288c6:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   288ca:	47a0      	blx	r4
   288cc:	3d01      	subs	r5, #1
   288ce:	d1fa      	bne.n	288c6 <Pca10059::alive()+0x5e>
SA  isOutput    ()          { return reg.DIRP; }
   288d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   288d4:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                    if( not isOutput() ) return;
   288d8:	07d2      	lsls	r2, r2, #31
   288da:	d52a      	bpl.n	28932 <Pca10059::alive()+0xca>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   288dc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   288e0:	05d1      	lsls	r1, r2, #23
   288e2:	f140 808a 	bpl.w	289fa <Pca10059::alive()+0x192>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   288e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   288ea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   288ee:	4c48      	ldr	r4, [pc, #288]	; (28a10 <Pca10059::alive()+0x1a8>)
   288f0:	2519      	movs	r5, #25
   288f2:	f044 0401 	orr.w	r4, r4, #1
   288f6:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   288fa:	47a0      	blx	r4
   288fc:	3d01      	subs	r5, #1
   288fe:	d1fa      	bne.n	288f6 <Pca10059::alive()+0x8e>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28900:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   28904:	2519      	movs	r5, #25
   28906:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2890a:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   2890e:	f44f 7280 	mov.w	r2, #256	; 0x100
   28912:	bf14      	ite	ne
   28914:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28918:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   2891c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28920:	47a0      	blx	r4
   28922:	3d01      	subs	r5, #1
   28924:	d1fa      	bne.n	2891c <Pca10059::alive()+0xb4>
   28926:	25c8      	movs	r5, #200	; 0xc8
   28928:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2892c:	47a0      	blx	r4
   2892e:	3d01      	subs	r5, #1
   28930:	d1fa      	bne.n	28928 <Pca10059::alive()+0xc0>
SA  isOutput    ()          { return reg.DIRP; }
   28932:	4b38      	ldr	r3, [pc, #224]	; (28a14 <Pca10059::alive()+0x1ac>)
   28934:	f8d3 2724 	ldr.w	r2, [r3, #1828]	; 0x724
                    if( not isOutput() ) return;
   28938:	07d0      	lsls	r0, r2, #31
   2893a:	d528      	bpl.n	2898e <Pca10059::alive()+0x126>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2893c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   28940:	0594      	lsls	r4, r2, #22
   28942:	d55f      	bpl.n	28a04 <Pca10059::alive()+0x19c>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28944:	f44f 7200 	mov.w	r2, #512	; 0x200
   28948:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   2894c:	4c30      	ldr	r4, [pc, #192]	; (28a10 <Pca10059::alive()+0x1a8>)
   2894e:	2519      	movs	r5, #25
   28950:	f044 0401 	orr.w	r4, r4, #1
   28954:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28958:	47a0      	blx	r4
   2895a:	3d01      	subs	r5, #1
   2895c:	d1fa      	bne.n	28954 <Pca10059::alive()+0xec>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2895e:	4b2d      	ldr	r3, [pc, #180]	; (28a14 <Pca10059::alive()+0x1ac>)
   28960:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   28964:	f412 7f00 	tst.w	r2, #512	; 0x200
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28968:	f44f 7200 	mov.w	r2, #512	; 0x200
   2896c:	bf14      	ite	ne
   2896e:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28972:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   28976:	2519      	movs	r5, #25
   28978:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2897c:	47a0      	blx	r4
   2897e:	3d01      	subs	r5, #1
   28980:	d1fa      	bne.n	28978 <Pca10059::alive()+0x110>
   28982:	25c8      	movs	r5, #200	; 0xc8
   28984:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28988:	47a0      	blx	r4
   2898a:	3d01      	subs	r5, #1
   2898c:	d1fa      	bne.n	28984 <Pca10059::alive()+0x11c>
SA  isOutput    ()          { return reg.DIRP; }
   2898e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   28992:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
                    if( not isOutput() ) return;
   28996:	07d5      	lsls	r5, r2, #31
   28998:	d529      	bpl.n	289ee <Pca10059::alive()+0x186>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2899a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2899e:	04d2      	lsls	r2, r2, #19
   289a0:	d526      	bpl.n	289f0 <Pca10059::alive()+0x188>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   289a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   289a6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   289aa:	4c19      	ldr	r4, [pc, #100]	; (28a10 <Pca10059::alive()+0x1a8>)
   289ac:	2519      	movs	r5, #25
   289ae:	f044 0401 	orr.w	r4, r4, #1
   289b2:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   289b6:	47a0      	blx	r4
   289b8:	3d01      	subs	r5, #1
   289ba:	d1fa      	bne.n	289b2 <Pca10059::alive()+0x14a>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   289bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   289c0:	2519      	movs	r5, #25
   289c2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   289c6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   289ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   289ce:	bf14      	ite	ne
   289d0:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   289d4:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
   289d8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   289dc:	47a0      	blx	r4
   289de:	3d01      	subs	r5, #1
   289e0:	d1fa      	bne.n	289d8 <Pca10059::alive()+0x170>
   289e2:	25c8      	movs	r5, #200	; 0xc8
   289e4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   289e8:	47a0      	blx	r4
   289ea:	3d01      	subs	r5, #1
   289ec:	d1fa      	bne.n	289e4 <Pca10059::alive()+0x17c>
            }
   289ee:	bd38      	pop	{r3, r4, r5, pc}
   289f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   289f4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   289f8:	e7d7      	b.n	289aa <Pca10059::alive()+0x142>
   289fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   289fe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   28a02:	e774      	b.n	288ee <Pca10059::alive()+0x86>
   28a04:	f44f 7200 	mov.w	r2, #512	; 0x200
   28a08:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   28a0c:	e79e      	b.n	2894c <Pca10059::alive()+0xe4>
   28a0e:	bf00      	nop
   28a10:	0002b360 	.word	0x0002b360
   28a14:	50000300 	.word	0x50000300

00028a18 <Saadc::isBusy()>:
    reg { *(reinterpret_cast<Saadc_*>(base_)) };

//--------------------
//  control, status
//--------------------
SA  isBusy          ()          { return reg.STATUS; } //conversion in progress?
   28a18:	4b01      	ldr	r3, [pc, #4]	; (28a20 <Saadc::isBusy()+0x8>)
   28a1a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   28a1e:	4770      	bx	lr
   28a20:	40007000 	.word	0x40007000

00028a24 <Saadc::enable()>:
SA  enable          ()          { reg.ENABLE = 1; }
   28a24:	4b02      	ldr	r3, [pc, #8]	; (28a30 <Saadc::enable()+0xc>)
   28a26:	2201      	movs	r2, #1
   28a28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   28a2c:	4770      	bx	lr
   28a2e:	bf00      	nop
   28a30:	40007000 	.word	0x40007000

00028a34 <Saadc::disable()>:
SA  disable         ()          { reg.ENABLE = 0; }
   28a34:	4b02      	ldr	r3, [pc, #8]	; (28a40 <Saadc::disable()+0xc>)
   28a36:	2200      	movs	r2, #0
   28a38:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   28a3c:	4770      	bx	lr
   28a3e:	bf00      	nop
   28a40:	40007000 	.word	0x40007000

00028a44 <Saadc::clearStarted()>:
SA  isEnabled       ()          { return reg.ENABLE; }

//--------------------
//  events
//--------------------
SA  clearStarted    ()          { reg.EVENTS.STARTED = 0; }
   28a44:	4b02      	ldr	r3, [pc, #8]	; (28a50 <Saadc::clearStarted()+0xc>)
   28a46:	2200      	movs	r2, #0
   28a48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   28a4c:	4770      	bx	lr
   28a4e:	bf00      	nop
   28a50:	40007000 	.word	0x40007000

00028a54 <Saadc::clearBufferFull()>:
SA  clearBufferFull ()          { reg.EVENTS.END = 0; }
   28a54:	4b02      	ldr	r3, [pc, #8]	; (28a60 <Saadc::clearBufferFull()+0xc>)
   28a56:	2200      	movs	r2, #0
   28a58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   28a5c:	4770      	bx	lr
   28a5e:	bf00      	nop
   28a60:	40007000 	.word	0x40007000

00028a64 <Saadc::clearConversion()>:
SA  clearConversion ()          { reg.EVENTS.DONE = 0; }
   28a64:	4b02      	ldr	r3, [pc, #8]	; (28a70 <Saadc::clearConversion()+0xc>)
   28a66:	2200      	movs	r2, #0
   28a68:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   28a6c:	4770      	bx	lr
   28a6e:	bf00      	nop
   28a70:	40007000 	.word	0x40007000

00028a74 <Saadc::clearResult()>:
SA  clearResult     ()          { reg.EVENTS.RESULTDONE = 0; }
   28a74:	4b02      	ldr	r3, [pc, #8]	; (28a80 <Saadc::clearResult()+0xc>)
   28a76:	2200      	movs	r2, #0
   28a78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   28a7c:	4770      	bx	lr
   28a7e:	bf00      	nop
   28a80:	40007000 	.word	0x40007000

00028a84 <Saadc::clearCalibrated()>:
SA  clearCalibrated ()          { reg.EVENTS.CALIBRATEDONE = 0; }
   28a84:	4b02      	ldr	r3, [pc, #8]	; (28a90 <Saadc::clearCalibrated()+0xc>)
   28a86:	2200      	movs	r2, #0
   28a88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   28a8c:	4770      	bx	lr
   28a8e:	bf00      	nop
   28a90:	40007000 	.word	0x40007000

00028a94 <Saadc::clearStopped()>:
SA  clearStopped    ()          { reg.EVENTS.STOPPED = 0; }
   28a94:	4b02      	ldr	r3, [pc, #8]	; (28aa0 <Saadc::clearStopped()+0xc>)
   28a96:	2200      	movs	r2, #0
   28a98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   28a9c:	4770      	bx	lr
   28a9e:	bf00      	nop
   28aa0:	40007000 	.word	0x40007000

00028aa4 <Saadc::clearEvents()>:
SA  clearLimitHigh  (CH e)      { reg.EVENTS.LIMIT[e].H = 0; }
SA  clearLimitLow   (CH e)      { reg.EVENTS.LIMIT[e].L = 0; }
SA  clearEvents     ()          { 
   28aa4:	b508      	push	{r3, lr}
                                    clearStarted();
   28aa6:	f7ff ffcd 	bl	28a44 <Saadc::clearStarted()>
                                    clearBufferFull();
   28aaa:	f7ff ffd3 	bl	28a54 <Saadc::clearBufferFull()>
                                    clearConversion();
   28aae:	f7ff ffd9 	bl	28a64 <Saadc::clearConversion()>
                                    clearResult();
   28ab2:	f7ff ffdf 	bl	28a74 <Saadc::clearResult()>
                                    clearStopped();
   28ab6:	f7ff ffed 	bl	28a94 <Saadc::clearStopped()>
                                }
   28aba:	bd08      	pop	{r3, pc}

00028abc <Saadc::isResult()>:

SA  isStarted       ()          { return reg.EVENTS.STARTED; }
SA  isBufferFull    ()          { return reg.EVENTS.END; } //ram buffer is filled
SA  isConversion    ()          { return reg.EVENTS.DONE; } //a conversion was done
SA  isResult        ()          { return reg.EVENTS.RESULTDONE; } //when conversion(s) stored to ram
   28abc:	4b01      	ldr	r3, [pc, #4]	; (28ac4 <Saadc::isResult()+0x8>)
   28abe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   28ac2:	4770      	bx	lr
   28ac4:	40007000 	.word	0x40007000

00028ac8 <Saadc::isCalibrated()>:
SA  isCalibrated    ()          { return reg.EVENTS.CALIBRATEDONE; }
   28ac8:	4b01      	ldr	r3, [pc, #4]	; (28ad0 <Saadc::isCalibrated()+0x8>)
   28aca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   28ace:	4770      	bx	lr
   28ad0:	40007000 	.word	0x40007000

00028ad4 <Saadc::start()>:
SA  isLimitLow      (CH e)      { return reg.EVENTS.LIMIT[e].L; }

//--------------------
//  tasks
//--------------------
SA  start           ()          { enable(); reg.TASKS.START = 1; } 
   28ad4:	b508      	push	{r3, lr}
   28ad6:	f7ff ffa5 	bl	28a24 <Saadc::enable()>
   28ada:	4b02      	ldr	r3, [pc, #8]	; (28ae4 <Saadc::start()+0x10>)
   28adc:	2201      	movs	r2, #1
   28ade:	601a      	str	r2, [r3, #0]
   28ae0:	bd08      	pop	{r3, pc}
   28ae2:	bf00      	nop
   28ae4:	40007000 	.word	0x40007000

00028ae8 <Saadc::sample()>:
SA  sample          ()          { reg.TASKS.SAMPLE = 1; } 
   28ae8:	4b01      	ldr	r3, [pc, #4]	; (28af0 <Saadc::sample()+0x8>)
   28aea:	2201      	movs	r2, #1
   28aec:	605a      	str	r2, [r3, #4]
   28aee:	4770      	bx	lr
   28af0:	40007000 	.word	0x40007000

00028af4 <Saadc::calibrate()>:
SA  stop            ()          { reg.TASKS.STOP = 1; } 
SA  calibrate       ()          {   
   28af4:	b508      	push	{r3, lr}
                                    enable();
   28af6:	f7ff ff95 	bl	28a24 <Saadc::enable()>
                                    reg.TASKS.CALIBRATE = 1;
   28afa:	4b05      	ldr	r3, [pc, #20]	; (28b10 <Saadc::calibrate()+0x1c>)
   28afc:	2201      	movs	r2, #1
   28afe:	60da      	str	r2, [r3, #12]
                                    while( not isCalibrated() );
   28b00:	f7ff ffe2 	bl	28ac8 <Saadc::isCalibrated()>
   28b04:	2800      	cmp	r0, #0
   28b06:	d0fb      	beq.n	28b00 <Saadc::calibrate()+0xc>
                                    clearCalibrated();
   28b08:	f7ff ffbc 	bl	28a84 <Saadc::clearCalibrated()>
                                    //leave enabled
                                }
   28b0c:	bd08      	pop	{r3, pc}
   28b0e:	bf00      	nop
   28b10:	40007000 	.word	0x40007000

00028b14 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>:

//--------------------
//  channel config
//--------------------
SA  isChannelUsed   (CH e)      { return inuse_ bitand (1<<e); }
SA  channelSetup    (CH e, u32 cfg, PSEL p, PSEL n = NC) { 
   28b14:	b470      	push	{r4, r5, r6}
                                    if( p or n ) inuse_ or_eq (1<<e);
   28b16:	ea52 0403 	orrs.w	r4, r2, r3
   28b1a:	d005      	beq.n	28b28 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x14>
   28b1c:	4d09      	ldr	r5, [pc, #36]	; (28b44 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)+0x30>)
   28b1e:	2401      	movs	r4, #1
   28b20:	782e      	ldrb	r6, [r5, #0]
   28b22:	4084      	lsls	r4, r0
   28b24:	4334      	orrs	r4, r6
   28b26:	702c      	strb	r4, [r5, #0]
                                    reg.CHCONFIG[e].PSELP = p;
   28b28:	0100      	lsls	r0, r0, #4
   28b2a:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
   28b2e:	f504 44e0 	add.w	r4, r4, #28672	; 0x7000
   28b32:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = n; 
   28b36:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
                                    reg.CHCONFIG[e].CONFIG = cfg;                      
   28b3a:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
                                }
   28b3e:	bc70      	pop	{r4, r5, r6}
   28b40:	4770      	bx	lr
   28b42:	bf00      	nop
   28b44:	20001b7f 	.word	0x20001b7f

00028b48 <Saadc::channelRelease(Saadc::CH)>:
SA  channelRelease  (CH e)      {
   28b48:	b410      	push	{r4}
                                    inuse_ and_eq compl (1<<e); 
   28b4a:	4c0a      	ldr	r4, [pc, #40]	; (28b74 <Saadc::channelRelease(Saadc::CH)+0x2c>)
   28b4c:	0103      	lsls	r3, r0, #4
   28b4e:	7822      	ldrb	r2, [r4, #0]
   28b50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   28b54:	2101      	movs	r1, #1
   28b56:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   28b5a:	fa01 f000 	lsl.w	r0, r1, r0
   28b5e:	ea22 0000 	bic.w	r0, r2, r0
                                    reg.CHCONFIG[e].PSELP = NC;
   28b62:	2200      	movs	r2, #0
   28b64:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                                    reg.CHCONFIG[e].PSELN = NC;
   28b68:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                    inuse_ and_eq compl (1<<e); 
   28b6c:	7020      	strb	r0, [r4, #0]
                                }
   28b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   28b72:	4770      	bx	lr
   28b74:	20001b7f 	.word	0x20001b7f

00028b78 <Saadc::channelOnly(Saadc::CH)>:
SA  channelOnly     (CH e)      {
   28b78:	b510      	push	{r4, lr}
                                    for( int i = CH0; i <= CH7; i++ ){
                                        if( e != i ) channelRelease( (CH)i );
   28b7a:	4604      	mov	r4, r0
   28b7c:	bb08      	cbnz	r0, 28bc2 <Saadc::channelOnly(Saadc::CH)+0x4a>
   28b7e:	2001      	movs	r0, #1
   28b80:	f7ff ffe2 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28b84:	2002      	movs	r0, #2
   28b86:	f7ff ffdf 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28b8a:	2c03      	cmp	r4, #3
   28b8c:	d10b      	bne.n	28ba6 <Saadc::channelOnly(Saadc::CH)+0x2e>
   28b8e:	2004      	movs	r0, #4
   28b90:	f7ff ffda 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28b94:	2005      	movs	r0, #5
   28b96:	f7ff ffd7 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28b9a:	2c06      	cmp	r4, #6
   28b9c:	d10b      	bne.n	28bb6 <Saadc::channelOnly(Saadc::CH)+0x3e>
   28b9e:	2007      	movs	r0, #7
   28ba0:	f7ff ffd2 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
                                    }
                                }
   28ba4:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   28ba6:	2003      	movs	r0, #3
   28ba8:	f7ff ffce 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bac:	2c04      	cmp	r4, #4
   28bae:	d115      	bne.n	28bdc <Saadc::channelOnly(Saadc::CH)+0x64>
   28bb0:	2005      	movs	r0, #5
   28bb2:	f7ff ffc9 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bb6:	2006      	movs	r0, #6
   28bb8:	f7ff ffc6 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bbc:	2c07      	cmp	r4, #7
   28bbe:	d1ee      	bne.n	28b9e <Saadc::channelOnly(Saadc::CH)+0x26>
                                }
   28bc0:	bd10      	pop	{r4, pc}
                                        if( e != i ) channelRelease( (CH)i );
   28bc2:	2000      	movs	r0, #0
   28bc4:	f7ff ffc0 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bc8:	2c01      	cmp	r4, #1
   28bca:	d0db      	beq.n	28b84 <Saadc::channelOnly(Saadc::CH)+0xc>
   28bcc:	2001      	movs	r0, #1
   28bce:	f7ff ffbb 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bd2:	2c02      	cmp	r4, #2
   28bd4:	d1d6      	bne.n	28b84 <Saadc::channelOnly(Saadc::CH)+0xc>
   28bd6:	2003      	movs	r0, #3
   28bd8:	f7ff ffb6 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bdc:	2004      	movs	r0, #4
   28bde:	f7ff ffb3 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28be2:	2c05      	cmp	r4, #5
   28be4:	d1d6      	bne.n	28b94 <Saadc::channelOnly(Saadc::CH)+0x1c>
   28be6:	2006      	movs	r0, #6
   28be8:	f7ff ffae 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
   28bec:	e7d7      	b.n	28b9e <Saadc::channelOnly(Saadc::CH)+0x26>
   28bee:	bf00      	nop

00028bf0 <Saadc::resolution(Saadc::RES)>:
SA  limitHL         (CH e, i16 H, i16 L) { limitH(e,H); limitL(e,L); }

//--------------------
//  config
//--------------------
SA  resolution      (RES e)         { reg.RESOLUTION = e; }
   28bf0:	4b01      	ldr	r3, [pc, #4]	; (28bf8 <Saadc::resolution(Saadc::RES)+0x8>)
   28bf2:	f8c3 05f0 	str.w	r0, [r3, #1520]	; 0x5f0
   28bf6:	4770      	bx	lr
   28bf8:	40007000 	.word	0x40007000

00028bfc <Saadc::resolution()>:
SA  resolution      ()              { return RES(reg.RESOLUTION); }
   28bfc:	4b02      	ldr	r3, [pc, #8]	; (28c08 <Saadc::resolution()+0xc>)
   28bfe:	f8d3 05f0 	ldr.w	r0, [r3, #1520]	; 0x5f0
   28c02:	b2c0      	uxtb	r0, r0
   28c04:	4770      	bx	lr
   28c06:	bf00      	nop
   28c08:	40007000 	.word	0x40007000

00028c0c <Saadc::overSample(Saadc::OVERSAMP)>:

SA  overSample      (OVERSAMP e)    { reg.OVERSAMPLE = e; }
   28c0c:	4b01      	ldr	r3, [pc, #4]	; (28c14 <Saadc::overSample(Saadc::OVERSAMP)+0x8>)
   28c0e:	f8c3 05f4 	str.w	r0, [r3, #1524]	; 0x5f4
   28c12:	4770      	bx	lr
   28c14:	40007000 	.word	0x40007000

00028c18 <Saadc::overSample()>:
SA  overSample      ()              { return OVERSAMP(reg.OVERSAMPLE); }
   28c18:	4b02      	ldr	r3, [pc, #8]	; (28c24 <Saadc::overSample()+0xc>)
   28c1a:	f8d3 05f4 	ldr.w	r0, [r3, #1524]	; 0x5f4
   28c1e:	b2c0      	uxtb	r0, r0
   28c20:	4770      	bx	lr
   28c22:	bf00      	nop
   28c24:	40007000 	.word	0x40007000

00028c28 <Saadc::bufferAddr(unsigned long)>:
                                        if( v > 2047 ) v =2047;
                                        reg.SAMPLERATE = v bitor (1<<12);
                                    }
SA  sampleRateTask  ()              { reg.SAMPLERATE = 0; }

SA  bufferAddr      (u32 v)         { reg.RESULTPTR = v; }
   28c28:	4b01      	ldr	r3, [pc, #4]	; (28c30 <Saadc::bufferAddr(unsigned long)+0x8>)
   28c2a:	f8c3 062c 	str.w	r0, [r3, #1580]	; 0x62c
   28c2e:	4770      	bx	lr
   28c30:	40007000 	.word	0x40007000

00028c34 <Saadc::bufferSize(unsigned short)>:
SA  bufferAddr      ()              { return reg.RESULTPTR; }
SA  bufferSize      (u16 v)         { reg.RESULTMAXCNT = v; } //15bits (max 32767)
   28c34:	4b01      	ldr	r3, [pc, #4]	; (28c3c <Saadc::bufferSize(unsigned short)+0x8>)
   28c36:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   28c3a:	4770      	bx	lr
   28c3c:	40007000 	.word	0x40007000

00028c40 <Saadc::bufferSet(unsigned long, unsigned short)>:
SA  bufferSize      ()              { return reg.RESULTMAXCNT; }
SA  bufferSet       (u32 v, u16 n)  { bufferAddr(v); bufferSize(n); }
   28c40:	b510      	push	{r4, lr}
   28c42:	460c      	mov	r4, r1
   28c44:	f7ff fff0 	bl	28c28 <Saadc::bufferAddr(unsigned long)>
   28c48:	4620      	mov	r0, r4
   28c4a:	f7ff fff3 	bl	28c34 <Saadc::bufferSize(unsigned short)>
   28c4e:	bd10      	pop	{r4, pc}

00028c50 <SaadcChan::setConfig(short&)>:
    private:
//============

                    //setup our channel config and buffer in Saadc
                    //take exclusive use of Saadc
SA setConfig        (i16& v) {
   28c50:	b538      	push	{r3, r4, r5, lr}
   28c52:	4604      	mov	r4, r0
                        if( isBusy() ) return false;        //is in use
   28c54:	f7ff fee0 	bl	28a18 <Saadc::isBusy()>
   28c58:	b9b8      	cbnz	r0, 28c8a <SaadcChan::setConfig(short&)+0x3a>
                        if( pselP_ == NC and pselN_ == NC ) return false; //or we are not init
   28c5a:	4a0d      	ldr	r2, [pc, #52]	; (28c90 <SaadcChan::setConfig(short&)+0x40>)
   28c5c:	4b0d      	ldr	r3, [pc, #52]	; (28c94 <SaadcChan::setConfig(short&)+0x44>)
   28c5e:	7812      	ldrb	r2, [r2, #0]
   28c60:	781b      	ldrb	r3, [r3, #0]
   28c62:	ea52 0103 	orrs.w	r1, r2, r3
   28c66:	d00e      	beq.n	28c86 <SaadcChan::setConfig(short&)+0x36>
                        channelSetup( ch_, config_, pselP_, pselN_ );  //set config and inputs
   28c68:	4d0b      	ldr	r5, [pc, #44]	; (28c98 <SaadcChan::setConfig(short&)+0x48>)
   28c6a:	490c      	ldr	r1, [pc, #48]	; (28c9c <SaadcChan::setConfig(short&)+0x4c>)
   28c6c:	7828      	ldrb	r0, [r5, #0]
   28c6e:	6809      	ldr	r1, [r1, #0]
   28c70:	f7ff ff50 	bl	28b14 <Saadc::channelSetup(Saadc::CH, unsigned long, Saadc::PSEL, Saadc::PSEL)>
                        bufferSet( (u32)&v, 1 );
   28c74:	4620      	mov	r0, r4
   28c76:	2101      	movs	r1, #1
   28c78:	f7ff ffe2 	bl	28c40 <Saadc::bufferSet(unsigned long, unsigned short)>
                        channelOnly( ch_ );                 //disable all other channels
   28c7c:	7828      	ldrb	r0, [r5, #0]
   28c7e:	f7ff ff7b 	bl	28b78 <Saadc::channelOnly(Saadc::CH)>
                        return true;
   28c82:	2001      	movs	r0, #1
                    }
   28c84:	bd38      	pop	{r3, r4, r5, pc}
                        if( isBusy() ) return false;        //is in use
   28c86:	4608      	mov	r0, r1
                    }
   28c88:	bd38      	pop	{r3, r4, r5, pc}
                        if( isBusy() ) return false;        //is in use
   28c8a:	2000      	movs	r0, #0
                    }
   28c8c:	bd38      	pop	{r3, r4, r5, pc}
   28c8e:	bf00      	nop
   28c90:	20001b7d 	.word	0x20001b7d
   28c94:	20001b7c 	.word	0x20001b7c
   28c98:	20001b7e 	.word	0x20001b7e
   28c9c:	20001b78 	.word	0x20001b78

00028ca0 <SaadcChan::result1()>:
                    }

                    //get a single result (blocking) - 
                    //could be >1 sample if oversample is on
                    //TODO, should have timeout here  
SA  result1         () {
   28ca0:	b508      	push	{r3, lr}
                        clearResult();
   28ca2:	f7ff fee7 	bl	28a74 <Saadc::clearResult()>
   28ca6:	e001      	b.n	28cac <SaadcChan::result1()+0xc>
                        for( ; not isResult(); sample() );  
   28ca8:	f7ff ff1e 	bl	28ae8 <Saadc::sample()>
   28cac:	f7ff ff06 	bl	28abc <Saadc::isResult()>
   28cb0:	2800      	cmp	r0, #0
   28cb2:	d0f9      	beq.n	28ca8 <SaadcChan::result1()+0x8>
                    }
   28cb4:	bd08      	pop	{r3, pc}
   28cb6:	bf00      	nop

00028cb8 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>:
//============
    public:
//============

                    //get with a specific resolution, and number of samples
SA  read            (i16& v, RES r, OVERSAMP s = OVEROFF) {
   28cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28cba:	460e      	mov	r6, r1
   28cbc:	4615      	mov	r5, r2
                        if( not setConfig( v ) ) return false;
   28cbe:	f7ff ffc7 	bl	28c50 <SaadcChan::setConfig(short&)>
   28cc2:	4604      	mov	r4, r0
   28cc4:	b1f0      	cbz	r0, 28d04 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x4c>
                        RES rr = resolution();          //save old
   28cc6:	f7ff ff99 	bl	28bfc <Saadc::resolution()>
   28cca:	4607      	mov	r7, r0
                        OVERSAMP ss = overSample();
   28ccc:	f7ff ffa4 	bl	28c18 <Saadc::overSample()>
   28cd0:	4603      	mov	r3, r0
                        resolution( r );                //set new
   28cd2:	4630      	mov	r0, r6
                        OVERSAMP ss = overSample();
   28cd4:	461e      	mov	r6, r3
                        resolution( r );                //set new
   28cd6:	f7ff ff8b 	bl	28bf0 <Saadc::resolution(Saadc::RES)>
                        overSample( s );
   28cda:	4628      	mov	r0, r5
   28cdc:	f7ff ff96 	bl	28c0c <Saadc::overSample(Saadc::OVERSAMP)>
                        start();                        //start will also enable
   28ce0:	f7ff fef8 	bl	28ad4 <Saadc::start()>
                        result1();
   28ce4:	f7ff ffdc 	bl	28ca0 <SaadcChan::result1()>
                        resolution( rr );               //restore old
   28ce8:	4638      	mov	r0, r7
   28cea:	f7ff ff81 	bl	28bf0 <Saadc::resolution(Saadc::RES)>
                        overSample( ss );
   28cee:	4630      	mov	r0, r6
   28cf0:	f7ff ff8c 	bl	28c0c <Saadc::overSample(Saadc::OVERSAMP)>
                        disable();
   28cf4:	f7ff fe9e 	bl	28a34 <Saadc::disable()>
                        clearEvents();
   28cf8:	f7ff fed4 	bl	28aa4 <Saadc::clearEvents()>
                        channelRelease( ch_ );
   28cfc:	4b02      	ldr	r3, [pc, #8]	; (28d08 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)+0x50>)
   28cfe:	7818      	ldrb	r0, [r3, #0]
   28d00:	f7ff ff22 	bl	28b48 <Saadc::channelRelease(Saadc::CH)>
                        return true;
                    }
   28d04:	4620      	mov	r0, r4
   28d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d08:	20001b7e 	.word	0x20001b7e

00028d0c <Battery::update()>:
    SI SaadcChan vdd_{ SaadcChan::VDD };
    // millivolts  (adc*vref*1000*scale/resolution)
    // adc*3600/1024
    SI int16_t voltage_{ 0 }; 

SA  update          () {
   28d0c:	b530      	push	{r4, r5, lr}
                        static uint8_t count;
                        if( count == 0 ) {
   28d0e:	4d1a      	ldr	r5, [pc, #104]	; (28d78 <Battery::update()+0x6c>)
   28d10:	782c      	ldrb	r4, [r5, #0]
SA  update          () {
   28d12:	b083      	sub	sp, #12
                        if( count == 0 ) {
   28d14:	b15c      	cbz	r4, 28d2e <Battery::update()+0x22>
   28d16:	4b19      	ldr	r3, [pc, #100]	; (28d7c <Battery::update()+0x70>)
   28d18:	f9b3 0000 	ldrsh.w	r0, [r3]
                            voltage_ = (int32_t)v * 3600 / 1024;
                            //make sure we are in some sane range
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
                        }
                        if( ++count >= updateInterval_ ) count = 0;  
   28d1c:	3401      	adds	r4, #1
   28d1e:	b2e4      	uxtb	r4, r4
   28d20:	2c3b      	cmp	r4, #59	; 0x3b
   28d22:	bf8a      	itet	hi
   28d24:	2300      	movhi	r3, #0
   28d26:	702c      	strbls	r4, [r5, #0]
   28d28:	702b      	strbhi	r3, [r5, #0]
                        return voltage_;
                    }
   28d2a:	b003      	add	sp, #12
   28d2c:	bd30      	pop	{r4, r5, pc}
                            vdd_.calibrate();
   28d2e:	f7ff fee1 	bl	28af4 <Saadc::calibrate()>
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   28d32:	2203      	movs	r2, #3
   28d34:	2101      	movs	r1, #1
   28d36:	f10d 0006 	add.w	r0, sp, #6
                            int16_t v = 0;
   28d3a:	f8ad 4006 	strh.w	r4, [sp, #6]
                            vdd_.read(v, vdd_.RES10, vdd_.OVER8X);
   28d3e:	f7ff ffbb 	bl	28cb8 <SaadcChan::read(short&, Saadc::RES, Saadc::OVERSAMP)>
                            voltage_ = (int32_t)v * 3600 / 1024;
   28d42:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   28d46:	4b0d      	ldr	r3, [pc, #52]	; (28d7c <Battery::update()+0x70>)
                            voltage_ = (int32_t)v * 3600 / 1024;
   28d48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   28d4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   28d50:	0100      	lsls	r0, r0, #4
   28d52:	bf48      	it	mi
   28d54:	f200 30ff 	addwmi	r0, r0, #1023	; 0x3ff
   28d58:	f340 208f 	sbfx	r0, r0, #10, #16
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   28d5c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   28d60:	db07      	blt.n	28d72 <Battery::update()+0x66>
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
   28d62:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
   28d66:	bfc8      	it	gt
   28d68:	f242 700f 	movwgt	r0, #9999	; 0x270f
   28d6c:	8018      	strh	r0, [r3, #0]
   28d6e:	782c      	ldrb	r4, [r5, #0]
   28d70:	e7d4      	b.n	28d1c <Battery::update()+0x10>
                            if( voltage_ < 500 ) voltage_ = 0; // <500mv, show 0000
   28d72:	2000      	movs	r0, #0
   28d74:	8018      	strh	r0, [r3, #0]
                            if( voltage_ > 3600 ) voltage_ = 9999; //>3600, show 9999
   28d76:	e7fa      	b.n	28d6e <Battery::update()+0x62>
   28d78:	20001b72 	.word	0x20001b72
   28d7c:	20001b74 	.word	0x20001b74

00028d80 <Battery::read()>:
//============
    public:
//============

SA  read            () { return update(); }
   28d80:	b508      	push	{r3, lr}
   28d82:	f7ff ffc3 	bl	28d0c <Battery::update()>
   28d86:	bd08      	pop	{r3, pc}

00028d88 <Battery::isOk()>:

SA  isOk            () { return voltage_ > 2100 ; }
   28d88:	4b04      	ldr	r3, [pc, #16]	; (28d9c <Battery::isOk()+0x14>)
   28d8a:	f9b3 0000 	ldrsh.w	r0, [r3]
   28d8e:	f640 0334 	movw	r3, #2100	; 0x834
   28d92:	4298      	cmp	r0, r3
   28d94:	bfd4      	ite	le
   28d96:	2000      	movle	r0, #0
   28d98:	2001      	movgt	r0, #1
   28d9a:	4770      	bx	lr
   28d9c:	20001b74 	.word	0x20001b74

00028da0 <Flags01::make(unsigned char*, unsigned char)>:
    Flags - 0x01 - 0x02, 0x01, flags
------------------------------------------------------------------------------*/
struct Flags01 {

SA  make            (uint8_t* buf, uint8_t flags) {
                        buf[0] = 2;
   28da0:	2202      	movs	r2, #2
                        buf[1] = 1;
   28da2:	2301      	movs	r3, #1
                        buf[2] = flags;
   28da4:	7081      	strb	r1, [r0, #2]
                        buf[0] = 2;
   28da6:	7002      	strb	r2, [r0, #0]
                        buf[1] = 1;
   28da8:	7043      	strb	r3, [r0, #1]
                        return 3;
                    }
   28daa:	2003      	movs	r0, #3
   28dac:	4770      	bx	lr
   28dae:	bf00      	nop

00028db0 <CompleteName09::make(unsigned char*, char const*, unsigned char)>:
    -> if temp 0.0 to 99.9 then T 55.6 or T  3.4
    -> if temp -40.0 to -0.1 then T-10.5 or T -5.2
------------------------------------------------------------------------------*/
struct CompleteName09 {

SA  make            (uint8_t* buf, const char* str, uint8_t maxlen) {
   28db0:	b570      	push	{r4, r5, r6, lr}
   28db2:	b082      	sub	sp, #8
   28db4:	4605      	mov	r5, r0
                        uint8_t slen = strlen( str );
   28db6:	4608      	mov	r0, r1
SA  make            (uint8_t* buf, const char* str, uint8_t maxlen) {
   28db8:	4616      	mov	r6, r2
                        uint8_t slen = strlen( str );
   28dba:	9101      	str	r1, [sp, #4]
   28dbc:	f000 fe66 	bl	29a8c <strlen>
   28dc0:	b2c4      	uxtb	r4, r0
                        if( slen > maxlen ) slen = maxlen;
   28dc2:	42b4      	cmp	r4, r6
   28dc4:	bf28      	it	cs
   28dc6:	4634      	movcs	r4, r6
                        buf[0] = slen + 1;
   28dc8:	1c62      	adds	r2, r4, #1
                        buf[1] = 9;
   28dca:	2309      	movs	r3, #9
                        buf[0] = slen + 1;
   28dcc:	702a      	strb	r2, [r5, #0]
                        memcpy( &buf[2], str, slen );
   28dce:	9901      	ldr	r1, [sp, #4]
                        buf[1] = 9;
   28dd0:	706b      	strb	r3, [r5, #1]
                        memcpy( &buf[2], str, slen );
   28dd2:	1ca8      	adds	r0, r5, #2
   28dd4:	4622      	mov	r2, r4
   28dd6:	f000 fe0f 	bl	299f8 <memcpy>
                        return slen+2;
                    }
   28dda:	1ca0      	adds	r0, r4, #2
   28ddc:	b002      	add	sp, #8
   28dde:	bd70      	pop	{r4, r5, r6, pc}

00028de0 <UUID07::u16toBcd(unsigned short)>:
------------------------------------------------------------------------------*/
struct UUID07 {

SA  u16toBcd    (uint16_t v) {
                    return (((v/1000)%10)<<12) bitor
                            (((v/100 )%10)<<8 ) bitor
   28de0:	4b19      	ldr	r3, [pc, #100]	; (28e48 <UUID07::u16toBcd(unsigned short)+0x68>)
                    return (((v/1000)%10)<<12) bitor
   28de2:	4a1a      	ldr	r2, [pc, #104]	; (28e4c <UUID07::u16toBcd(unsigned short)+0x6c>)
   28de4:	491a      	ldr	r1, [pc, #104]	; (28e50 <UUID07::u16toBcd(unsigned short)+0x70>)
SA  u16toBcd    (uint16_t v) {
   28de6:	b430      	push	{r4, r5}
                            (((v/100 )%10)<<8 ) bitor
   28de8:	fba3 4300 	umull	r4, r3, r3, r0
   28dec:	095b      	lsrs	r3, r3, #5
   28dee:	fba2 4503 	umull	r4, r5, r2, r3
                    return (((v/1000)%10)<<12) bitor
   28df2:	fba1 4100 	umull	r4, r1, r1, r0
                            (((v/100 )%10)<<8 ) bitor
   28df6:	08ed      	lsrs	r5, r5, #3
                    return (((v/1000)%10)<<12) bitor
   28df8:	0989      	lsrs	r1, r1, #6
                            (((v/100 )%10)<<8 ) bitor
   28dfa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   28dfe:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
                    return (((v/1000)%10)<<12) bitor
   28e02:	fba2 c501 	umull	ip, r5, r2, r1
                            (((v/10  )%10)<<4 ) bitor
                            v%10;
   28e06:	fba2 c400 	umull	ip, r4, r2, r0
                    return (((v/1000)%10)<<12) bitor
   28e0a:	08ed      	lsrs	r5, r5, #3
                            v%10;
   28e0c:	08e4      	lsrs	r4, r4, #3
                    return (((v/1000)%10)<<12) bitor
   28e0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   28e12:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
                            (((v/10  )%10)<<4 ) bitor
   28e16:	b2a5      	uxth	r5, r4
   28e18:	fba2 c205 	umull	ip, r2, r2, r5
                            v%10;
   28e1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
                            (((v/100 )%10)<<8 ) bitor
   28e20:	b29b      	uxth	r3, r3
                            (((v/10  )%10)<<4 ) bitor
   28e22:	08d2      	lsrs	r2, r2, #3
                            v%10;
   28e24:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
                            (((v/100 )%10)<<8 ) bitor
   28e28:	021b      	lsls	r3, r3, #8
                    return (((v/1000)%10)<<12) bitor
   28e2a:	b289      	uxth	r1, r1
                            (((v/10  )%10)<<4 ) bitor
   28e2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                            v%10;
   28e30:	b280      	uxth	r0, r0
                            (((v/10  )%10)<<4 ) bitor
   28e32:	eba5 0242 	sub.w	r2, r5, r2, lsl #1
                    return (((v/1000)%10)<<12) bitor
   28e36:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                            v%10;
   28e3a:	4303      	orrs	r3, r0
                            (((v/10  )%10)<<4 ) bitor
   28e3c:	b290      	uxth	r0, r2
                }
   28e3e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
   28e42:	bc30      	pop	{r4, r5}
   28e44:	4770      	bx	lr
   28e46:	bf00      	nop
   28e48:	51eb851f 	.word	0x51eb851f
   28e4c:	cccccccd 	.word	0xcccccccd
   28e50:	10624dd3 	.word	0x10624dd3

00028e54 <UUID07::makeBCD(unsigned char*, unsigned short const (&) [8])>:
                    } 
                    return 18;
                }

                // [0] will not be converted to bcd
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   28e54:	b538      	push	{r3, r4, r5, lr}
                    buf[0] = 17;
   28e56:	2211      	movs	r2, #17
                    buf[1] = 7;
   28e58:	2307      	movs	r3, #7
                    buf[0] = 17;
   28e5a:	7002      	strb	r2, [r0, #0]
                    buf[1] = 7;
   28e5c:	7043      	strb	r3, [r0, #1]
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   28e5e:	4604      	mov	r4, r0
                    uint8_t* pd = &buf[2];
                    for( auto i = 0; i < 8; i++ ){
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e60:	8808      	ldrh	r0, [r1, #0]
SA  makeBCD     (uint8_t *buf, const uint16_t (&vals)[8]) {
   28e62:	460d      	mov	r5, r1
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e64:	f7ff ffbc 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        if( i == 7 ) u = vals[i]; // 0xde9f no bcd conversion (degF)
                        *pd++ = u; //75
                        *pd++ = u>>8; //08
   28e68:	1203      	asrs	r3, r0, #8
   28e6a:	70e3      	strb	r3, [r4, #3]
                        *pd++ = u; //75
   28e6c:	70a0      	strb	r0, [r4, #2]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e6e:	8868      	ldrh	r0, [r5, #2]
   28e70:	f7ff ffb6 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28e74:	1203      	asrs	r3, r0, #8
   28e76:	7163      	strb	r3, [r4, #5]
                        *pd++ = u; //75
   28e78:	7120      	strb	r0, [r4, #4]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e7a:	88a8      	ldrh	r0, [r5, #4]
   28e7c:	f7ff ffb0 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28e80:	1203      	asrs	r3, r0, #8
   28e82:	71e3      	strb	r3, [r4, #7]
                        *pd++ = u; //75
   28e84:	71a0      	strb	r0, [r4, #6]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e86:	88e8      	ldrh	r0, [r5, #6]
   28e88:	f7ff ffaa 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28e8c:	1203      	asrs	r3, r0, #8
   28e8e:	7263      	strb	r3, [r4, #9]
                        *pd++ = u; //75
   28e90:	7220      	strb	r0, [r4, #8]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e92:	8928      	ldrh	r0, [r5, #8]
   28e94:	f7ff ffa4 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28e98:	1203      	asrs	r3, r0, #8
   28e9a:	72e3      	strb	r3, [r4, #11]
                        *pd++ = u; //75
   28e9c:	72a0      	strb	r0, [r4, #10]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28e9e:	8968      	ldrh	r0, [r5, #10]
   28ea0:	f7ff ff9e 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28ea4:	1203      	asrs	r3, r0, #8
   28ea6:	7363      	strb	r3, [r4, #13]
                        *pd++ = u; //75
   28ea8:	7320      	strb	r0, [r4, #12]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28eaa:	89a8      	ldrh	r0, [r5, #12]
   28eac:	f7ff ff98 	bl	28de0 <UUID07::u16toBcd(unsigned short)>
                        *pd++ = u>>8; //08
   28eb0:	1203      	asrs	r3, r0, #8
                        *pd++ = u; //75
   28eb2:	73a0      	strb	r0, [r4, #14]
                        *pd++ = u>>8; //08
   28eb4:	73e3      	strb	r3, [r4, #15]
                        uint16_t u = u16toBcd( vals[i] ); //0875 -> 7508
   28eb6:	89eb      	ldrh	r3, [r5, #14]
                        *pd++ = u; //75
   28eb8:	7423      	strb	r3, [r4, #16]
                        *pd++ = u>>8; //08
   28eba:	121b      	asrs	r3, r3, #8
   28ebc:	7463      	strb	r3, [r4, #17]
                    } 
                    return 18;
                }
   28ebe:	2012      	movs	r0, #18
   28ec0:	bd38      	pop	{r3, r4, r5, pc}
   28ec2:	bf00      	nop

00028ec4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::makeValidLetter(char)>:
    //bootloader is at 0xE0000, so use page before (0xE0000-0x1000 = 0xDF000)
    //for flash stored letter - 'A' - 'Z'
    SI volatile char& fullnameLetterFlash_{ *(reinterpret_cast<char*>(LAST_PAGE)) };
    SCA lastPageFlash_{LAST_PAGE};

SA  makeValidLetter (const char c)  { return (c >= 'A' and c <= 'Z') ? c : 'T'; }
   28ec4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   28ec8:	2b19      	cmp	r3, #25
   28eca:	bf88      	it	hi
   28ecc:	2054      	movhi	r0, #84	; 0x54
   28ece:	4770      	bx	lr

00028ed0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getNameFlash()>:

SA  getName         () { return fullnameLetter_; }

SA  setName         (const char c) { fullnameLetter_ = makeValidLetter(c); }

SA  getNameFlash    () { return fullnameLetterFlash_; }
   28ed0:	f44f 235f 	mov.w	r3, #913408	; 0xdf000
   28ed4:	7818      	ldrb	r0, [r3, #0]
   28ed6:	4770      	bx	lr

00028ed8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)>:
SA  sdFlashWrite    (const char ltr) {
   28ed8:	b570      	push	{r4, r5, r6, lr}
   28eda:	4604      	mov	r4, r0
   28edc:	b082      	sub	sp, #8
                        error.check( sd_flash_page_erase(lastPageFlash_/4096) );
   28ede:	20df      	movs	r0, #223	; 0xdf
   28ee0:	f7ff fbd2 	bl	28688 <sd_flash_page_erase>
   28ee4:	b200      	sxth	r0, r0
   28ee6:	4d17      	ldr	r5, [pc, #92]	; (28f44 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)+0x6c>)
   28ee8:	f7ff fbd8 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
   28eec:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   28ef0:	f045 0501 	orr.w	r5, r5, #1
   28ef4:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28ef8:	47a8      	blx	r5
   28efa:	3e01      	subs	r6, #1
   28efc:	d1fa      	bne.n	28ef4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)+0x1c>
                        if( fullnameLetterFlash_ != 0xFF ) error.check( NRF_EVT_FLASH_OPERATION_ERROR );
   28efe:	f44f 235f 	mov.w	r3, #913408	; 0xdf000
   28f02:	781b      	ldrb	r3, [r3, #0]
   28f04:	2bff      	cmp	r3, #255	; 0xff
   28f06:	d002      	beq.n	28f0e <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)+0x36>
   28f08:	2003      	movs	r0, #3
   28f0a:	f7ff fbc7 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( sd_flash_write((uint32_t*)lastPageFlash_, &v, 1 ) );
   28f0e:	2201      	movs	r2, #1
   28f10:	a901      	add	r1, sp, #4
   28f12:	f44f 205f 	mov.w	r0, #913408	; 0xdf000
                        uint32_t v = ltr;
   28f16:	9401      	str	r4, [sp, #4]
                        error.check( sd_flash_write((uint32_t*)lastPageFlash_, &v, 1 ) );
   28f18:	f7ff fbb4 	bl	28684 <sd_flash_write>
   28f1c:	b200      	sxth	r0, r0
   28f1e:	f7ff fbbd 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
   28f22:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   28f26:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28f2a:	47a8      	blx	r5
   28f2c:	3e01      	subs	r6, #1
   28f2e:	d1fa      	bne.n	28f26 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)+0x4e>
                        if( fullnameLetterFlash_ != ltr ) error.check( NRF_EVT_FLASH_OPERATION_ERROR );
   28f30:	f44f 235f 	mov.w	r3, #913408	; 0xdf000
   28f34:	781b      	ldrb	r3, [r3, #0]
   28f36:	42a3      	cmp	r3, r4
   28f38:	d002      	beq.n	28f40 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)+0x68>
   28f3a:	2003      	movs	r0, #3
   28f3c:	f7ff fbae 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                    }
   28f40:	b002      	add	sp, #8
   28f42:	bd70      	pop	{r4, r5, r6, pc}
   28f44:	0002b360 	.word	0x0002b360

00028f48 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::flashWrite(char)>:
SA  flashWrite      (const char ltr) {
   28f48:	b510      	push	{r4, lr}
   28f4a:	4604      	mov	r4, r0
                        if( nrf_sdh_is_enabled() ) return sdFlashWrite( ltr );
   28f4c:	f000 fc42 	bl	297d4 <nrf_sdh_is_enabled>
   28f50:	b950      	cbnz	r0, 28f68 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::flashWrite(char)+0x20>
                        nrf_nvmc_page_erase(lastPageFlash_);
   28f52:	f44f 205f 	mov.w	r0, #913408	; 0xdf000
   28f56:	f7ff fb55 	bl	28604 <nrf_nvmc_page_erase>
                        nrf_nvmc_write_byte(lastPageFlash_, ltr);
   28f5a:	4621      	mov	r1, r4
   28f5c:	f44f 205f 	mov.w	r0, #913408	; 0xdf000
                    }
   28f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        nrf_nvmc_write_byte(lastPageFlash_, ltr);
   28f64:	f7ff bb66 	b.w	28634 <nrf_nvmc_write_byte>
                        if( nrf_sdh_is_enabled() ) return sdFlashWrite( ltr );
   28f68:	4620      	mov	r0, r4
   28f6a:	f7ff ffb5 	bl	28ed8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::sdFlashWrite(char)>
                    }
   28f6e:	bd10      	pop	{r4, pc}

00028f70 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setNameFlash(char)>:

SA  setNameFlash    (const char ltr) {
   28f70:	b538      	push	{r3, r4, r5, lr}
   28f72:	4605      	mov	r5, r0
                        if( ltr != makeValidLetter( ltr ) ) return; //invalid
   28f74:	f7ff ffa6 	bl	28ec4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::makeValidLetter(char)>
   28f78:	42a8      	cmp	r0, r5
   28f7a:	d000      	beq.n	28f7e <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setNameFlash(char)+0xe>
                        if( ltr != getNameFlash() ){ //not already stored
                            flashWrite( ltr );
                        }
                    }
   28f7c:	bd38      	pop	{r3, r4, r5, pc}
   28f7e:	4604      	mov	r4, r0
                        if( ltr != getNameFlash() ){ //not already stored
   28f80:	f7ff ffa6 	bl	28ed0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getNameFlash()>
   28f84:	42a0      	cmp	r0, r4
   28f86:	d0f9      	beq.n	28f7c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setNameFlash(char)+0xc>
                            flashWrite( ltr );
   28f88:	4620      	mov	r0, r4
   28f8a:	f7ff ffdd 	bl	28f48 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::flashWrite(char)>
                    }
   28f8e:	bd38      	pop	{r3, r4, r5, pc}

00028f90 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setName(char)>:
SA  setName         (const char c) { fullnameLetter_ = makeValidLetter(c); }
   28f90:	b508      	push	{r3, lr}
   28f92:	f7ff ff97 	bl	28ec4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::makeValidLetter(char)>
   28f96:	4b01      	ldr	r3, [pc, #4]	; (28f9c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setName(char)+0xc>)
   28f98:	7018      	strb	r0, [r3, #0]
   28f9a:	bd08      	pop	{r3, pc}
   28f9c:	20001b55 	.word	0x20001b55

00028fa0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()>:
                    //set name A-Z

                    // 5 green blinks = ready to press sw1
                    // press sw1 = red blink, letter++ (A-Z, A,B,C,D,...,Z,A,...)
                    // timeout 10 seconds (then 5 green blinks)
SA  init            () {
   28fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SA  isOutput    ()          { return reg.DIRP; }
   28fa4:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   28fa8:	f8df 922c 	ldr.w	r9, [pc, #556]	; 291d8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x238>
   28fac:	f8d8 3718 	ldr.w	r3, [r8, #1816]	; 0x718
                    if( not isOutput() ) return;
   28fb0:	07d8      	lsls	r0, r3, #31
   28fb2:	d523      	bpl.n	28ffc <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x5c>
   28fb4:	f049 0601 	orr.w	r6, r9, #1
   28fb8:	2705      	movs	r7, #5
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28fba:	2440      	movs	r4, #64	; 0x40
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28fbc:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   28fc0:	0659      	lsls	r1, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28fc2:	bf4c      	ite	mi
   28fc4:	f8c8 450c 	strmi.w	r4, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28fc8:	f8c8 4508 	strpl.w	r4, [r8, #1288]	; 0x508
                    if( not isOutput() ) return;
   28fcc:	2532      	movs	r5, #50	; 0x32
   28fce:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28fd2:	47b0      	blx	r6
   28fd4:	3d01      	subs	r5, #1
   28fd6:	d1fa      	bne.n	28fce <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x2e>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   28fd8:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   28fdc:	065a      	lsls	r2, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   28fde:	bf4c      	ite	mi
   28fe0:	f8c8 450c 	strmi.w	r4, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   28fe4:	f8c8 4508 	strpl.w	r4, [r8, #1288]	; 0x508
                    if( not isOutput() ) return;
   28fe8:	2532      	movs	r5, #50	; 0x32
   28fea:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   28fee:	47b0      	blx	r6
   28ff0:	3d01      	subs	r5, #1
   28ff2:	d1fa      	bne.n	28fea <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x4a>
                    while( n-- ){ 
   28ff4:	3f01      	subs	r7, #1
   28ff6:	b2bf      	uxth	r7, r7
   28ff8:	2f00      	cmp	r7, #0
   28ffa:	d1df      	bne.n	28fbc <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1c>
SA  isHigh      ()          { return reg.IN; }
   28ffc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 291dc <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x23c>
   29000:	f049 0401 	orr.w	r4, r9, #1
                    if( not isOutput() ) return;
   29004:	2700      	movs	r7, #0
   29006:	2540      	movs	r5, #64	; 0x40
SA  isHigh      ()          { return reg.IN; }
   29008:	f8d8 3510 	ldr.w	r3, [r8, #1296]	; 0x510
                        char ltr = 'A'-1;
                        auto inactiveCount = 0;
                        board.ledGreen2.blinkN( 5, 50 );
                        for(; inactiveCount < (10000/50); ){ //10 seconds timeout
                            if( board.sw1.isOff() ){
   2900c:	065b      	lsls	r3, r3, #25
   2900e:	f100 80e1 	bmi.w	291d4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x234>
SA  isOutput    ()          { return reg.DIRP; }
   29012:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   29016:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
                    if( not isOutput() ) return;
   2901a:	07d8      	lsls	r0, r3, #31
   2901c:	d521      	bpl.n	29062 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0xc2>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2901e:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
   29022:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29026:	f44f 7380 	mov.w	r3, #256	; 0x100
   2902a:	bf14      	ite	ne
   2902c:	f8c7 350c 	strne.w	r3, [r7, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   29030:	f8c7 3508 	streq.w	r3, [r7, #1288]	; 0x508
   29034:	2605      	movs	r6, #5
   29036:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2903a:	47a0      	blx	r4
   2903c:	3e01      	subs	r6, #1
   2903e:	d1fa      	bne.n	29036 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x96>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29040:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
   29044:	f413 7f80 	tst.w	r3, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29048:	f44f 7380 	mov.w	r3, #256	; 0x100
   2904c:	bf14      	ite	ne
   2904e:	f8c7 350c 	strne.w	r3, [r7, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   29052:	f8c7 3508 	streq.w	r3, [r7, #1288]	; 0x508
   29056:	2605      	movs	r6, #5
   29058:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2905c:	47a0      	blx	r4
   2905e:	3e01      	subs	r6, #1
   29060:	d1fa      	bne.n	29058 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0xb8>
                                continue;
                            }
                            //sw1 pressed
                            board.ledRed1.blinkN( 1, 5 );
                            inactiveCount = 0;
                            if( ++ltr > 'Z' ) ltr = 'A';
   29062:	3501      	adds	r5, #1
   29064:	b2ed      	uxtb	r5, r5
SA  isOutput    ()          { return reg.DIRP; }
   29066:	f8d8 3718 	ldr.w	r3, [r8, #1816]	; 0x718
   2906a:	2d5b      	cmp	r5, #91	; 0x5b
   2906c:	bf28      	it	cs
   2906e:	2541      	movcs	r5, #65	; 0x41
SA  isInput     ()          { return not isOutput() and isInbuf(); }
   29070:	07d9      	lsls	r1, r3, #31
   29072:	d420      	bmi.n	290b6 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x116>
SA  isInbuf     ()          { return reg.INBUF == 0; } //1=off, 0=on
   29074:	f8d8 3718 	ldr.w	r3, [r8, #1816]	; 0x718
SA  isInput     ()          { return not isOutput() and isInbuf(); }
   29078:	079a      	lsls	r2, r3, #30
   2907a:	d41c      	bmi.n	290b6 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x116>
   2907c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   29080:	47a0      	blx	r4
   29082:	f640 32b8 	movw	r2, #3000	; 0xbb8
                //for switches, wait for sw release of N ms, or a max of 3 sec if no release
SA  debounce    (uint16_t ms = 50) {
                    if( not isInput() ) return;
                    uint16_t offcount = ms;
                    uint16_t allcount = 3000; //limit, can't wait here all day
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   29086:	1e56      	subs	r6, r2, #1
   29088:	f04f 0963 	mov.w	r9, #99	; 0x63
   2908c:	b2b6      	uxth	r6, r6
   2908e:	b192      	cbz	r2, 290b6 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x116>
SA  isHigh      ()          { return reg.IN; }
   29090:	f8d8 3510 	ldr.w	r3, [r8, #1296]	; 0x510
                        if( isOn() ) offcount = ms;
   29094:	065b      	lsls	r3, r3, #25
   29096:	d54b      	bpl.n	29130 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x190>
   29098:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2909c:	47a0      	blx	r4
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   2909e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   290a2:	b29b      	uxth	r3, r3
   290a4:	f1b9 0f00 	cmp.w	r9, #0
   290a8:	d005      	beq.n	290b6 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x116>
   290aa:	4632      	mov	r2, r6
   290ac:	1e56      	subs	r6, r2, #1
   290ae:	4699      	mov	r9, r3
   290b0:	b2b6      	uxth	r6, r6
   290b2:	2a00      	cmp	r2, #0
   290b4:	d1ec      	bne.n	29090 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0xf0>
SA  isHigh      ()          { return reg.IN; }
   290b6:	f8d8 3510 	ldr.w	r3, [r8, #1296]	; 0x510
                            if( board.sw1.isOff() ){
   290ba:	065e      	lsls	r6, r3, #25
   290bc:	d5ab      	bpl.n	29016 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x76>
   290be:	2701      	movs	r7, #1
__STATIC_INLINE void nrf_delay_ms(uint32_t ms_time)
   290c0:	2632      	movs	r6, #50	; 0x32
   290c2:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   290c6:	47a0      	blx	r4
    } while (--ms_time);
   290c8:	3e01      	subs	r6, #1
   290ca:	d1fa      	bne.n	290c2 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x122>
                        for(; inactiveCount < (10000/50); ){ //10 seconds timeout
   290cc:	2fc8      	cmp	r7, #200	; 0xc8
   290ce:	d19b      	bne.n	29008 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x68>
                            board.sw1.debounce( 100 );
                        }
                        if( ltr != ('A'-1) ){
   290d0:	2d40      	cmp	r5, #64	; 0x40
   290d2:	d04b      	beq.n	2916c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1cc>
SA  isOutput    ()          { return reg.DIRP; }
   290d4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
                            setNameFlash( ltr );
   290d8:	4628      	mov	r0, r5
   290da:	f7ff ff49 	bl	28f70 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setNameFlash(char)>
   290de:	f8d6 3718 	ldr.w	r3, [r6, #1816]	; 0x718
                    if( not isOutput() ) return;
   290e2:	07df      	lsls	r7, r3, #31
   290e4:	d53c      	bpl.n	29160 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1c0>
   290e6:	f04f 0802 	mov.w	r8, #2
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   290ea:	2740      	movs	r7, #64	; 0x40
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   290ec:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   290f0:	065d      	lsls	r5, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   290f2:	bf4c      	ite	mi
   290f4:	f8c6 750c 	strmi.w	r7, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   290f8:	f8c6 7508 	strpl.w	r7, [r6, #1288]	; 0x508
   290fc:	25fa      	movs	r5, #250	; 0xfa
   290fe:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   29102:	47a0      	blx	r4
   29104:	3d01      	subs	r5, #1
   29106:	d1fa      	bne.n	290fe <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x15e>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29108:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   2910c:	0658      	lsls	r0, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   2910e:	bf4c      	ite	mi
   29110:	f8c6 750c 	strmi.w	r7, [r6, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   29114:	f8c6 7508 	strpl.w	r7, [r6, #1288]	; 0x508
   29118:	25fa      	movs	r5, #250	; 0xfa
   2911a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2911e:	47a0      	blx	r4
   29120:	3d01      	subs	r5, #1
   29122:	d1fa      	bne.n	2911a <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x17a>
                    while( n-- ){ 
   29124:	f1b8 0f01 	cmp.w	r8, #1
   29128:	d013      	beq.n	29152 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1b2>
   2912a:	f04f 0801 	mov.w	r8, #1
   2912e:	e7dd      	b.n	290ec <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x14c>
   29130:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
                    while( nrf_delay_ms( 1 ), offcount-- and allcount-- ){
   29134:	3e01      	subs	r6, #1
   29136:	47a0      	blx	r4
   29138:	b2b6      	uxth	r6, r6
   2913a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2913e:	429e      	cmp	r6, r3
   29140:	f04f 0963 	mov.w	r9, #99	; 0x63
   29144:	d1a4      	bne.n	29090 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0xf0>
SA  isHigh      ()          { return reg.IN; }
   29146:	f8d8 3510 	ldr.w	r3, [r8, #1296]	; 0x510
                            if( board.sw1.isOff() ){
   2914a:	065e      	lsls	r6, r3, #25
   2914c:	f57f af63 	bpl.w	29016 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x76>
   29150:	e7b5      	b.n	290be <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x11e>
   29152:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   29156:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   2915a:	47a0      	blx	r4
   2915c:	3d01      	subs	r5, #1
   2915e:	d1fa      	bne.n	29156 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1b6>
                            board.ledGreen2.blinkN( 2, 250, 250, 1000 );
                        } else {
                            board.ledGreen2.blinkN( 5, 50, 50, 1000 );
                        }
                        //set ram version from flash
                        setName( getNameFlash() );
   29160:	f7ff feb6 	bl	28ed0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getNameFlash()>
   29164:	f7ff ff14 	bl	28f90 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setName(char)>
                    }
   29168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
SA  isOutput    ()          { return reg.DIRP; }
   2916c:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   29170:	f8d8 3718 	ldr.w	r3, [r8, #1816]	; 0x718
                    if( not isOutput() ) return;
   29174:	07d9      	lsls	r1, r3, #31
   29176:	d5f3      	bpl.n	29160 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1c0>
   29178:	2705      	movs	r7, #5
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   2917a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   2917e:	065a      	lsls	r2, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29180:	bf4c      	ite	mi
   29182:	f8c8 550c 	strmi.w	r5, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   29186:	f8c8 5508 	strpl.w	r5, [r8, #1288]	; 0x508
   2918a:	2632      	movs	r6, #50	; 0x32
   2918c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   29190:	47a0      	blx	r4
   29192:	3e01      	subs	r6, #1
   29194:	d1fa      	bne.n	2918c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1ec>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29196:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
   2919a:	065b      	lsls	r3, r3, #25
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   2919c:	bf4c      	ite	mi
   2919e:	f8c8 550c 	strmi.w	r5, [r8, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   291a2:	f8c8 5508 	strpl.w	r5, [r8, #1288]	; 0x508
   291a6:	2632      	movs	r6, #50	; 0x32
   291a8:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   291ac:	47a0      	blx	r4
   291ae:	3e01      	subs	r6, #1
   291b0:	d1fa      	bne.n	291a8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x208>
                    while( n-- ){ 
   291b2:	3f01      	subs	r7, #1
   291b4:	b2bf      	uxth	r7, r7
   291b6:	2f00      	cmp	r7, #0
   291b8:	d1df      	bne.n	2917a <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x1da>
   291ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   291be:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   291c2:	47a0      	blx	r4
   291c4:	3d01      	subs	r5, #1
   291c6:	d1fa      	bne.n	291be <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x21e>
                        setName( getNameFlash() );
   291c8:	f7ff fe82 	bl	28ed0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getNameFlash()>
   291cc:	f7ff fee0 	bl	28f90 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::setName(char)>
                    }
   291d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   291d4:	3701      	adds	r7, #1
   291d6:	e773      	b.n	290c0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()+0x120>
   291d8:	0002b360 	.word	0x0002b360
   291dc:	50000300 	.word	0x50000300

000291e0 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()>:
                        power( txPower_ );
                        if( Battery::isOk() ) board.ok(); else board.caution();

                    }

SA  stop            () -> void {
   291e0:	b510      	push	{r4, lr}
                        if( not isActive_ ) return;
   291e2:	4c07      	ldr	r4, [pc, #28]	; (29200 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0x20>)
   291e4:	7823      	ldrb	r3, [r4, #0]
   291e6:	b903      	cbnz	r3, 291ea <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0xa>
                        error.check( sd_ble_gap_adv_stop(handle_) );
                        isActive_ = false;
                    }
   291e8:	bd10      	pop	{r4, pc}
                        error.check( sd_ble_gap_adv_stop(handle_) );
   291ea:	4b06      	ldr	r3, [pc, #24]	; (29204 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()+0x24>)
   291ec:	7818      	ldrb	r0, [r3, #0]
   291ee:	f7ff fa51 	bl	28694 <sd_ble_gap_adv_stop>
   291f2:	b200      	sxth	r0, r0
   291f4:	f7ff fa52 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        isActive_ = false;
   291f8:	2300      	movs	r3, #0
   291fa:	7023      	strb	r3, [r4, #0]
                    }
   291fc:	bd10      	pop	{r4, pc}
   291fe:	bf00      	nop
   29200:	20001b19 	.word	0x20001b19
   29204:	20001900 	.word	0x20001900

00029208 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidId(unsigned short)>:
SA  uuidId          (uint16_t v)    { uuidData_.id = v; }
   29208:	4b01      	ldr	r3, [pc, #4]	; (29210 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidId(unsigned short)+0x8>)
   2920a:	81d8      	strh	r0, [r3, #14]
   2920c:	4770      	bx	lr
   2920e:	bf00      	nop
   29210:	20001b58 	.word	0x20001b58

00029214 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidCountInc()>:
SA  uuidCountInc    ()              { if(++uuidData_.count > 9999) uuidData_.count = 0; return uuidData_.count; }
   29214:	4b05      	ldr	r3, [pc, #20]	; (2922c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidCountInc()+0x18>)
   29216:	8998      	ldrh	r0, [r3, #12]
   29218:	3001      	adds	r0, #1
   2921a:	b280      	uxth	r0, r0
   2921c:	f242 720f 	movw	r2, #9999	; 0x270f
   29220:	4290      	cmp	r0, r2
   29222:	bf88      	it	hi
   29224:	2000      	movhi	r0, #0
   29226:	8198      	strh	r0, [r3, #12]
   29228:	4770      	bx	lr
   2922a:	bf00      	nop
   2922c:	20001b58 	.word	0x20001b58

00029230 <TemperatureInternal<(unsigned char)5>::histSize()>:
    inline static Temperature<HistSiz_> tempH;

    public:

SA  average         () { return tempH.average(); }
SA  histSize        () { return HistSiz_; }
   29230:	2005      	movs	r0, #5
   29232:	4770      	bx	lr

00029234 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempShift()>:
SA  uuidTempShift   ()              { for(int i = 0; i < 4; uuidData_.tempHist[i] = uuidData_.tempHist[i+1], i++ ); }
   29234:	4b03      	ldr	r3, [pc, #12]	; (29244 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempShift()+0x10>)
   29236:	f8d3 1002 	ldr.w	r1, [r3, #2]
   2923a:	f8d3 2006 	ldr.w	r2, [r3, #6]
   2923e:	6019      	str	r1, [r3, #0]
   29240:	605a      	str	r2, [r3, #4]
   29242:	4770      	bx	lr
   29244:	20001b58 	.word	0x20001b58

00029248 <TemperatureInternal<(unsigned char)5>::read()>:

SA  read            () {
   29248:	b530      	push	{r4, r5, lr}
   2924a:	b083      	sub	sp, #12
                        i16 f = -999; //-99.9 = failed to get
                        int32_t t;
                        if( sd_temp_get(&t) ) return f;
   2924c:	a801      	add	r0, sp, #4
   2924e:	f7ff fa17 	bl	28680 <sd_temp_get>
   29252:	bb80      	cbnz	r0, 292b6 <TemperatureInternal<(unsigned char)5>::read()+0x6e>
                        f = (t*10*9/5+320*4)/4; // Fx10
   29254:	9a01      	ldr	r2, [sp, #4]
                        if( not isInit ){ //first time, populate all with same value
   29256:	4c19      	ldr	r4, [pc, #100]	; (292bc <TemperatureInternal<(unsigned char)5>::read()+0x74>)
                        f = (t*10*9/5+320*4)/4; // Fx10
   29258:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   2925c:	0052      	lsls	r2, r2, #1
   2925e:	f512 63a0 	adds.w	r3, r2, #1280	; 0x500
   29262:	bf48      	it	mi
   29264:	f202 5303 	addwmi	r3, r2, #1283	; 0x503
                        if( not isInit ){ //first time, populate all with same value
   29268:	7822      	ldrb	r2, [r4, #0]
                        f = (t*10*9/5+320*4)/4; // Fx10
   2926a:	f343 038f 	sbfx	r3, r3, #2, #16
                        if( not isInit ){ //first time, populate all with same value
   2926e:	bb02      	cbnz	r2, 292b2 <TemperatureInternal<(unsigned char)5>::read()+0x6a>
                            for( auto& i : tempHistory_ ) i = v;
   29270:	4913      	ldr	r1, [pc, #76]	; (292c0 <TemperatureInternal<(unsigned char)5>::read()+0x78>)
   29272:	f363 020f 	bfi	r2, r3, #0, #16
   29276:	f363 421f 	bfi	r2, r3, #16, #16
                            isInit = true;
   2927a:	2001      	movs	r0, #1
                            for( auto& i : tempHistory_ ) i = v;
   2927c:	600a      	str	r2, [r1, #0]
   2927e:	604a      	str	r2, [r1, #4]
   29280:	810b      	strh	r3, [r1, #8]
                            isInit = true;
   29282:	7020      	strb	r0, [r4, #0]
                        tempHistory_[idx++] = v;
   29284:	4a0f      	ldr	r2, [pc, #60]	; (292c4 <TemperatureInternal<(unsigned char)5>::read()+0x7c>)
   29286:	4d10      	ldr	r5, [pc, #64]	; (292c8 <TemperatureInternal<(unsigned char)5>::read()+0x80>)
   29288:	7814      	ldrb	r4, [r2, #0]
   2928a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   2928e:	bfa8      	it	ge
   29290:	f44f 63e1 	movge.w	r3, #1800	; 0x708
   29294:	b218      	sxth	r0, r3
   29296:	1c63      	adds	r3, r4, #1
   29298:	42a8      	cmp	r0, r5
   2929a:	b2db      	uxtb	r3, r3
   2929c:	bfb8      	it	lt
   2929e:	4628      	movlt	r0, r5
                        if( idx >= HistSiz_ ) idx = 0;
   292a0:	2b04      	cmp	r3, #4
                        tempHistory_[idx++] = v;
   292a2:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
   292a6:	7013      	strb	r3, [r2, #0]
                        if( idx >= HistSiz_ ) idx = 0;
   292a8:	d901      	bls.n	292ae <TemperatureInternal<(unsigned char)5>::read()+0x66>
   292aa:	2300      	movs	r3, #0
   292ac:	7013      	strb	r3, [r2, #0]
                        f = tempH.addHistory( f );
                        DebugFuncHeader();
                        Debug("  internal raw: %d  F: %02d.%d\n", t, f/10, f%10);
                        return f;
                    }
   292ae:	b003      	add	sp, #12
   292b0:	bd30      	pop	{r4, r5, pc}
   292b2:	4903      	ldr	r1, [pc, #12]	; (292c0 <TemperatureInternal<(unsigned char)5>::read()+0x78>)
   292b4:	e7e6      	b.n	29284 <TemperatureInternal<(unsigned char)5>::read()+0x3c>
                        if( sd_temp_get(&t) ) return f;
   292b6:	4805      	ldr	r0, [pc, #20]	; (292cc <TemperatureInternal<(unsigned char)5>::read()+0x84>)
   292b8:	e7f9      	b.n	292ae <TemperatureInternal<(unsigned char)5>::read()+0x66>
   292ba:	bf00      	nop
   292bc:	20001ae9 	.word	0x20001ae9
   292c0:	20001b68 	.word	0x20001b68
   292c4:	20001ae8 	.word	0x20001ae8
   292c8:	fffffe70 	.word	0xfffffe70
   292cc:	fffffc19 	.word	0xfffffc19

000292d0 <TemperatureInternal<(unsigned char)5>::average()>:
SA  average         () { return tempH.average(); }
   292d0:	b430      	push	{r4, r5}
                        for( auto& i : tempHistory_ ) avg += i;
   292d2:	4a0a      	ldr	r2, [pc, #40]	; (292fc <TemperatureInternal<(unsigned char)5>::average()+0x2c>)
                        return avg / HistSiz_;
   292d4:	480a      	ldr	r0, [pc, #40]	; (29300 <TemperatureInternal<(unsigned char)5>::average()+0x30>)
                        for( auto& i : tempHistory_ ) avg += i;
   292d6:	8815      	ldrh	r5, [r2, #0]
   292d8:	8853      	ldrh	r3, [r2, #2]
   292da:	8894      	ldrh	r4, [r2, #4]
   292dc:	88d1      	ldrh	r1, [r2, #6]
   292de:	8912      	ldrh	r2, [r2, #8]
   292e0:	442b      	add	r3, r5
   292e2:	4423      	add	r3, r4
   292e4:	440b      	add	r3, r1
   292e6:	4413      	add	r3, r2
                        return avg / HistSiz_;
   292e8:	b21b      	sxth	r3, r3
   292ea:	fb80 2003 	smull	r2, r0, r0, r3
   292ee:	17db      	asrs	r3, r3, #31
   292f0:	ebc3 0060 	rsb	r0, r3, r0, asr #1
SA  average         () { return tempH.average(); }
   292f4:	b200      	sxth	r0, r0
   292f6:	bc30      	pop	{r4, r5}
   292f8:	4770      	bx	lr
   292fa:	bf00      	nop
   292fc:	20001b68 	.word	0x20001b68
   29300:	66666667 	.word	0x66666667

00029304 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempLatest(unsigned short)>:
SA  uuidTempLatest  (uint16_t v)    { uuidData_.tempHist[4] = v; }
   29304:	4b01      	ldr	r3, [pc, #4]	; (2930c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempLatest(unsigned short)+0x8>)
   29306:	8118      	strh	r0, [r3, #8]
   29308:	4770      	bx	lr
   2930a:	bf00      	nop
   2930c:	20001b58 	.word	0x20001b58

00029310 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getName()>:
SA  getName         () { return fullnameLetter_; }
   29310:	4b01      	ldr	r3, [pc, #4]	; (29318 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getName()+0x8>)
   29312:	7818      	ldrb	r0, [r3, #0]
   29314:	4770      	bx	lr
   29316:	bf00      	nop
   29318:	20001b55 	.word	0x20001b55

0002931c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])>:
SA  update          ( uint8_t (&buf)[31] ) -> void {
   2931c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2931e:	4605      	mov	r5, r0
   29320:	b085      	sub	sp, #20
                        uuidId( 0xde9f );
   29322:	f64d 609f 	movw	r0, #56991	; 0xde9f
   29326:	f7ff ff6f 	bl	29208 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidId(unsigned short)>
                        if( uuidCountInc() % temp_.histSize() == 0 ){
   2932a:	f7ff ff73 	bl	29214 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidCountInc()>
   2932e:	4604      	mov	r4, r0
   29330:	f7ff ff7e 	bl	29230 <TemperatureInternal<(unsigned char)5>::histSize()>
   29334:	fbb4 f3f0 	udiv	r3, r4, r0
   29338:	fb03 4010 	mls	r0, r3, r0, r4
   2933c:	2800      	cmp	r0, #0
   2933e:	d050      	beq.n	293e2 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xc6>
                        uuidData_.battery = Battery::read();
   29340:	f7ff fd1e 	bl	28d80 <Battery::read()>
   29344:	4b28      	ldr	r3, [pc, #160]	; (293e8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xcc>)
   29346:	8158      	strh	r0, [r3, #10]
                        int16_t f = temp_.read(); //~50us
   29348:	f7ff ff7e 	bl	29248 <TemperatureInternal<(unsigned char)5>::read()>
   2934c:	4606      	mov	r6, r0
                        int16_t avgF = temp_.average();
   2934e:	f7ff ffbf 	bl	292d0 <TemperatureInternal<(unsigned char)5>::average()>
                        uuidTempLatest( (avgF >= 0) ? (uint16_t)avgF : 0xE000 bitor (uint16_t)-avgF );  //E=negative 
   29352:	0403      	lsls	r3, r0, #16
   29354:	bf42      	ittt	mi
   29356:	4240      	negmi	r0, r0
   29358:	ea6f 40c0 	mvnmi.w	r0, r0, lsl #19
   2935c:	ea6f 40d0 	mvnmi.w	r0, r0, lsr #19
   29360:	b280      	uxth	r0, r0
   29362:	f7ff ffcf 	bl	29304 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempLatest(unsigned short)>
                        uint8_t f10 = (f < 0) ? -f%10 : f%10;
   29366:	2e00      	cmp	r6, #0
   29368:	db30      	blt.n	293cc <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xb0>
   2936a:	4c20      	ldr	r4, [pc, #128]	; (293ec <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xd0>)
   2936c:	17f7      	asrs	r7, r6, #31
   2936e:	fb84 3406 	smull	r3, r4, r4, r6
   29372:	ebc7 04a4 	rsb	r4, r7, r4, asr #2
   29376:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2937a:	eba6 0444 	sub.w	r4, r6, r4, lsl #1
   2937e:	b224      	sxth	r4, r4
                        snprintf( nambuf, 7, "%c%3d.%u", getName(), f/10, f10 );
   29380:	f7ff ffc6 	bl	29310 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::getName()>
   29384:	4603      	mov	r3, r0
   29386:	4819      	ldr	r0, [pc, #100]	; (293ec <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xd0>)
   29388:	9401      	str	r4, [sp, #4]
   2938a:	fb80 2606 	smull	r2, r6, r0, r6
   2938e:	ebc7 06a6 	rsb	r6, r7, r6, asr #2
   29392:	b236      	sxth	r6, r6
   29394:	4a16      	ldr	r2, [pc, #88]	; (293f0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xd4>)
   29396:	9600      	str	r6, [sp, #0]
   29398:	a802      	add	r0, sp, #8
   2939a:	2107      	movs	r1, #7
   2939c:	f000 fb42 	bl	29a24 <sniprintf>
                        uint8_t idx = Flags01::make( buf, BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED ); //3 fixed
   293a0:	2104      	movs	r1, #4
   293a2:	4628      	mov	r0, r5
   293a4:	f7ff fcfc 	bl	28da0 <Flags01::make(unsigned char*, unsigned char)>
   293a8:	b2c4      	uxtb	r4, r0
                        idx += CompleteName09::make( &buf[idx], nambuf, 8 ); //max 10 (str max 8)
   293aa:	a902      	add	r1, sp, #8
   293ac:	1928      	adds	r0, r5, r4
   293ae:	2208      	movs	r2, #8
   293b0:	f7ff fcfe 	bl	28db0 <CompleteName09::make(unsigned char*, char const*, unsigned char)>
   293b4:	4404      	add	r4, r0
   293b6:	b2e4      	uxtb	r4, r4
                        idx += UUID07::makeBCD( &buf[idx], uuidData_.all ); //18 fixed
   293b8:	1928      	adds	r0, r5, r4
   293ba:	490b      	ldr	r1, [pc, #44]	; (293e8 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xcc>)
   293bc:	f7ff fd4a 	bl	28e54 <UUID07::makeBCD(unsigned char*, unsigned short const (&) [8])>
   293c0:	4404      	add	r4, r0
                        buf[idx] = 0;
   293c2:	b2e4      	uxtb	r4, r4
   293c4:	2300      	movs	r3, #0
   293c6:	552b      	strb	r3, [r5, r4]
                    }
   293c8:	b005      	add	sp, #20
   293ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        uint8_t f10 = (f < 0) ? -f%10 : f%10;
   293cc:	4c09      	ldr	r4, [pc, #36]	; (293f4 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0xd8>)
   293ce:	4273      	negs	r3, r6
   293d0:	fba4 2403 	umull	r2, r4, r4, r3
   293d4:	08e4      	lsrs	r4, r4, #3
   293d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   293da:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
   293de:	17f7      	asrs	r7, r6, #31
   293e0:	e7ce      	b.n	29380 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0x64>
                            uuidTempShift();
   293e2:	f7ff ff27 	bl	29234 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::uuidTempShift()>
   293e6:	e7ab      	b.n	29340 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])+0x24>
   293e8:	20001b58 	.word	0x20001b58
   293ec:	66666667 	.word	0x66666667
   293f0:	0002b344 	.word	0x0002b344
   293f4:	cccccccd 	.word	0xcccccccd

000293f8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)>:
SA  power           (uint8_t v) {
   293f8:	b508      	push	{r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   293fa:	280e      	cmp	r0, #14
   293fc:	4b06      	ldr	r3, [pc, #24]	; (29418 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)+0x20>)
   293fe:	4a07      	ldr	r2, [pc, #28]	; (2941c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)+0x24>)
   29400:	7819      	ldrb	r1, [r3, #0]
   29402:	bf28      	it	cs
   29404:	200e      	movcs	r0, #14
   29406:	5612      	ldrsb	r2, [r2, r0]
   29408:	2001      	movs	r0, #1
   2940a:	f7ff f945 	bl	28698 <sd_ble_gap_tx_power_set>
                    }
   2940e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                        error.check( sd_ble_gap_tx_power_set(BLE_GAP_TX_POWER_ROLE_ADV, handle_, SD_TX_LEVELS[v] ) );
   29412:	b200      	sxth	r0, r0
   29414:	f7ff b942 	b.w	2869c <Errors::check(short, bool) [clone .constprop.0]>
   29418:	20001900 	.word	0x20001900
   2941c:	0002b350 	.word	0x0002b350

00029420 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()>:
SA  start           () -> void {
   29420:	b570      	push	{r4, r5, r6, lr}
                        if( isActive_ ) return;
   29422:	4c35      	ldr	r4, [pc, #212]	; (294f8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xd8>)
   29424:	7825      	ldrb	r5, [r4, #0]
   29426:	b105      	cbz	r5, 2942a <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xa>
                    }
   29428:	bd70      	pop	{r4, r5, r6, pc}
                        error.check( sd_ble_gap_adv_set_configure(&handle_, &pdata_, &params_) );
   2942a:	4e34      	ldr	r6, [pc, #208]	; (294fc <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xdc>)
   2942c:	4a34      	ldr	r2, [pc, #208]	; (29500 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xe0>)
   2942e:	4935      	ldr	r1, [pc, #212]	; (29504 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xe4>)
   29430:	4630      	mov	r0, r6
   29432:	f7ff f92b 	bl	2868c <sd_ble_gap_adv_set_configure>
   29436:	b200      	sxth	r0, r0
   29438:	f7ff f930 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( sd_ble_gap_adv_start(handle_, BLE_CONN_CFG_TAG_DEFAULT) );
   2943c:	4629      	mov	r1, r5
   2943e:	7830      	ldrb	r0, [r6, #0]
   29440:	f7ff f926 	bl	28690 <sd_ble_gap_adv_start>
   29444:	b200      	sxth	r0, r0
   29446:	f7ff f929 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        power( txPower_ );
   2944a:	4a2f      	ldr	r2, [pc, #188]	; (29508 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xe8>)
                        isActive_ = true;
   2944c:	2301      	movs	r3, #1
                        power( txPower_ );
   2944e:	7810      	ldrb	r0, [r2, #0]
                        isActive_ = true;
   29450:	7023      	strb	r3, [r4, #0]
                        power( txPower_ );
   29452:	f7ff ffd1 	bl	293f8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::power(unsigned char)>
                        if( Battery::isOk() ) board.ok(); else board.caution();
   29456:	f7ff fc97 	bl	28d88 <Battery::isOk()>
   2945a:	b328      	cbz	r0, 294a8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x88>
SA  isOutput    ()          { return reg.DIRP; }
   2945c:	4b2b      	ldr	r3, [pc, #172]	; (2950c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xec>)
   2945e:	f8d3 2724 	ldr.w	r2, [r3, #1828]	; 0x724
                    if( not isOutput() ) return;
   29462:	07d1      	lsls	r1, r2, #31
   29464:	d5e0      	bpl.n	29428 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x8>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29466:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2946a:	4c29      	ldr	r4, [pc, #164]	; (29510 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xf0>)
   2946c:	f412 7f00 	tst.w	r2, #512	; 0x200
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29470:	f44f 7200 	mov.w	r2, #512	; 0x200
   29474:	bf14      	ite	ne
   29476:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   2947a:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
    delay_cycles(cycles);
   2947e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   29482:	f044 0401 	orr.w	r4, r4, #1
    delay_cycles(cycles);
   29486:	47a0      	blx	r4
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29488:	4b20      	ldr	r3, [pc, #128]	; (2950c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xec>)
   2948a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2948e:	f412 7f00 	tst.w	r2, #512	; 0x200
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29492:	f44f 7200 	mov.w	r2, #512	; 0x200
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   29496:	d027      	beq.n	294e8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xc8>
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   29498:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   2949c:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   294a0:	4623      	mov	r3, r4
                    }
   294a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   294a6:	4718      	bx	r3
SA  isOutput    ()          { return reg.DIRP; }
   294a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   294ac:	f8d3 2720 	ldr.w	r2, [r3, #1824]	; 0x720
                    if( not isOutput() ) return;
   294b0:	07d2      	lsls	r2, r2, #31
   294b2:	d5b9      	bpl.n	29428 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x8>
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   294b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   294b8:	4c15      	ldr	r4, [pc, #84]	; (29510 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0xf0>)
   294ba:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   294be:	f44f 7280 	mov.w	r2, #256	; 0x100
   294c2:	bf14      	ite	ne
   294c4:	f8c3 250c 	strne.w	r2, [r3, #1292]	; 0x50c
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   294c8:	f8c3 2508 	streq.w	r2, [r3, #1288]	; 0x508
    delay_cycles(cycles);
   294cc:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   294d0:	f044 0401 	orr.w	r4, r4, #1
    delay_cycles(cycles);
   294d4:	47a0      	blx	r4
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   294d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   294da:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   294de:	f412 7f80 	tst.w	r2, #256	; 0x100
SA  low         ()          { reg.OUTCLR = bm_; } //register wide write
   294e2:	f44f 7280 	mov.w	r2, #256	; 0x100
SA  toggle      ()          { if( reg.OUT ) low(); else high(); }
   294e6:	d1d7      	bne.n	29498 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()+0x78>
SA  high        ()          { reg.OUTSET = bm_; } //register wide write
   294e8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   294ec:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
   294f0:	4623      	mov	r3, r4
   294f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   294f6:	4718      	bx	r3
   294f8:	20001b19 	.word	0x20001b19
   294fc:	20001900 	.word	0x20001900
   29500:	20001b3c 	.word	0x20001b3c
   29504:	200018f0 	.word	0x200018f0
   29508:	20001b54 	.word	0x20001b54
   2950c:	50000300 	.word	0x50000300
   29510:	0002b360 	.word	0x0002b360

00029514 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)>:
SA  update          (void* pcontext = nullptr) -> void {
   29514:	b510      	push	{r4, lr}
                        ADdata_.update(buffer_);
   29516:	4c08      	ldr	r4, [pc, #32]	; (29538 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x24>)
                        stop();
   29518:	f7ff fe62 	bl	291e0 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::stop()>
                        ADdata_.update(buffer_);
   2951c:	4620      	mov	r0, r4
   2951e:	f7ff fefd 	bl	2931c <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::update(unsigned char (&) [31])>
                        while( buffer_[i] ){
   29522:	7822      	ldrb	r2, [r4, #0]
   29524:	b12a      	cbz	r2, 29532 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x1e>
                        auto i = 0;
   29526:	2300      	movs	r3, #0
                            auto typ = buffer_[i++];
   29528:	1c98      	adds	r0, r3, #2
                                i += len;
   2952a:	1813      	adds	r3, r2, r0
                        while( buffer_[i] ){
   2952c:	5ce2      	ldrb	r2, [r4, r3]
   2952e:	2a00      	cmp	r2, #0
   29530:	d1fa      	bne.n	29528 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)+0x14>
                        start();
   29532:	f7ff ff75 	bl	29420 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::start()>
                    }
   29536:	bd10      	pop	{r4, pc}
   29538:	20001b1c 	.word	0x20001b1c

0002953c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()>:
SA  init            () {
   2953c:	b538      	push	{r3, r4, r5, lr}
                        ADdata_.init();
   2953e:	f7ff fd2f 	bl	28fa0 <MyTemperatureAD<TemperatureInternal<(unsigned char)5> >::init()>
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   29542:	4c14      	ldr	r4, [pc, #80]	; (29594 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x58>)
                        params_.interval = paramInterval_;
   29544:	4b14      	ldr	r3, [pc, #80]	; (29598 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x5c>)
                        return __builtin_ceil( ms*(RTC_HZ/1000.0) );
                    }

                    //init timer module on first use, applies to all instances
SA init             () {
                        if( isTimerModuleInit_ ) return;
   29546:	4d15      	ldr	r5, [pc, #84]	; (2959c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x60>)
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   29548:	2205      	movs	r2, #5
                        params_.interval = paramInterval_;
   2954a:	e9d3 0100 	ldrd	r0, r1, [r3]
                        params_.properties.type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED;
   2954e:	7022      	strb	r2, [r4, #0]
                        params_.interval = paramInterval_;
   29550:	f000 ff06 	bl	2a360 <__aeabi_d2uiz>
   29554:	4603      	mov	r3, r0
                        update();
   29556:	2000      	movs	r0, #0
                        params_.interval = paramInterval_;
   29558:	60a3      	str	r3, [r4, #8]
                        update();
   2955a:	f7ff ffdb 	bl	29514 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::update(void*)>
   2955e:	782b      	ldrb	r3, [r5, #0]
   29560:	b91b      	cbnz	r3, 2956a <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x2e>
                        app_timer_init(); //always success
   29562:	f7fe f88b 	bl	2767c <app_timer_init>
                        isTimerModuleInit_ = true;
   29566:	2301      	movs	r3, #1
   29568:	702b      	strb	r3, [r5, #0]
    Timer           (){}
                    
                    //for each instance
auto init           (u32 ms, void(*cb)(void*), TIMER_TYPE typ = ONCE) -> void {
                        init();
                        error.check( app_timer_create(&ptimerId_, 
   2956a:	4a0d      	ldr	r2, [pc, #52]	; (295a0 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x64>)
   2956c:	480d      	ldr	r0, [pc, #52]	; (295a4 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x68>)
   2956e:	2101      	movs	r1, #1
   29570:	f7fe f8ba 	bl	276e8 <app_timer_create>
   29574:	b200      	sxth	r0, r0
   29576:	f7ff f891 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                            typ == ONCE ? APP_TIMER_MODE_SINGLE_SHOT : 
                                APP_TIMER_MODE_REPEATED, cb) 
                        );
                        error.check( app_timer_start(ptimerId_, appTimerTicks(ms), NULL) );
   2957a:	4b0b      	ldr	r3, [pc, #44]	; (295a8 <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()+0x6c>)
   2957c:	2200      	movs	r2, #0
   2957e:	6a18      	ldr	r0, [r3, #32]
   29580:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
   29584:	f7fe f8be 	bl	27704 <app_timer_start>
                    }
   29588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2958c:	b200      	sxth	r0, r0
   2958e:	f7ff b885 	b.w	2869c <Errors::check(short, bool) [clone .constprop.0]>
   29592:	bf00      	nop
   29594:	20001b3c 	.word	0x20001b3c
   29598:	200018e8 	.word	0x200018e8
   2959c:	20001b18 	.word	0x20001b18
   295a0:	00029515 	.word	0x00029515
   295a4:	20001b10 	.word	0x20001b10
   295a8:	20001af0 	.word	0x20001af0

000295ac <main>:
#endif

/*-----------------------------------------------------------------------------
    functions
-----------------------------------------------------------------------------*/
int main() {
   295ac:	b510      	push	{r4, lr}
   295ae:	b082      	sub	sp, #8

    Debug( "{normal}{Fgreen}\nBoot...\n" );
    Debug( "{Fmagenta}board.init()...\n" );

    board.init();           //init board pins
   295b0:	f7ff f936 	bl	28820 <Pca10059::init()>
    board.alive();          //blink led's to show boot
   295b4:	f7ff f958 	bl	28868 <Pca10059::alive()>

                            //start power management
    Debug( "nrf_pwr_mgmt_init()...\n" );
    error.check( nrf_pwr_mgmt_init() );
   295b8:	f7fe fb00 	bl	27bbc <nrf_pwr_mgmt_init>
   295bc:	b200      	sxth	r0, r0
   295be:	f7ff f86d 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
   295c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   295c6:	2201      	movs	r2, #1
   295c8:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
//===========
    public:
//===========

SA  init            () {
                        uint32_t ram_start = 0;
   295cc:	2400      	movs	r4, #0
   295ce:	9401      	str	r4, [sp, #4]
                        error.check( nrf_sdh_enable_request() );
   295d0:	f000 f874 	bl	296bc <nrf_sdh_enable_request>
   295d4:	b200      	sxth	r0, r0
   295d6:	f7ff f861 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_default_cfg_set(BLE_CONN_CFG_TAG_DEFAULT, &ram_start) );
   295da:	a901      	add	r1, sp, #4
   295dc:	4620      	mov	r0, r4
   295de:	f000 f949 	bl	29874 <nrf_sdh_ble_default_cfg_set>
   295e2:	b200      	sxth	r0, r0
   295e4:	f7ff f85a 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
                        error.check( nrf_sdh_ble_enable(&ram_start) );
   295e8:	a801      	add	r0, sp, #4
   295ea:	f000 f99b 	bl	29924 <nrf_sdh_ble_enable>
   295ee:	b200      	sxth	r0, r0
   295f0:	f7ff f854 	bl	2869c <Errors::check(short, bool) [clone .constprop.0]>
    ble.init();             //ble stack init

    ////// now can use sd_* functions //////

    Debug( "adv.init()...\n" );
    adv.init();             //advertising init
   295f4:	f7ff ffa2 	bl	2953c <Advertising<MyTemperatureAD<TemperatureInternal<(unsigned char)5> >, (unsigned short)3000, &(advInitCB())>::init()>

    while( true ) { 
        DebugFuncHeader();
        Debug("{Fmagenta}  low power...{Fwhite} \n");
        nrf_pwr_mgmt_run();  
   295f8:	f7fe faf6 	bl	27be8 <nrf_pwr_mgmt_run>
    while( true ) { 
   295fc:	e7fc      	b.n	295f8 <main+0x4c>
   295fe:	bf00      	nop

00029600 <_GLOBAL__sub_I_main>:
    SI Gpio<P0_6, LOWISON>  led1G;
   29600:	4b21      	ldr	r3, [pc, #132]	; (29688 <_GLOBAL__sub_I_main+0x88>)
   29602:	681a      	ldr	r2, [r3, #0]
   29604:	07d2      	lsls	r2, r2, #31
   29606:	bf5c      	itt	pl
   29608:	2201      	movpl	r2, #1
   2960a:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P1_9, LOWISON>  led2G;
   2960c:	4b1f      	ldr	r3, [pc, #124]	; (2968c <_GLOBAL__sub_I_main+0x8c>)
   2960e:	681a      	ldr	r2, [r3, #0]
   29610:	07d0      	lsls	r0, r2, #31
   29612:	bf5c      	itt	pl
   29614:	2201      	movpl	r2, #1
   29616:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_12, LOWISON> led2B;
   29618:	4b1d      	ldr	r3, [pc, #116]	; (29690 <_GLOBAL__sub_I_main+0x90>)
   2961a:	681a      	ldr	r2, [r3, #0]
   2961c:	07d1      	lsls	r1, r2, #31
   2961e:	bf5c      	itt	pl
   29620:	2201      	movpl	r2, #1
   29622:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P0_8, LOWISON>  led2R;
   29624:	4b1b      	ldr	r3, [pc, #108]	; (29694 <_GLOBAL__sub_I_main+0x94>)
   29626:	681a      	ldr	r2, [r3, #0]
   29628:	07d2      	lsls	r2, r2, #31
   2962a:	bf5c      	itt	pl
   2962c:	2201      	movpl	r2, #1
   2962e:	601a      	strpl	r2, [r3, #0]
    SI Gpio<P1_6, LOWISON>  sw1;
   29630:	4b19      	ldr	r3, [pc, #100]	; (29698 <_GLOBAL__sub_I_main+0x98>)
   29632:	681a      	ldr	r2, [r3, #0]
   29634:	07d0      	lsls	r0, r2, #31
   29636:	bf5c      	itt	pl
   29638:	2201      	movpl	r2, #1
   2963a:	601a      	strpl	r2, [r3, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   2963c:	4a17      	ldr	r2, [pc, #92]	; (2969c <_GLOBAL__sub_I_main+0x9c>)
   2963e:	6813      	ldr	r3, [r2, #0]
   29640:	f013 0301 	ands.w	r3, r3, #1
   29644:	d117      	bne.n	29676 <_GLOBAL__sub_I_main+0x76>
    }

}
   29646:	b430      	push	{r4, r5}
                        ch_ = ch;
   29648:	4c15      	ldr	r4, [pc, #84]	; (296a0 <_GLOBAL__sub_I_main+0xa0>)
                        pselN_ = (PSEL)it.PSELN;
   2964a:	4d16      	ldr	r5, [pc, #88]	; (296a4 <_GLOBAL__sub_I_main+0xa4>)
                        pselP_ = (PSEL)it.PSELP;
   2964c:	4916      	ldr	r1, [pc, #88]	; (296a8 <_GLOBAL__sub_I_main+0xa8>)
                        ch_ = ch;
   2964e:	7023      	strb	r3, [r4, #0]
                        pselN_ = (PSEL)it.PSELN;
   29650:	702b      	strb	r3, [r5, #0]
                        pselP_ = (PSEL)it.PSELP;
   29652:	2409      	movs	r4, #9
#else
    #error "Temperature source not defined in nRFconfig.hpp" 
#endif

#include "Timer.hpp"
inline Timer timerAdvUpdate;
   29654:	4b15      	ldr	r3, [pc, #84]	; (296ac <_GLOBAL__sub_I_main+0xac>)
   29656:	700c      	strb	r4, [r1, #0]
    SI SaadcChan vdd_{ SaadcChan::VDD };
   29658:	2101      	movs	r1, #1
   2965a:	6011      	str	r1, [r2, #0]
inline Timer timerAdvUpdate;
   2965c:	681a      	ldr	r2, [r3, #0]
                        config_ = it.CONFIG;
   2965e:	4814      	ldr	r0, [pc, #80]	; (296b0 <_GLOBAL__sub_I_main+0xb0>)
   29660:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   29664:	07d1      	lsls	r1, r2, #31
   29666:	6004      	str	r4, [r0, #0]
   29668:	d403      	bmi.n	29672 <_GLOBAL__sub_I_main+0x72>
    Timer           (){}
   2966a:	4a12      	ldr	r2, [pc, #72]	; (296b4 <_GLOBAL__sub_I_main+0xb4>)
   2966c:	2101      	movs	r1, #1
   2966e:	6212      	str	r2, [r2, #32]
   29670:	6019      	str	r1, [r3, #0]
   29672:	bc30      	pop	{r4, r5}
   29674:	4770      	bx	lr
   29676:	4b0d      	ldr	r3, [pc, #52]	; (296ac <_GLOBAL__sub_I_main+0xac>)
   29678:	681a      	ldr	r2, [r3, #0]
   2967a:	07d2      	lsls	r2, r2, #31
   2967c:	bf5f      	itttt	pl
   2967e:	4a0d      	ldrpl	r2, [pc, #52]	; (296b4 <_GLOBAL__sub_I_main+0xb4>)
   29680:	2101      	movpl	r1, #1
   29682:	6212      	strpl	r2, [r2, #32]
   29684:	6019      	strpl	r1, [r3, #0]
   29686:	4770      	bx	lr
   29688:	20001ae4 	.word	0x20001ae4
   2968c:	20001ae0 	.word	0x20001ae0
   29690:	20001adc 	.word	0x20001adc
   29694:	20001ad8 	.word	0x20001ad8
   29698:	20001ad4 	.word	0x20001ad4
   2969c:	20001ad0 	.word	0x20001ad0
   296a0:	20001b7e 	.word	0x20001b7e
   296a4:	20001b7c 	.word	0x20001b7c
   296a8:	20001b7d 	.word	0x20001b7d
   296ac:	20001acc 	.word	0x20001acc
   296b0:	20001b78 	.word	0x20001b78
   296b4:	20001af0 	.word	0x20001af0

000296b8 <sd_softdevice_enable>:
 * @retval ::NRF_ERROR_INVALID_STATE SoftDevice is already enabled, and the clock source and fault handler cannot be updated.
 * @retval ::NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION SoftDevice interrupt is already enabled, or an enabled interrupt has an illegal priority level.
 * @retval ::NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN Unknown low frequency clock source selected.
 * @retval ::NRF_ERROR_INVALID_PARAM Invalid clock source configuration supplied in p_clock_lf_cfg.
 */
SVCALL(SD_SOFTDEVICE_ENABLE, uint32_t, sd_softdevice_enable(nrf_clock_lf_cfg_t const * p_clock_lf_cfg, nrf_fault_handler_t fault_handler));
   296b8:	df10      	svc	16
   296ba:	4770      	bx	lr

000296bc <nrf_sdh_enable_request>:
#endif
}


ret_code_t nrf_sdh_enable_request(void)
{
   296bc:	b570      	push	{r4, r5, r6, lr}
    ret_code_t ret_code;

    if (m_nrf_sdh_enabled)
   296be:	4d3c      	ldr	r5, [pc, #240]	; (297b0 <nrf_sdh_enable_request+0xf4>)
   296c0:	782b      	ldrb	r3, [r5, #0]
{
   296c2:	b084      	sub	sp, #16
    if (m_nrf_sdh_enabled)
   296c4:	2b00      	cmp	r3, #0
   296c6:	d166      	bne.n	29796 <nrf_sdh_enable_request+0xda>
    {
        return NRF_ERROR_INVALID_STATE;
    }

    m_nrf_sdh_continue = true;
   296c8:	4e3a      	ldr	r6, [pc, #232]	; (297b4 <nrf_sdh_enable_request+0xf8>)
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   296ca:	493b      	ldr	r1, [pc, #236]	; (297b8 <nrf_sdh_enable_request+0xfc>)
    m_nrf_sdh_continue = true;
   296cc:	2301      	movs	r3, #1
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   296ce:	a802      	add	r0, sp, #8
    m_nrf_sdh_continue = true;
   296d0:	7033      	strb	r3, [r6, #0]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   296d2:	f7fe fab3 	bl	27c3c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   296d6:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   296d8:	b923      	cbnz	r3, 296e4 <nrf_sdh_enable_request+0x28>
   296da:	e00e      	b.n	296fa <nrf_sdh_enable_request+0x3e>
         nrf_section_iter_next(&iter))
   296dc:	f7fe fab8 	bl	27c50 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   296e0:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_req_observers);
   296e2:	b153      	cbz	r3, 296fa <nrf_sdh_enable_request+0x3e>
        if (handler(req, p_observer->p_context))
   296e4:	e9d3 2100 	ldrd	r2, r1, [r3]
   296e8:	2000      	movs	r0, #0
   296ea:	4790      	blx	r2
   296ec:	4604      	mov	r4, r0
         nrf_section_iter_next(&iter))
   296ee:	a802      	add	r0, sp, #8
        if (handler(req, p_observer->p_context))
   296f0:	2c00      	cmp	r4, #0
   296f2:	d1f3      	bne.n	296dc <nrf_sdh_enable_request+0x20>

    // Notify observers about a finished SoftDevice enable process.
    sdh_state_observer_notify(NRF_SDH_EVT_STATE_ENABLED);

    return NRF_SUCCESS;
}
   296f4:	4620      	mov	r0, r4
   296f6:	b004      	add	sp, #16
   296f8:	bd70      	pop	{r4, r5, r6, pc}
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   296fa:	4930      	ldr	r1, [pc, #192]	; (297bc <nrf_sdh_enable_request+0x100>)
   296fc:	a802      	add	r0, sp, #8
   296fe:	f7fe fa9d 	bl	27c3c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   29702:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   29704:	b14b      	cbz	r3, 2971a <nrf_sdh_enable_request+0x5e>
        handler(evt, p_observer->p_context);
   29706:	e9d3 2100 	ldrd	r2, r1, [r3]
   2970a:	2000      	movs	r0, #0
   2970c:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   2970e:	a802      	add	r0, sp, #8
   29710:	f7fe fa9e 	bl	27c50 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   29714:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   29716:	2b00      	cmp	r3, #0
   29718:	d1f5      	bne.n	29706 <nrf_sdh_enable_request+0x4a>
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   2971a:	4a29      	ldr	r2, [pc, #164]	; (297c0 <nrf_sdh_enable_request+0x104>)
    CRITICAL_REGION_ENTER();
   2971c:	2300      	movs	r3, #0
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   2971e:	6812      	ldr	r2, [r2, #0]
    CRITICAL_REGION_ENTER();
   29720:	f88d 3008 	strb.w	r3, [sp, #8]
   29724:	a802      	add	r0, sp, #8
    nrf_clock_lf_cfg_t const clock_lf_cfg =
   29726:	9201      	str	r2, [sp, #4]
    CRITICAL_REGION_ENTER();
   29728:	f7fe f832 	bl	27790 <app_util_critical_region_enter>
    ret_code = sd_softdevice_enable(&clock_lf_cfg, app_error_fault_handler);
   2972c:	4925      	ldr	r1, [pc, #148]	; (297c4 <nrf_sdh_enable_request+0x108>)
   2972e:	a801      	add	r0, sp, #4
   29730:	f7ff ffc2 	bl	296b8 <sd_softdevice_enable>
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   29734:	fab0 f380 	clz	r3, r0
   29738:	4604      	mov	r4, r0
   2973a:	095b      	lsrs	r3, r3, #5
    CRITICAL_REGION_EXIT();
   2973c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    m_nrf_sdh_enabled = (ret_code == NRF_SUCCESS);
   29740:	702b      	strb	r3, [r5, #0]
    CRITICAL_REGION_EXIT();
   29742:	f7fe f84b 	bl	277dc <app_util_critical_region_exit>
    if (ret_code != NRF_SUCCESS)
   29746:	2c00      	cmp	r4, #0
   29748:	d1d4      	bne.n	296f4 <nrf_sdh_enable_request+0x38>
    m_nrf_sdh_suspended = false;
   2974a:	4b1f      	ldr	r3, [pc, #124]	; (297c8 <nrf_sdh_enable_request+0x10c>)
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
   2974c:	491f      	ldr	r1, [pc, #124]	; (297cc <nrf_sdh_enable_request+0x110>)
   2974e:	701c      	strb	r4, [r3, #0]
    m_nrf_sdh_continue  = false;
   29750:	7034      	strb	r4, [r6, #0]
   29752:	f891 2316 	ldrb.w	r2, [r1, #790]	; 0x316
   || (((1 << priority) & __NRF_NVIC_APP_IRQ_PRIOS) == 0)
   29756:	23ec      	movs	r3, #236	; 0xec
   29758:	0952      	lsrs	r2, r2, #5
   2975a:	4113      	asrs	r3, r2
   2975c:	07db      	lsls	r3, r3, #31
   2975e:	d51e      	bpl.n	2979e <nrf_sdh_enable_request+0xe2>
  if (nrf_nvic_state.__cr_flag)
   29760:	4b1b      	ldr	r3, [pc, #108]	; (297d0 <nrf_sdh_enable_request+0x114>)
   29762:	689a      	ldr	r2, [r3, #8]
   29764:	b302      	cbz	r2, 297a8 <nrf_sdh_enable_request+0xec>
    nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] |= (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));
   29766:	681a      	ldr	r2, [r3, #0]
   29768:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2976c:	601a      	str	r2, [r3, #0]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   2976e:	4913      	ldr	r1, [pc, #76]	; (297bc <nrf_sdh_enable_request+0x100>)
   29770:	a802      	add	r0, sp, #8
   29772:	f7fe fa63 	bl	27c3c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   29776:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   29778:	2b00      	cmp	r3, #0
   2977a:	d0bb      	beq.n	296f4 <nrf_sdh_enable_request+0x38>
        handler(evt, p_observer->p_context);
   2977c:	e9d3 2100 	ldrd	r2, r1, [r3]
   29780:	2001      	movs	r0, #1
   29782:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   29784:	a802      	add	r0, sp, #8
   29786:	f7fe fa63 	bl	27c50 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   2978a:	9b03      	ldr	r3, [sp, #12]
    for (nrf_section_iter_init(&iter, &sdh_state_observers);
   2978c:	2b00      	cmp	r3, #0
   2978e:	d1f5      	bne.n	2977c <nrf_sdh_enable_request+0xc0>
}
   29790:	4620      	mov	r0, r4
   29792:	b004      	add	sp, #16
   29794:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_INVALID_STATE;
   29796:	2408      	movs	r4, #8
}
   29798:	4620      	mov	r0, r4
   2979a:	b004      	add	sp, #16
   2979c:	bd70      	pop	{r4, r5, r6, pc}
    APP_ERROR_CHECK(ret_code);
   2979e:	f242 0002 	movw	r0, #8194	; 0x2002
   297a2:	f7fd fda9 	bl	272f8 <app_error_handler_bare>
   297a6:	e7e2      	b.n	2976e <nrf_sdh_enable_request+0xb2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   297a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   297ac:	600b      	str	r3, [r1, #0]
   297ae:	e7de      	b.n	2976e <nrf_sdh_enable_request+0xb2>
   297b0:	20001b81 	.word	0x20001b81
   297b4:	20001b80 	.word	0x20001b80
   297b8:	0002b36c 	.word	0x0002b36c
   297bc:	0002b384 	.word	0x0002b384
   297c0:	0002b368 	.word	0x0002b368
   297c4:	00027319 	.word	0x00027319
   297c8:	20001b82 	.word	0x20001b82
   297cc:	e000e100 	.word	0xe000e100
   297d0:	20001b90 	.word	0x20001b90

000297d4 <nrf_sdh_is_enabled>:
}


bool nrf_sdh_is_enabled(void)
{
    return m_nrf_sdh_enabled;
   297d4:	4b01      	ldr	r3, [pc, #4]	; (297dc <nrf_sdh_is_enabled+0x8>)
}
   297d6:	7818      	ldrb	r0, [r3, #0]
   297d8:	4770      	bx	lr
   297da:	bf00      	nop
   297dc:	20001b81 	.word	0x20001b81

000297e0 <SWI2_EGU2_IRQHandler>:


#if (NRF_SDH_DISPATCH_MODEL == NRF_SDH_DISPATCH_MODEL_INTERRUPT)

void SD_EVT_IRQHandler(void)
{
   297e0:	b500      	push	{lr}
   297e2:	b083      	sub	sp, #12
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   297e4:	4908      	ldr	r1, [pc, #32]	; (29808 <SWI2_EGU2_IRQHandler+0x28>)
   297e6:	4668      	mov	r0, sp
   297e8:	f7fe fa28 	bl	27c3c <nrf_section_iter_init>
         nrf_section_iter_get(&iter) != NULL;
   297ec:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   297ee:	b143      	cbz	r3, 29802 <SWI2_EGU2_IRQHandler+0x22>
        handler(p_observer->p_context);
   297f0:	e9d3 2000 	ldrd	r2, r0, [r3]
   297f4:	4790      	blx	r2
         nrf_section_iter_next(&iter))
   297f6:	4668      	mov	r0, sp
   297f8:	f7fe fa2a 	bl	27c50 <nrf_section_iter_next>
         nrf_section_iter_get(&iter) != NULL;
   297fc:	9b01      	ldr	r3, [sp, #4]
    for (nrf_section_iter_init(&iter, &sdh_stack_observers);
   297fe:	2b00      	cmp	r3, #0
   29800:	d1f6      	bne.n	297f0 <SWI2_EGU2_IRQHandler+0x10>
    nrf_sdh_evts_poll();
}
   29802:	b003      	add	sp, #12
   29804:	f85d fb04 	ldr.w	pc, [sp], #4
   29808:	0002b378 	.word	0x0002b378

0002980c <sd_ble_enable>:
 *                                      and set the start address of the application RAM region accordingly.
 *                                    - Dynamic part of the SoftDevice RAM region is larger then 64 kB which
 *                                      is currently not supported.
 * @retval ::NRF_ERROR_RESOURCES      The total number of L2CAP Channels configured using @ref sd_ble_cfg_set is too large.
 */
SVCALL(SD_BLE_ENABLE, uint32_t, sd_ble_enable(uint32_t * p_app_ram_base));
   2980c:	df60      	svc	96	; 0x60
   2980e:	4770      	bx	lr

00029810 <sd_ble_cfg_set>:
 * @retval ::NRF_ERROR_INVALID_ADDR   Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_INVALID_PARAM  Invalid cfg_id supplied.
 * @retval ::NRF_ERROR_NO_MEM         The amount of memory assigned to the SoftDevice by app_ram_base is not
 *                                    large enough to fit this configuration's memory requirement.
 */
SVCALL(SD_BLE_CFG_SET, uint32_t, sd_ble_cfg_set(uint32_t cfg_id, ble_cfg_t const * p_cfg, uint32_t app_ram_base));
   29810:	df69      	svc	105	; 0x69
   29812:	4770      	bx	lr

00029814 <sd_ble_evt_get>:
 * @retval ::NRF_SUCCESS Event pulled and stored into the supplied buffer.
 * @retval ::NRF_ERROR_INVALID_ADDR Invalid or not sufficiently aligned pointer supplied.
 * @retval ::NRF_ERROR_NOT_FOUND No events ready to be pulled.
 * @retval ::NRF_ERROR_DATA_SIZE Event ready but could not fit into the supplied buffer.
 */
SVCALL(SD_BLE_EVT_GET, uint32_t, sd_ble_evt_get(uint8_t *p_dest, uint16_t *p_len));
   29814:	df61      	svc	97	; 0x61
   29816:	4770      	bx	lr

00029818 <nrf_sdh_ble_evts_poll>:
{
    UNUSED_VARIABLE(p_context);

    ret_code_t ret_code;

    if (!m_stack_is_enabled)
   29818:	4b14      	ldr	r3, [pc, #80]	; (2986c <nrf_sdh_ble_evts_poll+0x54>)
   2981a:	781b      	ldrb	r3, [r3, #0]
   2981c:	b32b      	cbz	r3, 2986a <nrf_sdh_ble_evts_poll+0x52>
{
   2981e:	b530      	push	{r4, r5, lr}

        NRF_LOG_DEBUG("BLE event: 0x%x.", p_ble_evt->header.evt_id);

        // Forward the event to BLE observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   29820:	4d13      	ldr	r5, [pc, #76]	; (29870 <nrf_sdh_ble_evts_poll+0x58>)
{
   29822:	b091      	sub	sp, #68	; 0x44
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   29824:	2434      	movs	r4, #52	; 0x34
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   29826:	f10d 0102 	add.w	r1, sp, #2
   2982a:	a803      	add	r0, sp, #12
        uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
   2982c:	f8ad 4002 	strh.w	r4, [sp, #2]
        ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
   29830:	f7ff fff0 	bl	29814 <sd_ble_evt_get>
        if (ret_code != NRF_SUCCESS)
   29834:	b988      	cbnz	r0, 2985a <nrf_sdh_ble_evts_poll+0x42>
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   29836:	4629      	mov	r1, r5
   29838:	a801      	add	r0, sp, #4
   2983a:	f7fe f9ff 	bl	27c3c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   2983e:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   29840:	2b00      	cmp	r3, #0
   29842:	d0f0      	beq.n	29826 <nrf_sdh_ble_evts_poll+0xe>
            nrf_sdh_ble_evt_handler_t    handler;

            p_observer = (nrf_sdh_ble_evt_observer_t *)nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(p_ble_evt, p_observer->p_context);
   29844:	e9d3 2100 	ldrd	r2, r1, [r3]
   29848:	a803      	add	r0, sp, #12
   2984a:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   2984c:	a801      	add	r0, sp, #4
   2984e:	f7fe f9ff 	bl	27c50 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   29852:	9b02      	ldr	r3, [sp, #8]
        for (nrf_section_iter_init(&iter, &sdh_ble_observers);
   29854:	2b00      	cmp	r3, #0
   29856:	d1f5      	bne.n	29844 <nrf_sdh_ble_evts_poll+0x2c>
   29858:	e7e5      	b.n	29826 <nrf_sdh_ble_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   2985a:	2805      	cmp	r0, #5
   2985c:	d101      	bne.n	29862 <nrf_sdh_ble_evts_poll+0x4a>
    {
        APP_ERROR_HANDLER(ret_code);
    }
}
   2985e:	b011      	add	sp, #68	; 0x44
   29860:	bd30      	pop	{r4, r5, pc}
        APP_ERROR_HANDLER(ret_code);
   29862:	f7fd fd49 	bl	272f8 <app_error_handler_bare>
}
   29866:	b011      	add	sp, #68	; 0x44
   29868:	bd30      	pop	{r4, r5, pc}
   2986a:	4770      	bx	lr
   2986c:	20001b83 	.word	0x20001b83
   29870:	0002b390 	.word	0x0002b390

00029874 <nrf_sdh_ble_default_cfg_set>:
    if (p_app_ram_start == NULL)
   29874:	2900      	cmp	r1, #0
   29876:	d051      	beq.n	2991c <nrf_sdh_ble_default_cfg_set+0xa8>
{
   29878:	b570      	push	{r4, r5, r6, lr}
    *p_app_ram_start = APP_RAM_START;
   2987a:	4b29      	ldr	r3, [pc, #164]	; (29920 <nrf_sdh_ble_default_cfg_set+0xac>)
   2987c:	600b      	str	r3, [r1, #0]
{
   2987e:	b084      	sub	sp, #16
   29880:	460d      	mov	r5, r1
   29882:	4604      	mov	r4, r0
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   29884:	220c      	movs	r2, #12
   29886:	a801      	add	r0, sp, #4
   29888:	2100      	movs	r1, #0
   2988a:	f000 f8c3 	bl	29a14 <memset>
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   2988e:	2601      	movs	r6, #1
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   29890:	2306      	movs	r3, #6
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   29892:	682a      	ldr	r2, [r5, #0]
    ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
   29894:	f8ad 3008 	strh.w	r3, [sp, #8]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   29898:	a901      	add	r1, sp, #4
   2989a:	2020      	movs	r0, #32
    ble_cfg.conn_cfg.conn_cfg_tag                     = conn_cfg_tag;
   2989c:	f88d 4004 	strb.w	r4, [sp, #4]
    ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
   298a0:	f88d 6006 	strb.w	r6, [sp, #6]
    ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
   298a4:	f7ff ffb4 	bl	29810 <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   298a8:	a801      	add	r0, sp, #4
   298aa:	220c      	movs	r2, #12
   298ac:	2100      	movs	r1, #0
    ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
   298ae:	2400      	movs	r4, #0
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   298b0:	f000 f8b0 	bl	29a14 <memset>
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   298b4:	682a      	ldr	r2, [r5, #0]
    ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
   298b6:	f88d 4005 	strb.w	r4, [sp, #5]
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   298ba:	a901      	add	r1, sp, #4
   298bc:	2040      	movs	r0, #64	; 0x40
    ble_cfg.gap_cfg.role_count_cfg.central_role_count = NRF_SDH_BLE_CENTRAL_LINK_COUNT;
   298be:	f8ad 4006 	strh.w	r4, [sp, #6]
    ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
   298c2:	f7ff ffa5 	bl	29810 <sd_ble_cfg_set>
    memset(&ble_cfg, 0, sizeof(ble_cfg));
   298c6:	4621      	mov	r1, r4
   298c8:	a801      	add	r0, sp, #4
   298ca:	220c      	movs	r2, #12
   298cc:	f000 f8a2 	bl	29a14 <memset>
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   298d0:	682a      	ldr	r2, [r5, #0]
    ble_cfg.common_cfg.vs_uuid_cfg.vs_uuid_count = NRF_SDH_BLE_VS_UUID_COUNT;
   298d2:	f88d 4004 	strb.w	r4, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
   298d6:	a901      	add	r1, sp, #4
   298d8:	4630      	mov	r0, r6
   298da:	f7ff ff99 	bl	29810 <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   298de:	4621      	mov	r1, r4
   298e0:	a801      	add	r0, sp, #4
   298e2:	220c      	movs	r2, #12
   298e4:	f000 f896 	bl	29a14 <memset>
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   298e8:	23f8      	movs	r3, #248	; 0xf8
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   298ea:	682a      	ldr	r2, [r5, #0]
    ble_cfg.gatts_cfg.attr_tab_size.attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE;
   298ec:	9301      	str	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
   298ee:	a901      	add	r1, sp, #4
   298f0:	20a1      	movs	r0, #161	; 0xa1
   298f2:	f7ff ff8d 	bl	29810 <sd_ble_cfg_set>
    memset(&ble_cfg, 0x00, sizeof(ble_cfg));
   298f6:	4621      	mov	r1, r4
   298f8:	a801      	add	r0, sp, #4
   298fa:	220c      	movs	r2, #12
   298fc:	f000 f88a 	bl	29a14 <memset>
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   29900:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   29904:	682a      	ldr	r2, [r5, #0]
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   29906:	f364 0300 	bfi	r3, r4, #0, #1
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   2990a:	a901      	add	r1, sp, #4
   2990c:	20a0      	movs	r0, #160	; 0xa0
    ble_cfg.gatts_cfg.service_changed.service_changed = NRF_SDH_BLE_SERVICE_CHANGED;
   2990e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
   29912:	f7ff ff7d 	bl	29810 <sd_ble_cfg_set>
    return NRF_SUCCESS;
   29916:	4620      	mov	r0, r4
}
   29918:	b004      	add	sp, #16
   2991a:	bd70      	pop	{r4, r5, r6, pc}
        return NRF_ERROR_NULL;
   2991c:	200e      	movs	r0, #14
}
   2991e:	4770      	bx	lr
   29920:	200018d8 	.word	0x200018d8

00029924 <nrf_sdh_ble_enable>:
{
   29924:	b508      	push	{r3, lr}
    ret_code_t ret_code = sd_ble_enable(p_app_ram_start);
   29926:	f7ff ff71 	bl	2980c <sd_ble_enable>
    if (ret_code == NRF_SUCCESS)
   2992a:	b910      	cbnz	r0, 29932 <nrf_sdh_ble_enable+0xe>
        m_stack_is_enabled = true;
   2992c:	4b01      	ldr	r3, [pc, #4]	; (29934 <nrf_sdh_ble_enable+0x10>)
   2992e:	2201      	movs	r2, #1
   29930:	701a      	strb	r2, [r3, #0]
}
   29932:	bd08      	pop	{r3, pc}
   29934:	20001b83 	.word	0x20001b83

00029938 <sd_evt_get>:
SVCALL(SD_EVT_GET, uint32_t, sd_evt_get(uint32_t * p_evt_id));
   29938:	df4b      	svc	75	; 0x4b
   2993a:	4770      	bx	lr

0002993c <nrf_sdh_soc_evts_poll>:
/**@brief   Function for polling SoC events.
 *
 * @param[in]   p_context   Context of the observer.
 */
static void nrf_sdh_soc_evts_poll(void * p_context)
{
   2993c:	b510      	push	{r4, lr}

        NRF_LOG_DEBUG("SoC event: 0x%x.", evt_id);

        // Forward the event to SoC observers.
        nrf_section_iter_t  iter;
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   2993e:	4c11      	ldr	r4, [pc, #68]	; (29984 <nrf_sdh_soc_evts_poll+0x48>)
{
   29940:	b084      	sub	sp, #16
        ret_code = sd_evt_get(&evt_id);
   29942:	a801      	add	r0, sp, #4
   29944:	f7ff fff8 	bl	29938 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   29948:	b9a8      	cbnz	r0, 29976 <nrf_sdh_soc_evts_poll+0x3a>
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   2994a:	4621      	mov	r1, r4
   2994c:	a802      	add	r0, sp, #8
   2994e:	f7fe f975 	bl	27c3c <nrf_section_iter_init>
             nrf_section_iter_get(&iter) != NULL;
   29952:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   29954:	2b00      	cmp	r3, #0
   29956:	d0f4      	beq.n	29942 <nrf_sdh_soc_evts_poll+0x6>
            nrf_sdh_soc_evt_handler_t    handler;

            p_observer = (nrf_sdh_soc_evt_observer_t *) nrf_section_iter_get(&iter);
            handler    = p_observer->handler;

            handler(evt_id, p_observer->p_context);
   29958:	e9d3 2100 	ldrd	r2, r1, [r3]
   2995c:	9801      	ldr	r0, [sp, #4]
   2995e:	4790      	blx	r2
             nrf_section_iter_next(&iter))
   29960:	a802      	add	r0, sp, #8
   29962:	f7fe f975 	bl	27c50 <nrf_section_iter_next>
             nrf_section_iter_get(&iter) != NULL;
   29966:	9b03      	ldr	r3, [sp, #12]
        for (nrf_section_iter_init(&iter, &sdh_soc_observers);
   29968:	2b00      	cmp	r3, #0
   2996a:	d1f5      	bne.n	29958 <nrf_sdh_soc_evts_poll+0x1c>
        ret_code = sd_evt_get(&evt_id);
   2996c:	a801      	add	r0, sp, #4
   2996e:	f7ff ffe3 	bl	29938 <sd_evt_get>
        if (ret_code != NRF_SUCCESS)
   29972:	2800      	cmp	r0, #0
   29974:	d0e9      	beq.n	2994a <nrf_sdh_soc_evts_poll+0xe>
        }
    }

    if (ret_code != NRF_ERROR_NOT_FOUND)
   29976:	2805      	cmp	r0, #5
   29978:	d001      	beq.n	2997e <nrf_sdh_soc_evts_poll+0x42>
    {
        APP_ERROR_HANDLER(ret_code);
   2997a:	f7fd fcbd 	bl	272f8 <app_error_handler_bare>
    }
}
   2997e:	b004      	add	sp, #16
   29980:	bd10      	pop	{r4, pc}
   29982:	bf00      	nop
   29984:	0002b39c 	.word	0x0002b39c

00029988 <exit>:
   29988:	b508      	push	{r3, lr}
   2998a:	4b07      	ldr	r3, [pc, #28]	; (299a8 <exit+0x20>)
   2998c:	4604      	mov	r4, r0
   2998e:	b113      	cbz	r3, 29996 <exit+0xe>
   29990:	2100      	movs	r1, #0
   29992:	f3af 8000 	nop.w
   29996:	4b05      	ldr	r3, [pc, #20]	; (299ac <exit+0x24>)
   29998:	6818      	ldr	r0, [r3, #0]
   2999a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2999c:	b103      	cbz	r3, 299a0 <exit+0x18>
   2999e:	4798      	blx	r3
   299a0:	4620      	mov	r0, r4
   299a2:	f000 fcdb 	bl	2a35c <_exit>
   299a6:	bf00      	nop
   299a8:	00000000 	.word	0x00000000
   299ac:	0002b3a8 	.word	0x0002b3a8

000299b0 <__libc_init_array>:
   299b0:	b570      	push	{r4, r5, r6, lr}
   299b2:	4d0d      	ldr	r5, [pc, #52]	; (299e8 <__libc_init_array+0x38>)
   299b4:	4c0d      	ldr	r4, [pc, #52]	; (299ec <__libc_init_array+0x3c>)
   299b6:	1b64      	subs	r4, r4, r5
   299b8:	10a4      	asrs	r4, r4, #2
   299ba:	2600      	movs	r6, #0
   299bc:	42a6      	cmp	r6, r4
   299be:	d109      	bne.n	299d4 <__libc_init_array+0x24>
   299c0:	4d0b      	ldr	r5, [pc, #44]	; (299f0 <__libc_init_array+0x40>)
   299c2:	4c0c      	ldr	r4, [pc, #48]	; (299f4 <__libc_init_array+0x44>)
   299c4:	f001 fc9a 	bl	2b2fc <_init>
   299c8:	1b64      	subs	r4, r4, r5
   299ca:	10a4      	asrs	r4, r4, #2
   299cc:	2600      	movs	r6, #0
   299ce:	42a6      	cmp	r6, r4
   299d0:	d105      	bne.n	299de <__libc_init_array+0x2e>
   299d2:	bd70      	pop	{r4, r5, r6, pc}
   299d4:	f855 3b04 	ldr.w	r3, [r5], #4
   299d8:	4798      	blx	r3
   299da:	3601      	adds	r6, #1
   299dc:	e7ee      	b.n	299bc <__libc_init_array+0xc>
   299de:	f855 3b04 	ldr.w	r3, [r5], #4
   299e2:	4798      	blx	r3
   299e4:	3601      	adds	r6, #1
   299e6:	e7f2      	b.n	299ce <__libc_init_array+0x1e>
   299e8:	20001968 	.word	0x20001968
   299ec:	20001968 	.word	0x20001968
   299f0:	20001968 	.word	0x20001968
   299f4:	20001970 	.word	0x20001970

000299f8 <memcpy>:
   299f8:	440a      	add	r2, r1
   299fa:	4291      	cmp	r1, r2
   299fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   29a00:	d100      	bne.n	29a04 <memcpy+0xc>
   29a02:	4770      	bx	lr
   29a04:	b510      	push	{r4, lr}
   29a06:	f811 4b01 	ldrb.w	r4, [r1], #1
   29a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   29a0e:	4291      	cmp	r1, r2
   29a10:	d1f9      	bne.n	29a06 <memcpy+0xe>
   29a12:	bd10      	pop	{r4, pc}

00029a14 <memset>:
   29a14:	4402      	add	r2, r0
   29a16:	4603      	mov	r3, r0
   29a18:	4293      	cmp	r3, r2
   29a1a:	d100      	bne.n	29a1e <memset+0xa>
   29a1c:	4770      	bx	lr
   29a1e:	f803 1b01 	strb.w	r1, [r3], #1
   29a22:	e7f9      	b.n	29a18 <memset+0x4>

00029a24 <sniprintf>:
   29a24:	b40c      	push	{r2, r3}
   29a26:	b530      	push	{r4, r5, lr}
   29a28:	4b17      	ldr	r3, [pc, #92]	; (29a88 <sniprintf+0x64>)
   29a2a:	1e0c      	subs	r4, r1, #0
   29a2c:	681d      	ldr	r5, [r3, #0]
   29a2e:	b09d      	sub	sp, #116	; 0x74
   29a30:	da08      	bge.n	29a44 <sniprintf+0x20>
   29a32:	238b      	movs	r3, #139	; 0x8b
   29a34:	602b      	str	r3, [r5, #0]
   29a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29a3a:	b01d      	add	sp, #116	; 0x74
   29a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   29a40:	b002      	add	sp, #8
   29a42:	4770      	bx	lr
   29a44:	f44f 7302 	mov.w	r3, #520	; 0x208
   29a48:	f8ad 3014 	strh.w	r3, [sp, #20]
   29a4c:	bf14      	ite	ne
   29a4e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   29a52:	4623      	moveq	r3, r4
   29a54:	9304      	str	r3, [sp, #16]
   29a56:	9307      	str	r3, [sp, #28]
   29a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29a5c:	9002      	str	r0, [sp, #8]
   29a5e:	9006      	str	r0, [sp, #24]
   29a60:	f8ad 3016 	strh.w	r3, [sp, #22]
   29a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
   29a66:	ab21      	add	r3, sp, #132	; 0x84
   29a68:	a902      	add	r1, sp, #8
   29a6a:	4628      	mov	r0, r5
   29a6c:	9301      	str	r3, [sp, #4]
   29a6e:	f000 f871 	bl	29b54 <_svfiprintf_r>
   29a72:	1c43      	adds	r3, r0, #1
   29a74:	bfbc      	itt	lt
   29a76:	238b      	movlt	r3, #139	; 0x8b
   29a78:	602b      	strlt	r3, [r5, #0]
   29a7a:	2c00      	cmp	r4, #0
   29a7c:	d0dd      	beq.n	29a3a <sniprintf+0x16>
   29a7e:	9b02      	ldr	r3, [sp, #8]
   29a80:	2200      	movs	r2, #0
   29a82:	701a      	strb	r2, [r3, #0]
   29a84:	e7d9      	b.n	29a3a <sniprintf+0x16>
   29a86:	bf00      	nop
   29a88:	20001904 	.word	0x20001904

00029a8c <strlen>:
   29a8c:	4603      	mov	r3, r0
   29a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
   29a92:	2a00      	cmp	r2, #0
   29a94:	d1fb      	bne.n	29a8e <strlen+0x2>
   29a96:	1a18      	subs	r0, r3, r0
   29a98:	3801      	subs	r0, #1
   29a9a:	4770      	bx	lr

00029a9c <__ssputs_r>:
   29a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29aa0:	688e      	ldr	r6, [r1, #8]
   29aa2:	429e      	cmp	r6, r3
   29aa4:	4682      	mov	sl, r0
   29aa6:	460c      	mov	r4, r1
   29aa8:	4690      	mov	r8, r2
   29aaa:	461f      	mov	r7, r3
   29aac:	d838      	bhi.n	29b20 <__ssputs_r+0x84>
   29aae:	898a      	ldrh	r2, [r1, #12]
   29ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
   29ab4:	d032      	beq.n	29b1c <__ssputs_r+0x80>
   29ab6:	6825      	ldr	r5, [r4, #0]
   29ab8:	6909      	ldr	r1, [r1, #16]
   29aba:	eba5 0901 	sub.w	r9, r5, r1
   29abe:	6965      	ldr	r5, [r4, #20]
   29ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   29ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   29ac8:	3301      	adds	r3, #1
   29aca:	444b      	add	r3, r9
   29acc:	106d      	asrs	r5, r5, #1
   29ace:	429d      	cmp	r5, r3
   29ad0:	bf38      	it	cc
   29ad2:	461d      	movcc	r5, r3
   29ad4:	0553      	lsls	r3, r2, #21
   29ad6:	d531      	bpl.n	29b3c <__ssputs_r+0xa0>
   29ad8:	4629      	mov	r1, r5
   29ada:	f000 fb8b 	bl	2a1f4 <_malloc_r>
   29ade:	4606      	mov	r6, r0
   29ae0:	b950      	cbnz	r0, 29af8 <__ssputs_r+0x5c>
   29ae2:	230c      	movs	r3, #12
   29ae4:	f8ca 3000 	str.w	r3, [sl]
   29ae8:	89a3      	ldrh	r3, [r4, #12]
   29aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29aee:	81a3      	strh	r3, [r4, #12]
   29af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29af8:	6921      	ldr	r1, [r4, #16]
   29afa:	464a      	mov	r2, r9
   29afc:	f7ff ff7c 	bl	299f8 <memcpy>
   29b00:	89a3      	ldrh	r3, [r4, #12]
   29b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   29b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29b0a:	81a3      	strh	r3, [r4, #12]
   29b0c:	6126      	str	r6, [r4, #16]
   29b0e:	6165      	str	r5, [r4, #20]
   29b10:	444e      	add	r6, r9
   29b12:	eba5 0509 	sub.w	r5, r5, r9
   29b16:	6026      	str	r6, [r4, #0]
   29b18:	60a5      	str	r5, [r4, #8]
   29b1a:	463e      	mov	r6, r7
   29b1c:	42be      	cmp	r6, r7
   29b1e:	d900      	bls.n	29b22 <__ssputs_r+0x86>
   29b20:	463e      	mov	r6, r7
   29b22:	4632      	mov	r2, r6
   29b24:	6820      	ldr	r0, [r4, #0]
   29b26:	4641      	mov	r1, r8
   29b28:	f000 fafa 	bl	2a120 <memmove>
   29b2c:	68a3      	ldr	r3, [r4, #8]
   29b2e:	6822      	ldr	r2, [r4, #0]
   29b30:	1b9b      	subs	r3, r3, r6
   29b32:	4432      	add	r2, r6
   29b34:	60a3      	str	r3, [r4, #8]
   29b36:	6022      	str	r2, [r4, #0]
   29b38:	2000      	movs	r0, #0
   29b3a:	e7db      	b.n	29af4 <__ssputs_r+0x58>
   29b3c:	462a      	mov	r2, r5
   29b3e:	f000 fbb3 	bl	2a2a8 <_realloc_r>
   29b42:	4606      	mov	r6, r0
   29b44:	2800      	cmp	r0, #0
   29b46:	d1e1      	bne.n	29b0c <__ssputs_r+0x70>
   29b48:	6921      	ldr	r1, [r4, #16]
   29b4a:	4650      	mov	r0, sl
   29b4c:	f000 fb02 	bl	2a154 <_free_r>
   29b50:	e7c7      	b.n	29ae2 <__ssputs_r+0x46>
	...

00029b54 <_svfiprintf_r>:
   29b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b58:	4698      	mov	r8, r3
   29b5a:	898b      	ldrh	r3, [r1, #12]
   29b5c:	061b      	lsls	r3, r3, #24
   29b5e:	b09d      	sub	sp, #116	; 0x74
   29b60:	4607      	mov	r7, r0
   29b62:	460d      	mov	r5, r1
   29b64:	4614      	mov	r4, r2
   29b66:	d50e      	bpl.n	29b86 <_svfiprintf_r+0x32>
   29b68:	690b      	ldr	r3, [r1, #16]
   29b6a:	b963      	cbnz	r3, 29b86 <_svfiprintf_r+0x32>
   29b6c:	2140      	movs	r1, #64	; 0x40
   29b6e:	f000 fb41 	bl	2a1f4 <_malloc_r>
   29b72:	6028      	str	r0, [r5, #0]
   29b74:	6128      	str	r0, [r5, #16]
   29b76:	b920      	cbnz	r0, 29b82 <_svfiprintf_r+0x2e>
   29b78:	230c      	movs	r3, #12
   29b7a:	603b      	str	r3, [r7, #0]
   29b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29b80:	e0d1      	b.n	29d26 <_svfiprintf_r+0x1d2>
   29b82:	2340      	movs	r3, #64	; 0x40
   29b84:	616b      	str	r3, [r5, #20]
   29b86:	2300      	movs	r3, #0
   29b88:	9309      	str	r3, [sp, #36]	; 0x24
   29b8a:	2320      	movs	r3, #32
   29b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   29b90:	f8cd 800c 	str.w	r8, [sp, #12]
   29b94:	2330      	movs	r3, #48	; 0x30
   29b96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 29d40 <_svfiprintf_r+0x1ec>
   29b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   29b9e:	f04f 0901 	mov.w	r9, #1
   29ba2:	4623      	mov	r3, r4
   29ba4:	469a      	mov	sl, r3
   29ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
   29baa:	b10a      	cbz	r2, 29bb0 <_svfiprintf_r+0x5c>
   29bac:	2a25      	cmp	r2, #37	; 0x25
   29bae:	d1f9      	bne.n	29ba4 <_svfiprintf_r+0x50>
   29bb0:	ebba 0b04 	subs.w	fp, sl, r4
   29bb4:	d00b      	beq.n	29bce <_svfiprintf_r+0x7a>
   29bb6:	465b      	mov	r3, fp
   29bb8:	4622      	mov	r2, r4
   29bba:	4629      	mov	r1, r5
   29bbc:	4638      	mov	r0, r7
   29bbe:	f7ff ff6d 	bl	29a9c <__ssputs_r>
   29bc2:	3001      	adds	r0, #1
   29bc4:	f000 80aa 	beq.w	29d1c <_svfiprintf_r+0x1c8>
   29bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29bca:	445a      	add	r2, fp
   29bcc:	9209      	str	r2, [sp, #36]	; 0x24
   29bce:	f89a 3000 	ldrb.w	r3, [sl]
   29bd2:	2b00      	cmp	r3, #0
   29bd4:	f000 80a2 	beq.w	29d1c <_svfiprintf_r+0x1c8>
   29bd8:	2300      	movs	r3, #0
   29bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29be2:	f10a 0a01 	add.w	sl, sl, #1
   29be6:	9304      	str	r3, [sp, #16]
   29be8:	9307      	str	r3, [sp, #28]
   29bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29bee:	931a      	str	r3, [sp, #104]	; 0x68
   29bf0:	4654      	mov	r4, sl
   29bf2:	2205      	movs	r2, #5
   29bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
   29bf8:	4851      	ldr	r0, [pc, #324]	; (29d40 <_svfiprintf_r+0x1ec>)
   29bfa:	f000 fa41 	bl	2a080 <memchr>
   29bfe:	9a04      	ldr	r2, [sp, #16]
   29c00:	b9d8      	cbnz	r0, 29c3a <_svfiprintf_r+0xe6>
   29c02:	06d0      	lsls	r0, r2, #27
   29c04:	bf44      	itt	mi
   29c06:	2320      	movmi	r3, #32
   29c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   29c0c:	0711      	lsls	r1, r2, #28
   29c0e:	bf44      	itt	mi
   29c10:	232b      	movmi	r3, #43	; 0x2b
   29c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   29c16:	f89a 3000 	ldrb.w	r3, [sl]
   29c1a:	2b2a      	cmp	r3, #42	; 0x2a
   29c1c:	d015      	beq.n	29c4a <_svfiprintf_r+0xf6>
   29c1e:	9a07      	ldr	r2, [sp, #28]
   29c20:	4654      	mov	r4, sl
   29c22:	2000      	movs	r0, #0
   29c24:	f04f 0c0a 	mov.w	ip, #10
   29c28:	4621      	mov	r1, r4
   29c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
   29c2e:	3b30      	subs	r3, #48	; 0x30
   29c30:	2b09      	cmp	r3, #9
   29c32:	d94e      	bls.n	29cd2 <_svfiprintf_r+0x17e>
   29c34:	b1b0      	cbz	r0, 29c64 <_svfiprintf_r+0x110>
   29c36:	9207      	str	r2, [sp, #28]
   29c38:	e014      	b.n	29c64 <_svfiprintf_r+0x110>
   29c3a:	eba0 0308 	sub.w	r3, r0, r8
   29c3e:	fa09 f303 	lsl.w	r3, r9, r3
   29c42:	4313      	orrs	r3, r2
   29c44:	9304      	str	r3, [sp, #16]
   29c46:	46a2      	mov	sl, r4
   29c48:	e7d2      	b.n	29bf0 <_svfiprintf_r+0x9c>
   29c4a:	9b03      	ldr	r3, [sp, #12]
   29c4c:	1d19      	adds	r1, r3, #4
   29c4e:	681b      	ldr	r3, [r3, #0]
   29c50:	9103      	str	r1, [sp, #12]
   29c52:	2b00      	cmp	r3, #0
   29c54:	bfbb      	ittet	lt
   29c56:	425b      	neglt	r3, r3
   29c58:	f042 0202 	orrlt.w	r2, r2, #2
   29c5c:	9307      	strge	r3, [sp, #28]
   29c5e:	9307      	strlt	r3, [sp, #28]
   29c60:	bfb8      	it	lt
   29c62:	9204      	strlt	r2, [sp, #16]
   29c64:	7823      	ldrb	r3, [r4, #0]
   29c66:	2b2e      	cmp	r3, #46	; 0x2e
   29c68:	d10c      	bne.n	29c84 <_svfiprintf_r+0x130>
   29c6a:	7863      	ldrb	r3, [r4, #1]
   29c6c:	2b2a      	cmp	r3, #42	; 0x2a
   29c6e:	d135      	bne.n	29cdc <_svfiprintf_r+0x188>
   29c70:	9b03      	ldr	r3, [sp, #12]
   29c72:	1d1a      	adds	r2, r3, #4
   29c74:	681b      	ldr	r3, [r3, #0]
   29c76:	9203      	str	r2, [sp, #12]
   29c78:	2b00      	cmp	r3, #0
   29c7a:	bfb8      	it	lt
   29c7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   29c80:	3402      	adds	r4, #2
   29c82:	9305      	str	r3, [sp, #20]
   29c84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 29d50 <_svfiprintf_r+0x1fc>
   29c88:	7821      	ldrb	r1, [r4, #0]
   29c8a:	2203      	movs	r2, #3
   29c8c:	4650      	mov	r0, sl
   29c8e:	f000 f9f7 	bl	2a080 <memchr>
   29c92:	b140      	cbz	r0, 29ca6 <_svfiprintf_r+0x152>
   29c94:	2340      	movs	r3, #64	; 0x40
   29c96:	eba0 000a 	sub.w	r0, r0, sl
   29c9a:	fa03 f000 	lsl.w	r0, r3, r0
   29c9e:	9b04      	ldr	r3, [sp, #16]
   29ca0:	4303      	orrs	r3, r0
   29ca2:	3401      	adds	r4, #1
   29ca4:	9304      	str	r3, [sp, #16]
   29ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
   29caa:	4826      	ldr	r0, [pc, #152]	; (29d44 <_svfiprintf_r+0x1f0>)
   29cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29cb0:	2206      	movs	r2, #6
   29cb2:	f000 f9e5 	bl	2a080 <memchr>
   29cb6:	2800      	cmp	r0, #0
   29cb8:	d038      	beq.n	29d2c <_svfiprintf_r+0x1d8>
   29cba:	4b23      	ldr	r3, [pc, #140]	; (29d48 <_svfiprintf_r+0x1f4>)
   29cbc:	bb1b      	cbnz	r3, 29d06 <_svfiprintf_r+0x1b2>
   29cbe:	9b03      	ldr	r3, [sp, #12]
   29cc0:	3307      	adds	r3, #7
   29cc2:	f023 0307 	bic.w	r3, r3, #7
   29cc6:	3308      	adds	r3, #8
   29cc8:	9303      	str	r3, [sp, #12]
   29cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29ccc:	4433      	add	r3, r6
   29cce:	9309      	str	r3, [sp, #36]	; 0x24
   29cd0:	e767      	b.n	29ba2 <_svfiprintf_r+0x4e>
   29cd2:	fb0c 3202 	mla	r2, ip, r2, r3
   29cd6:	460c      	mov	r4, r1
   29cd8:	2001      	movs	r0, #1
   29cda:	e7a5      	b.n	29c28 <_svfiprintf_r+0xd4>
   29cdc:	2300      	movs	r3, #0
   29cde:	3401      	adds	r4, #1
   29ce0:	9305      	str	r3, [sp, #20]
   29ce2:	4619      	mov	r1, r3
   29ce4:	f04f 0c0a 	mov.w	ip, #10
   29ce8:	4620      	mov	r0, r4
   29cea:	f810 2b01 	ldrb.w	r2, [r0], #1
   29cee:	3a30      	subs	r2, #48	; 0x30
   29cf0:	2a09      	cmp	r2, #9
   29cf2:	d903      	bls.n	29cfc <_svfiprintf_r+0x1a8>
   29cf4:	2b00      	cmp	r3, #0
   29cf6:	d0c5      	beq.n	29c84 <_svfiprintf_r+0x130>
   29cf8:	9105      	str	r1, [sp, #20]
   29cfa:	e7c3      	b.n	29c84 <_svfiprintf_r+0x130>
   29cfc:	fb0c 2101 	mla	r1, ip, r1, r2
   29d00:	4604      	mov	r4, r0
   29d02:	2301      	movs	r3, #1
   29d04:	e7f0      	b.n	29ce8 <_svfiprintf_r+0x194>
   29d06:	ab03      	add	r3, sp, #12
   29d08:	9300      	str	r3, [sp, #0]
   29d0a:	462a      	mov	r2, r5
   29d0c:	4b0f      	ldr	r3, [pc, #60]	; (29d4c <_svfiprintf_r+0x1f8>)
   29d0e:	a904      	add	r1, sp, #16
   29d10:	4638      	mov	r0, r7
   29d12:	f3af 8000 	nop.w
   29d16:	1c42      	adds	r2, r0, #1
   29d18:	4606      	mov	r6, r0
   29d1a:	d1d6      	bne.n	29cca <_svfiprintf_r+0x176>
   29d1c:	89ab      	ldrh	r3, [r5, #12]
   29d1e:	065b      	lsls	r3, r3, #25
   29d20:	f53f af2c 	bmi.w	29b7c <_svfiprintf_r+0x28>
   29d24:	9809      	ldr	r0, [sp, #36]	; 0x24
   29d26:	b01d      	add	sp, #116	; 0x74
   29d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d2c:	ab03      	add	r3, sp, #12
   29d2e:	9300      	str	r3, [sp, #0]
   29d30:	462a      	mov	r2, r5
   29d32:	4b06      	ldr	r3, [pc, #24]	; (29d4c <_svfiprintf_r+0x1f8>)
   29d34:	a904      	add	r1, sp, #16
   29d36:	4638      	mov	r0, r7
   29d38:	f000 f87a 	bl	29e30 <_printf_i>
   29d3c:	e7eb      	b.n	29d16 <_svfiprintf_r+0x1c2>
   29d3e:	bf00      	nop
   29d40:	0002b3ac 	.word	0x0002b3ac
   29d44:	0002b3b6 	.word	0x0002b3b6
   29d48:	00000000 	.word	0x00000000
   29d4c:	00029a9d 	.word	0x00029a9d
   29d50:	0002b3b2 	.word	0x0002b3b2

00029d54 <_printf_common>:
   29d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29d58:	4616      	mov	r6, r2
   29d5a:	4699      	mov	r9, r3
   29d5c:	688a      	ldr	r2, [r1, #8]
   29d5e:	690b      	ldr	r3, [r1, #16]
   29d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
   29d64:	4293      	cmp	r3, r2
   29d66:	bfb8      	it	lt
   29d68:	4613      	movlt	r3, r2
   29d6a:	6033      	str	r3, [r6, #0]
   29d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   29d70:	4607      	mov	r7, r0
   29d72:	460c      	mov	r4, r1
   29d74:	b10a      	cbz	r2, 29d7a <_printf_common+0x26>
   29d76:	3301      	adds	r3, #1
   29d78:	6033      	str	r3, [r6, #0]
   29d7a:	6823      	ldr	r3, [r4, #0]
   29d7c:	0699      	lsls	r1, r3, #26
   29d7e:	bf42      	ittt	mi
   29d80:	6833      	ldrmi	r3, [r6, #0]
   29d82:	3302      	addmi	r3, #2
   29d84:	6033      	strmi	r3, [r6, #0]
   29d86:	6825      	ldr	r5, [r4, #0]
   29d88:	f015 0506 	ands.w	r5, r5, #6
   29d8c:	d106      	bne.n	29d9c <_printf_common+0x48>
   29d8e:	f104 0a19 	add.w	sl, r4, #25
   29d92:	68e3      	ldr	r3, [r4, #12]
   29d94:	6832      	ldr	r2, [r6, #0]
   29d96:	1a9b      	subs	r3, r3, r2
   29d98:	42ab      	cmp	r3, r5
   29d9a:	dc26      	bgt.n	29dea <_printf_common+0x96>
   29d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   29da0:	1e13      	subs	r3, r2, #0
   29da2:	6822      	ldr	r2, [r4, #0]
   29da4:	bf18      	it	ne
   29da6:	2301      	movne	r3, #1
   29da8:	0692      	lsls	r2, r2, #26
   29daa:	d42b      	bmi.n	29e04 <_printf_common+0xb0>
   29dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
   29db0:	4649      	mov	r1, r9
   29db2:	4638      	mov	r0, r7
   29db4:	47c0      	blx	r8
   29db6:	3001      	adds	r0, #1
   29db8:	d01e      	beq.n	29df8 <_printf_common+0xa4>
   29dba:	6823      	ldr	r3, [r4, #0]
   29dbc:	68e5      	ldr	r5, [r4, #12]
   29dbe:	6832      	ldr	r2, [r6, #0]
   29dc0:	f003 0306 	and.w	r3, r3, #6
   29dc4:	2b04      	cmp	r3, #4
   29dc6:	bf08      	it	eq
   29dc8:	1aad      	subeq	r5, r5, r2
   29dca:	68a3      	ldr	r3, [r4, #8]
   29dcc:	6922      	ldr	r2, [r4, #16]
   29dce:	bf0c      	ite	eq
   29dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   29dd4:	2500      	movne	r5, #0
   29dd6:	4293      	cmp	r3, r2
   29dd8:	bfc4      	itt	gt
   29dda:	1a9b      	subgt	r3, r3, r2
   29ddc:	18ed      	addgt	r5, r5, r3
   29dde:	2600      	movs	r6, #0
   29de0:	341a      	adds	r4, #26
   29de2:	42b5      	cmp	r5, r6
   29de4:	d11a      	bne.n	29e1c <_printf_common+0xc8>
   29de6:	2000      	movs	r0, #0
   29de8:	e008      	b.n	29dfc <_printf_common+0xa8>
   29dea:	2301      	movs	r3, #1
   29dec:	4652      	mov	r2, sl
   29dee:	4649      	mov	r1, r9
   29df0:	4638      	mov	r0, r7
   29df2:	47c0      	blx	r8
   29df4:	3001      	adds	r0, #1
   29df6:	d103      	bne.n	29e00 <_printf_common+0xac>
   29df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29e00:	3501      	adds	r5, #1
   29e02:	e7c6      	b.n	29d92 <_printf_common+0x3e>
   29e04:	18e1      	adds	r1, r4, r3
   29e06:	1c5a      	adds	r2, r3, #1
   29e08:	2030      	movs	r0, #48	; 0x30
   29e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   29e0e:	4422      	add	r2, r4
   29e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   29e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   29e18:	3302      	adds	r3, #2
   29e1a:	e7c7      	b.n	29dac <_printf_common+0x58>
   29e1c:	2301      	movs	r3, #1
   29e1e:	4622      	mov	r2, r4
   29e20:	4649      	mov	r1, r9
   29e22:	4638      	mov	r0, r7
   29e24:	47c0      	blx	r8
   29e26:	3001      	adds	r0, #1
   29e28:	d0e6      	beq.n	29df8 <_printf_common+0xa4>
   29e2a:	3601      	adds	r6, #1
   29e2c:	e7d9      	b.n	29de2 <_printf_common+0x8e>
	...

00029e30 <_printf_i>:
   29e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   29e34:	460c      	mov	r4, r1
   29e36:	4691      	mov	r9, r2
   29e38:	7e27      	ldrb	r7, [r4, #24]
   29e3a:	990c      	ldr	r1, [sp, #48]	; 0x30
   29e3c:	2f78      	cmp	r7, #120	; 0x78
   29e3e:	4680      	mov	r8, r0
   29e40:	469a      	mov	sl, r3
   29e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   29e46:	d807      	bhi.n	29e58 <_printf_i+0x28>
   29e48:	2f62      	cmp	r7, #98	; 0x62
   29e4a:	d80a      	bhi.n	29e62 <_printf_i+0x32>
   29e4c:	2f00      	cmp	r7, #0
   29e4e:	f000 80d8 	beq.w	2a002 <_printf_i+0x1d2>
   29e52:	2f58      	cmp	r7, #88	; 0x58
   29e54:	f000 80a3 	beq.w	29f9e <_printf_i+0x16e>
   29e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
   29e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   29e60:	e03a      	b.n	29ed8 <_printf_i+0xa8>
   29e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   29e66:	2b15      	cmp	r3, #21
   29e68:	d8f6      	bhi.n	29e58 <_printf_i+0x28>
   29e6a:	a001      	add	r0, pc, #4	; (adr r0, 29e70 <_printf_i+0x40>)
   29e6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   29e70:	00029ec9 	.word	0x00029ec9
   29e74:	00029edd 	.word	0x00029edd
   29e78:	00029e59 	.word	0x00029e59
   29e7c:	00029e59 	.word	0x00029e59
   29e80:	00029e59 	.word	0x00029e59
   29e84:	00029e59 	.word	0x00029e59
   29e88:	00029edd 	.word	0x00029edd
   29e8c:	00029e59 	.word	0x00029e59
   29e90:	00029e59 	.word	0x00029e59
   29e94:	00029e59 	.word	0x00029e59
   29e98:	00029e59 	.word	0x00029e59
   29e9c:	00029fe9 	.word	0x00029fe9
   29ea0:	00029f0d 	.word	0x00029f0d
   29ea4:	00029fcb 	.word	0x00029fcb
   29ea8:	00029e59 	.word	0x00029e59
   29eac:	00029e59 	.word	0x00029e59
   29eb0:	0002a00b 	.word	0x0002a00b
   29eb4:	00029e59 	.word	0x00029e59
   29eb8:	00029f0d 	.word	0x00029f0d
   29ebc:	00029e59 	.word	0x00029e59
   29ec0:	00029e59 	.word	0x00029e59
   29ec4:	00029fd3 	.word	0x00029fd3
   29ec8:	680b      	ldr	r3, [r1, #0]
   29eca:	1d1a      	adds	r2, r3, #4
   29ecc:	681b      	ldr	r3, [r3, #0]
   29ece:	600a      	str	r2, [r1, #0]
   29ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   29ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   29ed8:	2301      	movs	r3, #1
   29eda:	e0a3      	b.n	2a024 <_printf_i+0x1f4>
   29edc:	6825      	ldr	r5, [r4, #0]
   29ede:	6808      	ldr	r0, [r1, #0]
   29ee0:	062e      	lsls	r6, r5, #24
   29ee2:	f100 0304 	add.w	r3, r0, #4
   29ee6:	d50a      	bpl.n	29efe <_printf_i+0xce>
   29ee8:	6805      	ldr	r5, [r0, #0]
   29eea:	600b      	str	r3, [r1, #0]
   29eec:	2d00      	cmp	r5, #0
   29eee:	da03      	bge.n	29ef8 <_printf_i+0xc8>
   29ef0:	232d      	movs	r3, #45	; 0x2d
   29ef2:	426d      	negs	r5, r5
   29ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   29ef8:	485e      	ldr	r0, [pc, #376]	; (2a074 <_printf_i+0x244>)
   29efa:	230a      	movs	r3, #10
   29efc:	e019      	b.n	29f32 <_printf_i+0x102>
   29efe:	f015 0f40 	tst.w	r5, #64	; 0x40
   29f02:	6805      	ldr	r5, [r0, #0]
   29f04:	600b      	str	r3, [r1, #0]
   29f06:	bf18      	it	ne
   29f08:	b22d      	sxthne	r5, r5
   29f0a:	e7ef      	b.n	29eec <_printf_i+0xbc>
   29f0c:	680b      	ldr	r3, [r1, #0]
   29f0e:	6825      	ldr	r5, [r4, #0]
   29f10:	1d18      	adds	r0, r3, #4
   29f12:	6008      	str	r0, [r1, #0]
   29f14:	0628      	lsls	r0, r5, #24
   29f16:	d501      	bpl.n	29f1c <_printf_i+0xec>
   29f18:	681d      	ldr	r5, [r3, #0]
   29f1a:	e002      	b.n	29f22 <_printf_i+0xf2>
   29f1c:	0669      	lsls	r1, r5, #25
   29f1e:	d5fb      	bpl.n	29f18 <_printf_i+0xe8>
   29f20:	881d      	ldrh	r5, [r3, #0]
   29f22:	4854      	ldr	r0, [pc, #336]	; (2a074 <_printf_i+0x244>)
   29f24:	2f6f      	cmp	r7, #111	; 0x6f
   29f26:	bf0c      	ite	eq
   29f28:	2308      	moveq	r3, #8
   29f2a:	230a      	movne	r3, #10
   29f2c:	2100      	movs	r1, #0
   29f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   29f32:	6866      	ldr	r6, [r4, #4]
   29f34:	60a6      	str	r6, [r4, #8]
   29f36:	2e00      	cmp	r6, #0
   29f38:	bfa2      	ittt	ge
   29f3a:	6821      	ldrge	r1, [r4, #0]
   29f3c:	f021 0104 	bicge.w	r1, r1, #4
   29f40:	6021      	strge	r1, [r4, #0]
   29f42:	b90d      	cbnz	r5, 29f48 <_printf_i+0x118>
   29f44:	2e00      	cmp	r6, #0
   29f46:	d04d      	beq.n	29fe4 <_printf_i+0x1b4>
   29f48:	4616      	mov	r6, r2
   29f4a:	fbb5 f1f3 	udiv	r1, r5, r3
   29f4e:	fb03 5711 	mls	r7, r3, r1, r5
   29f52:	5dc7      	ldrb	r7, [r0, r7]
   29f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
   29f58:	462f      	mov	r7, r5
   29f5a:	42bb      	cmp	r3, r7
   29f5c:	460d      	mov	r5, r1
   29f5e:	d9f4      	bls.n	29f4a <_printf_i+0x11a>
   29f60:	2b08      	cmp	r3, #8
   29f62:	d10b      	bne.n	29f7c <_printf_i+0x14c>
   29f64:	6823      	ldr	r3, [r4, #0]
   29f66:	07df      	lsls	r7, r3, #31
   29f68:	d508      	bpl.n	29f7c <_printf_i+0x14c>
   29f6a:	6923      	ldr	r3, [r4, #16]
   29f6c:	6861      	ldr	r1, [r4, #4]
   29f6e:	4299      	cmp	r1, r3
   29f70:	bfde      	ittt	le
   29f72:	2330      	movle	r3, #48	; 0x30
   29f74:	f806 3c01 	strble.w	r3, [r6, #-1]
   29f78:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   29f7c:	1b92      	subs	r2, r2, r6
   29f7e:	6122      	str	r2, [r4, #16]
   29f80:	f8cd a000 	str.w	sl, [sp]
   29f84:	464b      	mov	r3, r9
   29f86:	aa03      	add	r2, sp, #12
   29f88:	4621      	mov	r1, r4
   29f8a:	4640      	mov	r0, r8
   29f8c:	f7ff fee2 	bl	29d54 <_printf_common>
   29f90:	3001      	adds	r0, #1
   29f92:	d14c      	bne.n	2a02e <_printf_i+0x1fe>
   29f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29f98:	b004      	add	sp, #16
   29f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f9e:	4835      	ldr	r0, [pc, #212]	; (2a074 <_printf_i+0x244>)
   29fa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   29fa4:	6823      	ldr	r3, [r4, #0]
   29fa6:	680e      	ldr	r6, [r1, #0]
   29fa8:	061f      	lsls	r7, r3, #24
   29faa:	f856 5b04 	ldr.w	r5, [r6], #4
   29fae:	600e      	str	r6, [r1, #0]
   29fb0:	d514      	bpl.n	29fdc <_printf_i+0x1ac>
   29fb2:	07d9      	lsls	r1, r3, #31
   29fb4:	bf44      	itt	mi
   29fb6:	f043 0320 	orrmi.w	r3, r3, #32
   29fba:	6023      	strmi	r3, [r4, #0]
   29fbc:	b91d      	cbnz	r5, 29fc6 <_printf_i+0x196>
   29fbe:	6823      	ldr	r3, [r4, #0]
   29fc0:	f023 0320 	bic.w	r3, r3, #32
   29fc4:	6023      	str	r3, [r4, #0]
   29fc6:	2310      	movs	r3, #16
   29fc8:	e7b0      	b.n	29f2c <_printf_i+0xfc>
   29fca:	6823      	ldr	r3, [r4, #0]
   29fcc:	f043 0320 	orr.w	r3, r3, #32
   29fd0:	6023      	str	r3, [r4, #0]
   29fd2:	2378      	movs	r3, #120	; 0x78
   29fd4:	4828      	ldr	r0, [pc, #160]	; (2a078 <_printf_i+0x248>)
   29fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   29fda:	e7e3      	b.n	29fa4 <_printf_i+0x174>
   29fdc:	065e      	lsls	r6, r3, #25
   29fde:	bf48      	it	mi
   29fe0:	b2ad      	uxthmi	r5, r5
   29fe2:	e7e6      	b.n	29fb2 <_printf_i+0x182>
   29fe4:	4616      	mov	r6, r2
   29fe6:	e7bb      	b.n	29f60 <_printf_i+0x130>
   29fe8:	680b      	ldr	r3, [r1, #0]
   29fea:	6826      	ldr	r6, [r4, #0]
   29fec:	6960      	ldr	r0, [r4, #20]
   29fee:	1d1d      	adds	r5, r3, #4
   29ff0:	600d      	str	r5, [r1, #0]
   29ff2:	0635      	lsls	r5, r6, #24
   29ff4:	681b      	ldr	r3, [r3, #0]
   29ff6:	d501      	bpl.n	29ffc <_printf_i+0x1cc>
   29ff8:	6018      	str	r0, [r3, #0]
   29ffa:	e002      	b.n	2a002 <_printf_i+0x1d2>
   29ffc:	0671      	lsls	r1, r6, #25
   29ffe:	d5fb      	bpl.n	29ff8 <_printf_i+0x1c8>
   2a000:	8018      	strh	r0, [r3, #0]
   2a002:	2300      	movs	r3, #0
   2a004:	6123      	str	r3, [r4, #16]
   2a006:	4616      	mov	r6, r2
   2a008:	e7ba      	b.n	29f80 <_printf_i+0x150>
   2a00a:	680b      	ldr	r3, [r1, #0]
   2a00c:	1d1a      	adds	r2, r3, #4
   2a00e:	600a      	str	r2, [r1, #0]
   2a010:	681e      	ldr	r6, [r3, #0]
   2a012:	6862      	ldr	r2, [r4, #4]
   2a014:	2100      	movs	r1, #0
   2a016:	4630      	mov	r0, r6
   2a018:	f000 f832 	bl	2a080 <memchr>
   2a01c:	b108      	cbz	r0, 2a022 <_printf_i+0x1f2>
   2a01e:	1b80      	subs	r0, r0, r6
   2a020:	6060      	str	r0, [r4, #4]
   2a022:	6863      	ldr	r3, [r4, #4]
   2a024:	6123      	str	r3, [r4, #16]
   2a026:	2300      	movs	r3, #0
   2a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2a02c:	e7a8      	b.n	29f80 <_printf_i+0x150>
   2a02e:	6923      	ldr	r3, [r4, #16]
   2a030:	4632      	mov	r2, r6
   2a032:	4649      	mov	r1, r9
   2a034:	4640      	mov	r0, r8
   2a036:	47d0      	blx	sl
   2a038:	3001      	adds	r0, #1
   2a03a:	d0ab      	beq.n	29f94 <_printf_i+0x164>
   2a03c:	6823      	ldr	r3, [r4, #0]
   2a03e:	079b      	lsls	r3, r3, #30
   2a040:	d413      	bmi.n	2a06a <_printf_i+0x23a>
   2a042:	68e0      	ldr	r0, [r4, #12]
   2a044:	9b03      	ldr	r3, [sp, #12]
   2a046:	4298      	cmp	r0, r3
   2a048:	bfb8      	it	lt
   2a04a:	4618      	movlt	r0, r3
   2a04c:	e7a4      	b.n	29f98 <_printf_i+0x168>
   2a04e:	2301      	movs	r3, #1
   2a050:	4632      	mov	r2, r6
   2a052:	4649      	mov	r1, r9
   2a054:	4640      	mov	r0, r8
   2a056:	47d0      	blx	sl
   2a058:	3001      	adds	r0, #1
   2a05a:	d09b      	beq.n	29f94 <_printf_i+0x164>
   2a05c:	3501      	adds	r5, #1
   2a05e:	68e3      	ldr	r3, [r4, #12]
   2a060:	9903      	ldr	r1, [sp, #12]
   2a062:	1a5b      	subs	r3, r3, r1
   2a064:	42ab      	cmp	r3, r5
   2a066:	dcf2      	bgt.n	2a04e <_printf_i+0x21e>
   2a068:	e7eb      	b.n	2a042 <_printf_i+0x212>
   2a06a:	2500      	movs	r5, #0
   2a06c:	f104 0619 	add.w	r6, r4, #25
   2a070:	e7f5      	b.n	2a05e <_printf_i+0x22e>
   2a072:	bf00      	nop
   2a074:	0002b3bd 	.word	0x0002b3bd
   2a078:	0002b3ce 	.word	0x0002b3ce
   2a07c:	00000000 	.word	0x00000000

0002a080 <memchr>:
   2a080:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2a084:	2a10      	cmp	r2, #16
   2a086:	db2b      	blt.n	2a0e0 <memchr+0x60>
   2a088:	f010 0f07 	tst.w	r0, #7
   2a08c:	d008      	beq.n	2a0a0 <memchr+0x20>
   2a08e:	f810 3b01 	ldrb.w	r3, [r0], #1
   2a092:	3a01      	subs	r2, #1
   2a094:	428b      	cmp	r3, r1
   2a096:	d02d      	beq.n	2a0f4 <memchr+0x74>
   2a098:	f010 0f07 	tst.w	r0, #7
   2a09c:	b342      	cbz	r2, 2a0f0 <memchr+0x70>
   2a09e:	d1f6      	bne.n	2a08e <memchr+0xe>
   2a0a0:	b4f0      	push	{r4, r5, r6, r7}
   2a0a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   2a0a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   2a0aa:	f022 0407 	bic.w	r4, r2, #7
   2a0ae:	f07f 0700 	mvns.w	r7, #0
   2a0b2:	2300      	movs	r3, #0
   2a0b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   2a0b8:	3c08      	subs	r4, #8
   2a0ba:	ea85 0501 	eor.w	r5, r5, r1
   2a0be:	ea86 0601 	eor.w	r6, r6, r1
   2a0c2:	fa85 f547 	uadd8	r5, r5, r7
   2a0c6:	faa3 f587 	sel	r5, r3, r7
   2a0ca:	fa86 f647 	uadd8	r6, r6, r7
   2a0ce:	faa5 f687 	sel	r6, r5, r7
   2a0d2:	b98e      	cbnz	r6, 2a0f8 <memchr+0x78>
   2a0d4:	d1ee      	bne.n	2a0b4 <memchr+0x34>
   2a0d6:	bcf0      	pop	{r4, r5, r6, r7}
   2a0d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2a0dc:	f002 0207 	and.w	r2, r2, #7
   2a0e0:	b132      	cbz	r2, 2a0f0 <memchr+0x70>
   2a0e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   2a0e6:	3a01      	subs	r2, #1
   2a0e8:	ea83 0301 	eor.w	r3, r3, r1
   2a0ec:	b113      	cbz	r3, 2a0f4 <memchr+0x74>
   2a0ee:	d1f8      	bne.n	2a0e2 <memchr+0x62>
   2a0f0:	2000      	movs	r0, #0
   2a0f2:	4770      	bx	lr
   2a0f4:	3801      	subs	r0, #1
   2a0f6:	4770      	bx	lr
   2a0f8:	2d00      	cmp	r5, #0
   2a0fa:	bf06      	itte	eq
   2a0fc:	4635      	moveq	r5, r6
   2a0fe:	3803      	subeq	r0, #3
   2a100:	3807      	subne	r0, #7
   2a102:	f015 0f01 	tst.w	r5, #1
   2a106:	d107      	bne.n	2a118 <memchr+0x98>
   2a108:	3001      	adds	r0, #1
   2a10a:	f415 7f80 	tst.w	r5, #256	; 0x100
   2a10e:	bf02      	ittt	eq
   2a110:	3001      	addeq	r0, #1
   2a112:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   2a116:	3001      	addeq	r0, #1
   2a118:	bcf0      	pop	{r4, r5, r6, r7}
   2a11a:	3801      	subs	r0, #1
   2a11c:	4770      	bx	lr
   2a11e:	bf00      	nop

0002a120 <memmove>:
   2a120:	4288      	cmp	r0, r1
   2a122:	b510      	push	{r4, lr}
   2a124:	eb01 0402 	add.w	r4, r1, r2
   2a128:	d902      	bls.n	2a130 <memmove+0x10>
   2a12a:	4284      	cmp	r4, r0
   2a12c:	4623      	mov	r3, r4
   2a12e:	d807      	bhi.n	2a140 <memmove+0x20>
   2a130:	1e43      	subs	r3, r0, #1
   2a132:	42a1      	cmp	r1, r4
   2a134:	d008      	beq.n	2a148 <memmove+0x28>
   2a136:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a13a:	f803 2f01 	strb.w	r2, [r3, #1]!
   2a13e:	e7f8      	b.n	2a132 <memmove+0x12>
   2a140:	4402      	add	r2, r0
   2a142:	4601      	mov	r1, r0
   2a144:	428a      	cmp	r2, r1
   2a146:	d100      	bne.n	2a14a <memmove+0x2a>
   2a148:	bd10      	pop	{r4, pc}
   2a14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a152:	e7f7      	b.n	2a144 <memmove+0x24>

0002a154 <_free_r>:
   2a154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a156:	2900      	cmp	r1, #0
   2a158:	d048      	beq.n	2a1ec <_free_r+0x98>
   2a15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a15e:	9001      	str	r0, [sp, #4]
   2a160:	2b00      	cmp	r3, #0
   2a162:	f1a1 0404 	sub.w	r4, r1, #4
   2a166:	bfb8      	it	lt
   2a168:	18e4      	addlt	r4, r4, r3
   2a16a:	f000 f8d3 	bl	2a314 <__malloc_lock>
   2a16e:	4a20      	ldr	r2, [pc, #128]	; (2a1f0 <_free_r+0x9c>)
   2a170:	9801      	ldr	r0, [sp, #4]
   2a172:	6813      	ldr	r3, [r2, #0]
   2a174:	4615      	mov	r5, r2
   2a176:	b933      	cbnz	r3, 2a186 <_free_r+0x32>
   2a178:	6063      	str	r3, [r4, #4]
   2a17a:	6014      	str	r4, [r2, #0]
   2a17c:	b003      	add	sp, #12
   2a17e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a182:	f000 b8cd 	b.w	2a320 <__malloc_unlock>
   2a186:	42a3      	cmp	r3, r4
   2a188:	d90b      	bls.n	2a1a2 <_free_r+0x4e>
   2a18a:	6821      	ldr	r1, [r4, #0]
   2a18c:	1862      	adds	r2, r4, r1
   2a18e:	4293      	cmp	r3, r2
   2a190:	bf04      	itt	eq
   2a192:	681a      	ldreq	r2, [r3, #0]
   2a194:	685b      	ldreq	r3, [r3, #4]
   2a196:	6063      	str	r3, [r4, #4]
   2a198:	bf04      	itt	eq
   2a19a:	1852      	addeq	r2, r2, r1
   2a19c:	6022      	streq	r2, [r4, #0]
   2a19e:	602c      	str	r4, [r5, #0]
   2a1a0:	e7ec      	b.n	2a17c <_free_r+0x28>
   2a1a2:	461a      	mov	r2, r3
   2a1a4:	685b      	ldr	r3, [r3, #4]
   2a1a6:	b10b      	cbz	r3, 2a1ac <_free_r+0x58>
   2a1a8:	42a3      	cmp	r3, r4
   2a1aa:	d9fa      	bls.n	2a1a2 <_free_r+0x4e>
   2a1ac:	6811      	ldr	r1, [r2, #0]
   2a1ae:	1855      	adds	r5, r2, r1
   2a1b0:	42a5      	cmp	r5, r4
   2a1b2:	d10b      	bne.n	2a1cc <_free_r+0x78>
   2a1b4:	6824      	ldr	r4, [r4, #0]
   2a1b6:	4421      	add	r1, r4
   2a1b8:	1854      	adds	r4, r2, r1
   2a1ba:	42a3      	cmp	r3, r4
   2a1bc:	6011      	str	r1, [r2, #0]
   2a1be:	d1dd      	bne.n	2a17c <_free_r+0x28>
   2a1c0:	681c      	ldr	r4, [r3, #0]
   2a1c2:	685b      	ldr	r3, [r3, #4]
   2a1c4:	6053      	str	r3, [r2, #4]
   2a1c6:	4421      	add	r1, r4
   2a1c8:	6011      	str	r1, [r2, #0]
   2a1ca:	e7d7      	b.n	2a17c <_free_r+0x28>
   2a1cc:	d902      	bls.n	2a1d4 <_free_r+0x80>
   2a1ce:	230c      	movs	r3, #12
   2a1d0:	6003      	str	r3, [r0, #0]
   2a1d2:	e7d3      	b.n	2a17c <_free_r+0x28>
   2a1d4:	6825      	ldr	r5, [r4, #0]
   2a1d6:	1961      	adds	r1, r4, r5
   2a1d8:	428b      	cmp	r3, r1
   2a1da:	bf04      	itt	eq
   2a1dc:	6819      	ldreq	r1, [r3, #0]
   2a1de:	685b      	ldreq	r3, [r3, #4]
   2a1e0:	6063      	str	r3, [r4, #4]
   2a1e2:	bf04      	itt	eq
   2a1e4:	1949      	addeq	r1, r1, r5
   2a1e6:	6021      	streq	r1, [r4, #0]
   2a1e8:	6054      	str	r4, [r2, #4]
   2a1ea:	e7c7      	b.n	2a17c <_free_r+0x28>
   2a1ec:	b003      	add	sp, #12
   2a1ee:	bd30      	pop	{r4, r5, pc}
   2a1f0:	20001b84 	.word	0x20001b84

0002a1f4 <_malloc_r>:
   2a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a1f6:	1ccd      	adds	r5, r1, #3
   2a1f8:	f025 0503 	bic.w	r5, r5, #3
   2a1fc:	3508      	adds	r5, #8
   2a1fe:	2d0c      	cmp	r5, #12
   2a200:	bf38      	it	cc
   2a202:	250c      	movcc	r5, #12
   2a204:	2d00      	cmp	r5, #0
   2a206:	4606      	mov	r6, r0
   2a208:	db01      	blt.n	2a20e <_malloc_r+0x1a>
   2a20a:	42a9      	cmp	r1, r5
   2a20c:	d903      	bls.n	2a216 <_malloc_r+0x22>
   2a20e:	230c      	movs	r3, #12
   2a210:	6033      	str	r3, [r6, #0]
   2a212:	2000      	movs	r0, #0
   2a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a216:	f000 f87d 	bl	2a314 <__malloc_lock>
   2a21a:	4921      	ldr	r1, [pc, #132]	; (2a2a0 <_malloc_r+0xac>)
   2a21c:	680a      	ldr	r2, [r1, #0]
   2a21e:	4614      	mov	r4, r2
   2a220:	b99c      	cbnz	r4, 2a24a <_malloc_r+0x56>
   2a222:	4f20      	ldr	r7, [pc, #128]	; (2a2a4 <_malloc_r+0xb0>)
   2a224:	683b      	ldr	r3, [r7, #0]
   2a226:	b923      	cbnz	r3, 2a232 <_malloc_r+0x3e>
   2a228:	4621      	mov	r1, r4
   2a22a:	4630      	mov	r0, r6
   2a22c:	f000 f862 	bl	2a2f4 <_sbrk_r>
   2a230:	6038      	str	r0, [r7, #0]
   2a232:	4629      	mov	r1, r5
   2a234:	4630      	mov	r0, r6
   2a236:	f000 f85d 	bl	2a2f4 <_sbrk_r>
   2a23a:	1c43      	adds	r3, r0, #1
   2a23c:	d123      	bne.n	2a286 <_malloc_r+0x92>
   2a23e:	230c      	movs	r3, #12
   2a240:	6033      	str	r3, [r6, #0]
   2a242:	4630      	mov	r0, r6
   2a244:	f000 f86c 	bl	2a320 <__malloc_unlock>
   2a248:	e7e3      	b.n	2a212 <_malloc_r+0x1e>
   2a24a:	6823      	ldr	r3, [r4, #0]
   2a24c:	1b5b      	subs	r3, r3, r5
   2a24e:	d417      	bmi.n	2a280 <_malloc_r+0x8c>
   2a250:	2b0b      	cmp	r3, #11
   2a252:	d903      	bls.n	2a25c <_malloc_r+0x68>
   2a254:	6023      	str	r3, [r4, #0]
   2a256:	441c      	add	r4, r3
   2a258:	6025      	str	r5, [r4, #0]
   2a25a:	e004      	b.n	2a266 <_malloc_r+0x72>
   2a25c:	6863      	ldr	r3, [r4, #4]
   2a25e:	42a2      	cmp	r2, r4
   2a260:	bf0c      	ite	eq
   2a262:	600b      	streq	r3, [r1, #0]
   2a264:	6053      	strne	r3, [r2, #4]
   2a266:	4630      	mov	r0, r6
   2a268:	f000 f85a 	bl	2a320 <__malloc_unlock>
   2a26c:	f104 000b 	add.w	r0, r4, #11
   2a270:	1d23      	adds	r3, r4, #4
   2a272:	f020 0007 	bic.w	r0, r0, #7
   2a276:	1ac2      	subs	r2, r0, r3
   2a278:	d0cc      	beq.n	2a214 <_malloc_r+0x20>
   2a27a:	1a1b      	subs	r3, r3, r0
   2a27c:	50a3      	str	r3, [r4, r2]
   2a27e:	e7c9      	b.n	2a214 <_malloc_r+0x20>
   2a280:	4622      	mov	r2, r4
   2a282:	6864      	ldr	r4, [r4, #4]
   2a284:	e7cc      	b.n	2a220 <_malloc_r+0x2c>
   2a286:	1cc4      	adds	r4, r0, #3
   2a288:	f024 0403 	bic.w	r4, r4, #3
   2a28c:	42a0      	cmp	r0, r4
   2a28e:	d0e3      	beq.n	2a258 <_malloc_r+0x64>
   2a290:	1a21      	subs	r1, r4, r0
   2a292:	4630      	mov	r0, r6
   2a294:	f000 f82e 	bl	2a2f4 <_sbrk_r>
   2a298:	3001      	adds	r0, #1
   2a29a:	d1dd      	bne.n	2a258 <_malloc_r+0x64>
   2a29c:	e7cf      	b.n	2a23e <_malloc_r+0x4a>
   2a29e:	bf00      	nop
   2a2a0:	20001b84 	.word	0x20001b84
   2a2a4:	20001b88 	.word	0x20001b88

0002a2a8 <_realloc_r>:
   2a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a2aa:	4607      	mov	r7, r0
   2a2ac:	4614      	mov	r4, r2
   2a2ae:	460e      	mov	r6, r1
   2a2b0:	b921      	cbnz	r1, 2a2bc <_realloc_r+0x14>
   2a2b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a2b6:	4611      	mov	r1, r2
   2a2b8:	f7ff bf9c 	b.w	2a1f4 <_malloc_r>
   2a2bc:	b922      	cbnz	r2, 2a2c8 <_realloc_r+0x20>
   2a2be:	f7ff ff49 	bl	2a154 <_free_r>
   2a2c2:	4625      	mov	r5, r4
   2a2c4:	4628      	mov	r0, r5
   2a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a2c8:	f000 f830 	bl	2a32c <_malloc_usable_size_r>
   2a2cc:	42a0      	cmp	r0, r4
   2a2ce:	d20f      	bcs.n	2a2f0 <_realloc_r+0x48>
   2a2d0:	4621      	mov	r1, r4
   2a2d2:	4638      	mov	r0, r7
   2a2d4:	f7ff ff8e 	bl	2a1f4 <_malloc_r>
   2a2d8:	4605      	mov	r5, r0
   2a2da:	2800      	cmp	r0, #0
   2a2dc:	d0f2      	beq.n	2a2c4 <_realloc_r+0x1c>
   2a2de:	4631      	mov	r1, r6
   2a2e0:	4622      	mov	r2, r4
   2a2e2:	f7ff fb89 	bl	299f8 <memcpy>
   2a2e6:	4631      	mov	r1, r6
   2a2e8:	4638      	mov	r0, r7
   2a2ea:	f7ff ff33 	bl	2a154 <_free_r>
   2a2ee:	e7e9      	b.n	2a2c4 <_realloc_r+0x1c>
   2a2f0:	4635      	mov	r5, r6
   2a2f2:	e7e7      	b.n	2a2c4 <_realloc_r+0x1c>

0002a2f4 <_sbrk_r>:
   2a2f4:	b538      	push	{r3, r4, r5, lr}
   2a2f6:	4d06      	ldr	r5, [pc, #24]	; (2a310 <_sbrk_r+0x1c>)
   2a2f8:	2300      	movs	r3, #0
   2a2fa:	4604      	mov	r4, r0
   2a2fc:	4608      	mov	r0, r1
   2a2fe:	602b      	str	r3, [r5, #0]
   2a300:	f000 f81e 	bl	2a340 <_sbrk>
   2a304:	1c43      	adds	r3, r0, #1
   2a306:	d102      	bne.n	2a30e <_sbrk_r+0x1a>
   2a308:	682b      	ldr	r3, [r5, #0]
   2a30a:	b103      	cbz	r3, 2a30e <_sbrk_r+0x1a>
   2a30c:	6023      	str	r3, [r4, #0]
   2a30e:	bd38      	pop	{r3, r4, r5, pc}
   2a310:	20001b9c 	.word	0x20001b9c

0002a314 <__malloc_lock>:
   2a314:	4801      	ldr	r0, [pc, #4]	; (2a31c <__malloc_lock+0x8>)
   2a316:	f000 b811 	b.w	2a33c <__retarget_lock_acquire_recursive>
   2a31a:	bf00      	nop
   2a31c:	20001ba4 	.word	0x20001ba4

0002a320 <__malloc_unlock>:
   2a320:	4801      	ldr	r0, [pc, #4]	; (2a328 <__malloc_unlock+0x8>)
   2a322:	f000 b80c 	b.w	2a33e <__retarget_lock_release_recursive>
   2a326:	bf00      	nop
   2a328:	20001ba4 	.word	0x20001ba4

0002a32c <_malloc_usable_size_r>:
   2a32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a330:	1f18      	subs	r0, r3, #4
   2a332:	2b00      	cmp	r3, #0
   2a334:	bfbc      	itt	lt
   2a336:	580b      	ldrlt	r3, [r1, r0]
   2a338:	18c0      	addlt	r0, r0, r3
   2a33a:	4770      	bx	lr

0002a33c <__retarget_lock_acquire_recursive>:
   2a33c:	4770      	bx	lr

0002a33e <__retarget_lock_release_recursive>:
   2a33e:	4770      	bx	lr

0002a340 <_sbrk>:
   2a340:	4a04      	ldr	r2, [pc, #16]	; (2a354 <_sbrk+0x14>)
   2a342:	4905      	ldr	r1, [pc, #20]	; (2a358 <_sbrk+0x18>)
   2a344:	6813      	ldr	r3, [r2, #0]
   2a346:	2b00      	cmp	r3, #0
   2a348:	bf08      	it	eq
   2a34a:	460b      	moveq	r3, r1
   2a34c:	4418      	add	r0, r3
   2a34e:	6010      	str	r0, [r2, #0]
   2a350:	4618      	mov	r0, r3
   2a352:	4770      	bx	lr
   2a354:	20001b8c 	.word	0x20001b8c
   2a358:	20001bb0 	.word	0x20001bb0

0002a35c <_exit>:
   2a35c:	e7fe      	b.n	2a35c <_exit>
   2a35e:	bf00      	nop

0002a360 <__aeabi_d2uiz>:
   2a360:	004a      	lsls	r2, r1, #1
   2a362:	d211      	bcs.n	2a388 <__aeabi_d2uiz+0x28>
   2a364:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   2a368:	d211      	bcs.n	2a38e <__aeabi_d2uiz+0x2e>
   2a36a:	d50d      	bpl.n	2a388 <__aeabi_d2uiz+0x28>
   2a36c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   2a370:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   2a374:	d40e      	bmi.n	2a394 <__aeabi_d2uiz+0x34>
   2a376:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2a37a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2a37e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   2a382:	fa23 f002 	lsr.w	r0, r3, r2
   2a386:	4770      	bx	lr
   2a388:	f04f 0000 	mov.w	r0, #0
   2a38c:	4770      	bx	lr
   2a38e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   2a392:	d102      	bne.n	2a39a <__aeabi_d2uiz+0x3a>
   2a394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a398:	4770      	bx	lr
   2a39a:	f04f 0000 	mov.w	r0, #0
   2a39e:	4770      	bx	lr

0002a3a0 <selfrel_offset31>:
   2a3a0:	6803      	ldr	r3, [r0, #0]
   2a3a2:	005a      	lsls	r2, r3, #1
   2a3a4:	bf4c      	ite	mi
   2a3a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   2a3aa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   2a3ae:	4418      	add	r0, r3
   2a3b0:	4770      	bx	lr
   2a3b2:	bf00      	nop

0002a3b4 <search_EIT_table>:
   2a3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a3b8:	b329      	cbz	r1, 2a406 <search_EIT_table+0x52>
   2a3ba:	1e4f      	subs	r7, r1, #1
   2a3bc:	4604      	mov	r4, r0
   2a3be:	4615      	mov	r5, r2
   2a3c0:	463e      	mov	r6, r7
   2a3c2:	f04f 0800 	mov.w	r8, #0
   2a3c6:	eb08 0106 	add.w	r1, r8, r6
   2a3ca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   2a3ce:	1049      	asrs	r1, r1, #1
   2a3d0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   2a3d4:	4648      	mov	r0, r9
   2a3d6:	f7ff ffe3 	bl	2a3a0 <selfrel_offset31>
   2a3da:	4603      	mov	r3, r0
   2a3dc:	00c8      	lsls	r0, r1, #3
   2a3de:	3008      	adds	r0, #8
   2a3e0:	428f      	cmp	r7, r1
   2a3e2:	4420      	add	r0, r4
   2a3e4:	d009      	beq.n	2a3fa <search_EIT_table+0x46>
   2a3e6:	42ab      	cmp	r3, r5
   2a3e8:	d809      	bhi.n	2a3fe <search_EIT_table+0x4a>
   2a3ea:	f7ff ffd9 	bl	2a3a0 <selfrel_offset31>
   2a3ee:	3801      	subs	r0, #1
   2a3f0:	42a8      	cmp	r0, r5
   2a3f2:	d20a      	bcs.n	2a40a <search_EIT_table+0x56>
   2a3f4:	f101 0801 	add.w	r8, r1, #1
   2a3f8:	e7e5      	b.n	2a3c6 <search_EIT_table+0x12>
   2a3fa:	42ab      	cmp	r3, r5
   2a3fc:	d905      	bls.n	2a40a <search_EIT_table+0x56>
   2a3fe:	4588      	cmp	r8, r1
   2a400:	d001      	beq.n	2a406 <search_EIT_table+0x52>
   2a402:	1e4e      	subs	r6, r1, #1
   2a404:	e7df      	b.n	2a3c6 <search_EIT_table+0x12>
   2a406:	f04f 0900 	mov.w	r9, #0
   2a40a:	4648      	mov	r0, r9
   2a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a410 <__gnu_unwind_get_pr_addr>:
   2a410:	2801      	cmp	r0, #1
   2a412:	d007      	beq.n	2a424 <__gnu_unwind_get_pr_addr+0x14>
   2a414:	2802      	cmp	r0, #2
   2a416:	d007      	beq.n	2a428 <__gnu_unwind_get_pr_addr+0x18>
   2a418:	4b04      	ldr	r3, [pc, #16]	; (2a42c <__gnu_unwind_get_pr_addr+0x1c>)
   2a41a:	2800      	cmp	r0, #0
   2a41c:	bf0c      	ite	eq
   2a41e:	4618      	moveq	r0, r3
   2a420:	2000      	movne	r0, #0
   2a422:	4770      	bx	lr
   2a424:	4802      	ldr	r0, [pc, #8]	; (2a430 <__gnu_unwind_get_pr_addr+0x20>)
   2a426:	4770      	bx	lr
   2a428:	4802      	ldr	r0, [pc, #8]	; (2a434 <__gnu_unwind_get_pr_addr+0x24>)
   2a42a:	4770      	bx	lr
   2a42c:	0002aad5 	.word	0x0002aad5
   2a430:	0002aad9 	.word	0x0002aad9
   2a434:	0002aadd 	.word	0x0002aadd

0002a438 <get_eit_entry>:
   2a438:	b530      	push	{r4, r5, lr}
   2a43a:	4b23      	ldr	r3, [pc, #140]	; (2a4c8 <get_eit_entry+0x90>)
   2a43c:	b083      	sub	sp, #12
   2a43e:	4604      	mov	r4, r0
   2a440:	1e8d      	subs	r5, r1, #2
   2a442:	b33b      	cbz	r3, 2a494 <get_eit_entry+0x5c>
   2a444:	a901      	add	r1, sp, #4
   2a446:	4628      	mov	r0, r5
   2a448:	f3af 8000 	nop.w
   2a44c:	b1e8      	cbz	r0, 2a48a <get_eit_entry+0x52>
   2a44e:	9901      	ldr	r1, [sp, #4]
   2a450:	462a      	mov	r2, r5
   2a452:	f7ff ffaf 	bl	2a3b4 <search_EIT_table>
   2a456:	4601      	mov	r1, r0
   2a458:	b1b8      	cbz	r0, 2a48a <get_eit_entry+0x52>
   2a45a:	f7ff ffa1 	bl	2a3a0 <selfrel_offset31>
   2a45e:	684b      	ldr	r3, [r1, #4]
   2a460:	64a0      	str	r0, [r4, #72]	; 0x48
   2a462:	2b01      	cmp	r3, #1
   2a464:	d02b      	beq.n	2a4be <get_eit_entry+0x86>
   2a466:	2b00      	cmp	r3, #0
   2a468:	f101 0004 	add.w	r0, r1, #4
   2a46c:	db23      	blt.n	2a4b6 <get_eit_entry+0x7e>
   2a46e:	f7ff ff97 	bl	2a3a0 <selfrel_offset31>
   2a472:	2300      	movs	r3, #0
   2a474:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   2a478:	6803      	ldr	r3, [r0, #0]
   2a47a:	2b00      	cmp	r3, #0
   2a47c:	db10      	blt.n	2a4a0 <get_eit_entry+0x68>
   2a47e:	f7ff ff8f 	bl	2a3a0 <selfrel_offset31>
   2a482:	6120      	str	r0, [r4, #16]
   2a484:	2000      	movs	r0, #0
   2a486:	b003      	add	sp, #12
   2a488:	bd30      	pop	{r4, r5, pc}
   2a48a:	2300      	movs	r3, #0
   2a48c:	2009      	movs	r0, #9
   2a48e:	6123      	str	r3, [r4, #16]
   2a490:	b003      	add	sp, #12
   2a492:	bd30      	pop	{r4, r5, pc}
   2a494:	490d      	ldr	r1, [pc, #52]	; (2a4cc <get_eit_entry+0x94>)
   2a496:	480e      	ldr	r0, [pc, #56]	; (2a4d0 <get_eit_entry+0x98>)
   2a498:	1a09      	subs	r1, r1, r0
   2a49a:	10c9      	asrs	r1, r1, #3
   2a49c:	9101      	str	r1, [sp, #4]
   2a49e:	e7d7      	b.n	2a450 <get_eit_entry+0x18>
   2a4a0:	f3c3 6003 	ubfx	r0, r3, #24, #4
   2a4a4:	f7ff ffb4 	bl	2a410 <__gnu_unwind_get_pr_addr>
   2a4a8:	2800      	cmp	r0, #0
   2a4aa:	6120      	str	r0, [r4, #16]
   2a4ac:	bf14      	ite	ne
   2a4ae:	2000      	movne	r0, #0
   2a4b0:	2009      	moveq	r0, #9
   2a4b2:	b003      	add	sp, #12
   2a4b4:	bd30      	pop	{r4, r5, pc}
   2a4b6:	2301      	movs	r3, #1
   2a4b8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   2a4bc:	e7dc      	b.n	2a478 <get_eit_entry+0x40>
   2a4be:	2300      	movs	r3, #0
   2a4c0:	6123      	str	r3, [r4, #16]
   2a4c2:	2005      	movs	r0, #5
   2a4c4:	e7df      	b.n	2a486 <get_eit_entry+0x4e>
   2a4c6:	bf00      	nop
   2a4c8:	00000000 	.word	0x00000000
   2a4cc:	0002b564 	.word	0x0002b564
   2a4d0:	0002b424 	.word	0x0002b424

0002a4d4 <restore_non_core_regs>:
   2a4d4:	6803      	ldr	r3, [r0, #0]
   2a4d6:	07da      	lsls	r2, r3, #31
   2a4d8:	b510      	push	{r4, lr}
   2a4da:	4604      	mov	r4, r0
   2a4dc:	d406      	bmi.n	2a4ec <restore_non_core_regs+0x18>
   2a4de:	079b      	lsls	r3, r3, #30
   2a4e0:	f100 0048 	add.w	r0, r0, #72	; 0x48
   2a4e4:	d509      	bpl.n	2a4fa <restore_non_core_regs+0x26>
   2a4e6:	f000 fc4b 	bl	2ad80 <__gnu_Unwind_Restore_VFP_D>
   2a4ea:	6823      	ldr	r3, [r4, #0]
   2a4ec:	0759      	lsls	r1, r3, #29
   2a4ee:	d509      	bpl.n	2a504 <restore_non_core_regs+0x30>
   2a4f0:	071a      	lsls	r2, r3, #28
   2a4f2:	d50e      	bpl.n	2a512 <restore_non_core_regs+0x3e>
   2a4f4:	06db      	lsls	r3, r3, #27
   2a4f6:	d513      	bpl.n	2a520 <restore_non_core_regs+0x4c>
   2a4f8:	bd10      	pop	{r4, pc}
   2a4fa:	f000 fc39 	bl	2ad70 <__gnu_Unwind_Restore_VFP>
   2a4fe:	6823      	ldr	r3, [r4, #0]
   2a500:	0759      	lsls	r1, r3, #29
   2a502:	d4f5      	bmi.n	2a4f0 <restore_non_core_regs+0x1c>
   2a504:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   2a508:	f000 fc42 	bl	2ad90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   2a50c:	6823      	ldr	r3, [r4, #0]
   2a50e:	071a      	lsls	r2, r3, #28
   2a510:	d4f0      	bmi.n	2a4f4 <restore_non_core_regs+0x20>
   2a512:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2a516:	f000 fc43 	bl	2ada0 <__gnu_Unwind_Restore_WMMXD>
   2a51a:	6823      	ldr	r3, [r4, #0]
   2a51c:	06db      	lsls	r3, r3, #27
   2a51e:	d4eb      	bmi.n	2a4f8 <restore_non_core_regs+0x24>
   2a520:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   2a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a528:	f000 bc7e 	b.w	2ae28 <__gnu_Unwind_Restore_WMMXC>

0002a52c <_Unwind_decode_typeinfo_ptr.isra.0>:
   2a52c:	4603      	mov	r3, r0
   2a52e:	6800      	ldr	r0, [r0, #0]
   2a530:	b100      	cbz	r0, 2a534 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   2a532:	4418      	add	r0, r3
   2a534:	4770      	bx	lr
   2a536:	bf00      	nop

0002a538 <__gnu_unwind_24bit.isra.0>:
   2a538:	2009      	movs	r0, #9
   2a53a:	4770      	bx	lr

0002a53c <_Unwind_DebugHook>:
   2a53c:	4770      	bx	lr
   2a53e:	bf00      	nop

0002a540 <unwind_phase2>:
   2a540:	b570      	push	{r4, r5, r6, lr}
   2a542:	4604      	mov	r4, r0
   2a544:	460e      	mov	r6, r1
   2a546:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2a548:	4620      	mov	r0, r4
   2a54a:	f7ff ff75 	bl	2a438 <get_eit_entry>
   2a54e:	4605      	mov	r5, r0
   2a550:	b988      	cbnz	r0, 2a576 <unwind_phase2+0x36>
   2a552:	6c33      	ldr	r3, [r6, #64]	; 0x40
   2a554:	6163      	str	r3, [r4, #20]
   2a556:	4632      	mov	r2, r6
   2a558:	6923      	ldr	r3, [r4, #16]
   2a55a:	4621      	mov	r1, r4
   2a55c:	2001      	movs	r0, #1
   2a55e:	4798      	blx	r3
   2a560:	2808      	cmp	r0, #8
   2a562:	d0f0      	beq.n	2a546 <unwind_phase2+0x6>
   2a564:	2807      	cmp	r0, #7
   2a566:	d106      	bne.n	2a576 <unwind_phase2+0x36>
   2a568:	4628      	mov	r0, r5
   2a56a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2a56c:	f7ff ffe6 	bl	2a53c <_Unwind_DebugHook>
   2a570:	1d30      	adds	r0, r6, #4
   2a572:	f000 fbf1 	bl	2ad58 <__restore_core_regs>
   2a576:	f000 fe65 	bl	2b244 <abort>
   2a57a:	bf00      	nop

0002a57c <unwind_phase2_forced>:
   2a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a580:	1d0d      	adds	r5, r1, #4
   2a582:	4606      	mov	r6, r0
   2a584:	4614      	mov	r4, r2
   2a586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a588:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   2a58c:	f10d 0c0c 	add.w	ip, sp, #12
   2a590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2a594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2a59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a59c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2a5a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2a5a4:	ad02      	add	r5, sp, #8
   2a5a6:	68f7      	ldr	r7, [r6, #12]
   2a5a8:	f8d6 8018 	ldr.w	r8, [r6, #24]
   2a5ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   2a5b0:	2300      	movs	r3, #0
   2a5b2:	602b      	str	r3, [r5, #0]
   2a5b4:	e021      	b.n	2a5fa <unwind_phase2_forced+0x7e>
   2a5b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2a5b8:	6173      	str	r3, [r6, #20]
   2a5ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   2a5be:	4629      	mov	r1, r5
   2a5c0:	a87a      	add	r0, sp, #488	; 0x1e8
   2a5c2:	f7ff fa19 	bl	299f8 <memcpy>
   2a5c6:	6933      	ldr	r3, [r6, #16]
   2a5c8:	aa7a      	add	r2, sp, #488	; 0x1e8
   2a5ca:	4631      	mov	r1, r6
   2a5cc:	4650      	mov	r0, sl
   2a5ce:	4798      	blx	r3
   2a5d0:	9b88      	ldr	r3, [sp, #544]	; 0x220
   2a5d2:	e9cd 5800 	strd	r5, r8, [sp]
   2a5d6:	4621      	mov	r1, r4
   2a5d8:	646b      	str	r3, [r5, #68]	; 0x44
   2a5da:	4681      	mov	r9, r0
   2a5dc:	4633      	mov	r3, r6
   2a5de:	4632      	mov	r2, r6
   2a5e0:	2001      	movs	r0, #1
   2a5e2:	47b8      	blx	r7
   2a5e4:	4604      	mov	r4, r0
   2a5e6:	b9e8      	cbnz	r0, 2a624 <unwind_phase2_forced+0xa8>
   2a5e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   2a5ec:	a97a      	add	r1, sp, #488	; 0x1e8
   2a5ee:	4628      	mov	r0, r5
   2a5f0:	f7ff fa02 	bl	299f8 <memcpy>
   2a5f4:	f1b9 0f08 	cmp.w	r9, #8
   2a5f8:	d11b      	bne.n	2a632 <unwind_phase2_forced+0xb6>
   2a5fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2a5fc:	4630      	mov	r0, r6
   2a5fe:	f7ff ff1b 	bl	2a438 <get_eit_entry>
   2a602:	3409      	adds	r4, #9
   2a604:	fa5f fa84 	uxtb.w	sl, r4
   2a608:	4681      	mov	r9, r0
   2a60a:	2800      	cmp	r0, #0
   2a60c:	d0d3      	beq.n	2a5b6 <unwind_phase2_forced+0x3a>
   2a60e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2a610:	f04a 0110 	orr.w	r1, sl, #16
   2a614:	e9cd 5800 	strd	r5, r8, [sp]
   2a618:	4632      	mov	r2, r6
   2a61a:	646b      	str	r3, [r5, #68]	; 0x44
   2a61c:	2001      	movs	r0, #1
   2a61e:	4633      	mov	r3, r6
   2a620:	47b8      	blx	r7
   2a622:	b108      	cbz	r0, 2a628 <unwind_phase2_forced+0xac>
   2a624:	f04f 0909 	mov.w	r9, #9
   2a628:	4648      	mov	r0, r9
   2a62a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   2a62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a632:	f1b9 0f07 	cmp.w	r9, #7
   2a636:	d1f5      	bne.n	2a624 <unwind_phase2_forced+0xa8>
   2a638:	4620      	mov	r0, r4
   2a63a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2a63c:	f7ff ff7e 	bl	2a53c <_Unwind_DebugHook>
   2a640:	a803      	add	r0, sp, #12
   2a642:	f000 fb89 	bl	2ad58 <__restore_core_regs>
   2a646:	bf00      	nop

0002a648 <_Unwind_GetCFA>:
   2a648:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2a64a:	4770      	bx	lr

0002a64c <__gnu_Unwind_RaiseException>:
   2a64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a64e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2a650:	640b      	str	r3, [r1, #64]	; 0x40
   2a652:	1d0e      	adds	r6, r1, #4
   2a654:	460f      	mov	r7, r1
   2a656:	4605      	mov	r5, r0
   2a658:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a65a:	b0f9      	sub	sp, #484	; 0x1e4
   2a65c:	ac01      	add	r4, sp, #4
   2a65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a664:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a668:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2a66c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a674:	9600      	str	r6, [sp, #0]
   2a676:	e006      	b.n	2a686 <__gnu_Unwind_RaiseException+0x3a>
   2a678:	692b      	ldr	r3, [r5, #16]
   2a67a:	466a      	mov	r2, sp
   2a67c:	4629      	mov	r1, r5
   2a67e:	4798      	blx	r3
   2a680:	2808      	cmp	r0, #8
   2a682:	4604      	mov	r4, r0
   2a684:	d108      	bne.n	2a698 <__gnu_Unwind_RaiseException+0x4c>
   2a686:	9910      	ldr	r1, [sp, #64]	; 0x40
   2a688:	4628      	mov	r0, r5
   2a68a:	f7ff fed5 	bl	2a438 <get_eit_entry>
   2a68e:	2800      	cmp	r0, #0
   2a690:	d0f2      	beq.n	2a678 <__gnu_Unwind_RaiseException+0x2c>
   2a692:	2009      	movs	r0, #9
   2a694:	b079      	add	sp, #484	; 0x1e4
   2a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a698:	4668      	mov	r0, sp
   2a69a:	f7ff ff1b 	bl	2a4d4 <restore_non_core_regs>
   2a69e:	2c06      	cmp	r4, #6
   2a6a0:	d1f7      	bne.n	2a692 <__gnu_Unwind_RaiseException+0x46>
   2a6a2:	4639      	mov	r1, r7
   2a6a4:	4628      	mov	r0, r5
   2a6a6:	f7ff ff4b 	bl	2a540 <unwind_phase2>
   2a6aa:	bf00      	nop

0002a6ac <__gnu_Unwind_ForcedUnwind>:
   2a6ac:	b430      	push	{r4, r5}
   2a6ae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   2a6b0:	60c1      	str	r1, [r0, #12]
   2a6b2:	6182      	str	r2, [r0, #24]
   2a6b4:	4619      	mov	r1, r3
   2a6b6:	641d      	str	r5, [r3, #64]	; 0x40
   2a6b8:	2200      	movs	r2, #0
   2a6ba:	bc30      	pop	{r4, r5}
   2a6bc:	e75e      	b.n	2a57c <unwind_phase2_forced>
   2a6be:	bf00      	nop

0002a6c0 <__gnu_Unwind_Resume>:
   2a6c0:	b570      	push	{r4, r5, r6, lr}
   2a6c2:	68c6      	ldr	r6, [r0, #12]
   2a6c4:	6943      	ldr	r3, [r0, #20]
   2a6c6:	640b      	str	r3, [r1, #64]	; 0x40
   2a6c8:	b9ae      	cbnz	r6, 2a6f6 <__gnu_Unwind_Resume+0x36>
   2a6ca:	6903      	ldr	r3, [r0, #16]
   2a6cc:	460a      	mov	r2, r1
   2a6ce:	4604      	mov	r4, r0
   2a6d0:	460d      	mov	r5, r1
   2a6d2:	4601      	mov	r1, r0
   2a6d4:	2002      	movs	r0, #2
   2a6d6:	4798      	blx	r3
   2a6d8:	2807      	cmp	r0, #7
   2a6da:	d005      	beq.n	2a6e8 <__gnu_Unwind_Resume+0x28>
   2a6dc:	2808      	cmp	r0, #8
   2a6de:	d10f      	bne.n	2a700 <__gnu_Unwind_Resume+0x40>
   2a6e0:	4629      	mov	r1, r5
   2a6e2:	4620      	mov	r0, r4
   2a6e4:	f7ff ff2c 	bl	2a540 <unwind_phase2>
   2a6e8:	4630      	mov	r0, r6
   2a6ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2a6ec:	f7ff ff26 	bl	2a53c <_Unwind_DebugHook>
   2a6f0:	1d28      	adds	r0, r5, #4
   2a6f2:	f000 fb31 	bl	2ad58 <__restore_core_regs>
   2a6f6:	2201      	movs	r2, #1
   2a6f8:	f7ff ff40 	bl	2a57c <unwind_phase2_forced>
   2a6fc:	f000 fda2 	bl	2b244 <abort>
   2a700:	f000 fda0 	bl	2b244 <abort>

0002a704 <__gnu_Unwind_Resume_or_Rethrow>:
   2a704:	68c2      	ldr	r2, [r0, #12]
   2a706:	b11a      	cbz	r2, 2a710 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   2a708:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   2a70a:	640a      	str	r2, [r1, #64]	; 0x40
   2a70c:	2200      	movs	r2, #0
   2a70e:	e735      	b.n	2a57c <unwind_phase2_forced>
   2a710:	e79c      	b.n	2a64c <__gnu_Unwind_RaiseException>
   2a712:	bf00      	nop

0002a714 <_Unwind_Complete>:
   2a714:	4770      	bx	lr
   2a716:	bf00      	nop

0002a718 <_Unwind_DeleteException>:
   2a718:	6883      	ldr	r3, [r0, #8]
   2a71a:	4601      	mov	r1, r0
   2a71c:	b10b      	cbz	r3, 2a722 <_Unwind_DeleteException+0xa>
   2a71e:	2001      	movs	r0, #1
   2a720:	4718      	bx	r3
   2a722:	4770      	bx	lr

0002a724 <_Unwind_VRS_Get>:
   2a724:	2901      	cmp	r1, #1
   2a726:	d012      	beq.n	2a74e <_Unwind_VRS_Get+0x2a>
   2a728:	d809      	bhi.n	2a73e <_Unwind_VRS_Get+0x1a>
   2a72a:	b973      	cbnz	r3, 2a74a <_Unwind_VRS_Get+0x26>
   2a72c:	2a0f      	cmp	r2, #15
   2a72e:	d80c      	bhi.n	2a74a <_Unwind_VRS_Get+0x26>
   2a730:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2a734:	4618      	mov	r0, r3
   2a736:	6853      	ldr	r3, [r2, #4]
   2a738:	9a00      	ldr	r2, [sp, #0]
   2a73a:	6013      	str	r3, [r2, #0]
   2a73c:	4770      	bx	lr
   2a73e:	3903      	subs	r1, #3
   2a740:	2901      	cmp	r1, #1
   2a742:	bf94      	ite	ls
   2a744:	2001      	movls	r0, #1
   2a746:	2002      	movhi	r0, #2
   2a748:	4770      	bx	lr
   2a74a:	2002      	movs	r0, #2
   2a74c:	4770      	bx	lr
   2a74e:	4608      	mov	r0, r1
   2a750:	4770      	bx	lr
   2a752:	bf00      	nop

0002a754 <_Unwind_GetGR>:
   2a754:	b510      	push	{r4, lr}
   2a756:	b084      	sub	sp, #16
   2a758:	2300      	movs	r3, #0
   2a75a:	ac03      	add	r4, sp, #12
   2a75c:	460a      	mov	r2, r1
   2a75e:	9400      	str	r4, [sp, #0]
   2a760:	4619      	mov	r1, r3
   2a762:	f7ff ffdf 	bl	2a724 <_Unwind_VRS_Get>
   2a766:	9803      	ldr	r0, [sp, #12]
   2a768:	b004      	add	sp, #16
   2a76a:	bd10      	pop	{r4, pc}

0002a76c <_Unwind_VRS_Set>:
   2a76c:	2901      	cmp	r1, #1
   2a76e:	d012      	beq.n	2a796 <_Unwind_VRS_Set+0x2a>
   2a770:	d809      	bhi.n	2a786 <_Unwind_VRS_Set+0x1a>
   2a772:	b973      	cbnz	r3, 2a792 <_Unwind_VRS_Set+0x26>
   2a774:	2a0f      	cmp	r2, #15
   2a776:	d80c      	bhi.n	2a792 <_Unwind_VRS_Set+0x26>
   2a778:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2a77c:	9a00      	ldr	r2, [sp, #0]
   2a77e:	6812      	ldr	r2, [r2, #0]
   2a780:	6042      	str	r2, [r0, #4]
   2a782:	4618      	mov	r0, r3
   2a784:	4770      	bx	lr
   2a786:	3903      	subs	r1, #3
   2a788:	2901      	cmp	r1, #1
   2a78a:	bf94      	ite	ls
   2a78c:	2001      	movls	r0, #1
   2a78e:	2002      	movhi	r0, #2
   2a790:	4770      	bx	lr
   2a792:	2002      	movs	r0, #2
   2a794:	4770      	bx	lr
   2a796:	4608      	mov	r0, r1
   2a798:	4770      	bx	lr
   2a79a:	bf00      	nop

0002a79c <_Unwind_SetGR>:
   2a79c:	b510      	push	{r4, lr}
   2a79e:	b084      	sub	sp, #16
   2a7a0:	2300      	movs	r3, #0
   2a7a2:	ac03      	add	r4, sp, #12
   2a7a4:	9203      	str	r2, [sp, #12]
   2a7a6:	9400      	str	r4, [sp, #0]
   2a7a8:	460a      	mov	r2, r1
   2a7aa:	4619      	mov	r1, r3
   2a7ac:	f7ff ffde 	bl	2a76c <_Unwind_VRS_Set>
   2a7b0:	b004      	add	sp, #16
   2a7b2:	bd10      	pop	{r4, pc}

0002a7b4 <__gnu_Unwind_Backtrace>:
   2a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a7b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   2a7b8:	6413      	str	r3, [r2, #64]	; 0x40
   2a7ba:	1d15      	adds	r5, r2, #4
   2a7bc:	468c      	mov	ip, r1
   2a7be:	4606      	mov	r6, r0
   2a7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a7c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   2a7c6:	ac17      	add	r4, sp, #92	; 0x5c
   2a7c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a7cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a7ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a7d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a7d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2a7d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a7da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a7de:	4665      	mov	r5, ip
   2a7e0:	9716      	str	r7, [sp, #88]	; 0x58
   2a7e2:	e010      	b.n	2a806 <__gnu_Unwind_Backtrace+0x52>
   2a7e4:	f7ff ffda 	bl	2a79c <_Unwind_SetGR>
   2a7e8:	4629      	mov	r1, r5
   2a7ea:	a816      	add	r0, sp, #88	; 0x58
   2a7ec:	47b0      	blx	r6
   2a7ee:	4603      	mov	r3, r0
   2a7f0:	aa16      	add	r2, sp, #88	; 0x58
   2a7f2:	4669      	mov	r1, sp
   2a7f4:	2008      	movs	r0, #8
   2a7f6:	b983      	cbnz	r3, 2a81a <__gnu_Unwind_Backtrace+0x66>
   2a7f8:	9b04      	ldr	r3, [sp, #16]
   2a7fa:	4798      	blx	r3
   2a7fc:	2805      	cmp	r0, #5
   2a7fe:	4604      	mov	r4, r0
   2a800:	d00c      	beq.n	2a81c <__gnu_Unwind_Backtrace+0x68>
   2a802:	2809      	cmp	r0, #9
   2a804:	d009      	beq.n	2a81a <__gnu_Unwind_Backtrace+0x66>
   2a806:	9926      	ldr	r1, [sp, #152]	; 0x98
   2a808:	4668      	mov	r0, sp
   2a80a:	f7ff fe15 	bl	2a438 <get_eit_entry>
   2a80e:	4603      	mov	r3, r0
   2a810:	466a      	mov	r2, sp
   2a812:	210c      	movs	r1, #12
   2a814:	a816      	add	r0, sp, #88	; 0x58
   2a816:	2b00      	cmp	r3, #0
   2a818:	d0e4      	beq.n	2a7e4 <__gnu_Unwind_Backtrace+0x30>
   2a81a:	2409      	movs	r4, #9
   2a81c:	a816      	add	r0, sp, #88	; 0x58
   2a81e:	f7ff fe59 	bl	2a4d4 <restore_non_core_regs>
   2a822:	4620      	mov	r0, r4
   2a824:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   2a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a82a:	bf00      	nop

0002a82c <__gnu_unwind_pr_common>:
   2a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a830:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   2a832:	b089      	sub	sp, #36	; 0x24
   2a834:	460d      	mov	r5, r1
   2a836:	f854 1b04 	ldr.w	r1, [r4], #4
   2a83a:	9406      	str	r4, [sp, #24]
   2a83c:	4617      	mov	r7, r2
   2a83e:	f000 0803 	and.w	r8, r0, #3
   2a842:	461e      	mov	r6, r3
   2a844:	2b00      	cmp	r3, #0
   2a846:	d079      	beq.n	2a93c <__gnu_unwind_pr_common+0x110>
   2a848:	0c0b      	lsrs	r3, r1, #16
   2a84a:	b2da      	uxtb	r2, r3
   2a84c:	0409      	lsls	r1, r1, #16
   2a84e:	f88d 301d 	strb.w	r3, [sp, #29]
   2a852:	2302      	movs	r3, #2
   2a854:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   2a858:	9105      	str	r1, [sp, #20]
   2a85a:	f88d 301c 	strb.w	r3, [sp, #28]
   2a85e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2a860:	f1b8 0f02 	cmp.w	r8, #2
   2a864:	bf08      	it	eq
   2a866:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   2a868:	f013 0301 	ands.w	r3, r3, #1
   2a86c:	d00c      	beq.n	2a888 <__gnu_unwind_pr_common+0x5c>
   2a86e:	4638      	mov	r0, r7
   2a870:	a905      	add	r1, sp, #20
   2a872:	f000 fb73 	bl	2af5c <__gnu_unwind_execute>
   2a876:	b918      	cbnz	r0, 2a880 <__gnu_unwind_pr_common+0x54>
   2a878:	2008      	movs	r0, #8
   2a87a:	b009      	add	sp, #36	; 0x24
   2a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a880:	2009      	movs	r0, #9
   2a882:	b009      	add	sp, #36	; 0x24
   2a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a888:	f8d4 a000 	ldr.w	sl, [r4]
   2a88c:	f1ba 0f00 	cmp.w	sl, #0
   2a890:	d0ed      	beq.n	2a86e <__gnu_unwind_pr_common+0x42>
   2a892:	9301      	str	r3, [sp, #4]
   2a894:	f000 0308 	and.w	r3, r0, #8
   2a898:	9302      	str	r3, [sp, #8]
   2a89a:	2e02      	cmp	r6, #2
   2a89c:	d04a      	beq.n	2a934 <__gnu_unwind_pr_common+0x108>
   2a89e:	f8b4 a000 	ldrh.w	sl, [r4]
   2a8a2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   2a8a6:	3404      	adds	r4, #4
   2a8a8:	6caa      	ldr	r2, [r5, #72]	; 0x48
   2a8aa:	f029 0b01 	bic.w	fp, r9, #1
   2a8ae:	210f      	movs	r1, #15
   2a8b0:	4638      	mov	r0, r7
   2a8b2:	4493      	add	fp, r2
   2a8b4:	f7ff ff4e 	bl	2a754 <_Unwind_GetGR>
   2a8b8:	4583      	cmp	fp, r0
   2a8ba:	d839      	bhi.n	2a930 <__gnu_unwind_pr_common+0x104>
   2a8bc:	f02a 0201 	bic.w	r2, sl, #1
   2a8c0:	445a      	add	r2, fp
   2a8c2:	4282      	cmp	r2, r0
   2a8c4:	bf94      	ite	ls
   2a8c6:	2000      	movls	r0, #0
   2a8c8:	2001      	movhi	r0, #1
   2a8ca:	ea4f 0349 	mov.w	r3, r9, lsl #1
   2a8ce:	f003 0302 	and.w	r3, r3, #2
   2a8d2:	f00a 0a01 	and.w	sl, sl, #1
   2a8d6:	ea43 030a 	orr.w	r3, r3, sl
   2a8da:	2b01      	cmp	r3, #1
   2a8dc:	d049      	beq.n	2a972 <__gnu_unwind_pr_common+0x146>
   2a8de:	2b02      	cmp	r3, #2
   2a8e0:	d032      	beq.n	2a948 <__gnu_unwind_pr_common+0x11c>
   2a8e2:	2b00      	cmp	r3, #0
   2a8e4:	d1cc      	bne.n	2a880 <__gnu_unwind_pr_common+0x54>
   2a8e6:	f1b8 0f00 	cmp.w	r8, #0
   2a8ea:	d002      	beq.n	2a8f2 <__gnu_unwind_pr_common+0xc6>
   2a8ec:	2800      	cmp	r0, #0
   2a8ee:	f040 80cd 	bne.w	2aa8c <__gnu_unwind_pr_common+0x260>
   2a8f2:	3404      	adds	r4, #4
   2a8f4:	f8d4 a000 	ldr.w	sl, [r4]
   2a8f8:	f1ba 0f00 	cmp.w	sl, #0
   2a8fc:	d1cd      	bne.n	2a89a <__gnu_unwind_pr_common+0x6e>
   2a8fe:	a905      	add	r1, sp, #20
   2a900:	4638      	mov	r0, r7
   2a902:	f000 fb2b 	bl	2af5c <__gnu_unwind_execute>
   2a906:	2800      	cmp	r0, #0
   2a908:	d1ba      	bne.n	2a880 <__gnu_unwind_pr_common+0x54>
   2a90a:	9b01      	ldr	r3, [sp, #4]
   2a90c:	2b00      	cmp	r3, #0
   2a90e:	d0b3      	beq.n	2a878 <__gnu_unwind_pr_common+0x4c>
   2a910:	210f      	movs	r1, #15
   2a912:	4638      	mov	r0, r7
   2a914:	f7ff ff1e 	bl	2a754 <_Unwind_GetGR>
   2a918:	210e      	movs	r1, #14
   2a91a:	4602      	mov	r2, r0
   2a91c:	4638      	mov	r0, r7
   2a91e:	f7ff ff3d 	bl	2a79c <_Unwind_SetGR>
   2a922:	4638      	mov	r0, r7
   2a924:	4a6a      	ldr	r2, [pc, #424]	; (2aad0 <__gnu_unwind_pr_common+0x2a4>)
   2a926:	210f      	movs	r1, #15
   2a928:	f7ff ff38 	bl	2a79c <_Unwind_SetGR>
   2a92c:	2007      	movs	r0, #7
   2a92e:	e7a8      	b.n	2a882 <__gnu_unwind_pr_common+0x56>
   2a930:	2000      	movs	r0, #0
   2a932:	e7ca      	b.n	2a8ca <__gnu_unwind_pr_common+0x9e>
   2a934:	f8d4 9004 	ldr.w	r9, [r4, #4]
   2a938:	3408      	adds	r4, #8
   2a93a:	e7b5      	b.n	2a8a8 <__gnu_unwind_pr_common+0x7c>
   2a93c:	0209      	lsls	r1, r1, #8
   2a93e:	2303      	movs	r3, #3
   2a940:	9105      	str	r1, [sp, #20]
   2a942:	f8ad 301c 	strh.w	r3, [sp, #28]
   2a946:	e78a      	b.n	2a85e <__gnu_unwind_pr_common+0x32>
   2a948:	6823      	ldr	r3, [r4, #0]
   2a94a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   2a94e:	f1b8 0f00 	cmp.w	r8, #0
   2a952:	d145      	bne.n	2a9e0 <__gnu_unwind_pr_common+0x1b4>
   2a954:	b128      	cbz	r0, 2a962 <__gnu_unwind_pr_common+0x136>
   2a956:	9a02      	ldr	r2, [sp, #8]
   2a958:	2a00      	cmp	r2, #0
   2a95a:	d05c      	beq.n	2aa16 <__gnu_unwind_pr_common+0x1ea>
   2a95c:	f1bb 0f00 	cmp.w	fp, #0
   2a960:	d074      	beq.n	2aa4c <__gnu_unwind_pr_common+0x220>
   2a962:	2b00      	cmp	r3, #0
   2a964:	da00      	bge.n	2a968 <__gnu_unwind_pr_common+0x13c>
   2a966:	3404      	adds	r4, #4
   2a968:	f10b 0b01 	add.w	fp, fp, #1
   2a96c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   2a970:	e7c0      	b.n	2a8f4 <__gnu_unwind_pr_common+0xc8>
   2a972:	f1b8 0f00 	cmp.w	r8, #0
   2a976:	d119      	bne.n	2a9ac <__gnu_unwind_pr_common+0x180>
   2a978:	b1b0      	cbz	r0, 2a9a8 <__gnu_unwind_pr_common+0x17c>
   2a97a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2a97e:	1c99      	adds	r1, r3, #2
   2a980:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   2a984:	f43f af7c 	beq.w	2a880 <__gnu_unwind_pr_common+0x54>
   2a988:	f105 0158 	add.w	r1, r5, #88	; 0x58
   2a98c:	3301      	adds	r3, #1
   2a98e:	9104      	str	r1, [sp, #16]
   2a990:	f000 8090 	beq.w	2aab4 <__gnu_unwind_pr_common+0x288>
   2a994:	1d20      	adds	r0, r4, #4
   2a996:	f7ff fdc9 	bl	2a52c <_Unwind_decode_typeinfo_ptr.isra.0>
   2a99a:	ab04      	add	r3, sp, #16
   2a99c:	4601      	mov	r1, r0
   2a99e:	4628      	mov	r0, r5
   2a9a0:	f3af 8000 	nop.w
   2a9a4:	2800      	cmp	r0, #0
   2a9a6:	d15b      	bne.n	2aa60 <__gnu_unwind_pr_common+0x234>
   2a9a8:	3408      	adds	r4, #8
   2a9aa:	e7a3      	b.n	2a8f4 <__gnu_unwind_pr_common+0xc8>
   2a9ac:	210d      	movs	r1, #13
   2a9ae:	4638      	mov	r0, r7
   2a9b0:	f8d5 9020 	ldr.w	r9, [r5, #32]
   2a9b4:	f7ff fece 	bl	2a754 <_Unwind_GetGR>
   2a9b8:	4581      	cmp	r9, r0
   2a9ba:	d1f5      	bne.n	2a9a8 <__gnu_unwind_pr_common+0x17c>
   2a9bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a9be:	429c      	cmp	r4, r3
   2a9c0:	d1f2      	bne.n	2a9a8 <__gnu_unwind_pr_common+0x17c>
   2a9c2:	4620      	mov	r0, r4
   2a9c4:	f7ff fcec 	bl	2a3a0 <selfrel_offset31>
   2a9c8:	210f      	movs	r1, #15
   2a9ca:	4602      	mov	r2, r0
   2a9cc:	4638      	mov	r0, r7
   2a9ce:	f7ff fee5 	bl	2a79c <_Unwind_SetGR>
   2a9d2:	4638      	mov	r0, r7
   2a9d4:	462a      	mov	r2, r5
   2a9d6:	2100      	movs	r1, #0
   2a9d8:	f7ff fee0 	bl	2a79c <_Unwind_SetGR>
   2a9dc:	2007      	movs	r0, #7
   2a9de:	e750      	b.n	2a882 <__gnu_unwind_pr_common+0x56>
   2a9e0:	210d      	movs	r1, #13
   2a9e2:	4638      	mov	r0, r7
   2a9e4:	f8d5 9020 	ldr.w	r9, [r5, #32]
   2a9e8:	f7ff feb4 	bl	2a754 <_Unwind_GetGR>
   2a9ec:	4581      	cmp	r9, r0
   2a9ee:	d001      	beq.n	2a9f4 <__gnu_unwind_pr_common+0x1c8>
   2a9f0:	6823      	ldr	r3, [r4, #0]
   2a9f2:	e7b6      	b.n	2a962 <__gnu_unwind_pr_common+0x136>
   2a9f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a9f6:	429c      	cmp	r4, r3
   2a9f8:	d1fa      	bne.n	2a9f0 <__gnu_unwind_pr_common+0x1c4>
   2a9fa:	2204      	movs	r2, #4
   2a9fc:	2100      	movs	r1, #0
   2a9fe:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
   2aa02:	18a3      	adds	r3, r4, r2
   2aa04:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   2aa08:	636b      	str	r3, [r5, #52]	; 0x34
   2aa0a:	6823      	ldr	r3, [r4, #0]
   2aa0c:	428b      	cmp	r3, r1
   2aa0e:	db59      	blt.n	2aac4 <__gnu_unwind_pr_common+0x298>
   2aa10:	2301      	movs	r3, #1
   2aa12:	9301      	str	r3, [sp, #4]
   2aa14:	e7a8      	b.n	2a968 <__gnu_unwind_pr_common+0x13c>
   2aa16:	f105 0358 	add.w	r3, r5, #88	; 0x58
   2aa1a:	f8cd 800c 	str.w	r8, [sp, #12]
   2aa1e:	f104 0a04 	add.w	sl, r4, #4
   2aa22:	46b0      	mov	r8, r6
   2aa24:	4691      	mov	r9, r2
   2aa26:	461e      	mov	r6, r3
   2aa28:	e00d      	b.n	2aa46 <__gnu_unwind_pr_common+0x21a>
   2aa2a:	9604      	str	r6, [sp, #16]
   2aa2c:	f7ff fd7e 	bl	2a52c <_Unwind_decode_typeinfo_ptr.isra.0>
   2aa30:	ab04      	add	r3, sp, #16
   2aa32:	4601      	mov	r1, r0
   2aa34:	2200      	movs	r2, #0
   2aa36:	4628      	mov	r0, r5
   2aa38:	f3af 8000 	nop.w
   2aa3c:	f109 0901 	add.w	r9, r9, #1
   2aa40:	f10a 0a04 	add.w	sl, sl, #4
   2aa44:	b9e8      	cbnz	r0, 2aa82 <__gnu_unwind_pr_common+0x256>
   2aa46:	45d9      	cmp	r9, fp
   2aa48:	4650      	mov	r0, sl
   2aa4a:	d1ee      	bne.n	2aa2a <__gnu_unwind_pr_common+0x1fe>
   2aa4c:	4638      	mov	r0, r7
   2aa4e:	210d      	movs	r1, #13
   2aa50:	f7ff fe80 	bl	2a754 <_Unwind_GetGR>
   2aa54:	9b04      	ldr	r3, [sp, #16]
   2aa56:	6228      	str	r0, [r5, #32]
   2aa58:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   2aa5c:	2006      	movs	r0, #6
   2aa5e:	e710      	b.n	2a882 <__gnu_unwind_pr_common+0x56>
   2aa60:	4681      	mov	r9, r0
   2aa62:	210d      	movs	r1, #13
   2aa64:	4638      	mov	r0, r7
   2aa66:	f7ff fe75 	bl	2a754 <_Unwind_GetGR>
   2aa6a:	f1b9 0f02 	cmp.w	r9, #2
   2aa6e:	6228      	str	r0, [r5, #32]
   2aa70:	d125      	bne.n	2aabe <__gnu_unwind_pr_common+0x292>
   2aa72:	462b      	mov	r3, r5
   2aa74:	9a04      	ldr	r2, [sp, #16]
   2aa76:	f843 2f2c 	str.w	r2, [r3, #44]!
   2aa7a:	626b      	str	r3, [r5, #36]	; 0x24
   2aa7c:	62ac      	str	r4, [r5, #40]	; 0x28
   2aa7e:	2006      	movs	r0, #6
   2aa80:	e6ff      	b.n	2a882 <__gnu_unwind_pr_common+0x56>
   2aa82:	4646      	mov	r6, r8
   2aa84:	6823      	ldr	r3, [r4, #0]
   2aa86:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2aa8a:	e76a      	b.n	2a962 <__gnu_unwind_pr_common+0x136>
   2aa8c:	4620      	mov	r0, r4
   2aa8e:	f7ff fc87 	bl	2a3a0 <selfrel_offset31>
   2aa92:	3404      	adds	r4, #4
   2aa94:	4602      	mov	r2, r0
   2aa96:	63ac      	str	r4, [r5, #56]	; 0x38
   2aa98:	4628      	mov	r0, r5
   2aa9a:	4614      	mov	r4, r2
   2aa9c:	f3af 8000 	nop.w
   2aaa0:	2800      	cmp	r0, #0
   2aaa2:	f43f aeed 	beq.w	2a880 <__gnu_unwind_pr_common+0x54>
   2aaa6:	4638      	mov	r0, r7
   2aaa8:	4622      	mov	r2, r4
   2aaaa:	210f      	movs	r1, #15
   2aaac:	f7ff fe76 	bl	2a79c <_Unwind_SetGR>
   2aab0:	2007      	movs	r0, #7
   2aab2:	e6e6      	b.n	2a882 <__gnu_unwind_pr_common+0x56>
   2aab4:	4638      	mov	r0, r7
   2aab6:	210d      	movs	r1, #13
   2aab8:	f7ff fe4c 	bl	2a754 <_Unwind_GetGR>
   2aabc:	6228      	str	r0, [r5, #32]
   2aabe:	9b04      	ldr	r3, [sp, #16]
   2aac0:	626b      	str	r3, [r5, #36]	; 0x24
   2aac2:	e7db      	b.n	2aa7c <__gnu_unwind_pr_common+0x250>
   2aac4:	f10b 0001 	add.w	r0, fp, #1
   2aac8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2aacc:	e77a      	b.n	2a9c4 <__gnu_unwind_pr_common+0x198>
   2aace:	bf00      	nop
   2aad0:	00000000 	.word	0x00000000

0002aad4 <__aeabi_unwind_cpp_pr0>:
   2aad4:	2300      	movs	r3, #0
   2aad6:	e6a9      	b.n	2a82c <__gnu_unwind_pr_common>

0002aad8 <__aeabi_unwind_cpp_pr1>:
   2aad8:	2301      	movs	r3, #1
   2aada:	e6a7      	b.n	2a82c <__gnu_unwind_pr_common>

0002aadc <__aeabi_unwind_cpp_pr2>:
   2aadc:	2302      	movs	r3, #2
   2aade:	e6a5      	b.n	2a82c <__gnu_unwind_pr_common>

0002aae0 <_Unwind_VRS_Pop>:
   2aae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aae4:	4606      	mov	r6, r0
   2aae6:	b0c3      	sub	sp, #268	; 0x10c
   2aae8:	4615      	mov	r5, r2
   2aaea:	461c      	mov	r4, r3
   2aaec:	2904      	cmp	r1, #4
   2aaee:	f200 80b9 	bhi.w	2ac64 <_Unwind_VRS_Pop+0x184>
   2aaf2:	e8df f001 	tbb	[pc, r1]
   2aaf6:	539a      	.short	0x539a
   2aaf8:	29b7      	.short	0x29b7
   2aafa:	03          	.byte	0x03
   2aafb:	00          	.byte	0x00
   2aafc:	2c00      	cmp	r4, #0
   2aafe:	f040 80b1 	bne.w	2ac64 <_Unwind_VRS_Pop+0x184>
   2ab02:	2a10      	cmp	r2, #16
   2ab04:	f200 80ae 	bhi.w	2ac64 <_Unwind_VRS_Pop+0x184>
   2ab08:	6803      	ldr	r3, [r0, #0]
   2ab0a:	06d8      	lsls	r0, r3, #27
   2ab0c:	f100 80f3 	bmi.w	2acf6 <_Unwind_VRS_Pop+0x216>
   2ab10:	af20      	add	r7, sp, #128	; 0x80
   2ab12:	4638      	mov	r0, r7
   2ab14:	f000 f992 	bl	2ae3c <__gnu_Unwind_Save_WMMXC>
   2ab18:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   2ab1a:	2300      	movs	r3, #0
   2ab1c:	2401      	movs	r4, #1
   2ab1e:	fa04 f203 	lsl.w	r2, r4, r3
   2ab22:	422a      	tst	r2, r5
   2ab24:	4601      	mov	r1, r0
   2ab26:	d004      	beq.n	2ab32 <_Unwind_VRS_Pop+0x52>
   2ab28:	f851 2b04 	ldr.w	r2, [r1], #4
   2ab2c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   2ab30:	4608      	mov	r0, r1
   2ab32:	3301      	adds	r3, #1
   2ab34:	2b04      	cmp	r3, #4
   2ab36:	d1f2      	bne.n	2ab1e <_Unwind_VRS_Pop+0x3e>
   2ab38:	63b0      	str	r0, [r6, #56]	; 0x38
   2ab3a:	4638      	mov	r0, r7
   2ab3c:	f000 f974 	bl	2ae28 <__gnu_Unwind_Restore_WMMXC>
   2ab40:	2000      	movs	r0, #0
   2ab42:	b043      	add	sp, #268	; 0x10c
   2ab44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ab48:	2c03      	cmp	r4, #3
   2ab4a:	f040 808b 	bne.w	2ac64 <_Unwind_VRS_Pop+0x184>
   2ab4e:	b294      	uxth	r4, r2
   2ab50:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   2ab54:	2b10      	cmp	r3, #16
   2ab56:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2ab5a:	f200 8083 	bhi.w	2ac64 <_Unwind_VRS_Pop+0x184>
   2ab5e:	6803      	ldr	r3, [r0, #0]
   2ab60:	071f      	lsls	r7, r3, #28
   2ab62:	f100 80d0 	bmi.w	2ad06 <_Unwind_VRS_Pop+0x226>
   2ab66:	af20      	add	r7, sp, #128	; 0x80
   2ab68:	4638      	mov	r0, r7
   2ab6a:	f000 f93b 	bl	2ade4 <__gnu_Unwind_Save_WMMXD>
   2ab6e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   2ab72:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   2ab74:	b154      	cbz	r4, 2ab8c <_Unwind_VRS_Pop+0xac>
   2ab76:	460b      	mov	r3, r1
   2ab78:	1ae8      	subs	r0, r5, r3
   2ab7a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   2ab7e:	00e4      	lsls	r4, r4, #3
   2ab80:	581a      	ldr	r2, [r3, r0]
   2ab82:	f843 2b04 	str.w	r2, [r3], #4
   2ab86:	428b      	cmp	r3, r1
   2ab88:	d1fa      	bne.n	2ab80 <_Unwind_VRS_Pop+0xa0>
   2ab8a:	4425      	add	r5, r4
   2ab8c:	4638      	mov	r0, r7
   2ab8e:	63b5      	str	r5, [r6, #56]	; 0x38
   2ab90:	f000 f906 	bl	2ada0 <__gnu_Unwind_Restore_WMMXD>
   2ab94:	2000      	movs	r0, #0
   2ab96:	b043      	add	sp, #268	; 0x10c
   2ab98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ab9c:	2c01      	cmp	r4, #1
   2ab9e:	ea4f 4812 	mov.w	r8, r2, lsr #16
   2aba2:	b295      	uxth	r5, r2
   2aba4:	d05a      	beq.n	2ac5c <_Unwind_VRS_Pop+0x17c>
   2aba6:	2c05      	cmp	r4, #5
   2aba8:	d15c      	bne.n	2ac64 <_Unwind_VRS_Pop+0x184>
   2abaa:	eb08 0905 	add.w	r9, r8, r5
   2abae:	f1b9 0f20 	cmp.w	r9, #32
   2abb2:	d857      	bhi.n	2ac64 <_Unwind_VRS_Pop+0x184>
   2abb4:	f1b8 0f0f 	cmp.w	r8, #15
   2abb8:	d977      	bls.n	2acaa <_Unwind_VRS_Pop+0x1ca>
   2abba:	46a9      	mov	r9, r5
   2abbc:	2d00      	cmp	r5, #0
   2abbe:	f040 8088 	bne.w	2acd2 <_Unwind_VRS_Pop+0x1f2>
   2abc2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   2abc4:	b36d      	cbz	r5, 2ac22 <_Unwind_VRS_Pop+0x142>
   2abc6:	af20      	add	r7, sp, #128	; 0x80
   2abc8:	f04f 0900 	mov.w	r9, #0
   2abcc:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   2abd0:	3f04      	subs	r7, #4
   2abd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2abd6:	f853 1b04 	ldr.w	r1, [r3], #4
   2abda:	f847 1f04 	str.w	r1, [r7, #4]!
   2abde:	42ab      	cmp	r3, r5
   2abe0:	d1f9      	bne.n	2abd6 <_Unwind_VRS_Pop+0xf6>
   2abe2:	f1b9 0f00 	cmp.w	r9, #0
   2abe6:	d00f      	beq.n	2ac08 <_Unwind_VRS_Pop+0x128>
   2abe8:	466f      	mov	r7, sp
   2abea:	4641      	mov	r1, r8
   2abec:	2910      	cmp	r1, #16
   2abee:	bf38      	it	cc
   2abf0:	2110      	movcc	r1, #16
   2abf2:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   2abf6:	3984      	subs	r1, #132	; 0x84
   2abf8:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   2abfc:	f853 0b04 	ldr.w	r0, [r3], #4
   2ac00:	f841 0f04 	str.w	r0, [r1, #4]!
   2ac04:	42ab      	cmp	r3, r5
   2ac06:	d1f9      	bne.n	2abfc <_Unwind_VRS_Pop+0x11c>
   2ac08:	2c01      	cmp	r4, #1
   2ac0a:	f000 8084 	beq.w	2ad16 <_Unwind_VRS_Pop+0x236>
   2ac0e:	f1b8 0f0f 	cmp.w	r8, #15
   2ac12:	63b5      	str	r5, [r6, #56]	; 0x38
   2ac14:	d945      	bls.n	2aca2 <_Unwind_VRS_Pop+0x1c2>
   2ac16:	f1b9 0f00 	cmp.w	r9, #0
   2ac1a:	d002      	beq.n	2ac22 <_Unwind_VRS_Pop+0x142>
   2ac1c:	4668      	mov	r0, sp
   2ac1e:	f000 f8b7 	bl	2ad90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   2ac22:	2000      	movs	r0, #0
   2ac24:	b043      	add	sp, #268	; 0x10c
   2ac26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ac2a:	b9dc      	cbnz	r4, 2ac64 <_Unwind_VRS_Pop+0x184>
   2ac2c:	6b87      	ldr	r7, [r0, #56]	; 0x38
   2ac2e:	4623      	mov	r3, r4
   2ac30:	2001      	movs	r0, #1
   2ac32:	b294      	uxth	r4, r2
   2ac34:	f106 0c04 	add.w	ip, r6, #4
   2ac38:	fa00 f203 	lsl.w	r2, r0, r3
   2ac3c:	4222      	tst	r2, r4
   2ac3e:	4639      	mov	r1, r7
   2ac40:	d004      	beq.n	2ac4c <_Unwind_VRS_Pop+0x16c>
   2ac42:	f851 2b04 	ldr.w	r2, [r1], #4
   2ac46:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
   2ac4a:	460f      	mov	r7, r1
   2ac4c:	3301      	adds	r3, #1
   2ac4e:	2b10      	cmp	r3, #16
   2ac50:	d1f2      	bne.n	2ac38 <_Unwind_VRS_Pop+0x158>
   2ac52:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   2ac56:	d1e4      	bne.n	2ac22 <_Unwind_VRS_Pop+0x142>
   2ac58:	63b7      	str	r7, [r6, #56]	; 0x38
   2ac5a:	e004      	b.n	2ac66 <_Unwind_VRS_Pop+0x186>
   2ac5c:	eb08 0305 	add.w	r3, r8, r5
   2ac60:	2b10      	cmp	r3, #16
   2ac62:	d903      	bls.n	2ac6c <_Unwind_VRS_Pop+0x18c>
   2ac64:	2002      	movs	r0, #2
   2ac66:	b043      	add	sp, #268	; 0x10c
   2ac68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ac6c:	f1b8 0f0f 	cmp.w	r8, #15
   2ac70:	d8f8      	bhi.n	2ac64 <_Unwind_VRS_Pop+0x184>
   2ac72:	6833      	ldr	r3, [r6, #0]
   2ac74:	07da      	lsls	r2, r3, #31
   2ac76:	d506      	bpl.n	2ac86 <_Unwind_VRS_Pop+0x1a6>
   2ac78:	4630      	mov	r0, r6
   2ac7a:	f023 0303 	bic.w	r3, r3, #3
   2ac7e:	f840 3b48 	str.w	r3, [r0], #72
   2ac82:	f000 f879 	bl	2ad78 <__gnu_Unwind_Save_VFP>
   2ac86:	af20      	add	r7, sp, #128	; 0x80
   2ac88:	4638      	mov	r0, r7
   2ac8a:	f000 f875 	bl	2ad78 <__gnu_Unwind_Save_VFP>
   2ac8e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   2ac90:	2d00      	cmp	r5, #0
   2ac92:	d199      	bne.n	2abc8 <_Unwind_VRS_Pop+0xe8>
   2ac94:	461d      	mov	r5, r3
   2ac96:	3504      	adds	r5, #4
   2ac98:	63b5      	str	r5, [r6, #56]	; 0x38
   2ac9a:	4638      	mov	r0, r7
   2ac9c:	f000 f868 	bl	2ad70 <__gnu_Unwind_Restore_VFP>
   2aca0:	e7bf      	b.n	2ac22 <_Unwind_VRS_Pop+0x142>
   2aca2:	a820      	add	r0, sp, #128	; 0x80
   2aca4:	f000 f86c 	bl	2ad80 <__gnu_Unwind_Restore_VFP_D>
   2aca8:	e7b5      	b.n	2ac16 <_Unwind_VRS_Pop+0x136>
   2acaa:	f1b9 0f10 	cmp.w	r9, #16
   2acae:	d940      	bls.n	2ad32 <_Unwind_VRS_Pop+0x252>
   2acb0:	f1a9 0910 	sub.w	r9, r9, #16
   2acb4:	6833      	ldr	r3, [r6, #0]
   2acb6:	07d9      	lsls	r1, r3, #31
   2acb8:	d508      	bpl.n	2accc <_Unwind_VRS_Pop+0x1ec>
   2acba:	f023 0301 	bic.w	r3, r3, #1
   2acbe:	4630      	mov	r0, r6
   2acc0:	f043 0302 	orr.w	r3, r3, #2
   2acc4:	f840 3b48 	str.w	r3, [r0], #72
   2acc8:	f000 f85e 	bl	2ad88 <__gnu_Unwind_Save_VFP_D>
   2accc:	f1b9 0f00 	cmp.w	r9, #0
   2acd0:	d032      	beq.n	2ad38 <_Unwind_VRS_Pop+0x258>
   2acd2:	6833      	ldr	r3, [r6, #0]
   2acd4:	075a      	lsls	r2, r3, #29
   2acd6:	d420      	bmi.n	2ad1a <_Unwind_VRS_Pop+0x23a>
   2acd8:	f1b8 0f0f 	cmp.w	r8, #15
   2acdc:	d925      	bls.n	2ad2a <_Unwind_VRS_Pop+0x24a>
   2acde:	466f      	mov	r7, sp
   2ace0:	4638      	mov	r0, r7
   2ace2:	f1c8 0510 	rsb	r5, r8, #16
   2ace6:	f000 f857 	bl	2ad98 <__gnu_Unwind_Save_VFP_D_16_to_31>
   2acea:	2d00      	cmp	r5, #0
   2acec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   2acee:	f77f af7c 	ble.w	2abea <_Unwind_VRS_Pop+0x10a>
   2acf2:	af20      	add	r7, sp, #128	; 0x80
   2acf4:	e76a      	b.n	2abcc <_Unwind_VRS_Pop+0xec>
   2acf6:	f023 0310 	bic.w	r3, r3, #16
   2acfa:	6033      	str	r3, [r6, #0]
   2acfc:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
   2ad00:	f000 f89c 	bl	2ae3c <__gnu_Unwind_Save_WMMXC>
   2ad04:	e704      	b.n	2ab10 <_Unwind_VRS_Pop+0x30>
   2ad06:	f023 0308 	bic.w	r3, r3, #8
   2ad0a:	6003      	str	r3, [r0, #0]
   2ad0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2ad10:	f000 f868 	bl	2ade4 <__gnu_Unwind_Save_WMMXD>
   2ad14:	e727      	b.n	2ab66 <_Unwind_VRS_Pop+0x86>
   2ad16:	af20      	add	r7, sp, #128	; 0x80
   2ad18:	e7bd      	b.n	2ac96 <_Unwind_VRS_Pop+0x1b6>
   2ad1a:	4630      	mov	r0, r6
   2ad1c:	f023 0304 	bic.w	r3, r3, #4
   2ad20:	f840 3bd0 	str.w	r3, [r0], #208
   2ad24:	f000 f838 	bl	2ad98 <__gnu_Unwind_Save_VFP_D_16_to_31>
   2ad28:	e7d6      	b.n	2acd8 <_Unwind_VRS_Pop+0x1f8>
   2ad2a:	a820      	add	r0, sp, #128	; 0x80
   2ad2c:	f000 f82c 	bl	2ad88 <__gnu_Unwind_Save_VFP_D>
   2ad30:	e7d5      	b.n	2acde <_Unwind_VRS_Pop+0x1fe>
   2ad32:	f04f 0900 	mov.w	r9, #0
   2ad36:	e7bd      	b.n	2acb4 <_Unwind_VRS_Pop+0x1d4>
   2ad38:	f1b8 0f0f 	cmp.w	r8, #15
   2ad3c:	f63f af41 	bhi.w	2abc2 <_Unwind_VRS_Pop+0xe2>
   2ad40:	af20      	add	r7, sp, #128	; 0x80
   2ad42:	4638      	mov	r0, r7
   2ad44:	f000 f820 	bl	2ad88 <__gnu_Unwind_Save_VFP_D>
   2ad48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   2ad4a:	2d00      	cmp	r5, #0
   2ad4c:	f47f af3c 	bne.w	2abc8 <_Unwind_VRS_Pop+0xe8>
   2ad50:	4638      	mov	r0, r7
   2ad52:	f000 f815 	bl	2ad80 <__gnu_Unwind_Restore_VFP_D>
   2ad56:	e764      	b.n	2ac22 <_Unwind_VRS_Pop+0x142>

0002ad58 <__restore_core_regs>:
   2ad58:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2ad5c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   2ad60:	469c      	mov	ip, r3
   2ad62:	46a6      	mov	lr, r4
   2ad64:	f84c 5d04 	str.w	r5, [ip, #-4]!
   2ad68:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   2ad6c:	46e5      	mov	sp, ip
   2ad6e:	bd00      	pop	{pc}

0002ad70 <__gnu_Unwind_Restore_VFP>:
   2ad70:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   2ad74:	4770      	bx	lr
   2ad76:	bf00      	nop

0002ad78 <__gnu_Unwind_Save_VFP>:
   2ad78:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   2ad7c:	4770      	bx	lr
   2ad7e:	bf00      	nop

0002ad80 <__gnu_Unwind_Restore_VFP_D>:
   2ad80:	ec90 0b20 	vldmia	r0, {d0-d15}
   2ad84:	4770      	bx	lr
   2ad86:	bf00      	nop

0002ad88 <__gnu_Unwind_Save_VFP_D>:
   2ad88:	ec80 0b20 	vstmia	r0, {d0-d15}
   2ad8c:	4770      	bx	lr
   2ad8e:	bf00      	nop

0002ad90 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   2ad90:	ecd0 0b20 	vldmia	r0, {d16-d31}
   2ad94:	4770      	bx	lr
   2ad96:	bf00      	nop

0002ad98 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   2ad98:	ecc0 0b20 	vstmia	r0, {d16-d31}
   2ad9c:	4770      	bx	lr
   2ad9e:	bf00      	nop

0002ada0 <__gnu_Unwind_Restore_WMMXD>:
   2ada0:	ecf0 0102 	ldfe	f0, [r0], #8
   2ada4:	ecf0 1102 	ldfe	f1, [r0], #8
   2ada8:	ecf0 2102 	ldfe	f2, [r0], #8
   2adac:	ecf0 3102 	ldfe	f3, [r0], #8
   2adb0:	ecf0 4102 	ldfe	f4, [r0], #8
   2adb4:	ecf0 5102 	ldfe	f5, [r0], #8
   2adb8:	ecf0 6102 	ldfe	f6, [r0], #8
   2adbc:	ecf0 7102 	ldfe	f7, [r0], #8
   2adc0:	ecf0 8102 	ldfp	f0, [r0], #8
   2adc4:	ecf0 9102 	ldfp	f1, [r0], #8
   2adc8:	ecf0 a102 	ldfp	f2, [r0], #8
   2adcc:	ecf0 b102 	ldfp	f3, [r0], #8
   2add0:	ecf0 c102 	ldfp	f4, [r0], #8
   2add4:	ecf0 d102 	ldfp	f5, [r0], #8
   2add8:	ecf0 e102 	ldfp	f6, [r0], #8
   2addc:	ecf0 f102 	ldfp	f7, [r0], #8
   2ade0:	4770      	bx	lr
   2ade2:	bf00      	nop

0002ade4 <__gnu_Unwind_Save_WMMXD>:
   2ade4:	ece0 0102 	stfe	f0, [r0], #8
   2ade8:	ece0 1102 	stfe	f1, [r0], #8
   2adec:	ece0 2102 	stfe	f2, [r0], #8
   2adf0:	ece0 3102 	stfe	f3, [r0], #8
   2adf4:	ece0 4102 	stfe	f4, [r0], #8
   2adf8:	ece0 5102 	stfe	f5, [r0], #8
   2adfc:	ece0 6102 	stfe	f6, [r0], #8
   2ae00:	ece0 7102 	stfe	f7, [r0], #8
   2ae04:	ece0 8102 	stfp	f0, [r0], #8
   2ae08:	ece0 9102 	stfp	f1, [r0], #8
   2ae0c:	ece0 a102 	stfp	f2, [r0], #8
   2ae10:	ece0 b102 	stfp	f3, [r0], #8
   2ae14:	ece0 c102 	stfp	f4, [r0], #8
   2ae18:	ece0 d102 	stfp	f5, [r0], #8
   2ae1c:	ece0 e102 	stfp	f6, [r0], #8
   2ae20:	ece0 f102 	stfp	f7, [r0], #8
   2ae24:	4770      	bx	lr
   2ae26:	bf00      	nop

0002ae28 <__gnu_Unwind_Restore_WMMXC>:
   2ae28:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   2ae2c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   2ae30:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   2ae34:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   2ae38:	4770      	bx	lr
   2ae3a:	bf00      	nop

0002ae3c <__gnu_Unwind_Save_WMMXC>:
   2ae3c:	fca0 8101 	stc2	1, cr8, [r0], #4
   2ae40:	fca0 9101 	stc2	1, cr9, [r0], #4
   2ae44:	fca0 a101 	stc2	1, cr10, [r0], #4
   2ae48:	fca0 b101 	stc2	1, cr11, [r0], #4
   2ae4c:	4770      	bx	lr
   2ae4e:	bf00      	nop

0002ae50 <_Unwind_RaiseException>:
   2ae50:	46ec      	mov	ip, sp
   2ae52:	b500      	push	{lr}
   2ae54:	e92d 5000 	stmdb	sp!, {ip, lr}
   2ae58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2ae5c:	f04f 0300 	mov.w	r3, #0
   2ae60:	e92d 000c 	stmdb	sp!, {r2, r3}
   2ae64:	a901      	add	r1, sp, #4
   2ae66:	f7ff fbf1 	bl	2a64c <__gnu_Unwind_RaiseException>
   2ae6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2ae6e:	b012      	add	sp, #72	; 0x48
   2ae70:	4770      	bx	lr
   2ae72:	bf00      	nop

0002ae74 <_Unwind_Resume>:
   2ae74:	46ec      	mov	ip, sp
   2ae76:	b500      	push	{lr}
   2ae78:	e92d 5000 	stmdb	sp!, {ip, lr}
   2ae7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2ae80:	f04f 0300 	mov.w	r3, #0
   2ae84:	e92d 000c 	stmdb	sp!, {r2, r3}
   2ae88:	a901      	add	r1, sp, #4
   2ae8a:	f7ff fc19 	bl	2a6c0 <__gnu_Unwind_Resume>
   2ae8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2ae92:	b012      	add	sp, #72	; 0x48
   2ae94:	4770      	bx	lr
   2ae96:	bf00      	nop

0002ae98 <_Unwind_Resume_or_Rethrow>:
   2ae98:	46ec      	mov	ip, sp
   2ae9a:	b500      	push	{lr}
   2ae9c:	e92d 5000 	stmdb	sp!, {ip, lr}
   2aea0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2aea4:	f04f 0300 	mov.w	r3, #0
   2aea8:	e92d 000c 	stmdb	sp!, {r2, r3}
   2aeac:	a901      	add	r1, sp, #4
   2aeae:	f7ff fc29 	bl	2a704 <__gnu_Unwind_Resume_or_Rethrow>
   2aeb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2aeb6:	b012      	add	sp, #72	; 0x48
   2aeb8:	4770      	bx	lr
   2aeba:	bf00      	nop

0002aebc <_Unwind_ForcedUnwind>:
   2aebc:	46ec      	mov	ip, sp
   2aebe:	b500      	push	{lr}
   2aec0:	e92d 5000 	stmdb	sp!, {ip, lr}
   2aec4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2aec8:	f04f 0300 	mov.w	r3, #0
   2aecc:	e92d 000c 	stmdb	sp!, {r2, r3}
   2aed0:	ab01      	add	r3, sp, #4
   2aed2:	f7ff fbeb 	bl	2a6ac <__gnu_Unwind_ForcedUnwind>
   2aed6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2aeda:	b012      	add	sp, #72	; 0x48
   2aedc:	4770      	bx	lr
   2aede:	bf00      	nop

0002aee0 <_Unwind_Backtrace>:
   2aee0:	46ec      	mov	ip, sp
   2aee2:	b500      	push	{lr}
   2aee4:	e92d 5000 	stmdb	sp!, {ip, lr}
   2aee8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2aeec:	f04f 0300 	mov.w	r3, #0
   2aef0:	e92d 000c 	stmdb	sp!, {r2, r3}
   2aef4:	aa01      	add	r2, sp, #4
   2aef6:	f7ff fc5d 	bl	2a7b4 <__gnu_Unwind_Backtrace>
   2aefa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2aefe:	b012      	add	sp, #72	; 0x48
   2af00:	4770      	bx	lr
   2af02:	bf00      	nop

0002af04 <next_unwind_byte>:
   2af04:	7a02      	ldrb	r2, [r0, #8]
   2af06:	b97a      	cbnz	r2, 2af28 <next_unwind_byte+0x24>
   2af08:	7a43      	ldrb	r3, [r0, #9]
   2af0a:	b1a3      	cbz	r3, 2af36 <next_unwind_byte+0x32>
   2af0c:	6842      	ldr	r2, [r0, #4]
   2af0e:	3b01      	subs	r3, #1
   2af10:	b410      	push	{r4}
   2af12:	7243      	strb	r3, [r0, #9]
   2af14:	6813      	ldr	r3, [r2, #0]
   2af16:	2103      	movs	r1, #3
   2af18:	1d14      	adds	r4, r2, #4
   2af1a:	7201      	strb	r1, [r0, #8]
   2af1c:	021a      	lsls	r2, r3, #8
   2af1e:	6044      	str	r4, [r0, #4]
   2af20:	6002      	str	r2, [r0, #0]
   2af22:	bc10      	pop	{r4}
   2af24:	0e18      	lsrs	r0, r3, #24
   2af26:	4770      	bx	lr
   2af28:	6803      	ldr	r3, [r0, #0]
   2af2a:	3a01      	subs	r2, #1
   2af2c:	7202      	strb	r2, [r0, #8]
   2af2e:	021a      	lsls	r2, r3, #8
   2af30:	6002      	str	r2, [r0, #0]
   2af32:	0e18      	lsrs	r0, r3, #24
   2af34:	4770      	bx	lr
   2af36:	20b0      	movs	r0, #176	; 0xb0
   2af38:	4770      	bx	lr
   2af3a:	bf00      	nop

0002af3c <_Unwind_GetGR.constprop.0>:
   2af3c:	b500      	push	{lr}
   2af3e:	b085      	sub	sp, #20
   2af40:	aa03      	add	r2, sp, #12
   2af42:	2300      	movs	r3, #0
   2af44:	9200      	str	r2, [sp, #0]
   2af46:	4619      	mov	r1, r3
   2af48:	220c      	movs	r2, #12
   2af4a:	f7ff fbeb 	bl	2a724 <_Unwind_VRS_Get>
   2af4e:	9803      	ldr	r0, [sp, #12]
   2af50:	b005      	add	sp, #20
   2af52:	f85d fb04 	ldr.w	pc, [sp], #4
   2af56:	bf00      	nop

0002af58 <unwind_UCB_from_context>:
   2af58:	e7f0      	b.n	2af3c <_Unwind_GetGR.constprop.0>
   2af5a:	bf00      	nop

0002af5c <__gnu_unwind_execute>:
   2af5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2af60:	4605      	mov	r5, r0
   2af62:	b085      	sub	sp, #20
   2af64:	460e      	mov	r6, r1
   2af66:	f04f 0800 	mov.w	r8, #0
   2af6a:	4630      	mov	r0, r6
   2af6c:	f7ff ffca 	bl	2af04 <next_unwind_byte>
   2af70:	28b0      	cmp	r0, #176	; 0xb0
   2af72:	4604      	mov	r4, r0
   2af74:	f000 80b2 	beq.w	2b0dc <__gnu_unwind_execute+0x180>
   2af78:	0607      	lsls	r7, r0, #24
   2af7a:	d520      	bpl.n	2afbe <__gnu_unwind_execute+0x62>
   2af7c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   2af80:	2b80      	cmp	r3, #128	; 0x80
   2af82:	d04d      	beq.n	2b020 <__gnu_unwind_execute+0xc4>
   2af84:	2b90      	cmp	r3, #144	; 0x90
   2af86:	d036      	beq.n	2aff6 <__gnu_unwind_execute+0x9a>
   2af88:	2ba0      	cmp	r3, #160	; 0xa0
   2af8a:	d060      	beq.n	2b04e <__gnu_unwind_execute+0xf2>
   2af8c:	2bb0      	cmp	r3, #176	; 0xb0
   2af8e:	d074      	beq.n	2b07a <__gnu_unwind_execute+0x11e>
   2af90:	2bc0      	cmp	r3, #192	; 0xc0
   2af92:	f000 808b 	beq.w	2b0ac <__gnu_unwind_execute+0x150>
   2af96:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   2af9a:	2bd0      	cmp	r3, #208	; 0xd0
   2af9c:	d10b      	bne.n	2afb6 <__gnu_unwind_execute+0x5a>
   2af9e:	f000 0207 	and.w	r2, r0, #7
   2afa2:	3201      	adds	r2, #1
   2afa4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2afa8:	2305      	movs	r3, #5
   2afaa:	2101      	movs	r1, #1
   2afac:	4628      	mov	r0, r5
   2afae:	f7ff fd97 	bl	2aae0 <_Unwind_VRS_Pop>
   2afb2:	2800      	cmp	r0, #0
   2afb4:	d0d9      	beq.n	2af6a <__gnu_unwind_execute+0xe>
   2afb6:	2009      	movs	r0, #9
   2afb8:	b005      	add	sp, #20
   2afba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2afbe:	f10d 090c 	add.w	r9, sp, #12
   2afc2:	2300      	movs	r3, #0
   2afc4:	4619      	mov	r1, r3
   2afc6:	0087      	lsls	r7, r0, #2
   2afc8:	f8cd 9000 	str.w	r9, [sp]
   2afcc:	220d      	movs	r2, #13
   2afce:	4628      	mov	r0, r5
   2afd0:	f7ff fba8 	bl	2a724 <_Unwind_VRS_Get>
   2afd4:	b2ff      	uxtb	r7, r7
   2afd6:	9b03      	ldr	r3, [sp, #12]
   2afd8:	f8cd 9000 	str.w	r9, [sp]
   2afdc:	3704      	adds	r7, #4
   2afde:	0660      	lsls	r0, r4, #25
   2afe0:	bf4c      	ite	mi
   2afe2:	1bdf      	submi	r7, r3, r7
   2afe4:	18ff      	addpl	r7, r7, r3
   2afe6:	2300      	movs	r3, #0
   2afe8:	4619      	mov	r1, r3
   2afea:	220d      	movs	r2, #13
   2afec:	4628      	mov	r0, r5
   2afee:	9703      	str	r7, [sp, #12]
   2aff0:	f7ff fbbc 	bl	2a76c <_Unwind_VRS_Set>
   2aff4:	e7b9      	b.n	2af6a <__gnu_unwind_execute+0xe>
   2aff6:	f000 030d 	and.w	r3, r0, #13
   2affa:	2b0d      	cmp	r3, #13
   2affc:	d0db      	beq.n	2afb6 <__gnu_unwind_execute+0x5a>
   2affe:	af03      	add	r7, sp, #12
   2b000:	2300      	movs	r3, #0
   2b002:	f000 020f 	and.w	r2, r0, #15
   2b006:	4619      	mov	r1, r3
   2b008:	9700      	str	r7, [sp, #0]
   2b00a:	4628      	mov	r0, r5
   2b00c:	f7ff fb8a 	bl	2a724 <_Unwind_VRS_Get>
   2b010:	2300      	movs	r3, #0
   2b012:	9700      	str	r7, [sp, #0]
   2b014:	4619      	mov	r1, r3
   2b016:	220d      	movs	r2, #13
   2b018:	4628      	mov	r0, r5
   2b01a:	f7ff fba7 	bl	2a76c <_Unwind_VRS_Set>
   2b01e:	e7a4      	b.n	2af6a <__gnu_unwind_execute+0xe>
   2b020:	4630      	mov	r0, r6
   2b022:	f7ff ff6f 	bl	2af04 <next_unwind_byte>
   2b026:	0224      	lsls	r4, r4, #8
   2b028:	4320      	orrs	r0, r4
   2b02a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   2b02e:	d0c2      	beq.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b030:	0104      	lsls	r4, r0, #4
   2b032:	2300      	movs	r3, #0
   2b034:	b2a2      	uxth	r2, r4
   2b036:	4619      	mov	r1, r3
   2b038:	4628      	mov	r0, r5
   2b03a:	f7ff fd51 	bl	2aae0 <_Unwind_VRS_Pop>
   2b03e:	2800      	cmp	r0, #0
   2b040:	d1b9      	bne.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b042:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   2b046:	bf18      	it	ne
   2b048:	f04f 0801 	movne.w	r8, #1
   2b04c:	e78d      	b.n	2af6a <__gnu_unwind_execute+0xe>
   2b04e:	43c2      	mvns	r2, r0
   2b050:	f002 0307 	and.w	r3, r2, #7
   2b054:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   2b058:	411a      	asrs	r2, r3
   2b05a:	0701      	lsls	r1, r0, #28
   2b05c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   2b060:	f04f 0300 	mov.w	r3, #0
   2b064:	bf48      	it	mi
   2b066:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   2b06a:	4619      	mov	r1, r3
   2b06c:	4628      	mov	r0, r5
   2b06e:	f7ff fd37 	bl	2aae0 <_Unwind_VRS_Pop>
   2b072:	2800      	cmp	r0, #0
   2b074:	f43f af79 	beq.w	2af6a <__gnu_unwind_execute+0xe>
   2b078:	e79d      	b.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b07a:	28b1      	cmp	r0, #177	; 0xb1
   2b07c:	d033      	beq.n	2b0e6 <__gnu_unwind_execute+0x18a>
   2b07e:	28b2      	cmp	r0, #178	; 0xb2
   2b080:	f000 808b 	beq.w	2b19a <__gnu_unwind_execute+0x23e>
   2b084:	28b3      	cmp	r0, #179	; 0xb3
   2b086:	d039      	beq.n	2b0fc <__gnu_unwind_execute+0x1a0>
   2b088:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   2b08c:	2bb4      	cmp	r3, #180	; 0xb4
   2b08e:	d092      	beq.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b090:	f000 0207 	and.w	r2, r0, #7
   2b094:	3201      	adds	r2, #1
   2b096:	2301      	movs	r3, #1
   2b098:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2b09c:	4619      	mov	r1, r3
   2b09e:	4628      	mov	r0, r5
   2b0a0:	f7ff fd1e 	bl	2aae0 <_Unwind_VRS_Pop>
   2b0a4:	2800      	cmp	r0, #0
   2b0a6:	f43f af60 	beq.w	2af6a <__gnu_unwind_execute+0xe>
   2b0aa:	e784      	b.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b0ac:	28c6      	cmp	r0, #198	; 0xc6
   2b0ae:	d042      	beq.n	2b136 <__gnu_unwind_execute+0x1da>
   2b0b0:	28c7      	cmp	r0, #199	; 0xc7
   2b0b2:	d04c      	beq.n	2b14e <__gnu_unwind_execute+0x1f2>
   2b0b4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   2b0b8:	2bc0      	cmp	r3, #192	; 0xc0
   2b0ba:	d05b      	beq.n	2b174 <__gnu_unwind_execute+0x218>
   2b0bc:	28c8      	cmp	r0, #200	; 0xc8
   2b0be:	d060      	beq.n	2b182 <__gnu_unwind_execute+0x226>
   2b0c0:	28c9      	cmp	r0, #201	; 0xc9
   2b0c2:	f47f af78 	bne.w	2afb6 <__gnu_unwind_execute+0x5a>
   2b0c6:	4630      	mov	r0, r6
   2b0c8:	f7ff ff1c 	bl	2af04 <next_unwind_byte>
   2b0cc:	0302      	lsls	r2, r0, #12
   2b0ce:	f000 000f 	and.w	r0, r0, #15
   2b0d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   2b0d6:	3001      	adds	r0, #1
   2b0d8:	4302      	orrs	r2, r0
   2b0da:	e765      	b.n	2afa8 <__gnu_unwind_execute+0x4c>
   2b0dc:	f1b8 0f00 	cmp.w	r8, #0
   2b0e0:	d018      	beq.n	2b114 <__gnu_unwind_execute+0x1b8>
   2b0e2:	2000      	movs	r0, #0
   2b0e4:	e768      	b.n	2afb8 <__gnu_unwind_execute+0x5c>
   2b0e6:	4630      	mov	r0, r6
   2b0e8:	f7ff ff0c 	bl	2af04 <next_unwind_byte>
   2b0ec:	4602      	mov	r2, r0
   2b0ee:	2800      	cmp	r0, #0
   2b0f0:	f43f af61 	beq.w	2afb6 <__gnu_unwind_execute+0x5a>
   2b0f4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   2b0f8:	d0d0      	beq.n	2b09c <__gnu_unwind_execute+0x140>
   2b0fa:	e75c      	b.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b0fc:	4630      	mov	r0, r6
   2b0fe:	f7ff ff01 	bl	2af04 <next_unwind_byte>
   2b102:	0301      	lsls	r1, r0, #12
   2b104:	f000 000f 	and.w	r0, r0, #15
   2b108:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   2b10c:	1c42      	adds	r2, r0, #1
   2b10e:	2301      	movs	r3, #1
   2b110:	430a      	orrs	r2, r1
   2b112:	e7c3      	b.n	2b09c <__gnu_unwind_execute+0x140>
   2b114:	ac03      	add	r4, sp, #12
   2b116:	4643      	mov	r3, r8
   2b118:	220e      	movs	r2, #14
   2b11a:	4641      	mov	r1, r8
   2b11c:	9400      	str	r4, [sp, #0]
   2b11e:	4628      	mov	r0, r5
   2b120:	f7ff fb00 	bl	2a724 <_Unwind_VRS_Get>
   2b124:	9400      	str	r4, [sp, #0]
   2b126:	4628      	mov	r0, r5
   2b128:	4643      	mov	r3, r8
   2b12a:	220f      	movs	r2, #15
   2b12c:	4641      	mov	r1, r8
   2b12e:	f7ff fb1d 	bl	2a76c <_Unwind_VRS_Set>
   2b132:	4640      	mov	r0, r8
   2b134:	e740      	b.n	2afb8 <__gnu_unwind_execute+0x5c>
   2b136:	4630      	mov	r0, r6
   2b138:	f7ff fee4 	bl	2af04 <next_unwind_byte>
   2b13c:	0301      	lsls	r1, r0, #12
   2b13e:	f000 000f 	and.w	r0, r0, #15
   2b142:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   2b146:	1c42      	adds	r2, r0, #1
   2b148:	2303      	movs	r3, #3
   2b14a:	430a      	orrs	r2, r1
   2b14c:	e7a6      	b.n	2b09c <__gnu_unwind_execute+0x140>
   2b14e:	4630      	mov	r0, r6
   2b150:	f7ff fed8 	bl	2af04 <next_unwind_byte>
   2b154:	4602      	mov	r2, r0
   2b156:	2800      	cmp	r0, #0
   2b158:	f43f af2d 	beq.w	2afb6 <__gnu_unwind_execute+0x5a>
   2b15c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   2b160:	f47f af29 	bne.w	2afb6 <__gnu_unwind_execute+0x5a>
   2b164:	2104      	movs	r1, #4
   2b166:	4628      	mov	r0, r5
   2b168:	f7ff fcba 	bl	2aae0 <_Unwind_VRS_Pop>
   2b16c:	2800      	cmp	r0, #0
   2b16e:	f43f aefc 	beq.w	2af6a <__gnu_unwind_execute+0xe>
   2b172:	e720      	b.n	2afb6 <__gnu_unwind_execute+0x5a>
   2b174:	f000 020f 	and.w	r2, r0, #15
   2b178:	3201      	adds	r2, #1
   2b17a:	2303      	movs	r3, #3
   2b17c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   2b180:	e78c      	b.n	2b09c <__gnu_unwind_execute+0x140>
   2b182:	4630      	mov	r0, r6
   2b184:	f7ff febe 	bl	2af04 <next_unwind_byte>
   2b188:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   2b18c:	f000 030f 	and.w	r3, r0, #15
   2b190:	3210      	adds	r2, #16
   2b192:	3301      	adds	r3, #1
   2b194:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   2b198:	e706      	b.n	2afa8 <__gnu_unwind_execute+0x4c>
   2b19a:	2300      	movs	r3, #0
   2b19c:	f10d 090c 	add.w	r9, sp, #12
   2b1a0:	220d      	movs	r2, #13
   2b1a2:	4619      	mov	r1, r3
   2b1a4:	f8cd 9000 	str.w	r9, [sp]
   2b1a8:	4628      	mov	r0, r5
   2b1aa:	f7ff fabb 	bl	2a724 <_Unwind_VRS_Get>
   2b1ae:	4630      	mov	r0, r6
   2b1b0:	f7ff fea8 	bl	2af04 <next_unwind_byte>
   2b1b4:	0602      	lsls	r2, r0, #24
   2b1b6:	f04f 0702 	mov.w	r7, #2
   2b1ba:	d50c      	bpl.n	2b1d6 <__gnu_unwind_execute+0x27a>
   2b1bc:	9b03      	ldr	r3, [sp, #12]
   2b1be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   2b1c2:	40b8      	lsls	r0, r7
   2b1c4:	4403      	add	r3, r0
   2b1c6:	4630      	mov	r0, r6
   2b1c8:	9303      	str	r3, [sp, #12]
   2b1ca:	f7ff fe9b 	bl	2af04 <next_unwind_byte>
   2b1ce:	0603      	lsls	r3, r0, #24
   2b1d0:	f107 0707 	add.w	r7, r7, #7
   2b1d4:	d4f2      	bmi.n	2b1bc <__gnu_unwind_execute+0x260>
   2b1d6:	9b03      	ldr	r3, [sp, #12]
   2b1d8:	f8cd 9000 	str.w	r9, [sp]
   2b1dc:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   2b1e0:	f503 7201 	add.w	r2, r3, #516	; 0x204
   2b1e4:	40bc      	lsls	r4, r7
   2b1e6:	2300      	movs	r3, #0
   2b1e8:	4414      	add	r4, r2
   2b1ea:	4619      	mov	r1, r3
   2b1ec:	220d      	movs	r2, #13
   2b1ee:	4628      	mov	r0, r5
   2b1f0:	9403      	str	r4, [sp, #12]
   2b1f2:	f7ff fabb 	bl	2a76c <_Unwind_VRS_Set>
   2b1f6:	e6b8      	b.n	2af6a <__gnu_unwind_execute+0xe>

0002b1f8 <__gnu_unwind_frame>:
   2b1f8:	b510      	push	{r4, lr}
   2b1fa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   2b1fc:	b084      	sub	sp, #16
   2b1fe:	6853      	ldr	r3, [r2, #4]
   2b200:	2403      	movs	r4, #3
   2b202:	f88d 400c 	strb.w	r4, [sp, #12]
   2b206:	021b      	lsls	r3, r3, #8
   2b208:	f102 0408 	add.w	r4, r2, #8
   2b20c:	4608      	mov	r0, r1
   2b20e:	79d2      	ldrb	r2, [r2, #7]
   2b210:	9301      	str	r3, [sp, #4]
   2b212:	a901      	add	r1, sp, #4
   2b214:	9402      	str	r4, [sp, #8]
   2b216:	f88d 200d 	strb.w	r2, [sp, #13]
   2b21a:	f7ff fe9f 	bl	2af5c <__gnu_unwind_execute>
   2b21e:	b004      	add	sp, #16
   2b220:	bd10      	pop	{r4, pc}
   2b222:	bf00      	nop

0002b224 <_Unwind_GetRegionStart>:
   2b224:	b508      	push	{r3, lr}
   2b226:	f7ff fe97 	bl	2af58 <unwind_UCB_from_context>
   2b22a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   2b22c:	bd08      	pop	{r3, pc}
   2b22e:	bf00      	nop

0002b230 <_Unwind_GetLanguageSpecificData>:
   2b230:	b508      	push	{r3, lr}
   2b232:	f7ff fe91 	bl	2af58 <unwind_UCB_from_context>
   2b236:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   2b238:	79c3      	ldrb	r3, [r0, #7]
   2b23a:	3302      	adds	r3, #2
   2b23c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b240:	bd08      	pop	{r3, pc}
   2b242:	bf00      	nop

0002b244 <abort>:
   2b244:	b508      	push	{r3, lr}
   2b246:	2006      	movs	r0, #6
   2b248:	f000 f82c 	bl	2b2a4 <raise>
   2b24c:	2001      	movs	r0, #1
   2b24e:	f7ff f885 	bl	2a35c <_exit>

0002b252 <_raise_r>:
   2b252:	291f      	cmp	r1, #31
   2b254:	b538      	push	{r3, r4, r5, lr}
   2b256:	4604      	mov	r4, r0
   2b258:	460d      	mov	r5, r1
   2b25a:	d904      	bls.n	2b266 <_raise_r+0x14>
   2b25c:	2316      	movs	r3, #22
   2b25e:	6003      	str	r3, [r0, #0]
   2b260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b264:	bd38      	pop	{r3, r4, r5, pc}
   2b266:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2b268:	b112      	cbz	r2, 2b270 <_raise_r+0x1e>
   2b26a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2b26e:	b94b      	cbnz	r3, 2b284 <_raise_r+0x32>
   2b270:	4620      	mov	r0, r4
   2b272:	f000 f831 	bl	2b2d8 <_getpid_r>
   2b276:	462a      	mov	r2, r5
   2b278:	4601      	mov	r1, r0
   2b27a:	4620      	mov	r0, r4
   2b27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b280:	f000 b818 	b.w	2b2b4 <_kill_r>
   2b284:	2b01      	cmp	r3, #1
   2b286:	d00a      	beq.n	2b29e <_raise_r+0x4c>
   2b288:	1c59      	adds	r1, r3, #1
   2b28a:	d103      	bne.n	2b294 <_raise_r+0x42>
   2b28c:	2316      	movs	r3, #22
   2b28e:	6003      	str	r3, [r0, #0]
   2b290:	2001      	movs	r0, #1
   2b292:	e7e7      	b.n	2b264 <_raise_r+0x12>
   2b294:	2400      	movs	r4, #0
   2b296:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   2b29a:	4628      	mov	r0, r5
   2b29c:	4798      	blx	r3
   2b29e:	2000      	movs	r0, #0
   2b2a0:	e7e0      	b.n	2b264 <_raise_r+0x12>
	...

0002b2a4 <raise>:
   2b2a4:	4b02      	ldr	r3, [pc, #8]	; (2b2b0 <raise+0xc>)
   2b2a6:	4601      	mov	r1, r0
   2b2a8:	6818      	ldr	r0, [r3, #0]
   2b2aa:	f7ff bfd2 	b.w	2b252 <_raise_r>
   2b2ae:	bf00      	nop
   2b2b0:	20001904 	.word	0x20001904

0002b2b4 <_kill_r>:
   2b2b4:	b538      	push	{r3, r4, r5, lr}
   2b2b6:	4d07      	ldr	r5, [pc, #28]	; (2b2d4 <_kill_r+0x20>)
   2b2b8:	2300      	movs	r3, #0
   2b2ba:	4604      	mov	r4, r0
   2b2bc:	4608      	mov	r0, r1
   2b2be:	4611      	mov	r1, r2
   2b2c0:	602b      	str	r3, [r5, #0]
   2b2c2:	f000 f813 	bl	2b2ec <_kill>
   2b2c6:	1c43      	adds	r3, r0, #1
   2b2c8:	d102      	bne.n	2b2d0 <_kill_r+0x1c>
   2b2ca:	682b      	ldr	r3, [r5, #0]
   2b2cc:	b103      	cbz	r3, 2b2d0 <_kill_r+0x1c>
   2b2ce:	6023      	str	r3, [r4, #0]
   2b2d0:	bd38      	pop	{r3, r4, r5, pc}
   2b2d2:	bf00      	nop
   2b2d4:	20001b9c 	.word	0x20001b9c

0002b2d8 <_getpid_r>:
   2b2d8:	f000 b800 	b.w	2b2dc <_getpid>

0002b2dc <_getpid>:
   2b2dc:	4b02      	ldr	r3, [pc, #8]	; (2b2e8 <_getpid+0xc>)
   2b2de:	2258      	movs	r2, #88	; 0x58
   2b2e0:	601a      	str	r2, [r3, #0]
   2b2e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b2e6:	4770      	bx	lr
   2b2e8:	20001b9c 	.word	0x20001b9c

0002b2ec <_kill>:
   2b2ec:	4b02      	ldr	r3, [pc, #8]	; (2b2f8 <_kill+0xc>)
   2b2ee:	2258      	movs	r2, #88	; 0x58
   2b2f0:	601a      	str	r2, [r3, #0]
   2b2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b2f6:	4770      	bx	lr
   2b2f8:	20001b9c 	.word	0x20001b9c

0002b2fc <_init>:
   2b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b2fe:	bf00      	nop
   2b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b302:	bc08      	pop	{r3}
   2b304:	469e      	mov	lr, r3
   2b306:	4770      	bx	lr

0002b308 <_fini>:
   2b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b30a:	bf00      	nop
   2b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b30e:	bc08      	pop	{r3}
   2b310:	469e      	mov	lr, r3
   2b312:	4770      	bx	lr
   2b314:	00060001 	.word	0x00060001

0002b318 <m_app_timer_sortlist>:
   2b318:	00000000 20001994 0002734d 00000000     ....... Ms......
	...

0002b330 <delay_machine_code.8746>:
   2b330:	d8fd3803 00004770                       .8..pG..

0002b338 <pwr_mgmt_data>:
   2b338:	0002b3f4 0002b3f4 00000004 33256325     ............%c%3
   2b348:	75252e64 00000000                       d.%u....

0002b350 <SD_TX_LEVELS>:
   2b350:	f0ecd800 00fcf8f4 05040302 00080706     ................

0002b360 <nrfx_coredep_delay_us::delay_machine_code>:
   2b360:	d8fd3803 00004770 07000001              .8..pG......

0002b36c <sdh_req_observers>:
   2b36c:	0002b40c 0002b40c 00000008              ............

0002b378 <sdh_stack_observers>:
   2b378:	0002b3fc 0002b40c 00000008              ............

0002b384 <sdh_state_observers>:
   2b384:	0002b3f4 0002b3fc 00000008              ............

0002b390 <sdh_ble_observers>:
   2b390:	0002b3ec 0002b3f4 00000008              ............

0002b39c <sdh_soc_observers>:
   2b39c:	0002b3e4 0002b3ec 00000008              ............

0002b3a8 <_global_impure_ptr>:
   2b3a8:	20001908 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
   2b3b8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   2b3c8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   2b3d8:	64636261 00006665                       abcdef..

0002b3e0 <__EH_FRAME_BEGIN__>:
   2b3e0:	00000000                                ....
